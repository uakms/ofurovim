@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node mlang.txt, , , 目次
@unnumbered 英語以外の言語のサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*mlang.txt*     For Vim version 8.0.  Last change: 2018 May 06


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*mlang.txt*     For Vim バージョン 8.0.  Last change: 2018 May 06


                VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Multi-language features				*multilang* *multi-lang*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{multilang}
@anchor{multi-lang}
@cindex multilang
@cindex multi-lang
多言語機能
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is about using messages and menus in various languages.  For editing
multi-byte text see |multibyte|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマニュアルはメッセージとメニューを様々な言語で使用する方法について書かれている。マルチバイトテキストの編集については |@ref{multibyte}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The basics are explained in the user manual: |usr_45.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
基本的なことはユーザーマニュアルでも説明されている: |@ref{usr_45.txt}|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Messages			|multilang-messages|
2. Menus			|multilang-menus|
3. Scripts			|multilang-scripts|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. メッセージ @tab |@ref{multilang-messages}|
@item 2. メニュー @tab |@ref{multilang-menus}|
@item 3. スクリプト @tab |@ref{multilang-scripts}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Also see |help-translated| for multi-language help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
多言語のヘルプ機能については |@ref{help-translated}| を参照のこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{Vi does not have any of these features}
{not available when compiled without the |+multi_lang| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi にはこれらの機能はない@}

@{|@ref{+multi_lang}| 機能を無効にしてコンパイルした場合には利用できない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Messages						*multilang-messages*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{multilang-messages}
@cindex multilang-messages
@section 1. メッセージ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim picks up the locale from the environment.  In most cases this means Vim
will use the language that you prefer, unless it's not available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はシステム環境からロケール (地域情報) を判定する。ほとんどの場合これは、その言語が利用可能な状態でさえあるならば、Vim を好みの言語で使うことができることを意味している。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see a list of supported locale names on your system, look in one of these
directories (for Unix):
	/usr/lib/locale ~
	/usr/share/locale ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
システムによりサポートされるロケールの一覧を見るには、(UNIX では) これらのディレクトリを見る:
@example
/usr/lib/locale
/usr/share/locale
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Unfortunately, upper/lowercase differences matter.  Also watch out for the
use of "-" and "_".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ロケール名には不幸にして大文字と小文字の違いがある。また "-" と "_" の使われ方にも用心すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					    *:lan* *:lang* *:language* *E197*
:lan[guage]
:lan[guage] mes[sages]
:lan[guage] cty[pe]
:lan[guage] tim[e]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:lan}
@anchor{:lang}
@anchor{:language}
@anchor{E197}
@cindex :lan
@cindex :lang
@cindex :language
@erindex E197
@table @asis
@item :lan[guage]
@itemx :lan[guage] mes[sages]
@itemx :lan[guage] cty[pe]
@itemx :lan[guage] tim[e]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Print the current language (aka locale).
			With the "messages" argument the language used for
			messages is printed.  Technical: LC_MESSAGES.
			With the "ctype" argument the language used for
			character encoding is printed.  Technical: LC_CTYPE.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在の言語(言い換えればロケール)を表示する。

引数 "message" を使用するとメッセージに利用されている言語が表示される。専門的には: LC_MESSAGES

引数 "ctype" を使用すると文字エンコードに利用されている言語が表示される。専門的には: LC_CTYPEa
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			With the "time" argument the language used for
			strftime() is printed.  Technical: LC_TIME.
			Without argument all parts of the locale are printed
			(this is system dependent).
			The current language can also be obtained with the
			|v:lang|, |v:ctype| and |v:lc_time| variables.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

引数 "time" を使用すると strftime() が表示に利用する言語が表示される。専門的には: LC_TIME

無引数ならばロケールの全体が表示される (どのように表示されるかはシステムに依存する)。

現在の言語は |@ref{v:lang}|, |@ref{v:ctype}| そして |@ref{v:lc_time}| の各変数で取得することもできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:lan[guage] {name}
:lan[guage] mes[sages] {name}
:lan[guage] cty[pe] {name}
:lan[guage] tim[e] {name}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :lan[guage] @{name@}
@itemx :lan[guage] mes[sages] @{name@}
@itemx :lan[guage] cty[pe] @{name@}
@itemx :lan[guage] tim[e] @{name@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Set the current language (aka locale) to {name}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在の言語 (言い換えればロケール) を @{name@} に設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The locale {name} must be a valid locale on your
			system.  Some systems accept aliases like "en" or
			"en_US", but some only accept the full specification
			like "en_US.ISO_8859-1".  On Unix systems you can use
			this command to see what locales are supported: >
				:!locale -a
<			With the "messages" argument the language used for
			messages is set.  This can be different when you want,
			for example, English messages while editing Japanese
			text.  This sets $LC_MESSAGES.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@}というロケールがシステムに存在していなければならない。あるシステムでは "en" とか "en_US" と言った別称を受け付けるが、中には "en_US.ISO_8859-1" のように完全な指定しか受け付けないシステムもある。Unix では次のコマンドで、サポートされているロケールを確認できる:
@example
:!locale -a
@end example
引数 "message" を使用するとメッセージに利用する言語を設定する。これにより例として日本語を編集中に英語メッセージを使用するようなことができる。これは $LC_MESSAGES を設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			With the "ctype" argument the language used for
			character encoding is set.  This affects the libraries
			that Vim was linked with.  It's unusual to set this to
			a different value from 'encoding' or "C".  This sets
			$LC_CTYPE.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

引数 "ctype" を使用すると文字エンコードに利用する言語を設定する。これは Vim がリンクしているライブラリに影響を与える。"C" や '@option{encoding}' と異なる値を指定するのは一般的ではない。これは @env{$LC_CTYPE} を設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			With the "time" argument the language used for time
			and date messages is set.  This affects strftime().
			This sets $LC_TIME.
			Without an argument both are set, and additionally
			$LANG is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

引数 "time" を使用すると時刻と日付のメッセージに利用される言語を設定する。strftime() に影響を与える。これは @env{$LC_TIME} を設定する。

無引数ならば両方が設定され、加えて @env{$LANG} が設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			When compiled with the |+float| feature the LC_NUMERIC
			value will always be set to "C", so that floating
			point numbers use '.' as the decimal point.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

|@ref{+float}| 機能付きでコンパイルされている場合は、常に LC_NUMERIC が "C" にセットされ、浮動小数点数が小数点として '.' を使うようになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			This will make a difference for items that depend on
			the language (some messages, time and date format).
			Not fully supported on all systems
			If this fails there will be an error message.  If it
			succeeds there is no message.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

これは言語に依存した項目 (メッセージや時刻日付の書式) を変更することができる。全てのシステムで完全にサポートされるわけではない。

設定に失敗すればエラーメッセージが表示される。成功した場合には何も表示されない。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				:language
				Current language: C
				:language de_DE.ISO_8859-1
				:language mes
				Current messages language: de_DE.ISO_8859-1
				:lang mes en
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:language
Current language: C
:language de_DE.ISO_8859-1
:language mes
Current messages language: de_DE.ISO_8859-1
:lang mes en
@end example
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
MS-WINDOWS MESSAGE TRANSLATIONS				*win32-gettext*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-gettext}
@cindex win32-gettext
@unnumberedsubsec MS-WINDOWS でのメッセージ翻訳
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you used the self-installing .exe file, message translations should work
already.  Otherwise get the libintl.dll file if you don't have it yet:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
インストーラを利用した場合には、既にメッセージの翻訳が動作している。動作しないのであれば libintl.dll を別途入手する必要がある:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	http://sourceforge.net/projects/gettext
Or:
	https://mlocati.github.io/gettext-iconv-windows/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@url{http://sourceforge.net/projects/gettext} @*
Or: @*
@url{https://mlocati.github.io/gettext-iconv-windows/}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This also contains tools xgettext, msgformat and others.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これには xgettext, msgformat その他のツールも含まれている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
libintl.dll should be placed in same directory with (g)vim.exe, or some
place where PATH environment value describe.  Vim also finds libintl-8.dll.
Message files (vim.mo) have to be placed in "$VIMRUNTIME/lang/xx/LC_MESSAGES",
where "xx" is the abbreviation of the language (mostly two letters).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
libintl.dll は (g)vim.exe と同じディレクトリか、環境変数 @env{PATH} に示されたディレクトリのどれかに置く必要がある。libintl.dll が見つからない場合、Vim は libintl-8.dll を読み込もうとする。メッセージファイル (vim.mo) は "$VIMRUNTIME/lang/xx/LC_MESSAGES" に置かなければならない。"xx" はその言語名 の省略形 (ほとんどの場合 2 文字)に置き換えて考える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you write your own translations you need to generate the .po file and
convert it to a .mo file.  You need to get the source distribution and read
the file "src/po/README.txt".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
独自の翻訳を書く場合には .po ファイルを作成しそれを .mo ファイルに変換する必要がある。そのためには Vim のソースを取得してファイル "src/po/README.txt" を読む必要がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To overrule the automatic choice of the language, set the $LANG variable to
the language of your choice.  use "en" to disable translations. >

  :let $LANG = 'ja'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自動選択された言語を変更するには、@env{$LANG} に設定する。次の例は日本語メッセージを選択する方法を示している:
@example
:let $LANG = "ja"
@end example
翻訳をしないようにするには "en" を指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(text for Windows by Muraoka Taro)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(この Windows 向け文章は村岡太郎によって書かれた)

@{訳注: 訳注として追加されたわけでなく原文にこの記述がある@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Menus						*multilang-menus*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{multilang-menus}
@cindex multilang-menus
@section 2. メニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |45.2| for the basics, esp. using 'langmenu'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
基本 (特に '@option{langmenu}' の使い方) は |@ref{45.2}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that if changes have been made to the menus after the translation was
done, some of the menus may be shown in English.  Please try contacting the
maintainer of the translation and ask him to update it.  You can find the
name and e-mail address of the translator in
"$VIMRUNTIME/lang/menu_<lang>.vim".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
メニューの翻訳が作られた後に元のメニューが変更された場合には、それらのメニューは英語のまま表示されることがある。そのような場合には翻訳のメンテナーに連絡を取り更新するように頼んで欲しい。翻訳者の名前とメールアドレスはファイル "$VIMRUNTIME/lang/menu_<lang>.vim" の中に見つけることができる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To set the font (or fontset) to use for the menus, use the |:highlight|
command.  Example: >

	:highlight Menu font=k12,r12
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューに利用するフォント (もしくはフォントセット) を指定するには、|@ref{:highlight}| コマンドを使用する。例:
@example
:highlight Menu font=k12,r12
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
ALIAS LOCALE NAMES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ロケールの省略名
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Unfortunately, the locale names are different on various systems, even though
they are for the same language and encoding.  If you do not get the menu
translations you expected, check the output of this command: >

	echo v:lang
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あいにく、同じ言語に同じエンコードであっても、ロケール名がシステムによって異なることがある。期待した通りにメニューが翻訳されない時には、次のコマンドの実行結果を調べる:
@example
echo v:lang
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now check the "$VIMRUNTIME/lang" directory for menu translation files that use
a similar language.  A difference in a "-" being a "_" already causes a file
not to be found!  Another common difference to watch out for is "iso8859-1"
versus "iso_8859-1".  Fortunately Vim makes all names lowercase, thus you
don't have to worry about case differences.  Spaces are changed to
underscores, to avoid having to escape them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次に "$VIMRUNTIME/lang" ディレクトリを調べて同じ言語に使われるメニュー翻訳ファイルを探す。"-" と "_" が違うだけでファイルは見つけられなくなる。良くある間違い "iso8859-1" と "iso_8859-1" にも用心する。幸い、Vim は全ての名前を小文字にするので、大文字小文字の区別を心配する必要はない。名前中の空白文字はエスケープするのではなくアンダースコア ("_") に変換される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you find a menu translation file for your language with a different name,
create a file in your own runtime directory to load that one.  The name of
that file could be: >

	~/.vim/lang/menu_<v:lang>.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使いたい言語用の、それと異なる名前のメニュー翻訳ファイルを見つけた場合は、独自のランタイムディレクトリに読み込まれるようファイルを作成する。ファイルの名前は次のようにする:
@example
~/.vim/lang/menu_<v:lang>.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Check the 'runtimepath' option for directories which are searched.  In that
file put a command to load the menu file with the other name: >

	runtime lang/menu_<other_lang>.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルが検索されるディレクトリを指定するオプション '@option{runtimepath}' を確認する。そのファイルに別の名前のメニューファイルを読み込む、次のようなコマンドを記入する:
@example
runtime lang/menu_<other_lang>.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
TRANSLATING MENUS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メニューを翻訳する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to do your own translations, you can use the |:menutrans| command,
explained below.  It is recommended to put the translations for one language
in a Vim script.  For a language that has no translation yet, please consider
becoming the maintainer and make your translations available to all Vim users.
Send an e-mail to the Vim maintainer <maintainer@vim.org>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューを独自に翻訳したい場合は、以下で説明するように |@ref{:menutrans}| コマンドを使うことができる。ある 1 つの言語の翻訳は 1 つの Vim script にまとめられることが推奨される。まだ翻訳が存在しない言語については、メンテナーになりその翻訳を全ての Vim ユーザーに提供することを是非とも考えていただきたい。Vim のメンテナーにメールを送って欲しい。アドレスは @email{<maintainer@@vim.org>} である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*:menut* *:menutrans* *:menutranslate*
:menut[ranslate] clear
			Clear all menu translations.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:menut}
@anchor{:menutrans}
@anchor{:menutranslate}
@cindex :menut
@cindex :menutrans
@cindex :menutranslate
@table @asis
@item :menut[ranslate] clear
メニューの翻訳をすべて削除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:menut[ranslate] {english} {mylang}
			Translate menu name {english} to {mylang}.  All
			special characters like "&" and "<Tab>" need to be
			included.  Spaces and dots need to be escaped with a
			backslash, just like in other |:menu| commands.
			Case in {english} is ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :menut[ranslate] @{english@} @{mylang@}
メニュー名 @{english@} を @{mylang@} に翻訳する。"&" と "<Tab>" の特別な文字も全て含まれる必要がある。半角スペースとピリオド ('.') は |@ref{:menu}| コマンドと同様に、バックスラッシュ @{訳注: '\'@} でエスケープする必要がある。@{english@} 内の大文字小文字は無視される。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See the $VIMRUNTIME/lang directory for examples.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例は $VIMRUNTIME/lang ディレクトリを参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To try out your translations you first have to remove all menus.  This is how
you can do it without restarting Vim: >
	:source $VIMRUNTIME/delmenu.vim
	:source <your-new-menu-file>
	:source $VIMRUNTIME/menu.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
翻訳をテストするには一旦全てのメニューを削除する必要がある。次のは Vim を再起動せずにそれを行う方法である:
@example
:source $VIMRUNTIME/delmenu.vim
:source <your-new-menu-file>
:source $VIMRUNTIME/menu.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Each part of a menu path is translated separately.  The result is that when
"Help" is translated to "Hilfe" and "Overview" to "Überblick" then
"Help.Overview" will be translated to "Hilfe.Überblick".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューパスの各部位は個別に翻訳される。"Help" が "Hilfe" に、"Overview" が "Überblick" に訳される時、結果的に "Help.Overview" は "Hilfe.Überblick" と翻訳される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Scripts						*multilang-scripts*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{multilang-scripts}
@cindex multilang-scripts
@section 3. スクリプト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vim scripts you can use the |v:lang| variable to get the current language
(locale).  The default value is "C" or comes from the $LANG environment
variable.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim script では現在の言語 (ロケールを) 取得するのに変数 |@ref{v:lang}| を使うことができる。デフォルトの値は "C" か環境変数 @env{$LANG} の値になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following example shows how this variable is used in a simple way, to make
a message adapt to language preferences of the user, >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下の例は、この変数を使ったユーザーの好みの言語にメッセージを適合させる簡単な例を示している,
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:if v:lang =~ "de_DE"
	:  echo "Guten Morgen"
	:else
	:  echo "Good morning"
	:endif
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:if v:lang =~ "de_DE"
:  echo "Guten Morgen"
:else
:  echo "Good morning"
:endif
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:sw=4:ts=8:ft=help:norl:
@end ifset
