@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_26.txt, usr_27.txt, usr_25.txt, 目次
@unnumbered 繰り返し
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_26.txt*	For Vim version 8.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

				  Repeating
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*usr_26.txt*	For Vim バージョン 8.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

				   繰り返し
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
An editing task is hardly ever unstructured.  A change often needs to be made
several times.  In this chapter a number of useful ways to repeat a change
will be explained.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどの編集作業は手順が決まっています。同じ変更を繰り返したいと思うことはよくあります。この章では、変更を繰り返すための便利な方法をいくつか説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|26.1|	Repeating with Visual mode
|26.2|	Add and subtract
|26.3|	Making a change in many files
|26.4|	Using Vim from a shell script

     Next chapter: |usr_27.txt|  Search commands and patterns
 Previous chapter: |usr_25.txt|  Editing formatted text
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{26.1}| @tab ビジュアルモードを使って繰り返す
@item |@ref{26.2}| @tab 加算と減算
@item |@ref{26.3}| @tab 複数のファイルを変更する
@item |@ref{26.4}| @tab シェルスクリプトから Vim を使う
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*26.1*	Repeating with Visual mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{26.1}
@cindex ビジュアルモードを使って繰り返す
@section ビジュアルモードを使って繰り返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Visual mode is very handy for making a change in any sequence of lines.  You
can see the highlighted text, thus you can check if the correct lines are
changed.  But making the selection takes some typing.  The "gv" command
selects the same area again.  This allows you to do another operation on the
same text.
   Suppose you have some lines where you want to change "2001" to "2002" and
"2000" to "2001":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードを使えば好きな範囲のテキストを変更できるのでとても便利です。選択範囲は強調表示されるので、変更される範囲が正しいかどうか確認できます。しかし、何度も範囲選択するのは少し面倒です。"@command{gv}" コマンドを使えば同じ範囲を再選択できます。同じ範囲に対して別の変更を加えることができます。

例えば、"2001" を "2002" に変更し、"2000" を "2001" に変更してみます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The financial results for 2001 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
The financial results for 2001 are better
than for 2000.  The income increased by 50%,
even though 2001 had more rain than 2000.
                2000        2001
income          45,403      66,234
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
First change "2001" to "2002".  Select the lines in Visual mode, and use: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まず "2001" を "2002" に変更します。ビジュアルモードでテキストを選択し、次のコマンドを実行します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:s/2001/2002/g
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:s/2001/2002/g
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now use "gv" to reselect the same text.  It doesn't matter where the cursor
is.  Then use ":s/2000/2001/g" to make the second change.
   Obviously, you can repeat these changes several times.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次に "@command{gv}" で同じ範囲を再選択します。カーソルの位置は気にしなくて大丈夫です。そして、"@command{:s/2000/2001/g}" で 2 回目の変更を加えます。

同じ方法で何度でも変更を繰り返せます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*26.2*	Add and subtract
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{26.2}
@cindex 加算と減算
@section 加算と減算
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When repeating the change of one number into another, you often have a fixed
offset.  In the example above, one was added to each year.  Instead of typing
a substitute command for each year that appears, the CTRL-A command can be
used.
   Using the same text as above, search for a year: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ある数字を変更し、それと同じ数だけ他の数字を変更したいような場合があります。例えば上の例ではすべての年に 1 を加えました。変更したいすべての年に対して置換コマンドを実行しなくても、@kbd{CTRL-A} を使って同じことができます。

上記例文から、年を検索します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/19[0-9][0-9]\|20[0-9][0-9]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
/19[0-9][0-9]\|20[0-9][0-9]
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now press CTRL-A.  The year will be increased by one:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そして @kbd{CTRL-A} を押すと、年が 1 つ増えます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The financial results for 2002 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
The financial results for 2002 are better
than for 2000.  The income increased by 50%,
even though 2001 had more rain than 2000.
                2000        2001
income          45,403      66,234
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Use "n" to find the next year, and press "." to repeat the CTRL-A ("." is a
bit quicker to type).  Repeat "n" and "." for all years that appear.
   Hint: set the 'hlsearch' option to see the matches you are going to change,
then you can look ahead and do it faster.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"n" で次の年を検索し、"." を押して @kbd{CTRL-A} を繰り返します ("." を押す方が簡単ですよね)。"n" と "." を繰り返し、全ての年を更新します。

@strong{Hint:} '@option{hlsearch}' オプションを設定して検索にヒットした場所を確認できるようにすると、先の方まで見通せるので作業がはかどります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Adding more than one can be done by prepending the number to CTRL-A.  Suppose
you have this list:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
加算する量を増やしたい場合は @kbd{CTRL-A} の前に数値を指定します。例えば、次のテキストで:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	1.  item four ~
	2.  item five ~
	3.  item six ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
1.  item four
2.  item five
3.  item six
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move the cursor to "1." and type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルを "1." のところに動かして次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	3 CTRL-A
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
3 CTRL-A
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "1." will change to "4.".  Again, you can use "." to repeat this on the
other numbers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"1." が "4." に変わります。"." を使って同じ変更を繰り返せます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もう 1 つ例を示します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	006	foo bar ~
	007	foo bar ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
006 foo bar
007 foo bar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using CTRL-A on these numbers results in:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの数字に対して @kbd{CTRL-A} を使うと次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	007	foo bar ~
	010	foo bar ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
007 foo bar
010 foo bar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
7 plus one is 10?  What happened here is that Vim recognized "007" as an octal
number, because there is a leading zero.  This notation is often used in C
programs.  If you do not want a number with leading zeros to be handled as
octal, use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
7 + 1 = 10?  これは、"007" の先頭が 0 で始まっているため、8 進数と認識されてしまったのです。この表記方法は C 言語などで使われています。先頭が 0 で始まっている数字を 8 進数として扱いたくない場合は、次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set nrformats-=octal
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set nrformats-=octal
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The CTRL-X command does subtraction in a similar way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-X} コマンドを使うと同じ方法で減算できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*26.3*	Making a change in many files
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{26.3}
@cindex 複数のファイルを変更する
@section 複数のファイルを変更する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have a variable called "x_cnt" and you want to change it to
"x_counter".  This variable is used in several of your C files.  You need to
change it in all files.  This is how you do it.
   Put all the relevant files in the argument list: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるプログラムに "x_cnt" という変数があり、それを "x_counter" に変更したい場合を考えます。変数は複数の C ファイルで使われているので、すべてのファイルを変更しなければなりません。その方法を説明します。

関連ファイルを引数リストに加えます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:args *.c
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:args *.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This finds all C files and edits the first one.  Now you can perform a
substitution command on all these files: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべての C ファイルが検索され、1 つ目のファイルが開きます。これで、すべてのファイルに対して置換コマンドを実行できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:argdo %s/\<x_cnt\>/x_counter/ge | update
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:argdo %s/\<x_cnt\>/x_counter/ge | update
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":argdo" command takes an argument that is another command.  That command
will be executed on all files in the argument list.
   The "%s" substitute command that follows works on all lines.  It finds the
word "x_cnt" with "\<x_cnt\>".  The "\<" and "\>" are used to match the whole
word only, and not "px_cnt" or "x_cnt2".
   The flags for the substitute command include "g" to replace all occurrences
of "x_cnt" in the same line.  The "e" flag is used to avoid an error message
when "x_cnt" does not appear in the file.  Otherwise ":argdo" would abort on
the first file where "x_cnt" was not found.
   The "|" separates two commands.  The following "update" command writes the
file only if it was changed.  If no "x_cnt" was changed to "x_counter" nothing
happens.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:argdo}" コマンドの引数にはコマンドを指定できます。指定されたコマンドは引数リスト内のすべてのファイルに対して実行されます。

"@command{%s}" はファイル全体を置換するコマンドです。"\<x_cnt\>" で "x_cnt" を検索しています。"@samp{\<}" と "@samp{\>}" を使って単語全体がマッチするようにしています。つまり "px_cnt" や "x_cnt2" は置換されません。

置換コマンドに指定された "g" フラグは、1 つの行で複数の "x_cnt" が見つかった場合に、すべての "x_cnt" を置換するための指定です。"e" フラグは "x_cnt" が見つからなかった場合でもエラーメッセージを表示しないための指定です。エラーが起こるとその場で "@command{:argdo}" が止まってしまいます。

"@samp{|}" はコマンドの区切りです。"@command{update}" コマンドを使って、変更があったときだけファイルを保存しています。置換する "x_cnt" が見つからなければ保存は実行されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is also the ":windo" command, which executes its argument in all
windows.  And ":bufdo" executes its argument on all buffers.  Be careful with
this, because you might have more files in the buffer list than you think.
Check this with the ":buffers" command (or ":ls").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他にも、すべてのウィンドウに対してコマンドを実行する "@command{:windo}" コマンド、すべてのバッファに対してコマンドを実行する "@command{:bufdo}" コマンドがあります。バッファリストにはあなたの予想以上にファイルが入っているかもしれないので注意してください。"@command{:buffers}" コマンド (or "@command{:ls}") で確認できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*26.4*	Using Vim from a shell script
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{26.4}
@cindex シェルスクリプトから Vim を使う
@section シェルスクリプトから Vim を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have a lot of files in which you need to change the string
"-person-" to "Jones" and then print it.  How do you do that?  One way is to
do a lot of typing.  The other is to write a shell script to do the work.
   The Vim editor does a superb job as a screen-oriented editor when using
Normal mode commands.  For batch processing, however, Normal mode commands do
not result in clear, commented command files; so here you will use Ex mode
instead.  This mode gives you a nice command-line interface that makes it easy
to put into a batch file.  ("Ex command" is just another name for a
command-line (:) command.)
   The Ex mode commands you need are as follows: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、たくさんのファイルがあって、"@samp{-person-}" を "@samp{Jones}" に置換して印刷する必要があるとします。どのように実行すればいいでしょう。すべてを手作業で実行するのも 1 つの方法ですが、シェルスクリプトを書いて済ます方法もあります。

スクリーンエディタとして Vim を使うとき、ノーマルモードコマンドを使えば簡単に処理できます。しかし、バッチ処理したい場合は、ノーマルモードコマンドでは分かり難くなってしまいますし、コマンドファイルにコメントも書けません。代わりに Ex モードを使います。Ex モードのコマンドはバッチファイルを書くのに適しています。("EX コマンド" はコマンドライン (@command{:}) コマンドの別名です)

必要となる Ex コマンドは次のとおりです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	%s/-person-/Jones/g
	write tempfile
	quit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
%s/-person-/Jones/g
write tempfile
quit
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You put these commands in the file "change.vim".  Now to run the editor in
batch mode, use this shell script: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドを "@file{change.vim}" に保存します。そして、Vim をバッチモードで起動します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	for file in *.txt; do
	  vim -e -s $file < change.vim
	  lpr -r tempfile
	done
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
for file in *.txt; do
  vim -e -s $file < change.vim
  lpr -r tempfile
done
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The for-done loop is a shell construct to repeat the two lines in between,
while the $file variable is set to a different file name each time.
   The second line runs the Vim editor in Ex mode (-e argument) on the file
$file and reads commands from the file "change.vim".  The -s argument tells
Vim to operate in silent mode.  In other words, do not keep outputting the
:prompt, or any other prompt for that matter.
   The "lpr -r tempfile" command prints the resulting "tempfile" and deletes
it (that's what the -r argument does).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
for-done ループは間にある行を繰り返し実行するためのシェル構文です。繰り返すたびに $file 変数に異なるファイル名が設定されます。

2 行目では、Vim を Ex モード (-e 引数) で起動して $file を開き、"@file{change.vim}" からコマンドを読み込んでいます。-s 引数を指定して Vim をサイレントモードにしているので、":" プロンプトやその他のプロンプトは表示されません。

"@command{lpr -r tempfile}" コマンドで出力結果の "tempfile" を印刷し、そのファイルを削除しています ("-r" 引数が削除指示)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
READING FROM STDIN
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 標準入力からの読み込み
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim can read text on standard input.  Since the normal way is to read commands
there, you must tell Vim to read text instead.  This is done by passing the
"-" argument in place of a file.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は標準入力からテキストを読み込めます。標準入力からはコマンドを読み込むのが普通なので、そうでないことを Vim に伝えなくてはなりません。ファイルを指定する場所に "@samp{-}" 引数を指定してください。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ls | vim -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
ls | vim -
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This allows you to edit the output of the "ls" command, without first saving
the text in a file.
   If you use the standard input to read text from, you can use the "-S"
argument to read a script: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{ls}" コマンドの出力結果を、ファイルに保存せずに直接編集できます。

標準入力からテキストを読み込む場合でも、"-S" 引数を使えば、スクリプトを読み込ませることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	producer | vim -S change.vim -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
producer | vim -S change.vim -
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
NORMAL MODE SCRIPTS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ノーマルモードスクリプト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you really want to use Normal mode commands in a script, you can use it
like this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードコマンドをスクリプトの中で使いたい場合は、次のようにすればできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -s script file.txt ...
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim -s script file.txt ...
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note:
	"-s" has a different meaning when it is used without "-e".  Here it
	means to source the "script" as Normal mode commands.  When used with
	"-e" it means to be silent, and doesn't use the next argument as a
	file name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"-s" 引数は "-e" の有無で違う意味になります。この例の場合は、"script" をノーマルモードコマンドとして実行するという意味になります。"-e" といっしょに指定された場合はサイレントモードの指定になり、"-s" にファイルを指定することはできません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The commands in "script" are executed like you typed them.  Don't forget that
a line break is interpreted as pressing <Enter>.  In Normal mode that moves
the cursor to the next line.
   To create the script you can edit the script file and type the commands.
You need to imagine what the result would be, which can be a bit difficult.
Another way is to record the commands while you perform them manually.  This
is how you do that: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"script" の中のコマンドは、実際に入力したのと同じように実行されます。改行は @key{<Enter>} として解釈されるので注意してください。次の行へ移動するノーマルモードコマンドとして実行されます。

スクリプトを作る方法はスクリプトファイルを開いてコマンドを入力するだけですが、コマンドの結果を自分で想像しなければならないので、少し難しい作業になります。
実際に編集をしてみて、その操作手順を記録する方法もあります。次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -w script file.txt ...
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim -w script file.txt ...
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
All typed keys will be written to "script".  If you make a small mistake you
can just continue and remember to edit the script later.
   The "-w" argument appends to an existing script.  That is good when you
want to record the script bit by bit.  If you want to start from scratch and
start all over, use the "-W" argument.  It overwrites any existing file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
入力したすべてのキーが "script" に保存されます。多少のミスがあってもそのまま操作を続けて、後からスクリプトを編集できます。

"-w" 引数は既存のスクリプトに追記します。したがって、スクリプトの記録を少しずつ進めることができます。スクリプトをスクラッチから作成したい場合は "-W" 引数を使ってください。既存のファイルが上書きされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_27.txt|  Search commands and patterns

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
