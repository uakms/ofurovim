@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@node usr_20.txt, usr_21.txt, usr_12.txt, 目次
@unnumbered コマンドラインを素早く入力する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_20.txt*	For Vim version 8.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

		     Typing command-line commands quickly
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_20.txt
@verbatim
*usr_20.txt*	For Vim バージョン 8.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

			コマンドラインを素早く入力する
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim has a few generic features that makes it easier to enter commands.  Colon
commands can be abbreviated, edited and repeated.  Completion is available for
nearly everything.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim にはコマンド入力を簡単にするための一般的な機能が備わっています。コロン (:) コマンドでは短縮入力、編集、履歴、文脈依存の補完機能が利用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|20.1|	Command line editing
|20.2|	Command line abbreviations
|20.3|	Command line completion
|20.4|	Command line history
|20.5|	Command line window

     Next chapter: |usr_21.txt|  Go away and come back
 Previous chapter: |usr_12.txt|  Clever tricks
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{20.1, , 20.1}| @tab コマンドライン編集
@item |@ref{20.2, , 20.2}| @tab コマンドライン短縮入力
@item |@ref{20.3, , 20.3}| @tab コマンドライン補完
@item |@ref{20.4, , 20.4}| @tab コマンドライン履歴
@item |@ref{20.5, , 20.5}| @tab コマンドラインウィンドウ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*20.1*	Command line editing
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{20.1}
@section コマンドライン編集
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you use a colon (:) command or search for a string with / or ?, Vim puts
the cursor on the bottom of the screen.  There you type the command or search
pattern.  This is called the Command line.  Also when it's used for entering a
search command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コロン (:) コマンドや検索コマンド (/ or ?) を使うとき、カーソルは画面の一番下に表示されます。そこにコマンドや検索パターンを入力するわけです。その場所を「コマンドライン」と呼びます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The most obvious way to edit the command you type is by pressing the <BS> key.
This erases the character before the cursor.  To erase another character,
typed earlier, first move the cursor with the cursor keys.
   For example, you have typed this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインの編集で最もわかりやすいのは @key{<BS>} でしょう。カーソルの直前の文字を削除できます。他の位置にある文字を削除したい場合は、矢印キーでカーソルを動かしてから @key{<BS}> を押してください。

例えば、次のように入力して:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:s/col/pig/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:s/col/pig/
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Before you hit <Enter>, you notice that "col" should be "cow".  To correct
this, you type <Left> five times.  The cursor is now just after "col".  Type
<BS> and "w" to correct: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Enter>} を押す前になって、"col" が "cow" の入力ミスであることに気づきました。これを修正するには、左矢印キー (@key{<Left>}) を 5 回押して "col" の直後にカーソルを動かしてから、@key{<BS>} と "w" を入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:s/cow/pig/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:s/cow/pig/
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can press <Enter> directly.  You don't have to move the cursor to the
end of the line before executing the command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
修正したら、その場で @key{<Enter>} を押しましょう。コマンドを実行するためにカーソルを行末まで動かす必要はありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The most often used keys to move around in the command line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインでのカーソル移動には次のキーがよく使われます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	<Left>			one character left
	<Right>			one character right
	<S-Left> or <C-Left>	one word left
	<S-Right> or <C-Right>	one word right
	CTRL-B or <Home>	to begin of command line
	CTRL-E or <End>		to end of command line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .6 .3
@item @tab <Left> @tab 1 文字左
@item @tab <Right> @tab 1 文字右
@item @tab <S-Left> or <C-Left> @tab 1 単語左
@item @tab <S-Right> or <C-Right> @tab 1 単語右
@item @tab CTRL-B or <Home> @tab 行頭
@item @tab CTRL-E or <End> @tab 行末
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	<S-Left> (cursor left key with Shift key pressed) and <C-Left> (cursor
	left key with Control pressed) will not work on all keyboards.  Same
	for the other Shift and Control combinations.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
@key{<S-Left>} (シフトキーを押したまま左矢印キーを押す) と @key{<C-Left>} (コントロールキーを押したまま左矢印キーを押す) が機能しないキーボードもあります。その他のシフトキーとコントロールキーの組み合せも同様に、機能しないことがあります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can also use the mouse to move the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルはマウスでも動かせます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DELETING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 削除
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As mentioned, <BS> deletes the character before the cursor.  To delete a whole
word use CTRL-W.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上述のとおり、@key{<BS>} でカーソルの直前の文字を削除できます。単語を削除するには @kbd{CTRL-W} を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/the fine pig ~

		     CTRL-W

	/the fine ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/the fine pig

             CTRL-W

/the fine
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-U removes all text, thus allows you to start all over again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-U} ですべてのテキストを削除できます。コマンドを最初から入力し直したいときに使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
OVERSTRIKE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 上書き
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <Insert> key toggles between inserting characters and replacing the
existing ones.  Start with this text:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Insert>} キーを押すと、挿入と上書きが切り替わります。次のテキストを使って説明します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/the fine pig ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/the fine pig
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move the cursor to the start of "fine" with <S-Left> twice (or <Left> eight
times, if <S-Left> doesn't work).  Now press <Insert> to switch to overstrike
and type "great":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<S-Left>} を 2 回押して (@key{<S-Left>} が機能しない場合は @key{<Left>} を 8 回押して) "fine" の先頭にカーソルを動かします。@key{<Insert>} を押して上書きに切り替え、"great" と入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/the greatpig ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/the greatpig
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Oops, we lost the space.  Now, don't use <BS>, because it would delete the
"t" (this is different from Replace mode).  Instead, press <Insert> to switch
from overstrike to inserting, and type the space:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
おっと、スペースが消えてしまいました。ここで @key{<BS>} を押すと "t" が削除されてしまいます (置換モードとは違いますね)。@key{<Insert>} を押して、上書きから挿入に切り替え、スペースを入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/the great pig ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/the great pig
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CANCELLING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キャンセル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You thought of executing a : or / command, but changed your mind.  To get rid
of what you already typed, without executing it, press CTRL-C or <Esc>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{:} または @command{/} コマンドを入力した後で、そのコマンドの実行をキャンセルしたくなった場合は、@kbd{CTRL-C} または @key{<Esc>} を押してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	<Esc> is the universal "get out" key.  Unfortunately, in the good old
	Vi pressing <Esc> in a command line executed the command!  Since that
	might be considered to be a bug, Vim uses <Esc> to cancel the command.
	But with the 'cpoptions' option it can be made Vi compatible.  And
	when using a mapping (which might be written for Vi) <Esc> also works
	Vi compatible.  Therefore, using CTRL-C is a method that always works.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
@key{<Esc>} キーはどこでも使える「脱出」キーですが、残念なことに、古き良き Vi では、コマンドラインで @key{<Esc>} を押すと、コマンドが実行されてしまいます。これはおそらくバグなので、Vim では @key{<Esc>} でコマンドをキャンセルできるようになっています。ただし、'@option{cpoptions}' を設定して Vi 互換の動作に変更することもできます。また、マップが適用されたときは (それが Vi 用に書かれたものであってもなくても) @key{<Esc>} は Vi 互換の動作をします。@kbd{CTRL-C} を使えば設定に関係なくキャンセルできます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are at the start of the command line, pressing <BS> will cancel the
command.  It's like deleting the ":" or "/" that the line starts with.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインの先頭にカーソルがあるときに @key{<BS>} キーを押すとコマンドをキャンセルできます。これは行頭にある "@samp{:}" や "@samp{/}" を削除するような感覚です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*20.2*	Command line abbreviations
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{20.2}
@section コマンドライン短縮入力
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some of the ":" commands are really long.  We already mentioned that
":substitute" can be abbreviated to ":s".  This is a generic mechanism, all
":" commands can be abbreviated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
とても長い名前の "@command{:}" コマンドがいくつかあります。"@command{:substitute}" が "@command{:s}" と短縮できることは既に説明しましたが、これは何も特別なことではありません。すべての "@command{:}" コマンドが短縮できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
How short can a command get?  There are 26 letters, and many more commands.
For example, ":set" also starts with ":s", but ":s" doesn't start a ":set"
command.  Instead ":set" can be abbreviated to ":se".
   When the shorter form of a command could be used for two commands, it
stands for only one of them.  There is no logic behind which one, you have to
learn them.  In the help files the shortest form that works is mentioned.  For
example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドはどこまで短縮できるでしょうか。アルファベットは 26 文字ですが、コマンドはそれよりたくさんあります。例えば、"@command{:set}" の先頭は "@command{:s}" ですが、"@command{:s}" では "@command{:set}" を実行できません。"@command{:set}" の短縮形は "@command{:se}" です。

2 つのコマンドが同じ名前に短縮できたとしても、最短の名前を使えるのは一つのコマンドだけです。その決定方法に明確なルールはないので、個別に覚えるしかありません。コマンドの最短の名前はヘルプファイルに記述されています。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:s[ubstitute]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:s[ubstitute]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This means that the shortest form of ":substitute" is ":s".  The following
characters are optional.  Thus ":su" and ":sub" also work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは "@command{:substitute}" の短縮形が "@command{:s}" であることを示しています。それ以降の文字は任意です。"@command{:su}" でも "@command{:sub}" でも動作します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the user manual we will either use the full name of command, or a short
version that is still readable.  For example, ":function" can be abbreviated
to ":fu".  But since most people don't understand what that stands for, we
will use ":fun".  (Vim doesn't have a ":funny" command, otherwise ":fun" would
be confusing too.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーマニュアルではコマンドの長い名前と短い名前の両方が使われますが、読み難い短縮形は使われません。例えば、"@command{:function}" は "@command{:fu}" と短縮できますが、これだと大半の人が何の略なのか理解できないので "@command{:fun}" が使われます。(Vim に ":funny" コマンドはありませんが、もしあれば、":fun" でも混乱を招きますよね。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is recommended that in Vim scripts you write the full command name.  That
makes it easier to read back when you make later changes.  Except for some
often used commands like ":w" (":write") and ":r" (":read").
   A particularly confusing one is ":end", which could stand for ":endif",
":endwhile" or ":endfunction".  Therefore, always use the full name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim script を書くときはコマンドの長い名前を使うことをお勧めします。そうしておけば、後で変更しようと思ったときに読むのが楽です。しかし、"@command{:w}" ("@command{:write}") や "@command{:r}" ("@command{:read}") のような頻繁に使われるコマンドなら短縮形を使っても構わないでしょう。

特にややこしいのは "@command{:end}" で、これは "@command{:endif}"、"@command{:endwhile}" あるいは "@command{:endfunction}" を表しているのかもしれません。そのため、常に長い名前を使うようにしましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SHORT OPTION NAMES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec オプションの短い名前
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the user manual the long version of the option names is used.  Many options
also have a short name.  Unlike ":" commands, there is only one short name
that works.  For example, the short name of 'autoindent' is 'ai'.  Thus these
two commands do the same thing: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーマニュアルではオプションの長い名前が使われますが、ほとんどのオプションには短い名前があります。"@command{:}" コマンドと違い、オプションの短い名前は一つしかありません。例えば、'@option{autoindent}' の短い名前は '@option{ai}' なので、次の二つのコマンドは同じ動作をします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set autoindent
	:set ai
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set autoindent
:set ai
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find the full list of long and short names here: |option-list|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの長い名前と短い名前の一覧は |option-list| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*20.3*	Command line completion
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{20.3}
@section コマンドライン補完
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is one of those Vim features that, by itself, is a reason to switch from
Vi to Vim.  Once you have used this, you can't do without.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドライン補完はこれだけでも Vi から Vim に乗り換えるに値する程の機能です。一度使ってしまったら、手放せなくなるでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have a directory that contains these files:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のようなファイルを含むディレクトリがあるとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	info.txt
	intro.txt
	bodyofthepaper.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
info.txt
intro.txt
bodyofthepaper.txt
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To edit the last one, you use the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{bodyofthepaper.txt} を開くには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit bodyofthepaper.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit bodyofthepaper.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It's easy to type this wrong.  A much quicker way is: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いかにも打ち間違えそうです。もっと簡単にやりましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit b<Tab>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit b<Tab>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Which will result in the same command.  What happened?  The <Tab> key does
completion of the word before the cursor.  In this case "b".  Vim looks in the
directory and finds only one file that starts with a "b".  That must be the
one you are looking for, thus Vim completes the file name for you.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
どちらも結果は同じになります。どういうことでしょうか。@key{<Tab>} キーによってカーソル直前の単語 (この場合なら "b") が補完されたのです。ディレクトリが検索され、"b" で始まるファイルが一つだけ見つかり、それはあなたが探しているファイルに違いないので、その名前が補完されました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、次はこのように入力してみます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit i<Tab>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit i<Tab>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will beep, and give you: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビープ音が鳴り、次のように表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit info.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit info.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The beep means that Vim has found more than one match.  It then uses the first
match it found (alphabetically).  If you press <Tab> again, you get: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビープ音は複数のファイルが見つかったことを示しています。まずは (アルファベット順で) 最初のファイルが表示されます。もう一度 @key{<Tab>} を押すと、次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit intro.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit intro.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Thus, if the first <Tab> doesn't give you the file you were looking for, press
it again.  If there are more matches, you will see them all, one at a time.
   If you press <Tab> on the last matching entry, you will go back to what you
first typed: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
つまり、最初の @key{<Tab>} で、探しているファイルが出てこなかったら、もう一度 @key{<Tab>} を押せばよいのです。ファイルがたくさんあるなら、1 つずつ表示していきましょう。

最後の補完候補を表示しているときに @key{<Tab>} を押すと、最初の状態に戻ります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit i
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit i
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then it starts all over again.  Thus Vim cycles through the list of matches.
Use CTRL-P to go through the list in the other direction:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
また最初から補完候補を表示できます。つまり、補完候補は循環表示されます。@kbd{CTRL-P} を使うと、逆方向に移動できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	      <------------------- <Tab> -------------------------+
								  |
		  <Tab> -->		       <Tab> -->
	:edit i		      :edit info.txt		   :edit intro.txt
		  <-- CTRL-P		       <-- CTRL-P
	   |
	   +---------------------- CTRL-P ------------------------>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
      <------------------- <Tab> -------------------------+
                                                          |
          <Tab> -->                    <Tab> -->
:edit i               :edit info.txt               :edit intro.txt
          <-- CTRL-P                   <-- CTRL-P
   |
   +---------------------- CTRL-P ------------------------>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CONTEXT
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 文脈
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you type ":set i" instead of ":edit i" and press <Tab> you get: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":edit i" ではなく、":set i" と入力してから @key{<Tab>} を押すと、次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set icon
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set icon
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Hey, why didn't you get ":set info.txt"?  That's because Vim has context
sensitive completion.  The kind of words Vim will look for depends on the
command before it.  Vim knows that you cannot use a file name just after a
":set" command, but you can use an option name.
   Again, if you repeat typing the <Tab>, Vim will cycle through all matches.
There are quite a few, it's better to type more characters first: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
どうして "@command{:set @file{info.txt}}" にならないのでしょうか。それは、Vim が文脈を認識しているからです。補完される単語の種類は入力されたコマンドに依存します。"@command{:set}" コマンドに指定するのはファイル名ではなくオプション名であることを Vim は知っているのです。

上述の例と同様、<Tab> を入力すれば補完候補が一つずつ順番に表示されます。たいていは、いくつかの文字を入力してから補完した方が素早く補完できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set isk<Tab>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set isk<Tab>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Gives: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような結果になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now type "=" and press <Tab>: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、"=" を入力してから <Tab> を押してみましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword=@,48-57,_,192-255
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword=@,48-57,_,192-255
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
What happens here is that Vim inserts the old value of the option.  Now you
can edit it.
   What is completed with <Tab> is what Vim expects in that place.  Just try
it out to see how it works.  In some situations you will not get what you
want.  That's either because Vim doesn't know what you want, or because
completion was not implemented for that situation.  In that case you will get
a <Tab> inserted (displayed as ^I).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの現在の設定が挿入されるので、それを編集することができます。

@key{<Tab>} で補完されるのはその場所に入力すべき内容です。どのように動作するかは自分で試してみてください。期待したような結果にならないこともあると思いますが、それは、Vim がその文脈を認識できなかったか、その文脈における補完が実装されていないかのどちらかです。その場合は <Tab> 文字が挿入されます (画面上では @samp{^I} と表示されます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LIST MATCHES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 補完候補一覧
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When there are many matches, you would like to see an overview.  Do this by
pressing CTRL-D.  For example, pressing CTRL-D after: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
補完候補がたくさんあるとき、その一覧を確認することができます。それには @kbd{CTRL-D} を使います。例えば、次のコマンドを入力してから @kbd{CTRL-D} を押してみます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set is
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set is
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
results in: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような結果になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set is
	incsearch  isfname    isident    iskeyword  isprint
	:set is
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:set is
incsearch  isfname    isident    iskeyword  isprint
:set is
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim lists the matches and then comes back with the text you typed.  You can
now check the list for the item you wanted.  If it isn't there, you can use
<BS> to correct the word.  If there are many matches, type a few more
characters before pressing <Tab> to complete the rest.
   If you have watched carefully, you will have noticed that "incsearch"
doesn't start with "is".  In this case "is" stands for the short name of
"incsearch".  (Many options have a short and a long name.)  Vim is clever
enough to know that you might have wanted to expand the short name of the
option into the long name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
補完候補の一覧が表示され、また元の入力に戻ります。この一覧に期待した項目があるかどうか確認してください。ない場合は、@key{<BS>} でテキストを削除し、入力し直してください。補完候補がたくさんある場合は、さらにいくつかの文字を入力してから @key{<Tab>} を押して補完してください。

注意深い方なら、候補一覧にある "incsearch" が "is" で始まっていないことに気づいたと思います。"is" は "incsearch" の短縮形です。ほとんどのオプションには短い名前と長い名前がありますが、Vim は賢いので、オプションの短い名前を見て、長い名前に展開してくれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THERE IS MORE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec さらに他にも
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The CTRL-L command completes the word to the longest unambiguous string.  If
you type ":edit i" and there are files "info.txt" and "info_backup.txt" you
will get ":edit info".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-L} コマンドを使うと、共通したところまで補完できます。例えば、"@file{info.txt}" と "@file{info_backup.txt}" というファイルがあって、"@command{:edit i}" と入力してから @kbd{CTRL-L} を押すと、"@command{:edit info}" になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'wildmode' option can be used to change the way completion works.
The 'wildmenu' option can be used to get a menu-like list of matches.
Use the 'suffixes' option to specify files that are less important and appear
at the end of the list of files.
The 'wildignore' option specifies files that are not listed at all.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{wildmode}' オプションで補完の動作を変更できます。
'@option{wildmenu}' オプションを設定すると補完候補をメニューのように表示できます。
'@option{suffixes}' オプションに優先度の低いファイルを指定しておくと、それらのファイルは補完候補の末尾に現れます。
'@option{wildignore}' オプションには補完候補として表示して欲しくないファイルを指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about all of this here: |cmdline-completion|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドライン補完についての詳細は |cmdline-completion| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*20.4*	Command line history
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{20.4}
@section コマンドライン履歴
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In chapter 3 we briefly mentioned the history.  The basics are that you can
use the <Up> key to recall an older command line.  <Down> then takes you back
to newer commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
履歴については 3 章で簡単に説明しました。簡単に言えば、@key{<Up>} キーで以前に入力した古いコマンドラインを呼び出すことができる機能です。@key{<Down>} で新しい方のコマンドに戻れます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are actually four histories.  The ones we will mention here are for ":"
commands and for "/" and "?" search commands.  The "/" and "?" commands share
the same history, because they are both search commands.  The two other
histories are for expressions and input lines for the input() function.
|cmdline-history|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
履歴には 4 種類あります。ここでは "@command{:}" コマンドと検索コマンド ("@command{/}" or "@command{?}") の履歴を説明します。"@command{/}" と "@command{?}" はどちらも検索コマンドなので、同じ履歴を共有します。他には、式入力と input() 関数の履歴があります。|cmdline-history|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have done a ":set" command, typed ten more colon commands and then
want to repeat that ":set" command again.  You could press ":" and then ten
times <Up>.  There is a quicker way: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、"@command{:set}" コマンドを実行した後で、他のコマンドを 10 個実行し、再び "@command{:set}" コマンドを実行したいとします。"@command{:}" を押してから @key{<Up>} を 10 回押せばできますが、もっと簡単な方法があります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:se<Up>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:se<Up>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will now go back to the previous command that started with "se".  You have
a good chance that this is the ":set" command you were looking for.  At least
you should not have to press <Up> very often (unless ":set" commands is all
you have done).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以前使った "se" で始まるコマンドに戻ります。これなら探していた "@command{:set}" コマンドに効率良くたどり着けるでしょう。少なくとも、何度も何度も @key{<Up>} を押す必要はありません (入力したすべてのコマンドが "@command{:set}" コマンドでもない限り)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <Up> key will use the text typed so far and compare it with the lines in
the history.  Only matching lines will be used.
   If you do not find the line you were looking for, use <Down> to go back to
what you typed and correct that.  Or use CTRL-U to start all over again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Up>} キーを押すと、入力されたテキストと履歴のコマンドラインが比較され、マッチした履歴だけが使われます。
探していた履歴が見つからなかった場合は、@key{<Down>} で元に戻ってから正しく入力し直すか、@kbd{CTRL-U} を押して最初からやり直してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see all the lines in the history: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
履歴をすべて見るには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:history
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:history
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That's the history of ":" commands.  The search history is displayed with this
command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:}" コマンドの履歴が表示されます。検索コマンドの履歴を表示するには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:history /
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:history /
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-P will work like <Up>, except that it doesn't matter what you already
typed.  Similarly for CTRL-N and <Down>.  CTRL-P stands for previous, CTRL-N
for next.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Up>} の代わりに @kbd{CTRL-P} を使うこともできますが、@kbd{CTRL-P} の前に入力されていたテキストは無視されます。同様に、@key{<Down>} の代わりに @kbd{CTRL-N} を使うこともできます。@kbd{CTRL-P} は previous (前)、@kbd{CTRL-N} は next (次) という意味です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*20.5*	Command line window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{20.5}
@section コマンドラインウィンドウ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Typing the text in the command line works different from typing text in Insert
mode.  It doesn't allow many commands to change the text.  For most commands
that's OK, but sometimes you have to type a complicated command.  That's where
the command line window is useful.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインでの文字入力は挿入モードでの文字入力とは違います。テキストを編集するための多くのコマンドが使えません。通常のコマンドライン入力ではそれほど問題になりませんが、複雑なコマンドを入力しなければならないときもあるでしょう。そのようなときは、コマンドラインウィンドウが便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Open the command line window with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでコマンドラインウィンドウを開いてください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	q:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
q:
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim now opens a (small) window at the bottom.  It contains the command line
history, and an empty line at the end:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
画面の下の方に (小さな) ウィンドウが作成されます。ウィンドウにはコマンドライン履歴が表示され、最終行には空行があります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------------+
	|other window			      |
	|~				      |
	|file.txt=============================|
	|:e c				      |
	|:e config.h.in			      |
	|:set path=.,/usr/include,,	      |
	|:set iskeyword=@,48-57,_,192-255     |
	|:set is			      |
	|:q				      |
	|:				      |
	|command-line=========================|
	|				      |
	+-------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------------+
|other window                         |
|~                                    |
|file.txt=============================|
|:e c                                 |
|:e config.h.in                       |
|:set path=.,/usr/include,,           |
|:set iskeyword=@,48-57,_,192-255     |
|:set is                              |
|:q                                   |
|:                                    |
|command-line=========================|
|                                     |
+-------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You are now in Normal mode.  You can use the "hjkl" keys to move around.  For
example, move up with "5k" to the ":e config.h.in" line.  Type "$h" to go to
the "i" of "in" and type "cwout".  Now you have changed the line to:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを開いた後はノーマルモードになっています。"hjkl" キーで移動できます。例えば、"5k" を入力し、":e config.h.in" の行に移動します。"$h" で "in" の "i"に移動し "cwout" と入力します。行が次のように変更されました:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:e config.h.out ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:e config.h.out
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now press <Enter> and this command will be executed.  The command line window
will close.
   The <Enter> command will execute the line under the cursor.  It doesn't
matter whether Vim is in Insert mode or in Normal mode.
   Changes in the command line window are lost.  They do not result in the
history to be changed.  Except that the command you execute will be added to
the end of the history, like with all executed commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Enter>} を押すとこのコマンドが実行され、コマンドラインウィンドウが閉じます。@key{<Enter>} コマンドで現在行が実行されます。挿入モードでもノーマルモードでも同じ動作です。
コマンドラインウィンドウでの編集は失われます。つまり、コマンドライン履歴は変更されません。ただし、実行したコマンドは、通常どおり、履歴に追加されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The command line window is very useful when you want to have overview of the
history, lookup a similar command, change it a bit and execute it.  A search
command can be used to find something.
   In the previous example the "?config" search command could have been used
to find the previous command that contains "config".  It's a bit strange,
because you are using a command line to search in the command line window.
While typing that search command you can't open another command line window,
there can be only one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインウィンドウは、実行したいコマンドに似たコマンドを履歴の一覧から探し、それをちょっと変更して再実行するような場合に便利です。コマンドラインウィンドウでは検索コマンドも使えます。

上の例の場合なら、"@command{?config}" という検索コマンドを実行すれば、以前に実行した "config" を含んでいるコマンドを探せます。これは少し不思議ですね。コマンドラインを使ってコマンドラインウィンドウの中を検索しているのですから。しかし、検索コマンドを入力するための新たなコマンドラインウィンドウを作成することはできません。コマンドラインウィンドウは常に一つだけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_21.txt|  Go away and come back

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
