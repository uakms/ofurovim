@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_42.txt, usr_43.txt, usr_41.txt, 目次
@unnumbered 新しいメニューを追加する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_42.txt*	For Vim version 8.0.  Last change: 2008 May 05

		     VIM USER MANUAL - by Bram Moolenaar

			      Add new menus
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_42.txt
@verbatim
*usr_42.txt*	For Vim バージョン 8.0.  Last change: 2008 May 05

		     VIM USER MANUAL - by Bram Moolenaar

			   新しいメニューを追加する
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
By now you know that Vim is very flexible.  This includes the menus used in
the GUI.  You can define your own menu entries to make certain commands easily
accessible.  This is for mouse-happy users only.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の柔軟性については既にご存知だと思います。それは GUI のメニューにおいても同じです。自分でメニューを追加して、コマンドの実行を簡単にすることができます。この章はマウスをよく使うユーザー向けです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|42.1|	Introduction
|42.2|	Menu commands
|42.3|	Various
|42.4|	Toolbar and popup menus

     Next chapter: |usr_43.txt|  Using filetypes
 Previous chapter: |usr_41.txt|  Write a Vim script
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{42.1, , 42.1}| @tab はじめに
@item |@ref{42.2, , 42.2}| @tab メニューコマンド
@item |@ref{42.3, , 42.3}| @tab その他いろいろ
@item |@ref{42.4, , 42.4}| @tab ツールバーとポップアップメニュー
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*42.1*	Introduction
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{42.1}
@section はじめに
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The menus that Vim uses are defined in the file "$VIMRUNTIME/menu.vim".  If
you want to write your own menus, you might first want to look through that
file.
   To define a menu item, use the ":menu" command.  The basic form of this
command is as follows: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のメニューは "$VIMRUNTIME/menu.vim" で定義されています。自分のメニューを作りたい場合は、そのファイルにざっと目を通してみてください。

メニューを定義するには "@command{:menu}" コマンドを使います。基本的な書式は次のとおり:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:menu {menu-item} {keys}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:menu @{menu-item@} @{keys@}
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The {menu-item} describes where on the menu to put the item.  A typical
{menu-item} is "File.Save", which represents the item "Save" under the
"File" menu.  A dot is used to separate the names.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{menu-item@} にはメニューの場所を指定します。例えば @{menu-item@} が "File.Save" なら、"File" メニューの下の "Save" 項目を示します。ドットで名前を区切ります。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:menu File.Save  :update<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:menu File.Save  :update<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":update" command writes the file when it was modified.
   You can add another level: "Edit.Settings.Shiftwidth" defines a submenu
"Settings" under the "Edit" menu, with an item "Shiftwidth".  You could use
even deeper levels.  Don't use this too much, you need to move the mouse quite
a bit to use such an item.
   The ":menu" command is very similar to the ":map" command: the left side
specifies how the item is triggered and the right hand side defines the
characters that are executed.  {keys} are characters, they are used just like
you would have typed them.  Thus in Insert mode, when {keys} is plain text,
that text is inserted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:update}" コマンドは、ファイルが変更されていればそれを保存するコマンドです。

階層を深くすることもできます。"Edit.Settings.Shiftwidth" なら、"Edit" メニューの下の "Settings" サブメニューの下の "Shiftwidth" 項目を示します。さらに深くすることもできます。メニューが深くなりすぎるとマウスをたくさん動かさなければならなくなるので注意してください。

"@command{:menu}" コマンドは "@command{:map}" コマンドとよく似ています。パラーメーターの左側でコマンドの実行方法を指定し、右側で実行されるコマンドを指定します。@{keys@} は文字列で、それが実際に入力されたかのように使われます。つまり、挿入モードでは @{keys@} の文字列がそのまま挿入されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
ACCELERATORS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec キーボードアクセラレータ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ampersand character (&) is used to indicate an accelerator.  For instance,
you can use Alt-F to select "File" and S to select "Save".  (The 'winaltkeys'
option may disable this though!).  Therefore, the {menu-item} looks like
"&File.&Save".  The accelerator characters will be underlined in the menu.
   You must take care that each key is used only once in each menu.  Otherwise
you will not know which of the two will actually be used.  Vim doesn't warn
you for this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アンパサンド文字 (@samp{&}) はアクセラレータを示すために使われます。例えば、@kbd{Alt-F} で "File" を選択し、そして @samp{S} で "Save" を選択できます。 ('@option{winaltkeys}' オプションの設定によって無効になっている可能性もあります)。その場合、@{menu-item@} は "&File.&Save" のようになります。

アクセラレータ文字は下線付きで表示されますそれぞれのキーは各メニューの中で一度だけしか使わないようにしてください。そうしないと、どちらが実行されるのかわからなくなります。これについて Vim は警告は発しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
PRIORITIES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 並び順
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The actual definition of the File.Save menu item is as follows: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"File.Save" メニューの実際の定義は次のようになっています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:menu 10.340 &File.&Save<Tab>:w  :confirm w<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:menu 10.340 &File.&Save<Tab>:w  :confirm w<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The number 10.340 is called the priority number.  It is used by the editor to
decide where it places the menu item.  The first number (10) indicates the
position on the menu bar.  Lower numbered menus are positioned to the left,
higher numbers to the right.
   These are the priorities used for the standard menus:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
10.340 という数値は順位番号です。これはメニュー項目の位置を決定するために使われます。最初の番号 (10) はメニューバーにおける位置を示します。数字が小さいほど左側に配置され、大きいほど右側に配置されます。

標準メニューでは次の順位番号が使われています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	  10	20     40     50      60       70		9999

	+------------------------------------------------------------+
	| File	Edit  Tools  Syntax  Buffers  Window		Help |
	+------------------------------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
日本語環境
  10       20     40       50         60       70            9999
+-----------------------------------------------------------------+
| ファイル 編集 ツール シンタックス バッファ ウィンドウ    ヘルプ |
+-----------------------------------------------------------------+

英語環境
  10    20     40     50      60       70               9999
+------------------------------------------------------------+
| File  Edit  Tools  Syntax  Buffers  Window            Help |
+------------------------------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice that the Help menu is given a very high number, to make it appear on
the far right.
   The second number (340) determines the location of the item within the
pull-down menu.  Lower numbers go on top, higher number on the bottom.  These
are the priorities in the File menu:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプメニューには大きな番号が与えられ、右端に表示されるようになっています。

2 番目の数字 (340) はプルダウンメニューにおける位置を示します。数字が小さいほど上に配置され、大きいほど下に配置されます。ファイルメニューの順位番号を以下に示します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			+-----------------+
	    10.310	|Open...	  |
	    10.320	|Split-Open...	  |
	    10.325	|New		  |
	    10.330	|Close		  |
	    10.335	|---------------- |
	    10.340	|Save		  |
	    10.350	|Save As...	  |
	    10.400	|---------------- |
	    10.410	|Split Diff with  |
	    10.420	|Split Patched By |
	    10.500	|---------------- |
	    10.510	|Print		  |
	    10.600	|---------------- |
	    10.610	|Save-Exit	  |
	    10.620	|Exit		  |
			+-----------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
                日本語環境                英語環境
            +-------------------+    +-----------------+
10.310      |開く...            |    |Open...          |
10.320      |分割して開く...    |    |Split-Open...    |
10.325      |新規作成           |    |New              |
10.330      |閉じる             |    |Close            |
10.335      |------------------ |    |---------------- |
10.340      |保存               |    |Save             |
10.350      |名前を付けて保存...|    |Save As...       |
10.400      |------------------ |    |---------------- |
10.410      |差分表示...        |    |Split Diff with  |
10.420      |パッチ結果を表示...|    |Split Patched By |
10.500      |------------------ |    |---------------- |
10.510      |印刷               |    |Print            |
10.600      |------------------ |    |---------------- |
10.610      |保存して終了       |    |Save-Exit        |
10.620      |終了               |    |Exit             |
            +-------------------+    +-----------------+
@end verbatim

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice that there is room in between the numbers.  This is where you can
insert your own items, if you really want to (it's often better to leave the
standard menus alone and add a new menu for your own items).
   When you create a submenu, you can add another ".number" to the priority.
Thus each name in {menu-item} has its priority number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それぞれの番号の間には少し余裕があるので、必要なら、そこにメニューを追加することができます (ただし、標準メニューに手を加えるより、新しいメニューを追加したほうがよいでしょう)。

サブメニューを作るときは、さらに ".number" を追加することができます。つまり、@{menu-item@} のそれぞれの名前が順位番号を持ちます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SPECIAL CHARACTERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 特殊文字
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The {menu-item} in this example is "&File.&Save<Tab>:w".  This brings up an
important point: {menu-item} must be one word.  If you want to put a dot,
space or tabs in the name, you either use the <> notation (<Space> and <Tab>,
for instance) or use the backslash (\) escape. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例では、@{menu-item@} に "&File.&Save<Tab>:w" が指定されていました。これは重要なポイントです。@{menu-item@} は一つの単語でなければなりません。ドット、スペース、タブなどを使いたい場合は <> 表記 (<Space>や<Tab>など) を使うか、バックスラッシュ (\) でエスケープする必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:menu 10.305 &File.&Do\ It\.\.\. :exit<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:menu 10.305 &File.&Do\ It\.\.\. :exit<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this example, the name of the menu item "Do It..." contains a space and the
command is ":exit<CR>".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは、メニュー項目の名前が "Do It..." (空白が含まれてます)、実行されるコマンドは ":exit<CR>" になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <Tab> character in a menu name is used to separate the part that defines
the menu name from the part that gives a hint to the user.  The part after the
<Tab> is displayed right aligned in the menu.  In the File.Save menu the name
used is "&File.&Save<Tab>:w".  Thus the menu name is "File.Save" and the hint
is ":w".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの名前は <Tab> 文字を使って、名前の部分とヒント情報の部分を区切ることができます。<Tab> より後ろの部分は右寄せされて表示されます。File.Save では "&File.&Save<Tab>:w" という名前が使われていました。これは "File.Save" という名前と ":w" というヒント情報です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SEPARATORS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec セパレータ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The separator lines, used to group related menu items together, can be defined
by using a name that starts and ends in a '-'.  For example "-sep-".  When
using several separators the names must be different.  Otherwise the names
don't matter.
   The command from a separator will never be executed, but you have to define
one anyway.  A single colon will do.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
セパレータは、関連した項目をグループ化するのに使います。これは例えば "-sep-" のように名前の最初と最後に "-" を付けることで定義できます。複数のセパレータを使う場合はそれぞれ別の名前を付けてください。名前自体に意味はありません。
セパレータに設定されたコマンドが実行されることはありませんが、その定義は必要です。":" を書いておいてください。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu 20.510 Edit.-sep3- :
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu 20.510 Edit.-sep3- :
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*42.2*	Menu commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{42.2}
@section メニューコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can define menu items that exist for only certain modes.  This works just
like the variations on the ":map" command:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューはモード別に定義できます。メニュー項目は対応するモードでのみ使えます。":map" コマンドのバリエーションと同じようなものです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:menu		Normal, Visual and Operator-pending mode
	:nmenu		Normal mode
	:vmenu		Visual mode
	:omenu		Operator-pending mode
	:menu!		Insert and Command-line mode
	:imenu		Insert mode
	:cmenu		Command-line mode
	:amenu		All modes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item @command{:menu} @tab ノーマルモード、ビジュアルモード、オペレータ待機モード
@item @command{:nmenu} @tab ノーマルモード
@item @command{:vmenu} @tab ビジュアルモード
@item @command{:omenu} @tab オペレータ待機モード
@item @command{:menu!} @tab 挿入モード、コマンドライン
@item @command{:imenu} @tab 挿入モード
@item @command{:cmenu} @tab コマンドラインモード
@item @command{:amenu} @tab すべてのモード
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To avoid that the commands of a menu item are being mapped, use the command
":noremenu", ":nnoremenu", ":anoremenu", etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニュー項目が再マップされないようにするには、"@command{:noremenu}", "@command{:nnoremenu}", "@command{:anoremenu}" などを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING :AMENU
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec :amenu の使い方
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":amenu" command is a bit different.  It assumes that the {keys} you
give are to be executed in Normal mode.  When Vim is in Visual or Insert mode
when the menu is used, Vim first has to go back to Normal mode.  ":amenu"
inserts a CTRL-C or CTRL-O for you.  For example, if you use this command:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:amenu}" コマンドは少し特殊です。@{keys@} に指定した文字列はノーマルモードで実行するものとして扱われます。ビジュアルモードや挿入モードでメニューが使われた場合は、実行の前にノーマルモードに戻らなければならないので、@kbd{CTRL-C} や @kbd{CTRL-O} が挿入されます。例えば、次のコマンドを使うと:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:amenu  90.100 Mine.Find\ Word  *
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu  90.100 Mine.Find\ Word  *
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then the resulting menu commands will be:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューのコマンドは次のように定義されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Normal mode:		*
	Visual mode:		CTRL-C *
	Operator-pending mode:	CTRL-C *
	Insert mode:		CTRL-O *
	Command-line mode:	CTRL-C *
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .75 .25
@item ノーマルモード: @tab *
@item ビジュアルモード: @tab @kbd{CTRL-C} *
@item オペレータ待機モード: @tab @kbd{CTRL-C} *
@item 挿入モード: @tab @kbd{CTRL-O} *
@item コマンドラインモード: @tab @kbd{CTRL-C} *
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When in Command-line mode the CTRL-C will abandon the command typed so far.
In Visual and Operator-pending mode CTRL-C will stop the mode.  The CTRL-O in
Insert mode will execute the command and then return to Insert mode.
   CTRL-O only works for one command.  If you need to use two or more
commands, put them in a function and call that function.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインモードでは、入力途中のコマンドが @kbd{CTRL-C} によって破棄されます。ビジュアルモードとオペレータ待機モードでは、@kbd{CTRL-C} によってモードが停止します。挿入モードでは、@kbd{CTRL-O} を使ってコマンドを実行してから挿入モードに戻ります。

@kbd{CTRL-O} は 1 つのコマンドに対してのみ機能します。複数のコマンドを実行したい場合は、それらを関数に入れて、その関数を呼んでください。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu  Mine.Next\ File  :call <SID>NextFile()<CR>
	:function <SID>NextFile()
	:  next
	:  1/^Code
	:endfunction
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:amenu  Mine.Next\ File  :call <SID>NextFile()<CR>
:function <SID>NextFile()
:  next
:  1/^Code
:endfunction
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This menu entry goes to the next file in the argument list with ":next".  Then
it searches for the line that starts with "Code".
   The <SID> before the function name is the script ID.  This makes the
function local to the current Vim script file.  This avoids problems when a
function with the same name is defined in another script file.  See |<SID>|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このメニュー項目は、"@command{:next}" で引数リストの次のファイルに移動し、"Code" で始まる行を検索します。

関数名の前にある <SID> はスクリプトIDです。関数がスクリプトの中に限定されるようになります。複数のスクリプトファイルで関数の名前が重複してしまう問題を避けることができます。|@ref{<SID>, , <SID>}| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SILENT MENUS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec サイレントメニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The menu executes the {keys} as if you typed them.  For a ":" command this
means you will see the command being echoed on the command line.  If it's a
long command, the hit-Enter prompt will appear.  That can be very annoying!
   To avoid this, make the menu silent.  This is done with the <silent>
argument.  For example, take the call to NextFile() in the previous example.
When you use this menu, you will see this on the command line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューは @{keys@} を実際に入力したかのように実行されます。":" コマンドであればコマンドラインにエコーされたコマンドが表示されます。そのコマンドが長ければ、hit-Enter プロンプトが表示されます。そんなのはうっとうしいですよね。

これはメニューをサイレントにすることで解決できます。それには <silent> 引数を指定します。例えば、上の例の NextFile() を呼び出してみます。メニューを実行すると、コマンドラインには次のような表示がでます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:call <SNR>34_NextFile() ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:call <SNR>34_NextFile()
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To avoid this text on the command line, insert "<silent>" as the first
argument: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このような表示をなくすには、最初の引数として "<silent>" を指定します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu <silent> Mine.Next\ File :call <SID>NextFile()<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu <silent> Mine.Next\ File :call <SID>NextFile()<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Don't use "<silent>" too often.  It is not needed for short commands.  If you
make a menu for someone else, being able the see the executed command will
give him a hint about what he could have typed, instead of using the mouse.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"<silent>" の使いすぎに注意してください。コマンドが短いならそれは必要ありません。誰かのためにメニューを作る場合、実行されたコマンドが表示されるようになっていれば、マウスを使わない場合はどのように入力すればいいかのヒントになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LISTING MENUS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メニューの一覧
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a menu command is used without a {keys} part, it lists the already
defined menus.  You can specify a {menu-item}, or part of it, to list specific
menus.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{keys@} を指定せずに menu コマンドを使うと、定義されたメニューの一覧を表示できます。@{menu-item@} やその一部を指定することで、特定の項目だけを表示できます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This lists all menus.  That's a long list!  Better specify the name of a menu
to get a shorter list: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべてのメニューが表示されます。とっても長い一覧が表示されます。メニューの名前を指定して短い一覧を表示したほうがいいでしょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu Edit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu Edit
:amenu 編集(E)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This lists only the "Edit" menu items for all modes.  To list only one
specific menu item for Insert mode: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべてのモードの "Edit" メニューの項目だけが表示されます。挿入モードのメニュー項目を 1 つだけ表示するには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:imenu Edit.Undo
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:imenu Edit.Undo
:imenu 編集(E).取り消す(U)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Take care that you type exactly the right name.  Case matters here.  But the
'&' for accelerators can be omitted.  The <Tab> and what comes after it can be
left out as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
名前は正しく指定する必要があります。大文字と小文字は区別されます。ただし、アクセラレータ指定のための '&' は省略できます。<Tab> と、その後に続く文字列も同様に省略できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DELETING MENUS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メニューの削除
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To delete a menu, the same command is used as for listing, but with "menu"
changed to "unmenu".  Thus ":menu" becomes, ":unmenu", ":nmenu" becomes
":nunmenu", etc.  To delete the "Tools.Make" item for Insert mode: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューを削除するには一覧表示と同じようなコマンドを使います。ただし、"menu" ではなく "unmenu" を使います。"@command{:menu}" は "@command{:unmenu}" になり、"@command{:nmenu}" は "@command{:nunmenu}" になります。挿入モードの "Tools.Make" を削除するには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:iunmenu Tools.Make
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:iunmenu Tools.Make
:iunmenu ツール(T).メイク(M)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can delete a whole menu, with all its items, by using the menu name.
Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの名前を指定すると、その中の項目もすべて削除されます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:aunmenu Syntax
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:aunmenu Syntax
:aunmenu シンタックス(S)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This deletes the Syntax menu and all the items in it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シンタックスメニューとその中の項目がすべて削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*42.3*	Various
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{42.3}
@section その他いろいろ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can change the appearance of the menus with flags in 'guioptions'.  In the
default value they are all included, except "M".  You can remove a flag with a
command like: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{guioptions}' のフラグを設定することでメニューの表示を変更できます。初期設定では以下の "@var{M}" 以外のすべてのフラグが設定されています。フラグは次のようなコマンドで外すことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set guioptions-=m
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set guioptions-=m
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	m		When removed the menubar is not displayed.

	M		When added the default menus are not loaded.

	g		When removed the inactive menu items are not made grey
			but are completely removed.  (Does not work on all
			systems.)

	t		When removed the tearoff feature is not enabled.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item m @tab 外すとメニューバーが非表示になります。
@item
@item M @tab 追加すると標準メニューがロードされなくなります。
@item
@item g @tab 外すと非アクティブなメニュー項目は灰色表示にはならず非表示になります。(そうならないシステムもあります。)
@item
@item t @tab 外すとティアオフ機能が無効になります。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The dotted line at the top of a menu is not a separator line.  When you select
this item, the menu is "teared-off": It is displayed in a separate window.
This is called a tearoff menu.  This is useful when you use the same menu
often.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの一番上に表示される点線はセパレータではありません。その項目を選択すると、メニューは "ティアオフ(切り離し)"、つまり別ウィンドウで表示されます。これをティアオフメニューと呼びます。同じメニュー項目を頻繁に使う場合に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For translating menu items, see |:menutrans|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニュー項目の翻訳については |@ref{:menutrans, , :menutrans}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since the mouse has to be used to select a menu item, it is a good idea to use
the ":browse" command for selecting a file.  And ":confirm" to get a dialog
instead of an error message, e.g., when the current buffer contains changes.
These two can be combined: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューはマウスで選択するものなので、"@command{:browse}" コマンドを使って、ファイルを選択できるようにすると便利です。また、"@command{:confirm}" を使って、エラーメッセージの代わりにダイアログを表示するのもいいでしょう (例えばカレントバッファに変更がある状態で何かをする場合など)。この 2 つのコマンドは同時に使用できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:amenu File.Open  :browse confirm edit<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:amenu File.Open  :browse confirm edit<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":browse" makes a file browser appear to select the file to edit.  The
":confirm" will pop up a dialog when the current buffer has changes.  You can
then select to save the changes, throw them away or cancel the command.
   For more complicated items, the confirm() and inputdialog() functions can
be used.  The default menus contain a few examples.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@option{:browse}" を使うと、開くファイルを選択するためのファイルブラウザーが表示されます。"@option{:confirm}" を使うと、カレントバッファに変更があった場合にポップアップダイアログが表示され、それを保存するか、破棄するか、コマンドをキャンセルするかを選択できます。

confirm() 関数や inputdialog() 関数を使ってもっと複雑な処理をすることもできます。標準メニューにいくつか例があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*42.4*	Toolbar and popup menus
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{42.4}
@section ツールバーとポップアップメニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are two special menus: ToolBar and PopUp.  Items that start with these
names do not appear in the normal menu bar.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特殊なメニューが二つあります。ToolBar (ツールバー) と PopUp (ポップアップ) です。これらの名前で始まるメニュー項目はメニューバーに表示されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
TOOLBAR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ツールバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The toolbar appears only when the "T" flag is included in the 'guioptions'
option.
   The toolbar uses icons rather than text to represent the command.  For
example, the {menu-item} named "ToolBar.New" causes the "New" icon to appear
on the toolbar.
   The Vim editor has 28 built-in icons.  You can find a table here:
|builtin-tools|.  Most of them are used in the default toolbar.  You can
redefine what these items do (after the default menus are setup).
   You can add another bitmap for a toolbar item.  Or define a new toolbar
item with a bitmap.  For example, define a new toolbar item with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールバーは '@option{guioptions}' オプションに "T" フラグが含まれている場合のみ表示されます。

ツールバーではテキストの代わりにアイコンが表示されます。例えば、"ToolBar.New" という @{menu-item@} はツールバーの "New" アイコンとして表示されます。

Vim には 28 個のアイコンが組み込まれています。その一覧は |@ref{builtin-tools, , builtin-tools}| にあります。ほとんどのアイコンは標準ツールバーで使われています。それらの項目の動作は変更可能です (標準メニューの初期化後に変更できます)。

標準アイコン以外の画像を使ったり、新しい項目を追加することもできます。例えば、次のコマンドで新しい項目を追加できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:tmenu ToolBar.Compile  Compile the current file
	:amenu ToolBar.Compile  :!cc %:S -o %:r:S<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tmenu ToolBar.Compile  Compile the current file
:amenu ToolBar.Compile  :!cc %:S -o %:r:S<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you need to create the icon.  For MS-Windows it must be in bitmap format,
with the name "Compile.bmp".  For Unix XPM format is used, the file name is
"Compile.xpm".  The size must be 18 by 18 pixels.  On MS-Windows other sizes
can be used as well, but it will look ugly.
   Put the bitmap in the directory "bitmaps" in one of the directories from
'runtimepath'.  E.g., for Unix "~/.vim/bitmaps/Compile.xpm".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アイコンは別途作成する必要があります。MS-Windows では "Compile.bmp" という名前の bitmap 形式の画像を使います。Unix では "Compile.xpm" という名前の XPM 形式の画像を使います。サイズは 18x18 ドットにしてください。MS-Windows では他のサイズでも構いませんが、きれいには表示されません。

画像は、'@option{runtimepath}' の "bitmaps" ディレクトリに入れてください。例えば、Unix なら "~/.vim/bitmaps/Compile.xpm" などです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can define tooltips for the items in the toolbar.  A tooltip is a short
text that explains what a toolbar item will do.  For example "Open file".  It
appears when the mouse pointer is on the item, without moving for a moment.
This is very useful if the meaning of the picture isn't that obvious.
Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールバーの各項目にはツールチップを設定できます。ツールチップとは、機能を説明するための短いテキストです。例えば "ファイルを開く" といったものです。項目の上にマウスポインタを置いてしばらく待つと表示されます。画像だけではどのような機能かわからない場合に便利です。
例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:tmenu ToolBar.Make  Run make in the current directory
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tmenu ToolBar.Make  Run make in the current directory
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note:
	Pay attention to the case used.  "Toolbar" and "toolbar" are different
	from "ToolBar"!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
大文字/小文字に注意してください。"Toolbar" と "toolbar" はどちらも "ToolBar" とは区別されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To remove a tooltip, use the |:tunmenu| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールチップを削除するには |@ref{:tunmenu, , :tunmenu}| コマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'toolbar' option can be used to display text instead of a bitmap, or both
text and a bitmap.  Most people use just the bitmap, since the text takes
quite a bit of space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{toolbar}' オプションを設定すると、画像の代わりに文字列を表示したり、文字列と画像の両方を表示したりできます。テキストの表示は場所を取るので、ほとんどの人は画像だけを表示しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP MENU
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ポップアップメニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The popup menu pops up where the mouse pointer is.  On MS-Windows you activate
it by clicking the right mouse button.  Then you can select an item with the
left mouse button.  On Unix the popup menu is used by pressing and holding the
right mouse button.
   The popup menu only appears when the 'mousemodel' has been set to "popup"
or "popup_setpos".  The difference between the two is that "popup_setpos"
moves the cursor to the mouse pointer position.  When clicking inside a
selection, the selection will be used unmodified.  When there is a selection
but you click outside of it, the selection is removed.
   There is a separate popup menu for each mode.  Thus there are never grey
items like in the normal menus.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップメニューはマウスポインタのある場所に表示されるメニューです。MS-Windows ではマウスの右クリックで表示し、左クリックで項目を選択します。Unix では右ボタンを押したままにして使います。

ポップアップメニューは '@option{mousemodel}' が "@var{popup}" か "@var{popup_setpos}" のどちらかに設定されている場合にだけ表示されます。両者の違いは、"@var{popup_setpos}" ならマウスポインタの場所にカーソルが移動するという点です。選択中のテキストをクリックした場合はその選択範囲は変更されずにそのまま使われます。テキストの選択中に他の場所をクリックした場合は選択が解除されます。

ポップアップメニューはモード別になっています。普通のメニューのように、他のモードの項目が灰色表示されるということはありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
What is the meaning of life, the universe and everything?  *42*
Douglas Adams, the only person who knew what this question really was about is
now dead, unfortunately.  So now you might wonder what the meaning of death
is...
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{42}
@cindex 42
生命、宇宙、その他もろもろの答えは？
この問の真意を知っていた唯一の人物、ダグラス・アダムズは残念ながら他界しました。それで死の答えはなんなんだろう...
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_43.txt|  Using filetypes

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
