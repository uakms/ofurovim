@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node pi_logipat.txt, , , 目次
@unnumbered パターンにおける論理演算子
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*pi_logipat.txt*	Logical Patterns			Jun 22, 2015

Author:  Charles E. Campbell  <NdrOchip@ScampbellPfamily.AbizM>
Copyright: (c) 2004-2015 by Charles E. Campbell	*logiPat-copyright*
           The VIM LICENSE applies to LogiPat.vim and LogiPat.txt
           (see |copyright|) except use "LogiPat" instead of "Vim"
	   No warranty, express or implied.  Use At-Your-Own-Risk.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*pi_logipat.txt*        論理パターン                    Jun 22, 2015

Author:  Charles E. Campbell  <NdrOchip@ScampbellPfamily.AbizM>
Copyright: (c) 2004-2015 by Charles E. Campbell *logiPat-copyright*
           The VIM LICENSE applies to LogiPat.vim and LogiPat.txt
           (see |copyright|) except use "LogiPat" instead of "Vim"
           No warranty, express or implied.  Use At-Your-Own-Risk.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Contents					*logiPat* *logiPat-contents*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat}
@anchor{logiPat-contents}
@cindex logiPat
@cindex logiPat-contents
@section 1. 目次
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	1. Contents.................: |logiPat-contents|
	2. LogiPat Manual...........: |logiPat-manual|
	3. LogiPat Examples.........: |logiPat-examples|
	4. Caveat...................: |logiPat-caveat|
	5. LogiPat History..........: |logiPat-history|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. 目次 @tab |@ref{logiPat-contents}|
@item 2. LogiPat マニュアル @tab |@ref{logiPat-manual}|
@item 3. LogiPat 使用例 @tab |@ref{logiPat-examples}|
@item 4. 注意 @tab  |@ref{logiPat-caveat}|
@item 5. LogiPat 変更履歴 @tab |@ref{logiPat-history}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
2. LogiPat Manual			*logiPat-manual* *logiPat-man*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat-manual}
@anchor{logiPat-man}
@cindex logiPat-manual
@cindex logiPat-man
@section 2. LogiPat マニュアル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	*logiPat-arg* *logiPat-input* *logiPat-pattern* *logiPat-operators*
	Boolean logic patterns are composed of
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat-arg}
@anchor{logiPat-input}
@anchor{logiPat-pattern}
@anchor{logiPat-operators}
@cindex logiPat-arg
@cindex logiPat-input
@cindex logiPat-pattern
@cindex logiPat-operators
Boolean logic pattern (論理集合演算パターン) は以下によって構成される
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			operators  ! = not
			           | = logical-or
			           & = logical-and
			grouping   ( ... )
			patterns   "pattern"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item オペレータ @tab ! = 否定
@item @tab | = 論理和
@item @tab & = 論理積
@item グルーピング @tab ( ... )
@item パターン @tab "pattern"
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:LogiPat {boolean-logic pattern}		*:LogiPat*
		:LogiPat is a command which takes a boolean-logic
		argument (|logiPat-arg|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:LogiPat}
@cindex :LogiPat
@item :LogiPat @{boolean-logic pattern@}
:LogiPat は論理集合演算を引数に取るコマンドです (|@ref{logiPat-arg}|)。

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:LP {boolean-logic pattern}			*:LP*
		:LP is a shorthand command version of :LogiPat
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:LP}
@cindex :LP
@item :LP @{boolean-logic pattern@}
:LP は :LogiPat の省略形式コマンドです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:LPE {boolean-logic pattern}			*:LPE*
		No search is done, but the conversion from the
		boolean logic pattern to the regular expression
		is performed and echoed onto the display.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:LPE}
@cindex :LPE
@item :LPE @{boolean-logic pattern@}
検索は行いませんが論理集合演算パターンから正規表現への変換を行い画面に表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:LogiPatFlags {search flags}			*LogiPat-flags*
		:LogiPatFlags {search flags}
		LogiPat uses the |search()| command.  The flags
		passed to that call to search() may be specified
		by the :LogiPatFlags command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{LogiPat-flags}
@cindex LogiPat-flags
@item :LogiPatFlags @{search flags@}
LogiPat は |@ref{search()}| コマンドを使用します。search() に指定されるフラグを :LogiPatFlags に渡します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:LPF {search flags}				*:LPF*
		:LPF is a shorthand version of :LogiPatFlags.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:LPF}
@cindex :LPF
@item :LPF @{search flags@}
:LPF は :LogiPatFlags の省略形式です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:let pat=LogiPat({boolean-logic pattern})	*LogiPat()*
		If one calls LogiPat() directly, no search
		is done, but the transformation from the boolean
		logic pattern into a regular expression pattern
		is performed and returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{LogiPat()}
@cindex LogiPat()
@item :let pat=LogiPat(@{boolean-logic pattern@})
LogiPat() を直接呼び出す場合は検索は行いません。しかし論理集合演算パターンから正規表現への変換が行われ返却されます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To get a " inside a pattern, as opposed to having it delimit
	the pattern, double it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パターン内部で " をマッチしたい場合はパターンにデリミタを用いるのではなく2重打ちします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
3. LogiPat Examples					*logiPat-examples*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat-examples}
@cindex logiPat-examples
@section 3. LogiPat 使用例
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	LogiPat takes Boolean logic arguments and produces a regular
	expression which implements the choices.  A series of examples
	follows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
LogiPat は論理集合演算を引数に取り抜き出す為の正規表現を提供します。以下に例を列挙します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat "abc"
<		will search for lines containing the string  :abc:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :LogiPat "abc"
文字列 :abc: を含む行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat "ab""cd"
<		will search for lines containing the string  :ab"c:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :LogiPat "ab""cd"
文字列 :ab"c: を含む行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat !"abc"
<		will search for lines which don't contain the string  :abc:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :LogiPat !"abc"
文字列 :abc: を含まない行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat "abc"|"def"
<		will search for lines which contain either the string
		:abc:  or the string  :def:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :LogiPat "abc"|"def"
文字列 :abc: もしくは :def: のどちらかを含む行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat !("abc"|"def")
<		will search for lines which don't contain either
		of the strings  :abc:  or  :def:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :LogiPat !("abc"|"def")
文字列 :abc: または :def: をどちらも含まない行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:LogiPat "abc"&"def"
<		will search for lines which contain both of the strings
		:abc:  and  :def:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :LogiPat "abc"&"def"
文字列 :abc: と :def: を両方含む行を検索します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:let pat= LogiPat('!"abc"')
<		will return the regular expression which will match
		all lines not containing  :abc: .  The double quotes
		are needed to pass normal patterns to LogiPat, and
		differentiate such patterns from boolean logic
		operators.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :let pat= LogiPat('!"abc"')
文字列 :abc: を含む全ての行にマッチする正規表現を返します。ダブルクォートを通常のパターンとして LogiPat へ渡すには論理集合オペレータと区別する為にネストして渡します。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
4. Caveat						*logiPat-caveat*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat-caveat}
@cindex logiPat-caveat
@section 4. 注意
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "not" operator may be fragile; ie. it may not always play well
	with the & (logical-and) and | (logical-or) operators.  Please try out
	your patterns, possibly with :set hls, to insure that what is matching
	is what you want.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"not" オペレータは脆いかもしれません; つまり + (論理積)と | (論理和)のオペレータと合わせた場合にうまく動作しないのです。期待通りにマッチさせる為にはできれば @command{:set hls} でパターンを良く試して下さい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
3. LogiPat History					*logiPat-history*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{logiPat-history}
@cindex logiPat-history
@section 5. LogiPat 変更履歴
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	v4 Jun 22, 2015 * LogiPat has been picked up by Bram M for standard
			  plugin distribution; hence the name change
	v3 Sep 25, 2006 * LP_Or() fixed; it now encapsulates its output
	                  in \%(...\) parentheses
	   Dec 12, 2011 * |:LPE| added
			* "" is mapped to a single " and left inside patterns
	v2 May 31, 2005	* LPF and LogiPatFlags commands weren't working
	v1 May 23, 2005	* initial release
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
v4 Jun 22, 2015 * LogiPat has been picked up by Bram M for standard
                  plugin distribution; hence the name change
v3 Sep 25, 2006 * LP_Or() fixed; it now encapsulates its output
                  in \%(...\) parentheses
   Dec 12, 2011 * |@ref{:LPE}| added
                * "" is mapped to a single " and left inside patterns
v2 May 31, 2005 * LPF and LogiPatFlags commands weren't working
v1 May 23, 2005 * initial release
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
vim:tw=78:ts=8:ft=help
@end ifset
