@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_02.txt, usr_03.txt, usr_01.txt, 目次
@unnumbered 初めての Vim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_02.txt*	For Vim version 8.0.  Last change: 2017 Mar 14

		     VIM USER MANUAL - by Bram Moolenaar

			    The first steps in Vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_02.txt
@verbatim
*usr_02.txt*	For Vim バージョン 8.0.  Last change: 2017 Mar 14

		     VIM USER MANUAL - by Bram Moolenaar

			    初めての Vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
This chapter provides just enough information to edit a file with Vim.  Not
well or fast, but you can edit.  Take some time to practice with these
commands, they form the base for what follows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この章では、Vim を使ってファイルを編集するための最低限のことを説明します。操作が下手でも遅くても、とにかく編集できるようになりましょう。この章に出てくるコマンドはこれからの基礎になるものなので、少し時間をとって練習してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|02.1|	Running Vim for the First Time
|02.2|	Inserting text
|02.3|	Moving around
|02.4|	Deleting characters
|02.5|	Undo and Redo
|02.6|	Other editing commands
|02.7|	Getting out
|02.8|	Finding help

     Next chapter: |usr_03.txt|  Moving around
 Previous chapter: |usr_01.txt|  About the manuals
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{02.1}| @tab Vim の起動方法
@item |@ref{02.2}| @tab 文字の挿入
@item |@ref{02.3}| @tab カーソル移動
@item |@ref{02.4}| @tab 文字の削除
@item |@ref{02.5}| @tab undo (取り消し) と redo (やり直し)
@item |@ref{02.6}| @tab 他の編集コマンド
@item |@ref{02.7}| @tab Vim の終了
@item |@ref{02.8}| @tab ヘルプの引き方
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.1*	Running Vim for the First Time
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.1}
@section Vim の起動方法
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To start Vim, enter this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動するには次のコマンドを入力します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	gvim file.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
gvim file.txt
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In UNIX you can type this at any command prompt.  If you are running Microsoft
Windows, open an MS-DOS prompt window and enter the command.
   In either case, Vim starts editing a file called file.txt.  Because this
is a new file, you get a blank window. This is what your screen will look
like:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX ならコマンドプロンプトから実行できます。Microsoft Windows 環境では、MS-DOS プロンプトを開いて、入力してください。Vim が起動して "@file{file.txt}" という名前のファイルの編集が開始されます。これは新しいファイルなので、ウィンドウは空になっています。次のような画面が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
		('#" is the cursor position.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|#                                      |
|~                                      |
|~                                      |
|~                                      |
|~                                      |
|"file.txt" [New file]                  |
+---------------------------------------+
     ("#" はカーソルの位置です)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The tilde (~) lines indicate lines not in the file.  In other words, when Vim
runs out of file to display, it displays tilde lines.  At the bottom of the
screen, a message line indicates the file is named file.txt and shows that you
are creating a new file.  The message information is temporary and other
information overwrites it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
チルダ (~) の行は、ファイルにその行がないことを示しています。ファイルの末尾より後ろを表示する場合にチルダが表示されます。画面の下の方に、編集中のファイル名は "@file{file.txt}" で、それが新しいファイルであることが表示されています。このメッセージの表示は一時的なもので、他のメッセージが表示されると消えてしまいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE VIM COMMAND
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec VIM コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The gvim command causes the editor to create a new window for editing.  If you
use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
gvim は編集用のウィンドウを新しく作ります。次のコマンドを使った場合は:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim file.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
vim file.txt
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
the editing occurs inside your command window.  In other words, if you are
running inside an xterm, the editor uses your xterm window.  If you are using
an MS-DOS command prompt window under Microsoft Windows, the editing occurs
inside this window.  The text in the window will look the same for both
versions, but with gvim you have extra features, like a menu bar.  More about
that later.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドウィンドウの中で編集できます。つまり、xterm の中で実行すれば、Vim は xterm ウィンドウを使います。Microsoft Windows の MS-DOS プロンプトを使っている場合も、そのウィンドウの中で編集できます。gvim でも vim でもテキストは同じように表示されますが、gvim にはメニューバーなどの追加機能があります。詳しくは後で述べます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.2*	Inserting text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.2}
@section 文字の挿入
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim editor is a modal editor.  That means that the editor behaves
differently, depending on which mode you are in.  The two basic modes are
called Normal mode and Insert mode.  In Normal mode the characters you type
are commands.  In Insert mode the characters are inserted as text.
   Since you have just started Vim it will be in Normal mode.  To start Insert
mode you type the "i" command (i for Insert).  Then you can enter
the text.  It will be inserted into the file.  Do not worry if you make
mistakes; you can correct them later.  To enter the following programmer's
limerick, this is what you type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はモード型エディタです。モードによって挙動が変わります。一番よく使うモードは「ノーマルモード」と「挿入モード」です。ノーマルモードでは、入力した文字はコマンドとして扱われます。挿入モードでは、入力した文字はそのまま挿入されます。Vim を起動した直後はノーマルモードになっています。

挿入モードに入るには、"@command{i}" コマンドを入力します (訳注: i は Insert の意)。これで、文章を入力できるようになります。入力した文章はファイルに挿入されます。入力を間違えても心配する必要はありません。後から修正できます。プログラマのリメリック (詩の一種) を入力して見ましょう。次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	iA very intelligent turtle
	Found programming UNIX a hurdle
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
iA very intelligent turtle
Found programming UNIX a hurdle
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After typing "turtle" you press the <Enter> key to start a new line.  Finally
you press the <Esc> key to stop Insert mode and go back to Normal mode.  You
now have two lines of text in your Vim window:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@samp{turtle} を入力した後で @key{<Enter>} キーを押して改行します。最後に @key{<Esc>} キーを押して挿入モードを終了し、ノーマルモードに戻ります。このとき、Vim ウィンドウには次のような 2 行が表示されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|A very intelligent turtle              |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|                                       |
+---------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WHAT IS THE MODE?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 今は何モード？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To be able to see what mode you are in, type this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のモードを確認できるようにするには、次のコマンドを入力してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set showmode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set showmode
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will notice that when typing the colon Vim moves the cursor to the last
line of the window.  That's where you type colon commands (commands that start
with a colon).  Finish this command by pressing the <Enter> key (all commands
that start with a colon are finished this way).
   Now, if you type the "i" command Vim will display --INSERT-- at the bottom
of the window.  This indicates you are in Insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@samp{:} (コロン記号) を入力すると、カーソルがウィンドウの最下段に移動します。ここはコロンコマンド ("@command{:}" で始まるコマンド) を入力する場所です。@key{<Enter>} キーを押すとコマンドが実行されます (コロンで始まるコマンドは全てこの方法を使います)。さて、"@command{i}" コマンドを入力すると、ウィンドウの最下段に @samp{-- 挿入 --} という表示が現れます。これは、あなたが挿入モードにいることを示しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|A very intelligent turtle              |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|-- 挿入 --                             |
+---------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you press <Esc> to go back to Normal mode the last line will be made blank.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Esc>} を押すとノーマルモードに戻り、最下段は空白になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GETTING OUT OF TROUBLE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec トラブルを避ける
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One of the problems for Vim novices is mode confusion, which is caused by
forgetting which mode you are in or by accidentally typing a command that
switches modes.  To get back to Normal mode, no matter what mode you are in,
press the <Esc> key.  Sometimes you have to press it twice.  If Vim beeps back
at you, you already are in Normal mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を使い始めたときはモードを混同しがちです。現在のモードを忘れてしまったり、知らないうちに間違ってモードを変更してしまったりすることがあります。どのモードにいる場合でも @key{<Esc>} を押せばノーマルモードに戻れます。@key{<Esc>} を 2 回押さなければならないときもあります。ノーマルモードで @key{<Esc>} を押すとビープ音が鳴るので、その場合は既にノーマルモードにいるということです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.3*	Moving around
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.3}
@section カーソル移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After you return to Normal mode, you can move around by using these keys:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードでは、次のキーを使って移動できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	h   left						*hjkl*
	j   down
	k   up
	l   right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{hjkl}
@cindex hjkl
@verbatim
    h   左
    j   下
    k   上
    l   右
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At first, it may appear that these commands were chosen at random.  After all,
who ever heard of using l for right?  But actually, there is a very good
reason for these choices: Moving the cursor is the most common thing you do in
an editor, and these keys are on the home row of your right hand.  In other
words, these commands are placed where you can type them the fastest
(especially when you type with ten fingers).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初はでたらめなコマンドに思えるかもしれません。@key{l} キーで 右 (right) に移動するなんておかしいですね。しかしこれには合理的な理由があります。エディタで最もよく使うのはカーソル移動であり、これらのキーは右手のホームポジションにあるのです。つまり、(特に 10 本の指を使ってタイプする人が) 最も速く打てる場所にコマンドが配置されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	You can also move the cursor by using the arrow keys.  If you do,
	however, you greatly slow down your editing because to press the arrow
	keys, you must move your hand from the text keys to the arrow keys.
	Considering that you might be doing it hundreds of times an hour, this
	can take a significant amount of time.
	   Also, there are keyboards which do not have arrow keys, or which
	locate them in unusual places; therefore, knowing the use of the hjkl
	keys helps in those situations.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:}@*
カーソルは矢印キーでも移動できます。しかし、ホームポジションから手を離さなければならないので、編集速度は落ちてしまいます。一時間に数百回も移動することを考えると、結構な時間が消費されることになります。また、矢印キーが無いキーボードや、矢印キーの配置場所がおかしいキーボードもあります。@key{h} @key{j} @key{k} @key{l} の使い方を知っていれば、そのような場合でも安心です。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One way to remember these commands is that h is on the left, l is on the
right and j points down.  In a picture: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドを覚えるには、@key{h} は左にあって、@key{l} は右にあって、@key{j} は下を指している、とでも覚えてください。図で示します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		       k
		   h     l
		     j
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
      k
    h   l
      j
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The best way to learn these commands is by using them.  Use the "i" command to
insert some more lines of text.  Then use the hjkl keys to move around and
insert a word somewhere.  Don't forget to press <Esc> to go back to Normal
mode.  The |vimtutor| is also a nice way to learn by doing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
移動コマンドを覚える一番の方法は使ってみることです。"@command{i}" コマンドを使って適当なテキストを入力し、@key{h} @key{j} @key{k} @key{l} キーを使って動き回り、いろんな場所に文字を挿入してみてください。@key{<Esc>} キーを押してノーマルモードに戻るのを忘れずに。|@ref{vimtutor}| を使って練習してみるのもいいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For Japanese users, Hiroshi Iwatani suggested using this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
日本のユーザーへ、Hiroshi Iwatani さんは次のような提案をしています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Yellow river)	    |
			    v
			  Java (the island, not the programming language)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
                Komsomolsk
                    ^
                    |
   Huan Ho      <--- --->  Los Angeles
(Yellow river)      |
                    v
                  Java (ジャワ島。プログラミング言語のあれではない)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.4*	Deleting characters
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.4}
@section 文字の削除
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To delete a character, move the cursor over it and type "x".  (This is a
throwback to the old days of the typewriter, when you deleted things by typing
xxxx over them.)  Move the cursor to the beginning of the first line, for
example, and type xxxxxxx (seven x's) to delete "A very ".  The result should
look like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字を削除したい場合は、文字の上にカーソルを移動して @key{x} を押します。(これはタイプライタを使っていた古い時代に、消したい文字の上に @samp{xxxxxx} と印字していたのと同じ感覚です)。例えば、例文の 1 行目にカーソルを移動して、@kbd{xxxxxxx} (x を 7 つ) 打ち、@samp{A very } を消してみましょう。その結果は次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|intelligent turtle                     |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|                                       |
+---------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can insert new text, for example by typing: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、新しいテキストを挿入してみましょう。例えば次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	iA young <Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
iA young <Esc>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This begins an insert (the i), inserts the words "A young", and then exits
insert mode (the final <Esc>).	The result:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@kbd{i}" で挿入を開始し、@samp{A young } を入力しています。最後に @key{<Esc>} キーを押して挿入モードを抜けます。結果は次のようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|A young intelligent turtle             |
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|                                       |
+---------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DELETING A LINE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 行削除
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To delete a whole line use the "dd" command.  The following line will
then move up to fill the gap:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行全体を消すには "@command{dd}" コマンドを使います。行が消された場所は、それ以降の行を上げることで詰められます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+---------------------------------------+
|Found programming UNIX a hurdle        |
|~                                      |
|~                                      |
|~                                      |
|                                       |
+---------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DELETING A LINE BREAK
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 改行を取る
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vim you can join two lines together, which means that the line break
between them is deleted.  The "J" command does this.
   Take these two lines:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim では複数の行を 1 行にまとめることができます。これは行と行の間にある改行文字を削除するのと同じです。それには "@command{J}" コマンドを使います。

例えば、次の 2 行があるとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A young intelligent ~
	turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A young intelligent
turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move the cursor to the first line and press "J":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初の行にカーソルを動かし "@command{J}" を押すと次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A young intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A young intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.5*	Undo and Redo
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.5}
@section undo (取り消し) と redo (やり直し)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you delete too much.  Well, you can type it in again, but an easier
way exists.  The "u" command undoes the last edit.  Take a look at this in
action: After using "dd" to delete the first line, "u" brings it back.
   Another one: Move the cursor to the A in the first line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
間違ってテキストを削除してしまった場合、同じ内容を入力し直すこともできますが、もっと簡単な方法があります。"@command{u}" コマンドで直前の編集結果を undo (取り消し)できます。例えば、"@command{dd}" コマンドで削除した行を、"@command{u}" コマンドで元に戻せます。

もう 1 つ例を示します。カーソルを 1 行目の @samp{A} に移動して:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A young intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A young intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now type xxxxxxx to delete "A young".  The result is as follows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{xxxxxxx} とタイプし、@samp{A young} を削除します。結果は次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	 intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
 intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Type "u" to undo the last delete.  That delete removed the g, so the undo
restores the character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{u}" で直前の削除が取り消されます。最後に削除されたのは @samp{g} なので、その文字が復活します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	g intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
g intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The next u command restores the next-to-last character deleted:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もう一度 "@command{u}" を実行すると、さらに 1 つ前に削除された文字が復活します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ng intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
ng intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The next u command gives you the u, and so on:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の "@command{u}" コマンドでは @samp{u} が復活し、次々と元に戻すことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
ung intelligent turtle
oung intelligent turtle
young intelligent turtle
 young intelligent turtle
A young intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	If you type "u" twice, and the result is that you get the same text
	back, you have Vim configured to work Vi compatible.  Look here to fix
	this: |not-compatible|.
	   This text assumes you work "The Vim Way".  You might prefer to use
	the good old Vi way, but you will have to watch out for small
	differences in the text then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:}@*
@key{u} を 2 回押したときに、最初の状態に戻ってしまった場合は、Vi 互換モードが設定されています。|@ref{not-compatible}| を参照して正しく設定してください。このマニュアルでは「Vim 方式」の使い方を前提にしています。古き良き時代の Vi 方式を使いたい場合は、細かい部分でマニュアルの説明と違うことがあるので注意してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REDO
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec redo (やり直し)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you undo too many times, you can press CTRL-R (redo) to reverse the
preceding command.  In other words, it undoes the undo.  To see this in
action, press CTRL-R twice.  The character A and the space after it disappear:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
undo し過ぎてしまった場合は、@kbd{CTRL-R} (redo) を押すことで、直前のコマンドを取り消せます。つまり、undo を undo します。実際に 2 回 @kbd{CTRL-R} を押してみましょう。@samp{A } の 2 文字が消えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	young intelligent turtle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
young intelligent turtle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There's a special version of the undo command, the "U" (undo line) command.
The undo line command undoes all the changes made on the last line that was
edited.  Typing this command twice cancels the preceding "U".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{undo} コマンドには特別なバージョン、"@command{U}" (行 @command{undo}) コマンドがあります。行 "@command{undo}" コマンドは直前に編集した行のすべての変更を取り消します。このコマンドは、2 回実行すると、直前の "@command{U}" が取り消されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A very intelligent turtle ~
	  xxxx				Delete very

	A intelligent turtle ~
		      xxxxxx		Delete turtle

	A intelligent ~
					Restore line with "U"
	A very intelligent turtle ~
					Undo "U" with "u"
	A intelligent ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A very intelligent turtle
  xxxx                          "very" を削除

A intelligent turtle
              xxxxxx            "turtle" を削除

A intelligent
                                "U" で行全体を元に戻す
A very intelligent turtle
                                "u" で "U" を undo
A intelligent
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "U" command is a change by itself, which the "u" command undoes and CTRL-R
redoes.  This might be a bit confusing.  Don't worry, with "u" and CTRL-R you
can go to any of the situations you had.  More about that in section |32.2|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{u} が "@command{undo}" で、@kbd{CTRL-R} が "@command{redo}" であるのに対し、"@command{U}" コマンドはそれ自身が変更コマンドです。ちょっとわかりにくいかも知れませんが心配はいりません。"@command{u}" と @kbd{CTRL-R} があればどんな場合でも大丈夫だ、ってことです。詳細は |@ref{32.2}| にあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.6*	Other editing commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.6}
@section 他の編集コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim has a large number of commands to change the text.  See |Q_in| and below.
Here are a few often used ones.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim には文章を編集するための数多くのコマンドがあります。下記、または |@ref{Q_in}| を参照してください。ここでは頻繁に使うものだけを述べます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
APPENDING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 追記 (APPENDING)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "i" command inserts a character before the character under the cursor.
That works fine; but what happens if you want to add stuff to the end of the
line?  For that you need to insert text after the cursor.  This is done with
the "a" (append) command.
   For example, to change the line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{i}" コマンドはカーソルの前に文字列を挿入しますが、行末に文字を追加したいときははどうすればいいでしょうか? それにはカーソルの後ろに文を挿入できないといけません。"@command{a}" (append) コマンドで追記できます。

例えば、次の行を
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	and that's not saying much for the turtle. ~
to
	and that's not saying much for the turtle!!! ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
and that's not saying much for the turtle.
@end verbatim

このように変更したいとします

@verbatim
and that's not saying much for the turtle!!!
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
move the cursor over to the dot at the end of the line. Then type "x" to
delete the period.  The cursor is now positioned at the end of the line on the
e in turtle.  Now type >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まずカーソルを行末のピリオドの上に動かし、"@command{x}" でピリオドを消します。この時カーソルは行末の @samp{turtle} の @samp{e} の上にあります。ここで、次のコマンドを入力します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	a!!!<Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
a!!!<Esc>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
to append three exclamation points after the e in turtle:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで @samp{turtle} の後ろに 3 つの @samp{!} 記号が追加されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	and that's not saying much for the turtle!!! ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
and that's not saying much for the turtle!!!
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
OPENING UP A NEW LINE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 新しい行を開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "o" command creates a new, empty line below the cursor and puts Vim in
Insert mode.  Then you can type the text for the new line.
   Suppose the cursor is somewhere in the first of these two lines:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{o}" コマンドを使うと、カーソルの下に新しい空の行が作成され、挿入モードに入ります。そのため、そのまま新しい行の文章を入力できます。

以下のような 2 行があり、カーソルが 1 行目のどこかにあるとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A very intelligent turtle ~
	Found programming UNIX a hurdle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A very intelligent turtle
Found programming UNIX a hurdle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you now use the "o" command and type new text: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{o}" コマンドを実行し、テキストを入力すると:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	oThat liked using Vim<Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
oThat liked using Vim<Esc>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The result is:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような結果になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
A very intelligent turtle
That liked using Vim
Found programming UNIX a hurdle
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "O" command (uppercase) opens a line above the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{O}" コマンド (大文字) を使うと、カーソルの上に空行を作成できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING A COUNT
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec カウンタを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you want to move up nine lines.  You can type "kkkkkkkkk" or you can
enter the command "9k".  In fact, you can precede many commands with a number.
Earlier in this chapter, for instance, you added three exclamation points to
the end of a line by typing "a!!!<Esc>".  Another way to do this is to use the
command "3a!<Esc>".  The count of 3 tells the command that follows to triple
its effect.  Similarly, to delete three characters, use the command "3x".  The
count always comes before the command it applies to.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、9 行上に移動したい場合、@kbd{kkkkkkkkk} とタイプすることもできますが、"@command{9k}" コマンドでも同様に移動できます。実はほとんどのコマンドには回数を指定できます。例えば上記の例では、"@kbd{a!!!<Esc>}" で 3 つの @samp{!} 記号を追加しましたが、これは "@command{3a!<Esc>}" と入力することもできます。最初の 3 はコマンドを 3 回実行することを指定しています。同様に、3 文字削除したい場合は "@command{3x}" を使います。カウントは必ず対象となるコマンドの前に指定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.7*	Getting out
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.7}
@section Vim の終了
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To exit, use the "ZZ" command.  This command writes the file and exits.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を終了するには "@command{ZZ}" コマンドを使います。ファイルが保存され、Vim が終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Unlike many other editors, Vim does not automatically make a backup
	file.  If you type "ZZ", your changes are committed and there's no
	turning back.  You can configure the Vim editor to produce backup
	files, see |07.4|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:}@*
他の多くのエディタと違い、Vim は自動的にバックアップを作成しません。"@kbd{ZZ}" と打つとファイルが上書きされるため、元に戻す方法はありません。バックアップファイルを作成するように設定することもできます。|@ref{07.4}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DISCARDING CHANGES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 変更を破棄する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Sometimes you will make a sequence of changes and suddenly realize you were
better off before you started.  Not to worry; Vim has a
quit-and-throw-things-away command.  It is: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを編集した後で、元の方が良かったと気づくことがあると思います。心配はいりません。「全部投げ捨てて終了する」コマンドがあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:q!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:q!
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Don't forget to press <Enter> to finish the command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドを確定するには @key{<Enter>} キーが必要ですよ。お忘れなく。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For those of you interested in the details, the three parts of this command
are the colon (:), which enters Command-line mode; the q command, which tells
the editor to quit; and the override command modifier (!).
   The override command modifier is needed because Vim is reluctant to throw
away changes.  If you were to just type ":q", Vim would display an error
message and refuse to exit:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細を説明すると、このコマンドは 3 つの部分から成っています。"@samp{:}" はコマンドラインモードの開始、"@command{q}" コマンドはエディタを終了するコマンド、"@samp{!}" はオーバーライド修飾詞です。

変更を破棄するにはオーバーライド修飾詞が必要です。単に "@command{:q}" を実行した場合、エラーメッセージが表示され、コマンドは実行されません:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E37: No write since last change (use ! to override) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E37: 最後の変更が保存されていません (! で変更を破棄)
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By specifying the override, you are in effect telling Vim, "I know that what
I'm doing looks stupid, but I'm a big boy and really want to do this."
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オーバーライドを指定することで、「バカげたことをしてるように見えるのはわかってる。でもボクは大人だし、本当にそうしたいんだ」と Vim に告げているわけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to continue editing with Vim: The ":e!" command reloads the
original version of the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を終了したくない場合は、"@command{:e!}" コマンドでオリジナルのファイルを再読み込みできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*02.8*	Finding help
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{02.8}
@section ヘルプの引き方
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Everything you always wanted to know can be found in the Vim help files.
Don't be afraid to ask!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
知りたいことは何でも Vim のヘルプで調べることができます。どんどん調べてください！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you know what you are looking for, it is usually easier to search for it
using the help system, instead of using Google.  Because the subjects follow
a certain style guide.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何かを知りたいときには、たいていはグーグルを使うよりもヘルプを使って探すほうが簡単です。なぜならヘルプの題目は一定のスタイルガイドに沿っているからです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Also the help has the advantage of belonging to your particular Vim version.
You won't see help for commands added later.  These would not work for you.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さらに、ヘルプはあなたが使っている Vim の特定のバージョンに即しているという利点があります。後で追加されたコマンドのヘルプは表示されません。それらはあなたの環境では動かないでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To get generic help use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでヘルプの総合案内が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You could also use the first function key <F1>.  If your keyboard has a <Help>
key it might work as well.
   If you don't supply a subject, ":help" displays the general help window.
The creators of Vim did something very clever (or very lazy) with the help
system: They made the help window a normal editing window.  You can use all
the normal Vim commands to move through the help information.  Therefore h, j,
k, and l move left, down, up and right.
   To get out of the help window, use the same command you use to get out of
the editor: "ZZ".  This will only close the help window, not exit Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプは @key{<F1>} ファンクションキーでも表示できます。キーボードに @key{<Help>} キーがある場合はそれも使えます。

"@command{:help}" に引数を指定しなかった場合は総合案内が表示されます。Vim の作者はとても賢い (いや、すごい怠け者かも) ので、ヘルプウィンドウには普通の編集ウィンドウが使われています。ヘルプウィンドウの中ではすべてのノーマルモードコマンドが使えます。したがって、@key{h}, @key{j}, @key{k}, @key{l} で 上下左右に移動できます。

ヘルプウィンドウは、エディタを終了するのと同じコマンド ("@command{ZZ}") で閉じることができます。この場合は、ヘルプウィンドウが閉じるだけで、Vim は終了しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As you read the help text, you will notice some text enclosed in vertical bars
(for example, |help|).  This indicates a hyperlink.  If you position the
cursor anywhere between the bars and press CTRL-] (jump to tag), the help
system takes you to the indicated subject.  (For reasons not discussed here,
the Vim terminology for a hyperlink is tag.  So CTRL-] jumps to the location
of the tag given by the word under the cursor.)
   After a few jumps, you might want to go back.  CTRL-T (pop tag) takes you
back to the preceding position.  CTRL-O (jump to older position) also works
nicely here.
   At the top of the help screen, there is the notation *help.txt*.  This name
between "*" characters is used by the help system to define a tag (hyperlink
destination).
   See |29.1| for details about using tags.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプを読むと、縦棒 @samp{|} で囲まれた文字に気づくと思います (例: |@ref{help}|)。それはハイパーリンクです。その場所にカーソルを置いて、@kbd{CTRL-]} (タグジャンプ) を押すと、そのヘルプにジャンプできます。(理由は省きますが、Vim ではハイパーリンクのことをタグと呼びます。@kbd{CTRL-]} はカーソル下の単語をタグとみなして、その場所にジャンプします。)

ジャンプした後は @kbd{CTRL-T} (タグをポップする) で元の場所に戻れます。@kbd{CTRL-O} (古い場所へのジャンプ) でも元に場所に戻れます。

ヘルプ画面の最上部に @samp{*help.txt*} という表記があります。@samp{*} で囲まれた名前はヘルプシステムのタグ (ハイパーリンクの飛び先) を定義するために使われています。

タグの使い方の詳細は |@ref{29.1}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To get help on a given subject, use the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特定のヘルプ項目を見るには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help {subject}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help @{subject@}
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To get help on the "x" command, for example, enter the following: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば "@command{x}" コマンドのヘルプを見るには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help x
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help x
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To find out how to delete text, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字の削除方法を調べるには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help deleting
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help deleting
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To get a complete index of all Vim commands, use the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のコマンド一覧を見たい場合は次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help index
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help index
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you need to get help for a control character command (for example,
CTRL-A), you need to spell it with the prefix "CTRL-". >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コントロール文字コマンド (例えば @kbd{CTRL-A}) のヘルプを見るには、"@kbd{CTRL-}" に続けてその文字を指定します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help CTRL-A
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help CTRL-A
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim editor has many different modes.  By default, the help system displays
the normal-mode commands.  For example, the following command displays help
for the normal-mode CTRL-H command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim にはいろんなモードがあります。特に指定がなければノーマルモードコマンドのヘルプが表示されます。例えば、次のコマンドでノーマルモードの @kbd{CTRL-H} コマンドのヘルプが表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help CTRL-H
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help CTRL-H
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To identify other modes, use a mode prefix.  If you want the help for the
insert-mode version of a command, use "i_".  For CTRL-H this gives you the
following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のモードを指定するにはプリフィックスを付けてください。例えば、挿入モードのヘルプを見たいときには、@samp{i_} を付けます。@kbd{CTRL-H} の場合なら次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help i_CTRL-H
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help i_CTRL-H
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you start the Vim editor, you can use several command-line arguments.
These all begin with a dash (-).  To find what the -t argument does, for
example, use the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動するときにはコマンドライン引数を指定できます。引数は先頭が @samp{-} で始まります。例えば、'@option{-t}' 引数の意味を調べるには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help -t
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help -t
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim editor has a number of options that enable you to configure and
customize the editor.  If you want help for an option, you need to enclose it
in single quotation marks.  To find out what the 'number' option does, for
example, use the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim にはオプションがたくさんあり、それを設定することでカスタマイズができます。オプションのヘルプを見るには、アポストロフィでそれを囲ってください。例えば、'@option{number}' オプションの意味を調べるには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help 'number'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help 'number'
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The table with all mode prefixes can be found below: |help-summary|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
モードのプリフィックス一覧は |@ref{help-summary}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Special keys are enclosed in angle brackets.  To find help on the up-arrow key
in Insert mode, for instance, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特殊キー不等号で囲んで表記します。例えば、挿入モードの上矢印キーのヘルプを見るには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help i_<Up>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help i_<Up>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you see an error message that you don't understand, for example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば次のようなエラーメッセージが表示された場合:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E37: No write since last change (use ! to override) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E37: 最後の変更が保存されていません (! で変更を破棄)
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use the error ID at the start to find help about it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行頭のエラー ID を使えばヘルプを検索できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help E37
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help E37
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Summary: 					*help-summary*  >

@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{help-summary}
@cindex help-summary
@unnumberedsubsec 概要:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1) Use Ctrl-D after typing a topic and let Vim show all available topics.
   Or press Tab to complete: >
    	:help some<Tab>
<   More information on how to use the help: >
	:help helphelp
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
トピックをタイプした後、あり得るトピック全てを表示させるには @kbd{Ctrl-D} を使います。もしくはタブで補完します:
@example
:help some<Tab>
@end example
help の使い方に関するより詳しい情報については:
@example
:help helphelp
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
2) Follow the links in bars to related help.  You can go from the detailed
   help to the user documentation, which describes certain commands more from
   a user perspective and less detailed.  E.g. after: >
   	:help pattern.txt
<   You can see the user guide topics |03.9| and |usr_27.txt| in the
   introduction.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
バーで囲まれた関連ヘルプへのリンクを辿ってみて下さい。ヘルプの詳細からユーザー視点のコマンド説明で、あまり詳しすぎないユーザードキュメントへ移動できます。例えば:
@example
:help pattern.txt
@end example
を見るとイントロダクション部分にユーザーガイドのトピック |@ref{03.9}| や |@ref{usr_27.txt}| があるのが分かります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
3) Options are enclosed in single apostrophes.  To go to the help topic for the
   list option: >
	:help 'list'
<   If you only know you are looking for a certain option, you can also do: >
	:help options.txt
<   to open the help page which describes all option handling and then search
   using regular expressions, e.g. textwidth.
   Certain options have their own namespace, e.g.: >
   	:help cpo-<letter>
<   for the corresponding flag of the 'cpoptions' settings, substitute <letter>
   by a specific flag, e.g.: >
  	:help cpo-;
<   And for the guioption flags: >
  	:help go-<letter>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
オプションは単一のアポストロフィで囲まれます。list オプションに関するヘルプへ行くには:
@example
:help 'list'
@end example
もし特定のオプションを探していないのであれば、以下でも可能です:
@example
:help options.txt
@end example
正規表現を使って記載された全てのオプションを検索し '@option{textwidth}' 等のヘルプのページを見つけ出します。特定のオプションには特有のネームスペースが付きます。例:
@example
:help cpo-<letter>
@end example
は設定 '@option{cpoptions}' のフラグに対応します。"<letter>" は個別のフラグに置き換えて下さい。例:
@example
:help cpo-;
@end example
さらに '@option{guioption}' のフラグであれば:
@example
:help go-<letter>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
4) Normal mode commands do not have a prefix. To go to the help page for the
   "gt" command: >
   	:help gt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ノーマルモードのコマンドにはプリフィックスはありません。"@command{gt}" コマンドのヘルプへ行くには:
@example
:help gt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
5) Insert mode commands start with i_.  Help for deleting a word: >
   	:help i_CTRL-W
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
挿入モードのコマンドは @samp{i_} で始まります。単語の削除に関するヘルプであれば:
@example
:help i_CTRL-W
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
6) Visual mode commands start with v_.  Help for jumping to the other side of
   the Visual area: >
   	:help v_o
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ビジュアルモードのコマンドは @samp{v_} で始まります。ビジュアル領域のもう片方へジャンプする方法のヘルプであれば:
@example
:help v_o
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
7) Command line editing and arguments start with c_.  Help for using the
   command argument %: >
   	:help c_%
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
コマンドラインの編集や引数は @samp{c_} で始まります。引数の @samp{%} の使用方法のヘルプであれば:
@example
:help c_%
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
8) Ex-commands always start with ":", so to go to the :s command help: >
	:help :s
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
Ex コマンドは常に @samp{:} で始まります。よって "@command{:s}" コマンドのヘルプに移動するには:
@example
:help :s
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
9) Commands specifically for debugging start with ">".  To go to the help
   for the "cont" debug command: >
	:help >cont
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
デバッグに関するコマンドは @samp{>} で始まります。デバッグコマンドの "@command{cont}" のヘルプに移動するには:
@example
:help >cont
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
10) Key combinations.  They usually start with a single letter indicating
    the mode for which they can be used.  E.g.: >
   	:help i_CTRL-X
<    takes you to the family of Ctrl-X commands for insert mode which can be
    used to auto complete different things.  Note, that certain keys will
    always be written the same, e.g. Control will always be CTRL.
    For normal mode commands there is no prefix and the topic is available at
    :h CTRL-<Letter>. E.g.  >
   	:help CTRL-W
<    In contrast >
	:help c_CTRL-R
<    will describe what the Ctrl-R does when entering commands in the Command
    line and >
   	:help v_Ctrl-A
<    talks about incrementing numbers in visual mode and >
	:help g_CTRL-A
<    talks about the g<C-A> command (e.g. you have to press "g" then <Ctrl-A>).
    Here the "g" stand for the normal command "g" which always expects a second
    key before doing something similar to the commands starting with "z"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
キーの組み合わせは通常、使用できるモードを表す 1 文字から始まります。例えば:
@example
:help i_CTRL-X
@end example
は挿入モードでそれぞれ異なるものを補完する Ctrl-X 系コマンドに移動します。
@quotation
@strong{Note:}@*
いくつかのキーは常に同様に記載されています。
@end quotation
例えばコントロールキーは常に @key{CTRL} と記載されます。ノーマルモードのコマンドはプリフィックスを持たず、項目は "@command{:h CTRL-<char>}" により参照可能です。例えば
@example
:help CTRL-W
@end example
に対して
@example
:help c_CTRL-R
@end example
はコマンドラインに入ったときの @key{CTRL-R} が行うことを説明しています。また
@example
:help v_Ctrl-A
@end example
はビジュアルモードでの数値のインクリメントを説明し
@example
:help g_CTRL-A
@end example
は "@command{g<C-A>}" コマンドについて述べています (これには @key{g} を押して @kbd{<Ctrl-A>} を押す必要があります)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
11) Regexp items always start with /.  So to get help for the "\+" quantifier
    in Vim regexes: >
   	:help /\+
<    If you need to know everything about regular expressions, start reading
    at: >
   	:help pattern.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
正規表現の項目は常に @samp{/} で始まります。よって Vim の正規表現の "@command{\+}" 量指定子のヘルプに移動するには:
@example
:help /\+
@end example
もし正規表現の全てに関して知りたいのなら、以下を参照してください:
@example
:help pattern.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
12) Registers always start with "quote". To find out about the special ":"
    register: >
   	:help quote:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
レジスタは常に @samp{quote} で始まります。特殊なレジスタ "@command{:}" について調べるのであれば:
@example
:help quote:
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
13) Vim script is available at >
	:help eval.txt
<   Certain aspects of the language are available at :h expr-X where "X" is a
   single letter. E.g.  >
   	:help expr-!
<   will take you to the topic describing the "!" (Not) operator for
   VimScript.
   Also important is >
   	:help function-list
<   to find a short description of all functions available.  Help topics for
   Vim script functions always include the "()", so: >
   	:help append()
<   talks about the append Vim script function rather than how to append text
   in the current buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
Vim script は以下を参照。
@example
:help eval.txt
@end example
Vim script のいくつかの側面については @kbd{:h expr-X} (@samp{X} は 1 文字) に記載されています。例えば
@example
:help expr-!
@end example
は Vim script の @samp{!} (否定) 演算子の説明の項目に移動します。さらに重要なのが
@example
:help function-list
@end example
にはすべての関数の簡潔な説明が記載されています。ヘルプ項目の Vim script の関数はすべて @samp{()} を含みます。よって:
@example
:help append()
@end example
は現在のバッファのテキストを append する方法ではなく append 関数についての説明に移動します。@{訳注: |@ref{:append}| ではなく |@ref{append()}| に移動するという意味だと思われます。@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
14) Mappings are talked about in the help page :h |map.txt|. Use >
    	:help mapmode-i
<    to find out about the |:imap| command.  Also use :map-topic
    to find out about certain subtopics particular for mappings.  e.g: >
    	:help :map-local
<    for buffer-local mappings or >
	:help map-bar
<    for how the '|' is handled in mappings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
マッピングについては :h |@ref{map.txt}| で述べられています。
@example
:help mapmode-i
@end example
|@ref{:imap}| コマンドについて調べるなら上記を使用してください。またマッピング固有のある項目を調べるには "@command{:map-topic}" @{訳注: "topic" は項目名@} も使用できます。例えば:
@example
:help :map-local
@end example
はバッファローカルなマッピングに関する項目です。または
@example
:help map-bar
@end example
は @samp{|} がどのようにマッピングで処理されるかに関する項目です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
15) Command definitions are talked about :h command-topic, so use >
	:help command-bar
<    to find out about the '!' argument for custom commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
コマンド定義は "@command{:h command-topic}" で記載されます。カスタムコマンドの "@command{!}" 引数については
@example
:help command-bar
@end example
で見つける事ができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
16) Window management commands always start with CTRL-W, so you find the
    corresponding help at :h CTRL-W_letter.  E.g. >
   	:help CTRL-W_p
<    for moving the previous accessed window.  You can also access >
	:help windows.txt
<    and read your way through if you are looking for window handling
    commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ウィンドウの制御コマンドは常に @key{CTRL-W} で始まります。"@command{:h CTRL-W_文字}" で該当のヘルプが見つかります。例えば:
@example
:help CTRL-W_p
@end example
で 1 つ前のウィンドウへの移動のヘルプにアクセスできます。また自分のペースでウィンドウ操作コマンド群を眺めたいならば
@example
:help windows.txt
@end example
でアクセスできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
17) Use |:helpgrep| to search in all help pages (and also of any installed
    plugins).  See |:helpgrep| for how to use it.
    To search for a topic: >
    	:helpgrep topic
<    This takes you to the first match.  To go to the next one: >
	:cnext
<    All matches are available in the quickfix window which can be opened
    with: >
    	:copen
<    Move around to the match you like and press Enter to jump to that help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
全てのヘルプ (とインストールしたプラグイン) のページを検索するには |@ref{:helpgrep}| を使用してください。使用法については |@ref{:helpgrep}| を参照してください。項目を検索するには @{訳注: "topic" は項目名@}:
@example
:helpgrep topic
@end example
これにより最初にマッチした項目に移動します。次の項目に移動するには:
@example
:cnext
@end example
全てのマッチした項目は以下のコマンドで開くことできる QuickFix ウィンドウで参照可能です:
@example
:copen
@end example
好きな項目に移動し、@kbd{Enter} を押すとそのヘルプにジャンプすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
18) The user manual.  This describes help topics for beginners in a rather
    friendly way.  Start at |usr_toc.txt| to find the table of content (as you
    might have guessed): >
    	:help usr_toc.txt
<    Skim over the contents to find interesting topics. The "Digraphs" and
    "Entering special characters" items are in chapter 24, so to go to that
    particular help page: >
    	:help usr_24.txt
<    Also if you want to access a certain chapter in the help, the chapter
    number can be accessed directly like this: >
    	:help 10.1
<    goes to chapter 10.1 in |usr_10.txt| and talks about recording macros.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ユーザーマニュアルは初心者にとってより親しみやすい項目について説明しています。(おそらくあなたの想像通り) |@ref{usr_toc.txt}| でその目次を見つけることができます:
@example
:help usr_toc.txt
@end example
興味を持った項目を探すようにざっと眺めてみてください。"ダイグラフ (Digraph)" と "特殊な文字を入力する" の項目は 24 章です。そのページに移動するには:
@example
:help usr_24.txt
@end example
また特定の章に直接アクセスしたければ、このように章番号でもアクセス可能です:
@example
:help 10.1
@end example
上記で |@ref{usr_10.txt}| の 10.1 章に移動し、マクロの記録の解説が見れます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
19) Highlighting groups.  Always start with hl-groupname.  E.g. >
    	:help hl-WarningMsg
<    talks about the WarningMsg highlighting group.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ハイライトグループは常に @samp{hl-} から始まります。例えば
@example
:help hl-WarningMsg
@end example
には WarningMsg ハイライトグループについて書かれています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
20) Syntax highlighting is namespaced to :syn-topic e.g. >
	:help :syn-conceal
<    talks about the conceal argument for the :syn command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
構文ハイライトは "@command{:syn-トピック}" という形式になっています。例えば
@example
:help :syn-conceal
@end example
には "@command{:syn}" コマンドの @samp{Conceal} 引数について書かれています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
21) Quickfix commands usually start with :c while location list commands
    usually start with :l
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
QuickFix コマンドは大体 @samp{:c} から始まり、ロケーションリストコマンドは大体 @samp{:l} から始まります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
22) Autocommand events can be found by their name: >
     	:help BufWinLeave
<    To see all possible events: >
	:help autocommand-events
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
Autocommand イベントはそれらの名前で見つける事ができます:
@example
:help BufWinLeave
@end example
全てのイベントを見るには:
@example
:help autocommand-events
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
23) Command-line switches always start with "-".  So for the help of the -f
    command switch of Vim use: >
    	:help -f
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
コマンドラインスイッチは常に @samp{-} から始まります。Vim のコマンドスイッチ '@option{-f}' に関するヘルプであれば:
@example
:help -f
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
24) Optional features always start with "+".  To find out about the
    conceal feature use: >
    	:help +conceal
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
オプションの機能は常に @samp{+} から始まります。conceal 機能の使い方について調べるのであれば:
@example
:help +conceal
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
25) Documentation for included filetype specific functionality is usually
    available  in the form ft-<filetype>-<functionality>.  So >
    	:help ft-c-syntax
<    talks about the C syntax file and the option it provides.  Sometimes,
    additional sections for omni completion >
    	:help ft-php-omni
<    or filetype plugins >
	:help ft-tex-plugin
<    are available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ファイルタイプ特有の機能が含まれるドキュメントは通常 ft-<filetype>-<functionality> に存在します。よって C のシンタックスファイルとそこで提供されているオプションについては以下に記載されます。
@example
:help ft-c-syntax
@end example
オムニ補完に関するセクションは
@example
:help ft-php-omni
@end example
で、ファイルタイププラグインに関しては
@example
:help ft-tex-plugin
@end example
で提供されている事があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
26) Error and Warning codes can be looked up directly in the help.  So >
	:help E297
<    takes you exactly to the description of the swap error message and >
	:help W10
<    talks about the warning "Changing a readonly file".
    Sometimes however, those error codes are not described, but rather are
    listed at the Vim command that usually causes this.  So: >
    	:help E128
<    takes you to the |:function| command
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
エラーと警告のコードは help で直接引くことができます。よって
@example
:help E297
@end example
はスワップエラーメッセージの説明に移動し、また
@example
:help W10
@end example
は @samp{Changing a readonly file} の警告について述べます。しかし時々エラーコードの説明が存在しない場合がありますが、どちらかといえば大抵それを引き起こした Vim のコマンドの方に記載されているでしょう。よって:
@example
:help E128
@end example
は |@ref{:function}| コマンドに飛びます。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================

Next chapter: |usr_03.txt|  Moving around

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
