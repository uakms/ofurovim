@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node tagsrch.txt, , , 目次
@unnumbered タグと特別な検索
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*tagsrch.txt*   For Vim version 8.0.  Last change: 2017 Oct 20


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*tagsrch.txt*   For Vim バージョン 8.0.  Last change: 2017 Oct 20


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Tags and special searches				*tags-and-searches*

See section |29.1| of the user manual for an introduction.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tags-and-searches}
@cindex tags-and-searches
タグと特別な検索

初めにユーザーマニュアルのセクション |@ref{29.1}| を参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Jump to a tag		|tag-commands|
2. Tag stack			|tag-stack|
3. Tag match list		|tag-matchlist|
4. Tags details			|tag-details|
5. Tags file format		|tags-file-format|
6. Include file searches	|include-search|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. タグへのジャンプ @tab |@ref{tag-commands, , tag-commands}|
@item 2. タグスタック @tab |@ref{tag-stack, , tag-stack}|
@item 3. タグマッチリスト @tab |@ref{tag-matchlist, , tag-matchlist}|
@item 4. タグの詳細 @tab |@ref{tag-details, , tag-details}|
@item 5. タグファイルの書式 @tab |@ref{tags-file-format, , tags-file-format}|
@item 6. インクルードファイルの検索 @tab |@ref{include-search, , include-search}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Jump to a tag					*tag-commands*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-commands}
@cindex tag-commands
@section 1. タグへのジャンプ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag* *tags*
A tag is an identifier that appears in a "tags" file.  It is a sort of label
that can be jumped to.  For example: In C programs each function name can be
used as a tag.  The "tags" file has to be generated by a program like ctags,
before the tag commands can be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag}
@anchor{tags}
@cindex tag
@cindex tags
タグとは "tags" ファイルに現われる識別子である。タグはラベルのようなものであり、そこにジャンプすることができる。例えば: C のプログラムではそれぞれの関数名をタグとして使うことができる。タグ機能を使う前には、ctags のようなプログラムによって "tags" ファイルを生成しなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
With the ":tag" command the cursor will be positioned on the tag.  With the
CTRL-] command, the keyword on which the cursor is standing is used as the
tag.  If the cursor is not on a keyword, the first keyword to the right of the
cursor is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":tag" コマンドはカーソルをタグ上に移動する。@command{CTRL-]} コマンドはカーソルの下にあるキーワードをタグとして使用する。もしカーソルがキーワード上になければ、カーソル位置から右側で最初に現れるキーワードを使用する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":tag" command works very well for C programs.  If you see a call to a
function and wonder what that function does, position the cursor inside of the
function name and hit CTRL-].  This will bring you to the function definition.
An easy way back is with the CTRL-T command.  Also read about the tag stack
below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":tag" コマンドはCプログラムでよく機能する。もし関数呼び出しを見つけた時にその関数が何をするのか疑問に思ったら、カーソルを関数名の上に置いて @kbd{CTRL-]} を叩けばよい。これで関数定義に導いてもらえるだろう。簡単に戻る方法は @command{CTRL-T} コマンドを使うことである。後述するタグスタックについても読むとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:ta* *:tag* *E426* *E429*
:[count]ta[g][!] {ident}
			Jump to the definition of {ident}, using the
			information in the tags file(s).  Put {ident} in the
			tag stack.  See |tag-!| for [!].
			{ident} can be a regexp pattern, see |tag-regexp|.
			When there are several matching tags for {ident}, jump
			to the [count] one.  When [count] is omitted the
			first one is jumped to. See |tag-matchlist| for
			jumping to other matching tags.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:ta}
@anchor{:tag}
@anchor{E426}
@anchor{E429}
@cindex :ta
@cindex :tag
@cindex E426
@cindex E429
@item :[count]ta[g][!] @{ident@}
tags ファイル内の情報を用いて、@{ident@} の定義へジャンプする。@{ident@} はタグスタックに積まれる。[!] については |tag-!| を参照。

@{ident@} は正規表現を使用できる。|tag-regexp| を参照。

@{ident@} に対してマッチするタグが複数ある場合、[count] 番目のタグへジャンプする。[count] が指定されないときは最初のタグへジャンプする。他のマッチするタグへジャンプするには |tag-matchlist| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
g<LeftMouse>						*g<LeftMouse>*
<C-LeftMouse>					*<C-LeftMouse>* *CTRL-]*
CTRL-]			Jump to the definition of the keyword under the
			cursor.  Same as ":tag {ident}", where {ident} is the
			keyword under or after cursor.
			When there are several matching tags for {ident}, jump
			to the [count] one.  When no [count] is given the
			first one is jumped to. See |tag-matchlist| for
			jumping to other matching tags.
			{Vi: identifier after the cursor}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g<LeftMouse>}
@anchor{<C-LeftMouse>}
@anchor{CTRL-]}
@cindex g<LeftMouse>
@cindex <C-LeftMouse>
@cindex CTRL-]
@item g<LeftMouse> または
@itemx <C-LeftMouse> または
@itemx @kbd{CTRL-]}
カーソルの下のキーワードを定義している場所にジャンプする。":tag @{ident@}" と同様であるが、@{ident@} はカーソルの下、もしくは次に現われるキーワードである。

@{ident@} に対してマッチするタグが複数ある場合、[count] 番目のタグへジャンプする。[count] が指定されないときは最初のタグへジャンプする。他のマッチするタグへジャンプするには |tag-matchlist| を参照。

@{Vi: カーソルの後の識別子@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*v_CTRL-]*
{Visual}CTRL-]		Same as ":tag {ident}", where {ident} is the text that
			is highlighted.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{v_CTRL-]}
@cindex v_CTRL-]
@item @{Visual@}@kbd{CTRL-]}
":tag @{ident@}" と同様であるが、@{ident@} はハイライトされているテキストである。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*telnet-CTRL-]*
CTRL-] is the default telnet escape key.  When you type CTRL-] to jump to a
tag, you will get the telnet prompt instead.  Most versions of telnet allow
changing or disabling the default escape key.  See the telnet man page.  You
can 'telnet -E {Hostname}' to disable the escape character, or 'telnet -e
{EscapeCharacter} {Hostname}' to specify another escape character.  If
possible, try to use "ssh" instead of "telnet" to avoid this problem.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{telnet-CTRL-]}
@cindex telnet-CTRL-]
@kbd{CTRL-]} は telnet の標準エスケープキーである。タグにジャンプしようと @kbd{CTRL-]} を打つと、代わりに telnet のプロンプトが立ち上がるだろう。telnet のたいていのバージョンは、標準エスケープキーを変更、もしくは使用不可能にできる。telnet のマニュアルを参照すること。エスケープキーを使用不可能にするには 'telnet -E @{ホスト名@}'、エスケープ文字を他の文字にするには 'telnet -e @{エスケープ文字@} @{ホスト名@}' を使用する。もし可能なら telnet の代わりに ssh を使うことで、この問題を回避できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-priority*
When there are multiple matches for a tag, this priority is used:
1. "FSC"  A full matching static tag for the current file.
2. "F C"  A full matching global tag for the current file.
3. "F  "  A full matching global tag for another file.
4. "FS "  A full matching static tag for another file.
5. " SC"  An ignore-case matching static tag for the current file.
6. "  C"  An ignore-case matching global tag for the current file.
7. "   "  An ignore-case matching global tag for another file.
8. " S "  An ignore-case matching static tag for another file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-priority}
@cindex tag-priority
タグのマッチが複数ある場合、以下の優先度が使われる:
@enumerate
@item "FSC"  カレントファイル内の全一致する static タグ。
@item "F C"  カレントファイル内の全一致する global タグ。
@item "F  "  別のファイル内の全一致する global タグ。
@item "FS "  別のファイル内の全一致する static タグ。
@item " SC"  カレントファイル内の大文字、小文字を無視した一致をする static タグ。
@item "  C"  カレントファイル内の大文字、小文字を無視した一致をする global タグ。
@item "   "  別のファイル内の大文字、小文字を無視した一致をする global タグ。
@item " S "  別のファイル内の大文字、小文字を無視した一致をする static タグ。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that when the current file changes, the priority list is mostly not
changed, to avoid confusion when using ":tnext".  It is changed when using
":tag {ident}".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
カレントファイルが変わっても、優先度のリストはほとんどの場合変化しないので注意すること。これは ":tnext" を使うときの混乱を避けるためである。優先度のリストは ":tag @{ident@}" を使ったときに変化する。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ignore-case matches are not found for a ":tag" command when:
- the 'ignorecase' option is off and 'tagcase' is "followic"
- 'tagcase' is "match"
- 'tagcase' is "smart" and the pattern contains an upper case character.
- 'tagcase' is "followscs" and 'smartcase' option is on and the pattern
  contains an upper case character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下の場合は ":tag " で大文字小文字を無視した検索は行われません:
@itemize @minus
@item '@option{ignorecase}' オプションがオフで '@option{tagcase}' が "@var{followic}" の時
@item '@option{tagcase}' が "@var{match}" である
@item '@option{tagcase}' が "@var{smart}" でパターンに大文字が含まれる時
@item '@option{tagcase}' が "@var{followscs}" で '@option{smartcase}' オプションがオンで、パターンに大文字が含まれる時
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ignore-case matches are found when:
- a pattern is used (starting with a "/")
- for ":tselect"
- when 'tagcase' is "followic" and 'ignorecase' is off
- when 'tagcase' is "match"
- when 'tagcase' is "followscs" and the 'smartcase' option is off
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下の場合は大文字小文字を無視した検索が行われます:
@itemize @minus
@item パターンが使用される時 ("/" で始まる)
@item ":tselect" の時
@item '@option{tagcase}' が "@var{followic}" で '@option{ignorecase}' がオフの時
@item '@option{tagcase}' が "@var{match}" の時
@item '@option{tagcase}' が "@var{followscs}" で '@option{smartcase}' オプションがオフの時
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that using ignore-case tag searching disables binary searching in the
tags file, which causes a slowdown.  This can be avoided by fold-case sorting
the tag file. See the 'tagbsearch' option for an explanation.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
大文字小文字を無視したタグ検索はタグファイル内での二分探索を無効にし速度の低下を引き起こします。これは大文字小文字を保持したままタグファイルを並び替える事で回避できます。'@option{tagbsearch}' オプションの説明を参照
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Tag stack				*tag-stack* *tagstack* *E425*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-stack}
@anchor{tagstack}
@anchor{E425}
@cindex tag-stack
@cindex tagstack
@cindex E425
@section 2. タグスタック
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On the tag stack is remembered which tags you jumped to, and from where.
Tags are only pushed onto the stack when the 'tagstack' option is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグスタック上にはジャンプ先のタグと、どこから来たのかという情報が記憶される。タグは '@option{tagstack}' オプションが設定されているときにだけ積まれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
g<RightMouse>						*g<RightMouse>*
<C-RightMouse>					*<C-RightMouse>* *CTRL-T*
CTRL-T			Jump to [count] older entry in the tag stack
			(default 1).  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{g<RightMouse>}
@anchor{<C-RightMouse>}
@anchor{CTRL-T}
@cindex g<RightMouse>
@cindex <C-RightMouse>
@cindex CTRL-T
@item g<RightMouse> または
@itemx <C-RightMouse> または
@itemx @kbd{CTRL-T}
タグスタック中の [count] 分だけ古いエントリにジャンプする(デフォルトは 1)。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:po* *:pop* *E555* *E556*
:[count]po[p][!]	Jump to [count] older entry in tag stack (default 1).
			See |tag-!| for [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:po}
@anchor{:pop}
@anchor{E555}
@anchor{E556}
@cindex :po
@cindex :pop
@cindex E555
@cindex E556
@item :[count]po[p][!]
タグスタック中の [count] 分だけ古いエントリにジャンプする(デフォルトは 1)。

[!] については |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[count]ta[g][!]	Jump to [count] newer entry in tag stack (default 1).
			See |tag-!| for [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :[count]ta[g][!]
タグスタック中の [count] 分だけ新しいエントリにジャンプする(デフォルトは 1)。

[!] については |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tags*
:tags			Show the contents of the tag stack.  The active
			entry is marked with a '>'.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tags}
@cindex :tags
@item :tags
タグスタックの内容を表示する。現在のエントリは '>' でマークされる。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The output of ":tags" looks like this:

   # TO tag      FROM line  in file/text
   1  1 main		 1  harddisk2:text/vim/test
 > 2  2 FuncA		58  i = FuncA(10);
   3  1 FuncC	       357  harddisk2:text/vim/src/amiga.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":tags" の出力は以下のようになる:
@verbatim
   # TO tag      FROM line  in file/text
   1  1 main             1  harddisk2:text/vim/test
 > 2  2 FuncA           58  i = FuncA(10);
   3  1 FuncC          357  harddisk2:text/vim/src/amiga.c
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This list shows the tags that you jumped to and the cursor position before
that jump.  The older tags are at the top, the newer at the bottom.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このリストはジャンプ先のタグとジャンプ前のカーソル位置を表示する。上から順に古いタグが並び、一番下が最も新しいタグである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The '>' points to the active entry.  This is the tag that will be used by the
next ":tag" command.  The CTRL-T and ":pop" command will use the position
above the active entry.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'>' は現在のエントリを指している。これは次の ":tag" コマンドで使われるタグである。CTRL-T と ":pop" コマンドは 1 つ上のタグを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Below the "TO" is the number of the current match in the match list.  Note
that this doesn't change when using ":pop" or ":tag".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"TO" の列にはマッチリスト中の現在のマッチ数を表示する。これは ":pop" や ":tag" を使っても変化しないので注意すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The line number and file name are remembered to be able to get back to where
you were before the tag command.  The line number will be correct, also when
deleting/inserting lines, unless this was done by another program (e.g.
another instance of Vim).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行番号とファイル名は、タグコマンドを実行する前にいた位置に戻ることができるように記憶される。行番号は行の削除や挿入が行われた時にも正しく維持される。ただし、別のプログラム(例えば、Vim の別インスタンス)で編集した場合を除く。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the current file, the "file/text" column shows the text at the position.
An indent is removed and a long line is truncated to fit in the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ジャンプ前の位置がカレントファイル内であれば、"file/text" の列にその行が表示される。インデントは取り除かれ、長い行はウィンドウに収まるように切り詰められる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can jump to previously used tags with several commands.  Some examples:

	":pop" or CTRL-T	to position before previous tag
	{count}CTRL-T		to position before {count} older tag
	":tag"			to newer tag
	":0tag"			to last used tag
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
前に使ったタグにジャンプするコマンドはいくつかある。例えば:
@verbatim
":pop" or CTRL-T    ひとつ前に使われたタグにジャンプする。
{count}CTRL-T       {count}分だけ前のタグにジャンプする。
":tag"              現在のエントリより新しいタグにジャンプする。
":0tag"             最後に使われたタグにジャンプする。
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The most obvious way to use this is while browsing through the call graph of
a program.  Consider the following call graph:

	main  --->  FuncA  --->  FuncC
	      --->  FuncB
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの最も明白な利用方法は、プログラムの関数呼び出しをあちこち拾い読みするときである。次のような呼び出し図を考える:
@verbatim
main  --->  FuncA  --->  FuncC
      --->  FuncB
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(Explanation: main calls FuncA and FuncB; FuncA calls FuncC).
You can get from main to FuncA by using CTRL-] on the call to FuncA.  Then
you can CTRL-] to get to FuncC.  If you now want to go back to main you can
use CTRL-T twice.  Then you can CTRL-] to FuncB.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(解説: main は FuncA と FuncB を呼び出し、FuncA は FuncC を呼び出す)。
FuncA の呼び出し部分の上で @kbd{CTRL-]} を使うことによって、main から FuncA に行くことができる。同様に @kbd{CTRL-]} を使って FuncC へ行くことができる。mainに 戻るには @kbd{CTRL-T} を 2 回使う。そこで @kbd{CTRL-]} を使って FuncB に行くことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you issue a ":ta {ident}" or CTRL-] command, this tag is inserted at the
current position in the stack.  If the stack was full (it can hold up to 20
entries), the oldest entry is deleted and the older entries shift one
position up (their index number is decremented by one).  If the last used
entry was not at the bottom, the entries below the last used one are
deleted.  This means that an old branch in the call graph is lost.  After the
commands explained above the tag stack will look like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":ta @{ident@}" や @kbd{CTRL-]} コマンドは、タグスタック上の現在の位置にタグを追加する。もしスタックが満たされていた場合(スタックは 20 エントリまで保持できる)、最も古いエントリが削除され、古いものから順にひとつずつ上に移動する(インデックス番号は 1 ずつ減る)。もし最後に使われたエントリが一番下になかった場合、最後に使われたエントリより下にあるものは削除される。つまり古いタグ経路は失われる。上のパラグラフの説明を実行したあとのタグスタックは次のような状態になる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
   # TO tag	FROM line  in file/text
   1  1 main		1  harddisk2:text/vim/test
   2  1 FuncB	       59  harddisk2:text/vim/src/main.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
# TO tag     FROM line  in file/text
1  1 main            1  harddisk2:text/vim/test
2  1 FuncB          59  harddisk2:text/vim/src/main.c
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*E73*
When you try to use the tag stack while it doesn't contain anything you will
get an error message.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E73}
@cindex E73
タグスタックを使おうとしたとき、タグスタックに何も入っていないとエラーが表示される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Tag match list				*tag-matchlist* *E427* *E428*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-matchlist}
@anchor{E427}
@anchor{E428}
@cindex tag-matchlist
@cindex E427
@cindex E428
@section 3. タグマッチリスト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When there are several matching tags, these commands can be used to jump
between them.  Note that these commands don't change the tag stack, they keep
the same entry.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のコマンドは複数のタグがマッチしたときに、タグの間を移動するために使うことができる。これらのコマンドはタグスタックを変更せず、同じエントリを保つことに注意すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ts* *:tselect*
:ts[elect][!] [ident]	List the tags that match [ident], using the
			information in the tags file(s).
			When [ident] is not given, the last tag name from the
			tag stack is used.
			See |tag-!| for [!].
			With a '>' in the first column is indicated which is
			the current position in the list (if there is one).
			[ident] can be a regexp pattern, see |tag-regexp|.
			See |tag-priority| for the priorities used in the
			listing.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:ts}
@anchor{:tselect}
@cindex :ts
@cindex :tselect
@item :ts[elect][!] [ident]
タグファイルの情報を用いて、[ident] にマッチするタグをリスト表示する。

[ident] を省略した場合、タグスタック上の最後のタグが使われる。

[!] については |tag-!| を参照。

最初の列に '>' があるものはリスト中の現在の位置を指し示している(それがあるならば)。[ident] は正規表現を取り得る。|tag-regexp| を参照。リストに使われているプロパティは |tag-priority| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Example output:

>
	 nr pri kind tag		file
	  1 F	f    mch_delay		os_amiga.c
			mch_delay(msec, ignoreinput)
	> 2 F	f    mch_delay		os_msdos.c
			mch_delay(msec, ignoreinput)
	  3 F	f    mch_delay		os_unix.c
			mch_delay(msec, ignoreinput)
	Enter nr of choice (<CR> to abort):
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
出力例:
@verbatim
 nr pri kind tag                file
  1 F   f    mch_delay          os_amiga.c
                mch_delay(msec, ignoreinput)
> 2 F   f    mch_delay          os_msdos.c
                mch_delay(msec, ignoreinput)
  3 F   f    mch_delay          os_unix.c
                mch_delay(msec, ignoreinput)
Enter nr of choice (<CR> to abort):
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			See |tag-priority| for the "pri" column.  Note that
			this depends on the current file, thus using
			":tselect xxx" can produce different results.
			The "kind" column gives the kind of tag, if this was
			included in the tags file.
			The "info" column shows information that could be
			found in the tags file.  It depends on the program
			that produced the tags file.
			When the list is long, you may get the |more-prompt|.
			If you already see the tag you want to use, you can
			type 'q' and enter the number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"pri" については |tag-priority| を参照。この例は現在のファイルに依存しているため、":tselect xxx" を使ったときには違う結果が得られることに注意すること。

"kind" はタグファイルからタグの種類が得られる場合のみ、その情報を示す。

"info" はタグファイルから得られる情報が表示される。この情報はタグファイルを生成したプログラムに依存する。

リストが長い場合には |more-prompt| が表示される。もしすでに使いたいタグを見つけているのなら、'q' のあとに "nr" の番号を入力すればよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:sts* *:stselect*
:sts[elect][!] [ident]	Does ":tselect[!] [ident]" and splits the window for
			the selected tag.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sts}
@anchor{:stselect}
@cindex :sts
@cindex :stselect
@item :sts[elect][!] [ident]
":tselect[!] [ident]" を実行し、ウィンドウを分割して選択された tag を表示する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*g]*
g]			Like CTRL-], but use ":tselect" instead of ":tag".
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g]}
@cindex g]
@item g]
@kbd{CTRL-]} と動作は似ているが、":tag" の代わりに ":tselect" を用いる。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*v_g]*
{Visual}g]		Same as "g]", but use the highlighted text as the
			identifier.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{v_g]}
@cindex v_g]
@item @{Visual@}g]
"g]" と同じ。ただし、選択されたテキストが検索に使われる。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tj* *:tjump*
:tj[ump][!] [ident]	Like ":tselect", but jump to the tag directly when
			there is only one match.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tj}
@anchor{:tjump}
@cindex :tj
@cindex :tjump
@item :tj[ump][!] [ident]
":tselect" と動作は似ているが、適合する tag が 1 つだけのときには直接移動する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:stj* *:stjump*
:stj[ump][!] [ident]	Does ":tjump[!] [ident]" and splits the window for the
			selected tag.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:stj}
@anchor{:stjump}
@cindex :stj
@cindex :stjump
@item :stj[ump][!] [ident]
":tjump[!] [ident]" を実行し、ウィンドウを分割して選択された tag を表示する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*g_CTRL-]*
g CTRL-]		Like CTRL-], but use ":tjump" instead of ":tag".
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g_CTRL-]}
@cindex g_CTRL-]
@item g @kbd{CTRL-]}
CTRL-]と動作は似ているが、":tag" の代わりに ":tjump" を用いる。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*v_g_CTRL-]*
{Visual}g CTRL-]	Same as "g CTRL-]", but use the highlighted text as
			the identifier.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{v_g_CTRL-]}
@cindex v_g_CTRL-]
@item @{Visual@}g @kbd{CTRL-]}
"g CTRL-]" と同じ。ただし、選択されたテキストが検索に使われる。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tn* *:tnext*
:[count]tn[ext][!]	Jump to [count] next matching tag (default 1).  See
			|tag-!| for [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tn}
@anchor{:tnext}
@cindex :tn
@cindex :tnext
@item :[count]tn[ext][!]
適合する tag のうち、[count] 番目の tag に移動する。(省略時は 1)

[!] に関しては |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tp* *:tprevious*
:[count]tp[revious][!]	Jump to [count] previous matching tag (default 1).
			See |tag-!| for [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tp}
@anchor{:tprevious}
@cindex :tp
@cindex :tprevious
@item :[count]tp[revious][!]
適合する tag のうち、[count] 分だけ前の tag に移動する。(省略時は 1)

[!] に関しては |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tN* *:tNext*
:[count]tN[ext][!]	Same as ":tprevious".  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tN}
@anchor{:tNext}
@cindex :tN
@cindex :tNext
@item :[count]tN[ext][!]
":tprevious" と同様。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tr* *:trewind*
:[count]tr[ewind][!]	Jump to first matching tag.  If [count] is given, jump
			to [count]th matching tag.  See |tag-!| for [!].  {not
			in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tr}
@anchor{:trewind}
@cindex :tr
@cindex :trewind
@item :[count]tr[ewind][!]
適合した tag のうち最初の tag に移動する。もし [count] が与えられていたら、[count] 番目の tag に移動する。

[!] については |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tf* *:tfirst*
:[count]tf[irst][!]	Same as ":trewind".  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tf}
@anchor{:tfirst}
@cindex :tf
@cindex :tfirst
@item :[count]tf[irst][!]
":trewind" と同じ。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tl* *:tlast*
:tl[ast][!]		Jump to last matching tag.  See |tag-!| for [!].  {not
			in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tl}
@anchor{:tlast}
@cindex :tl
@cindex :tlast
@item :tl[ast][!]
適合した tag のうち最後の tag に移動する。

[!] に関しては |tag-!| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:lt* *:ltag*
:lt[ag][!] [ident]	Jump to tag [ident] and add the matching tags to a new
			location list for the current window.  [ident] can be
			a regexp pattern, see |tag-regexp|.  When [ident] is
			not given, the last tag name from the tag stack is
			used.  The search pattern to locate the tag line is
			prefixed with "\V" to escape all the special
			characters (very nomagic). The location list showing
			the matching tags is independent of the tag stack.
			See |tag-!| for [!].
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:lt}
@anchor{:ltag}
@cindex :lt
@cindex :ltag
@item :lt[ag][!] [ident]
タグ [ident] にジャンプし、マッチするタグ全てをカレントウィンドウの新しいロケーションリストに追加する。[ident] は正規表現でもよい(|tag-regexp| を参照)。[ident] が指定されないときはタグスタックにある最後のタグ名が使われる。タグにマッチする行を特定するための検索パターンには、特別な文字を全てエスケープするために "\V" がつけられる(very nomagic)。マッチするタグを保持するロケーションリストはタグスタックとは独立している。

[!] については |tag-!| を参照。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When there is no other message, Vim shows which matching tag has been jumped
to, and the number of matching tags: >
	tag 1 of 3 or more
The " or more" is used to indicate that Vim didn't try all the tags files yet.
When using ":tnext" a few times, or with ":tlast", more matches may be found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他にメッセージがないとき、Vim は今までに移動した tag と tag の数を表示する:
@verbatim
tag 1 of 3 or more
@end verbatim
" or more" は、Vim がまだすべての tag ファイルを検索していないことを示すために用いられる。":tnext" を数回用いるか、":tlast" を使用したとき、さらに tag が見つけられるだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you didn't see this message because of some other message, or you just
want to know where you are, this command will show it again (and jump to the
same tag as last time): >
	:0tn
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のメッセージがあったときや、現在の場所を知りたいときには次のコマンドで再び表示することができる。(最後に行った移動と同じ tag に移動する。):
@example
:0tn
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*tag-skip-file*
When a matching tag is found for which the file doesn't exist, this match is
skipped and the next matching tag is used.  Vim reports this, to notify you of
missing files.  When the end of the list of matches has been reached, an error
message is given.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-skip-file}
@cindex tag-skip-file
マッチしたタグに対するファイルが見つからなかった場合、スキップされて次にマッチするタグが使われる。Vim はファイルがないことを通知する。もしリストの終端に達していたならば、エラーメッセージが与えられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-preview*
The tag match list can also be used in the preview window.  The commands are
the same as above, with a "p" prepended.
{not available when compiled without the |+quickfix| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-preview}
@cindex tag-preview
タグマッチリストはプレビューウィンドウ内でも使用できる。そのコマンドは上記のものに似ているが、先頭に "p" がつく。

@{|+quickfix| が無効なときは利用できない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:pts* *:ptselect*
:pts[elect][!] [ident]	Does ":tselect[!] [ident]" and shows the new tag in a
			"Preview" window.  See |:ptag| for more info.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:pts}
@anchor{:ptselect}
@cindex :pts
@cindex :ptselect
@item :pts[elect][!] [ident]
":tselect[!] [ident]" を実行し、"Preview" ウィンドウに新しいタグを表示する。詳細は |:ptag| を参照すること。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptj* *:ptjump*
:ptj[ump][!] [ident]	Does ":tjump[!] [ident]" and shows the new tag in a
			"Preview" window.  See |:ptag| for more info.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptj}
@anchor{:ptjump}
@cindex :ptj
@cindex :ptjump
@item :ptj[ump][!] [ident]
":tjump[!] [ident]" を実行し、"Preview" ウィンドウに新しいタグを表示する。詳細は |:ptag| を参照すること。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptn* *:ptnext*
:[count]ptn[ext][!]	":tnext" in the preview window.  See |:ptag|.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptn}
@anchor{:ptnext}
@cindex :ptn
@cindex :ptnext
@item :[count]ptn[ext][!]
プレビューウィンドウで ":tnext" を実行する。|:ptag| を参照すること。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptp* *:ptprevious*
:[count]ptp[revious][!]	":tprevious" in the preview window.  See |:ptag|.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptp}
@anchor{:ptprevious}
@cindex :ptp
@cindex :ptprevious
@item :[count]ptp[revious][!]
プレビューウィンドウで ":tprevious" を実行する。|:ptag| を参照すること。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptN* *:ptNext*
:[count]ptN[ext][!]	Same as ":ptprevious".  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptN}
@anchor{:ptNext}
@cindex :ptN
@cindex :ptNext
@item :[count]ptN[ext][!]
":ptprevious" と同じ。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptr* *:ptrewind*
:[count]ptr[ewind][!]	":trewind" in the preview window.  See |:ptag|.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptr}
@anchor{:ptrewind}
@cindex :ptr
@cindex :ptrewind
@item :[count]ptr[ewind][!]
プレビューウィンドウで ":trewind" を実行する。|:ptag| を参照すること。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptf* *:ptfirst*
:[count]ptf[irst][!]	Same as ":ptrewind".  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptf}
@anchor{:ptfirst}
@cindex :ptf
@cindex :ptfirst
@item :[count]ptf[irst][!]
":ptrewind" と同じ。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ptl* *:ptlast*
:ptl[ast][!]		":tlast" in the preview window.  See |:ptag|.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ptl}
@anchor{:ptlast}
@cindex :ptl
@cindex :ptlast
@item :ptl[ast][!]
プレビューウィンドウで ":tlast" を実行する。|:ptag| を参照すること。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Tags details						*tag-details*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-details}
@cindex tag-details
@section 4. タグの詳細
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*static-tag*
A static tag is a tag that is defined for a specific file.  In a C program
this could be a static function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{static-tag}
@cindex static-tag
static タグは特別なファイルのために定義されたタグである。C プログラムでは static 関数が当てはまる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vi jumping to a tag sets the current search pattern.  This means that
the "n" command after jumping to a tag does not search for the same pattern
that it did before jumping to the tag.  Vim does not do this as we consider it
to be a bug.  You can still find the tag search pattern in the search history.
If you really want the old Vi behavior, set the 't' flag in 'cpoptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi はタグにジャンプするときに現在の検索パターンを設定する。これはタグにジャンプしたあとの "n" コマンドは、その前の検索パターンと同じ検索を行わないということである。Vim ではこのようなバグとも考えられることはしない。検索履歴にある検索パターンで検索できる。もし古い Vi の振る舞いを望むならば、'@option{cpoptions}' に '@var{t}' を設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-binary-search*
Vim uses binary searching in the tags file to find the desired tag quickly
(when enabled at compile time |+tag_binary|).  But this only works if the
tags file was sorted on ASCII byte value.  Therefore, if no match was found,
another try is done with a linear search.  If you only want the linear search,
reset the 'tagbsearch' option.  Or better: Sort the tags file!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-binary-search}
@cindex tag-binary-search
Vim は希望のタグをすばやく見つけるために、タグファイル内で二分探索を行う(|+tag_binary| がコンパイル時に有効になっていれば)。しかしこれはタグファイルが ASCII コードでソートされている場合にのみ機能する。したがって、もし適合しないものが見つかった場合は、その他の方法として線形探索が行われる。もし線形探索のみを利用したいならば、'@option{tagbsearch}' オプションをリセットすればよい。そうでなければ: タグファイルをソートすること！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the binary searching is disabled when not looking for a tag with a
specific name.  This happens when ignoring case and when a regular expression
is used that doesn't start with a fixed string.  Tag searching can be a lot
slower then.  The former can be avoided by case-fold sorting the tags file.
See 'tagbsearch' for details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
検索が明確な名前をもったタグでない場合は二分探索は利用できないことに注意すること。これは大文字小文字を無視した検索や固定文字列で始まらない正規表現による検索で発生する。そのときはタグ検索はかなり遅くなるだろう。先人はタグファイルを大文字と小文字を区別せずにソートすることで回避できた。詳細は 'tagbsearch' を参照のこと。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-regexp*
The ":tag" and ":tselect" commands accept a regular expression argument.  See
|pattern| for the special characters that can be used.
When the argument starts with '/', it is used as a pattern.  If the argument
does not start with '/', it is taken literally, as a full tag name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-regexp}
@cindex tag-regexp
":tag" と ":tselect" コマンドは引数に正規表現を受け付ける。使用できる特殊文字については |pattern| を参照すること。引数が '/' で始まる場合はパターンとして使われる。もし引数が '/' で始まらなければ、完全なタグ名の文字列として扱われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Examples: >
    :tag main
<	jumps to the tag "main" that has the highest priority. >
    :tag /^get
<	jumps to the tag that starts with "get" and has the highest priority. >
    :tag /norm
<	lists all the tags that contain "norm", including "id_norm".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@table @asis
@item :tag main
最も優先度の高い "main" というタグにジャンプする。
@item :tag /^get
最も優先度の高い "get" で始まるタグにジャンプする。
@item :tag /norm
"norm" を含むすべてのタグを列挙する。これは "id_norm" というタグも含まれる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
When the argument both exists literally, and match when used as a regexp, a
literal match has a higher priority.  For example, ":tag /open" matches "open"
before "open_file" and "file_open".
When using a pattern case is ignored.  If you want to match case use "\C" in
the pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もし引数と全く同じタグと、正規表現によってマッチしたタグがあった場合、引数と同じタグが優先される。例えば、":tag /open" は "open_file" や "file_open" よりも前に "open" にマッチする。

正規表現を使うときは大文字・小文字は区別されない。大文字・小文字を区別したいなら正規表現の中で "\C" を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-!*
If the tag is in the current file this will always work.  Otherwise the
performed actions depend on whether the current file was changed, whether a !
is added to the command and on the 'autowrite' option:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-!}
@cindex tag-!
もしタグが現在のファイル上にあるならば、いつも機能するだろう。そうでなければ、実行結果は現在のファイルが変更されているか、コマンドに ! がつけられているか、'@option{autowrite}' オプションが設定されているかに依存する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  tag in       file	   autowrite			~
current file  changed	!   option	  action	~
-----------------------------------------------------------------------------
    yes		 x	x     x	  goto tag
    no		 no	x     x	  read other file, goto tag
    no		yes    yes    x   abandon current file, read other file, goto
				  tag
    no		yes	no    on  write current file, read other file, goto
				  tag
    no		yes	no   off  fail
-----------------------------------------------------------------------------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .15 .1 .15 .4
@item タグが現在のファイル内 @tab 変更あり @tab ! @tab autowrite オプション @tab 動作
@item yes @tab x @tab x @tab x @tab タグに行く
@item no @tab no @tab x @tab x @tab 対象ファイルを読み込み、タグに行く
@item no @tab yes @tab yes @tab x @tab 現在のファイルを捨て、対象ファイルを読み込んでタグに行く
@item no @tab yes @tab no @tab on @tab 現在のファイルを保存し、対象ファイルを読み込んでタグに行く
@item no @tab yes @tab no @tab off @tab 失敗する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- If the tag is in the current file, the command will always work.
- If the tag is in another file and the current file was not changed, the
  other file will be made the current file and read into the buffer.
- If the tag is in another file, the current file was changed and a ! is
  added to the command, the changes to the current file are lost, the other
  file will be made the current file and read into the buffer.
- If the tag is in another file, the current file was changed and the
  'autowrite' option is on, the current file will be written, the other
  file will be made the current file and read into the buffer.
- If the tag is in another file, the current file was changed and the
  'autowrite' option is off, the command will fail.  If you want to save
  the changes, use the ":w" command and then use ":tag" without an argument.
  This works because the tag is put on the stack anyway.  If you want to lose
  the changes you can use the ":tag!" command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item タグが現在のファイル上にある場合は、コマンドはいつも機能する。
@item タグが他のファイル上にあり、現在のファイルが変更されていないならば、対象となるファイルがバッファに読み込まれる。
@item タグが他のファイル上にあり、現在のファイルが変更されていて、かつ!がコマンドにつけられている場合には、現在のファイルに対する変更は失われ、対象となるファイルがバッファに読み込まれる。
@item タグが他のファイル上にあり、現在のファイルが変更されていて、かつ '@option{autowrite}' オプションが設定されている場合には、現在のファイルは保存され、対象となるファイルがバッファに読み込まれる。
@item タグが他のファイル上にあり、現在のファイルが変更されていて、かつ '@option{autowrite}' オプションが設定されていない場合には、コマンドは失敗する。変更を保存したいならば ":w" コマンドを使用し、そのあとで ":tag" を引数なしで実行する。これはタグがスタック上に残っているためにうまく機能する。変更を失ってもよいのならば、":tag!" コマンドを使用できる。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-security*
Note that Vim forbids some commands, for security reasons.  This works like
using the 'secure' option for exrc/vimrc files in the current directory.  See
|trojan-horse| and |sandbox|.
When the {tagaddress} changes a buffer, you will get a warning message:
	"WARNING: tag command changed a buffer!!!"
In a future version changing the buffer will be impossible.  All this for
security reasons: Somebody might hide a nasty command in the tags file, which
would otherwise go unnoticed.  Example: >
	:$d|/tag-function-name/
{this security prevention is not present in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-security}
@cindex tag-security
@quotation
@strong{Note:} @*
Vim はセキュリティの都合上、いくつかのコマンドを禁止していることに注意すること。これはちょうど現在のディレクトリにある exrc/@file{vimrc} ファイルに '@option{secure}' オプションが使われているのと同じように機能する。|trojan-horse| と |sandbox| を参照すること。@{tagaddress@} がバッファを変更したとき、次のようなエラーメッセージが表示される:
@display
"WARNING: tag command changed a buffer!!!"
@end display
将来のバージョンではバッファを変更することは不可能になるだろう。これらはすべてセキュリティの理由である: 誰かが気づかれないように実行される厄介なコマンドをタグファイルに隠しているかもしれない。例えば:
@example
:$d|/tag-function-name/
@end example
@{Vi ではこのセキュリティ予防は提供されない@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vi the ":tag" command sets the last search pattern when the tag is searched
for.  In Vim this is not done, the previous search pattern is still remembered,
unless the 't' flag is present in 'cpoptions'.  The search pattern is always
put in the search history, so you can modify it if searching fails.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi では ":tag" コマンドによってタグを検索すると、最新の検索パターンを上書きする。Vim では '@option{cpoptions}' に '@var{t}' フラグが設定されていなければ、前の検索パターンは引き続き記憶される。検索パターンはいつも検索履歴にあるので、もし検索に失敗したらそこを修正するとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*emacs-tags* *emacs_tags* *E430*
Emacs style tag files are only supported if Vim was compiled with the
|+emacs_tags| feature enabled.  Sorry, there is no explanation about Emacs tag
files here, it is only supported for backwards compatibility :-).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{emacs-tags}
@anchor{emacs_tags}
@anchor{E430}
@cindex emacs-tags
@cindex emacs_tags
@cindex E430
Emacs スタイルのタグファイルは、Vim のコンパイル時に |+emacs_tags| 機能を有効にした場合にのみ使用できる。すまないが、Emacs タグファイルについての説明はここではしない。それは下位互換のためにのみ提供している :-)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Lines in Emacs tags files can be very long.  Vim only deals with lines of up
to about 510 bytes.  To see whether lines are ignored set 'verbose' to 5 or
higher.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Emacs タグファイルの行は非常に長くなることがある。Vim は行の約 510 バイトまでしか扱わない。行が無視されたかどうかは 'verbose' を 5 以上にしていればわかる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tags-option*
The 'tags' option is a list of file names.  Each of these files is searched
for the tag.  This can be used to use a different tags file than the default
file "tags".  It can also be used to access a common tags file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tags-option}
@cindex tags-option
'@option{tags}' オプションはファイル名のリストで構成される。これらのファイルからタグが検索される。デフォルトの "tags" ファイルよりも、異なる @file{tags} ファイルがよく使われるだろう。共通の @file{tags} ファイルにもよくアクセスするだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The next file in the list is not used when:
- A matching static tag for the current buffer has been found.
- A matching global tag has been found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のようなときは、リストの次のファイルを使わない:
@itemize @minus
@item 現在のバッファに対する static タグが見つかった場合。
@item global タグが見つかった場合。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This also depends on whether case is ignored.  Case is ignored when:
- 'tagcase' is "followic" and 'ignorecase' is set
- 'tagcase' is "ignore"
- 'tagcase' is "smart" and the pattern only contains lower case
  characters.
- 'tagcase' is "followscs" and 'smartcase' is set and the pattern only
  contains lower case characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは大文字小文字が無視されるかどうかにも依存します。大文字小文字は以下の場合に無視されます:
@itemize @minus
@item '@option{tagcase}' が "@var{followic}" で '@option{ignorecase}' が設定されている
@item '@option{tagcase}' が "@var{ignore}" である
@item '@option{tagcase}' が "@var{smart}" でパターンに小文字だけが含まれている
@item '@option{tagcase}' が "@var{followscs}" で '@option{smartcase}' が設定されておりパターンに小文字のみが含まれている
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If case is not ignored, and the tags file only has a match without matching
case, the next tags file is searched for a match with matching case.  If no
tag with matching case is found, the first match without matching case is
used.  If case is ignored, and a matching global tag with or without matching
case is found, this one is used, no further tags files are searched.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
大文字小文字が無視されず、タグファイルが大文字小文字を除外したマッチのみとなる場合、続くタグファイルは大文字小文字をマッチして検索されます。大文字小文字をマッチしてタグファイルが見つからない場合、大文字小文字を除外してマッチした最初の結果が使用されます。もし大文字小文字が無視されグローバルのタグでマッチした、もしくは大文字小文字を除外してマッチした場合、タグファイルの検索は行われず見付かったそのファイルが使用されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a tag file name starts with "./", the '.' is replaced with the path of
the current file.  This makes it possible to use a tags file in the directory
where the current file is (no matter what the current directory is).  The idea
of using "./" is that you can define which tag file is searched first: In the
current directory ("tags,./tags") or in the directory of the current file
("./tags,tags").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグファイル名が "./" で始まるとき、'.' は現在のファイルのパスで置き換えられる。これにより、現在のファイルがあるディレクトリの @file{tags} ファイルを使用することができる(たとえ現在のディレクトリがどこであろうと)。"./" を使用する概念は、どのタグファイルを最初に検索するかを決定することである: 現在のディレクトリにするか ("tags,./tags")、現在のファイルがあるディレクトリにするか("./tags,tags")である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example: >
	:set tags=./tags,tags,/home/user/commontags
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set tags=./tags,tags,/home/user/commontags
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this example the tag will first be searched for in the file "tags" in the
directory where the current file is.  Next the "tags" file in the current
directory.  If it is not found there, then the file "/home/user/commontags"
will be searched for the tag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この例では、現在のファイルがあるディレクトリの "tags" ファイルがまず検索される。次に現在のディレクトリにある "tags" ファイルが検索される。もしまだ見つからなければ、"/home/user/commontags" が検索される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This can be switched off by including the 'd' flag in 'cpoptions', to make
it Vi compatible.  "./tags" will then be the tags file in the current
directory, instead of the tags file in the directory where the current file
is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは '@option{cpoptions}' に '@var{d}' フラグを含めることで Vi 互換のようにすることができる。"./tags" は現在のファイルがあるディレクトリの @file{tags} ファイルではなく、現在のディレクトリの @file{tags} ファイルを意味するようになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Instead of the comma a space may be used.  Then a backslash is required for
the space to be included in the string option: >
	:set tags=tags\ /home/user/commontags
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンマの代わりにスペースを使用してもよい。文字列オプションに含めるためにはスペースの前にバックスラッシュが必要となる:
@example
:set tags=tags\ /home/user/commontags
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To include a space in a file name use three backslashes.  To include a comma
in a file name use two backslashes.  For example, use: >
	:set tags=tag\\\ file,/home/user/common\\,tags
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル名にスペースを含めるにはバックスラッシュを３つ並べる。コンマをファイル名に使用する場合にはバックスラッシュを２つ並べる。例えば:
@example
:set tags=tag\\\ file,/home/user/common\\,tags
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
for the files "tag file" and "/home/user/common,tags".  The 'tags' option will
have the value "tag\ file,/home/user/common\,tags".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"tag file" と "/home/user/common,tags" というファイルが指定できる。'@option{tags}' オプションは "tag\ file,/home/user/common\,tags" という値を持つだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'tagrelative' option is on (which is the default) and using a tag file
in another directory, file names in that tag file are relative to the
directory where the tag file is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{tagrelative}' オプションをオンにし(デフォルト)、他のディレクトリでタグファイルを使用すると、タグファイル内に記述されたファイル名はタグファイルがあるディレクトリを基準として相対パスになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Tags file format				*tags-file-format* *E431*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tags-file-format}
@anchor{E431}
@cindex tags-file-format
@cindex E431
@section 5. タグファイルの書式
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*ctags* *jtags*
A tags file can be created with an external command, for example "ctags".  It
will contain a tag for each function.  Some versions of "ctags" will also make
a tag for each "#defined" macro, typedefs, enums, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ctags}
@anchor{jtags}
@cindex ctags
@cindex jtags
@file{tags} ファイルは "ctags" のような外部コマンドによって生成される。それはそれぞれの関数へのタグを含んでいる。"ctags" のあるバージョンでは "#defined" マクロや typedef、enum などに対してもタグを作ることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some programs that generate tags files:
ctags			As found on most Unix systems.  Only supports C.  Only
			does the basic work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec tagsファイルを生成するプログラム:
@table @asis
@item ctags
ほとんどの Unix システムにある。C 言語のみ対応し、基本的な機能を提供する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*Exuberant_ctags*
exuberant ctags		This a very good one.  It works for C, C++, Java,
			Fortran, Eiffel and others.  It can generate tags for
			many items.  See http://ctags.sourceforge.net.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Exuberant_ctags}
@cindex Exuberant_ctags
@item exuberant ctags
これはとてもよいものだ。C 言語、C++、Java、Fortran、Eiffel、そしてその他に対応している。多くの項目にタグを生成することができる。

@url{http://ctags.sourceforge.net} を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
etags			Connected to Emacs.  Supports many languages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item etags
Emacs に連携する。多言語に対応している。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
JTags			For Java, in Java.  It can be found at
			http://www.fleiner.com/jtags/.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item JTags
Java 用、Java で書かれている。
@url{http://www.fleiner.com/jtags/} で入手できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
ptags.py		For Python, in Python.  Found in your Python source
			directory at Tools/scripts/ptags.py.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ptags.py
Python 用、Python で書かれている。Python のソースディレクトリ Tools/scripts/ptags.py にある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
ptags			For Perl, in Perl.  It can be found at
			http://www.eleves.ens.fr:8080/home/nthiery/Tags/.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ptags
Perl 用、Perl で書かれている。これはここで見つかる。
@url{http://www.eleves.ens.fr:8080/home/nthiery/Tags/}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
gnatxref		For Ada.  See http://www.gnuada.org/.  gnatxref is
			part of the gnat package.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item gnatxref
Ada 用。@url{http://www.gnuada.org/} を参照。
gnatxref は gnat パッケージの一部である。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The lines in the tags file must have one of these three formats:

1.  {tagname}		{TAB} {tagfile} {TAB} {tagaddress}
2.  {tagfile}:{tagname} {TAB} {tagfile} {TAB} {tagaddress}
3.  {tagname}		{TAB} {tagfile} {TAB} {tagaddress} {term} {field} ..
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
tags ファイルは次の 3 つの形式のどれかで構成されなければならない:
@enumerate
@item @{tagname@}             @{TAB@} @{tagfile@} @{TAB@} @{tagaddress@}
@item @{tagfile@}:@{tagname@} @{TAB@} @{tagfile@} @{TAB@} @{tagaddress@}
@item @{tagname@}             @{TAB@} @{tagfile@} @{TAB@} @{tagaddress@} @{term@} @{field@} ..
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first is a normal tag, which is completely compatible with Vi.  It is the
only format produced by traditional ctags implementations.  This is often used
for functions that are global, also referenced in other files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初の形式は通常のタグで、Vi で完全に互換性がある。伝統的な ctags によってのみ作られる形式である。これはしばしばグローバルな関数や他のファイルを参照する場合に使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The lines in the tags file can end in <LF> or <CR><LF>.  On the Macintosh <CR>
also works.  The <CR> and <NL> characters can never appear inside a line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグファイルの行は <LF> または <CR><LF> で終わる。Macintosh では <CR> も機能する。<CR> と <NL> は行内に決して現れない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-old-static*
The second format is for a static tag only.  It is obsolete now, replaced by
the third format.  It is only supported by Elvis 1.x and Vim and a few
versions of ctags.  A static tag is often used for functions that are local,
only referenced in the file {tagfile}.  Note that for the static tag, the two
occurrences of {tagfile} must be exactly the same.  Also see |tags-option|
below, for how static tags are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-old-static}
@cindex tag-old-static
2 番目の形式は static タグにのみ使用できる。現在では廃れており、3 番目の形式に置き換えられている。これは Elvis 1.x と Vim、それといくつかのバージョンの ctags によってのみサポートされている。static タグはローカル関数によく用いられ、@{tagfile@}内のみ参照する。static タグでは 2 つの @{tagfile@} は正確に一致していなければならないことに注意すること。static タグがどのように使われるかについては |tags-option| を参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The third format is new.  It includes additional information in optional
fields at the end of each line.  It is backwards compatible with Vi.  It is
only supported by new versions of ctags (such as Exuberant ctags).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
3 番目の形式は新しい。各行の末尾にある任意的なフィールドに追加の情報を含む。これは以前の Vi とも互換性がある。新しいバージョンの ctags にのみサポートされている(Exuberant ctags とか)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{tagname}	The identifier.  Normally the name of a function, but it can
		be any identifier.  It cannot contain a <Tab>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item @{tagname@}
識別子。普通は関数名であるが、どんな識別子でも構わない。<Tab> を含めることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{TAB}		One <Tab> character.  Note: previous versions allowed any
		white space here.  This has been abandoned to allow spaces in
		{tagfile}.  It can be re-enabled by including the
		|+tag_any_white| feature at compile time. *tag-any-white*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{TAB@}
1 文字の <Tab>。
@quotation
@strong{Note:} @*
以前のバージョンではここでどんな空白文字も許可していた。これは @{tagfile@} 内にスペースを使うことを断念したためである。コンパイル時に |+tag_any_white| 機能を付加すれば再び使えるようになる。
@anchor{tag-any-white}
@cindex tag-any-white
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{tagfile}	The file that contains the definition of {tagname}.  It can
		have an absolute or relative path.  It may contain environment
		variables and wildcards (although the use of wildcards is
		doubtful).  It cannot contain a <Tab>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{tagfile@}
@{tagname@} の定義を含むファイル名。絶対パスでも相対パスでも構わない。環境変数やワイルドカードを含んでもよい(ワイルドカードの使用方法はあいまいだが)。<Tab> を含むことはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{tagaddress}	The Ex command that positions the cursor on the tag.  It can
		be any Ex command, although restrictions apply (see
		|tag-security|).  Posix only allows line numbers and search
		commands, which are mostly used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{tagaddress@}
カーソルをタグ上に移動する Ex コマンド。制限(|tag-security| を参照)はあるが、どんな Ex コマンドでも使用可能である。Posix では主に使われる行番号と検索コマンドのみ許可する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{term}		;" The two characters semicolon and double quote.  This is
		interpreted by Vi as the start of a comment, which makes the
		following be ignored.  This is for backwards compatibility
		with Vi, it ignores the following fields.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{term@}
;" セミコロンとダブルクォートの 2 文字。これは Vi によってコメントとみなされ、続く文字列は無視される。以前の Vi との互換性を保つためにある。これは続くフィールドを無視する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{field} ..	A list of optional fields.  Each field has the form:

			<Tab>{fieldname}:{value}

		The {fieldname} identifies the field, and can only contain
		alphabetical characters [a-zA-Z].
		The {value} is any string, but cannot contain a <Tab>.
		These characters are special:
			"\t" stands for a <Tab>
			"\r" stands for a <CR>
			"\n" stands for a <NL>
			"\\" stands for a single '\' character
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{field@} ..
任意のフィールドのリスト。各フィールドは次の書式を持つ:
@example
<Tab>@{fieldname@}:@{value@}
@end example
@{fieldname@} はフィールドの識別子であり、アルファベットのみ使用可能である[a-zA-Z]。

@{value@} は任意の文字列であるが、<Tab> は使用できない。

以下の特殊文字が使用できる:
@multitable @columnfractions .99
@item "\t" は <Tab> を表す
@item "\r" は <CR> を表す
@item "\n" は <NL> を表す
@item "\\" は \ を表す
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		There is one field that doesn't have a ':'.  This is the kind
		of the tag.  It is handled like it was preceded with "kind:".
		See the documentation of ctags for the kinds it produces.

		The only other field currently recognized by Vim is "file:"
		(with an empty value).  It is used for a static tag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
':' を持たないフィールドがある。これはタグの一種である。"kind:" を先頭につけたものとして扱われる。kinds については、それを提供する ctags のドキュメントを参照。

現在 Vim が認識できるその他のフィールドは "file:" (値はなし)だけである。これは static タグに使われる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first lines in the tags file can contain lines that start with
	!_TAG_
These are sorted to the first lines, only rare tags that start with "!" can
sort to before them.  Vim recognizes two items.  The first one is the line
that indicates if the file was sorted.  When this line is found, Vim uses
binary searching for the tags file:
	!_TAG_FILE_SORTED<Tab>1<Tab>{anything} ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
tags ファイルの先頭行には、
@example
!_TAG_
@end example
で始まる行を含めることができる。これらは極稀な "!" で始まるタグを除けば先頭行にソートされる。Vim は 2 つのタグを認識する。1 つはファイルがソートされているかどうかを示す行で、この行が見つかった場合には、Vim は tags ファイルに対して二分探索を使用する:
@example
!_TAG_FILE_SORTED<TAB>1<TAB>@{anything@}
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A tag file may be case-fold sorted to avoid a linear search when case is
ignored.  (Case is ignored when 'ignorecase' is set and 'tagcase' is
"followic", or when 'tagcase' is "ignore".)  See 'tagbsearch' for details.
The value '2' should be used then:
	!_TAG_FILE_SORTED<Tab>2<Tab>{anything} ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
大文字小文字を無視する設定の時、線形探索を避けるためにタグファイルは大文字小文字を区別せずにソートされることがある。 ('@option{ignorecase}' がセットされかつ '@option{tagcase}' が "@var{followic}" の時、または '@option{tagcase}' が "@var{ignore}" の時に大文字小文字は無視される。) 詳細は '@option{tagbsearch}' を参照のこと。その時、値として '2' が使われる:
@example
!_TAG_FILE_SORTED<TAB>2<TAB>@{anything@}
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The other tag that Vim recognizes, but only when compiled with the
|+multi_byte| feature, is the encoding of the tags file:
	!_TAG_FILE_ENCODING<Tab>utf-8<Tab>{anything} ~
Here "utf-8" is the encoding used for the tags.  Vim will then convert the tag
being searched for from 'encoding' to the encoding of the tags file.  And when
listing tags the reverse happens.  When the conversion fails the unconverted
tag is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が認識するもう 1 つのタグはタグファイルのエンコーディングを指定するものである。これは |+multi_byte| が有効なときだけ利用できる:
@example
!_TAG_FILE_ENCODING<Tab>utf-8<Tab>@{anything@}
@end example
ここで "utf-8" はタグのエンコーディングである。Vim はタグを検索するときに検索するタグを '@option{encoding}' からタグファイルのエンコーディングに変換する。そして、タグをリストするときに元に戻す。変換が失敗したときは元のままのタグが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tag-search*
The command can be any Ex command, but often it is a search command.
Examples:
	tag1	file1	/^main(argc, argv)/ ~
	tag2	file2	108 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tag-search}
@cindex tag-search
コマンドはどんな Ex コマンドでも使用可能であるが、検索コマンドがよく使われるであ
ろう。

例:
@verbatim
tag1    file1   /^main(argc, argv)/ ~
tag2    file2   108 ~
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The command is always executed with 'magic' not set.  The only special
characters in a search pattern are "^" (begin-of-line) and "$" (<EOL>).
See |pattern|.  Note that you must put a backslash before each backslash in
the search text.  This is for backwards compatibility with Vi.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドは常に 'magic' がセットされない状態で実行される。検索パターンで使用できる特殊文字は "^" (行頭) と "$" (<EOL>) だけである。|pattern| を参照すること。検索文字列中のバックスラッシュの前にはバックスラッシュをつけなければならないことに注意すること。これは以前の Vi と互換性がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*E434* *E435*
If the command is a normal search command (it starts and ends with "/" or
"?"), some special handling is done:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E434}
@anchor{E435}
@cindex E434
@cindex E435
もしコマンドが普通の検索コマンド ("/" か "?" で始まり、終わる) であるならば、いくつかの特別な扱いをされる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Searching starts on line 1 of the file.
  The direction of the search is forward for "/", backward for "?".
  Note that 'wrapscan' does not matter, the whole file is always searched.  (Vi
  does use 'wrapscan', which caused tags sometimes not be found.)  {Vi starts
  searching in line 2 of another file.  It does not find a tag in line 1 of
  another file when 'wrapscan' is not set}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item 検索はファイルの 1 行目から開始する。

検索方向は "/" で前方、"?" で後方となる。'@option{wrapscan}' は問題にならず、いつもファイル全体を検索することに注意。(Vi は '@option{wrapscan}' を使用するため、それが原因でタグが見つからないこともある。)

@{Vi は 別のファイルの 2 行目から検索を開始する。'@option{wrapscan}' を設定しないときには、別のファイルの 1 行目にあるタグは見つけられない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- If the search fails, another try is done ignoring case.  If that fails too,
  a search is done for:
	"^tagname[ \t]*("
  (the tag with '^' prepended and "[ \t]*(" appended).  When using function
  names, this will find the function name when it is in column 0.  This will
  help when the arguments to the function have changed since the tags file was
  made.  If this search also fails another search is done with:
	"^[#a-zA-Z_].*\<tagname[ \t]*("
  This means: A line starting with '#' or an identifier and containing the tag
  followed by white space and a '('.  This will find macro names and function
  names with a type prepended.  {the extra searches are not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 検索が失敗した場合は、大文字小文字を無視してもう一度検索する。それも失敗した場合には次の検索が行われる:
@example
"^tagname[ \t]*("
@end example
(タグの先頭に '^'、末尾に "[ \t]*(" が追加される)。関数名の検索の場合には、これはカラム0の位置にある関数名を見つけるだろう。関数の引数がtagsファイルを作成したときから変更になったときなどに役立つだろう。この検索でも見つからない場合にはさらに次の検索が行われる:
@example
"^[#a-zA-Z_].*\<tagname[ \t]*("
@end example
この意味は: '#' もしくは識別子で始まり、空白文字と '(' が続くタグを含む行である。これは型が先頭にあるマクロ名や関数名を見つけるだろう。

@{Vi には拡張検索はない@}
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Include file searches		*include-search* *definition-search*
							*E387* *E388* *E389*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{include-search}
@anchor{definition-search}
@anchor{E387}
@anchor{E388}
@anchor{E389}
@cindex include-search
@cindex definition-search
@cindex E387
@cindex E388
@cindex E389
@section 6. インクルードファイルの検索
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These commands look for a string in the current file and in all encountered
included files (recursively).  This can be used to find the definition of a
variable, function or macro.  If you only want to search in the current
buffer, use the commands listed at |pattern-searches|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドは対象となる文字列を現在のファイルと、遭遇するすべてのインクルードファイルを再帰的に探す。これは変数や関数、マクロの定義を探すのに利用できる。現在のバッファに対してだけ検索をしたいのならば、|pattern-searches| に列挙されているコマンドを使うとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These commands are not available when the |+find_in_path| feature was disabled
at compile time.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドは、コンパイル時に |+find_in_path| 機能を使用不可にした場合には利用できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a line is encountered that includes another file, that file is searched
before continuing in the current buffer.  Files included by included files are
also searched.  When an include file could not be found it is silently
ignored.  Use the |:checkpath| command to discover which files could not be
found, possibly your 'path' option is not set up correctly.  Note: the
included file is searched, not a buffer that may be editing that file.  Only
for the current file the lines in the buffer are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のファイルをインクルードする行に遭遇すると、現在のバッファを続けて検索する前にインクルードファイルを検索する。インクルードファイルによってインクルードされるファイルも同様に検索される。インクルードファイルが見つからなかった場合は黙って無視する。見つからなかったファイルを知りたいときは |:checkpath| コマンドを使う。たぶん '@option{path}' オプションが正しく設定されていないのだろう。
@quotation
@strong{Note:} @*
インクルードファイルはファイルが検索され、そのファイルを編集中のバッファが存在しても対象にならない。バッファにある行は、現在のファイルにのみ適用される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The string can be any keyword or a defined macro.  For the keyword any match
will be found.  For defined macros only lines that match with the 'define'
option will be found.  The default is "^#\s*define", which is for C programs.
For other languages you probably want to change this.  See 'define' for an
example for C++.  The string cannot contain an end-of-line, only matches
within a line are found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
検索文字列は任意のキーワードや定義されたマクロが指定できる。キーワードの場合はマッチするものを見つける。定義されたマクロの場合は 'define' オプションにマッチする行だけが見つけられる。デフォルトは C プログラム用の "^#\s*define" である。他の言語の場合はおそらく変更したいだろう。C++ 用の例は 'define' を参照。その文字列に改行を含めることはできない。一行内にマッチするものだけが見つかる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a match is found for a defined macro, the displaying of lines continues
with the next line when a line ends in a backslash.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
定義されたマクロが見つかった場合、行末がバックスラッシュのときは次の行も表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The commands that start with "[" start searching from the start of the current
file.  The commands that start with "]" start at the current cursor position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"[" で始まるコマンドは現在のファイルの先頭から検索を開始する。"]" で始まるコマンドは現在のカーソル位置から検索を開始する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'include' option is used to define a line that includes another file.  The
default is "\^#\s*include", which is for C programs.  Note: Vim does not
recognize C syntax, if the 'include' option matches a line inside
"#ifdef/#endif" or inside a comment, it is searched anyway.  The 'isfname'
option is used to recognize the file name that comes after the matched
pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{include}' オプションは他のファイルをインクルードする行を定義する。デフォルトは C プログラム用の "\^#\s*include" である。
@quotation
@strong{Note:} @*
Vim は C の構文を認識しない。もし '@option{include}' オプションにマッチする行が "#ifdef/#endif" の間やコメント行であっても、とにかく検索される。'@option{isfname}' オプションはマッチパターンに続くファイル名を認識するために使用される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'path' option is used to find the directory for the include files that
do not have an absolute path.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{path}' オプションは絶対パスを持たないインクルードファイルを探すためのディレクトリを指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'comments' option is used for the commands that display a single line or
jump to a line.  It defines patterns that may start a comment.  Those lines
are ignored for the search, unless [!] is used.  One exception: When the line
matches the pattern "^# *define" it is not considered to be a comment.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{comments}' オプションは単一行を表示するコマンド、もしくは行にジャンプするコマンドで使用される。これはコメントの開始パターンを定義する。それらの行は [!] を使用しない限り検索において無視される。ひとつの例外: 行が "^# *define" というパターンにマッチしたとき、コメントであるとはみなされない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to list matches, and then select one to jump to, you could use a
mapping to do that for you.  Here is an example: >

  :map <F4> [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしマッチしたリストを表示して、その中からジャンプ先を選択したいならば、マッピングが利用できる。例:
@example
:map <F4> [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*[i*
[i			Display the first line that contains the keyword
			under the cursor.  The search starts at the beginning
			of the file.  Lines that look like a comment are
			ignored (see 'comments' option).  If a count is given,
			the count'th matching line is displayed, and comment
			lines are not ignored.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{[i}
@cindex [i
@item [i
カーソルの下にあるキーワードを含む 1 行を表示する。検索はファイルの先頭から開始する。コメントとみなせる行は無視される('@option{comments}' オプションを参照すること)。数字が与えられた場合は、先頭から指定した個数目にマッチした行を表示する。この場合はコメント行は無視されない。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]i*
]i			like "[i", but start at the current cursor position.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]i}
@cindex ]i
@item ]i
"[i" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:is* *:isearch*
:[range]is[earch][!] [count] [/]pattern[/]
			Like "[i"  and "]i", but search in [range] lines
			(default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:is}
@anchor{:isearch}
@cindex :is
@cindex :isearch
@item :[range]is[earch][!] [count] [/]pattern[/]
"[i" や "]i" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[I*
[I			Display all lines that contain the keyword under the
			cursor.  Filenames and line numbers are displayed
			for the found lines.  The search starts at the
			beginning of the file.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[I}
@cindex [I
@item [I
カーソルの下にあるキーワードを含む行をすべて表示する。結果にはファイル名と行番号が表示される。検索はファイルの先頭から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]I*
]I			like "[I", but start at the current cursor position.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]I}
@cindex ]I
@item ]I
"[I" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:il* *:ilist*
:[range]il[ist][!] [/]pattern[/]
			Like "[I" and "]I", but search in [range] lines
			(default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:il}
@anchor{:ilist}
@cindex :il
@cindex :ilist
@item :[range]il[ist][!] [/]pattern[/]
"[I" や "]I" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[_CTRL-I*
[ CTRL-I		Jump to the first line that contains the keyword
			under the cursor.  The search starts at the beginning
			of the file.  Lines that look like a comment are
			ignored (see 'comments' option).  If a count is given,
			the count'th matching line is jumped to, and comment
			lines are not ignored.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[_CTRL-I}
@cindex [_CTRL-I
@item [ CTRL-I
カーソルの下にあるキーワードを含む最初の 1 行にジャンプする。検索はファイルの先頭から開始する。コメントとみなせる行は無視される ('@option{comments}' オプションを参照すること)。数字が与えられた場合は、先頭から指定した個数目にマッチした行にジャンプする。この場合はコメント行は無視されない。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]_CTRL-I*
] CTRL-I		like "[ CTRL-I", but start at the current cursor
			position.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]_CTRL-I}
@cindex ]_CTRL-I
@item ] CTRL-I
"[ CTRL-I" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ij* *:ijump*
:[range]ij[ump][!] [count] [/]pattern[/]
			Like "[ CTRL-I"  and "] CTRL-I", but search in
			[range] lines (default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ij}
@anchor{:ijump}
@cindex :ij
@cindex :ijump
@item :[range]ij[ump][!] [count] [/]pattern[/]
"[ CTRL-I" や "] CTRL-I" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-W CTRL-I					*CTRL-W_CTRL-I* *CTRL-W_i*
CTRL-W i		Open a new window, with the cursor on the first line
			that contains the keyword under the cursor.  The
			search starts at the beginning of the file.  Lines
			that look like a comment line are ignored (see
			'comments' option).  If a count is given, the count'th
			matching line is jumped to, and comment lines are not
			ignored.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-W_CTRL-I}
@anchor{CTRL-W_i}
@cindex CTRL-W_CTRL-I
@cindex CTRL-W_i
@item @kbd{CTRL-W} @kbd{CTRL-I} または
@itemx @kbd{CTRL-W} i
新しいウィンドウを開き、カーソルの下にあったキーワードを含む最初の 1 行に移動する。検索はファイルの先頭から開始する。コメントとみなせる行は無視される('@option{comments}' オプションを参照すること)。数字が与えられた場合は、先頭から指定した個数目にマッチした行にジャンプする。この場合はコメント行は無視されない。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:isp* *:isplit*
:[range]isp[lit][!] [count] [/]pattern[/]
			Like "CTRL-W i"  and "CTRL-W i", but search in
			[range] lines (default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:isp}
@anchor{:isplit}
@cindex :isp
@cindex :isplit
@item :[range]isp[lit][!] [count] [/]pattern[/]
"CTRL-W i" や "CTRL-W i" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[d*
[d			Display the first macro definition that contains the
			macro under the cursor.  The search starts from the
			beginning of the file.  If a count is given, the
			count'th matching line is displayed.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[d}
@cindex [d
@item [d
カーソルの下にあるマクロを含む最初のマクロ定義を表示する。検索はファイルの先頭から開始する。数字が与えられた場合は、先頭から指定した個数目にマッチした行を表示する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]d*
]d			like "[d", but start at the current cursor position.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]d}
@cindex ]d
@item ]d
"[d" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ds* *:dsearch*
:[range]ds[earch][!] [count] [/]string[/]
			Like "[d"  and "]d", but search in [range] lines
			(default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ds}
@anchor{:dsearch}
@cindex :ds
@cindex :dsearch
@item :[range]ds[earch][!] [count] [/]string[/]
"[d" や "]d" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[D*
[D			Display all macro definitions that contain the macro
			under the cursor.  Filenames and line numbers are
			displayed for the found lines.  The search starts
			from the beginning of the file.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[D}
@cindex [D
@item [D
カーソルの下にあるマクロを含むすべてのマクロ定義を表示する。結果にはファイル名と行番号が表示される。検索はファイルの先頭から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]D*
]D			like "[D", but start at the current cursor position.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]D}
@cindex ]D
@item ]D
"[D" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:dli* *:dlist*
:[range]dli[st][!] [/]string[/]
			Like `[D`  and `]D`, but search in [range] lines
			(default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
			Note that `:dl` works like `:delete` with the "l"
			flag, not `:dlist`.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:dli}
@anchor{:dlist}
@cindex :dli
@cindex :dlist
@item :[range]dli[st][!] [/]string[/]
`[D` や `]D` と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@quotation
@strong{Note:} @*
`:dl` は `:dlist` ではなく、`:delete` に "l" レジスタを指定したものとして機能する。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[_CTRL-D*
[ CTRL-D		Jump to the first macro definition that contains the
			keyword under the cursor.  The search starts from
			the beginning of the file.  If a count is given, the
			count'th matching line is jumped to.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[_CTRL-D}
@cindex [_CTRL-D
@item [ @kbd{CTRL-D}
カーソルの下にあるキーワードを含む最初のマクロ定義にジャンプする。検索はファイルの先頭から開始する。数字が与えられた場合は、先頭から指定した個数目にマッチした行にジャンプする。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*]_CTRL-D*
] CTRL-D		like "[ CTRL-D", but start at the current cursor
			position.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{]_CTRL-D}
@cindex ]_CTRL-D
@item ] @kbd{CTRL-D}
"[ CTRL-D" と同様だが、検索が現在のカーソル位置から開始される。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:dj* *:djump*
:[range]dj[ump][!] [count] [/]string[/]
			Like "[ CTRL-D"  and "] CTRL-D", but search  in
			[range] lines (default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:dj}
@anchor{:djump}
@cindex :dj
@cindex :djump
@item :[range]dj[ump][!] [count] [/]string[/]
"[ CTRL-D" や "] CTRL-D" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-W CTRL-D					*CTRL-W_CTRL-D* *CTRL-W_d*
CTRL-W d		Open a new window, with the cursor on the first
			macro definition line that contains the keyword
			under the cursor.  The search starts from the
			beginning of the file.  If a count is given, the
			count'th matching line is jumped to.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-W_CTRL-D}
@anchor{CTRL-W_d}
@cindex CTRL-W_CTRL-D
@cindex CTRL-W_d
@item @kbd{CTRL-W} @kbd{CTRL-D} または
@itemx @kbd{CTRL-W} d
新しいウィンドウを開き、カーソルの下にあったキーワードを含む最初のマクロ定義に移動する。検索はファイルの先頭から開始する。数字が与えられた場合は、先頭から指定した個数目にマッチした行にジャンプする。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:dsp* *:dsplit*
:[range]dsp[lit][!] [count] [/]string[/]
			Like "CTRL-W d", but search in [range] lines
			(default: whole file).
			See |:search-args| for [/] and [!].  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:dsp}
@anchor{:dsplit}
@cindex :dsp
@cindex :dsplit
@item :[range]dsp[lit][!] [count] [/]string[/]
"CTRL-W d" と同様だが、[range] で指定された範囲から検索する(デフォルト: ファイル全体)。

[/] と [!] については |:search-args| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:che* *:checkpath*
:che[ckpath]		List all the included files that could not be found.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:che}
@anchor{:checkpath}
@cindex :che
@cindex :checkpath
@item :che[ckpath]
ファイルが見つからないすべてのインクルードファイル名をリスト表示する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:che[ckpath]!		List all the included files.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :che[ckpath]!
すべてのインクルードファイル名をリスト表示する。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*:search-args*
Common arguments for the commands above:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:search-args}
@cindex :search-args
上記コマンドに共通の引数:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
[!]	When included, find matches in lines that are recognized as comments.
	When excluded, a match is ignored when the line is recognized as a
	comment (according to 'comments'), or the match is in a C comment
	(after "//" or inside /* */).  Note that a match may be missed if a
	line is recognized as a comment, but the comment ends halfway the line.
	And if the line is a comment, but it is not recognized (according to
	'comments') a match may be found in it anyway.  Example: >
		/* comment
		   foobar */
<	A match for "foobar" is found, because this line is not recognized as
	a comment (even though syntax highlighting does recognize it).
	Note: Since a macro definition mostly doesn't look like a comment, the
	[!] makes no difference for ":dlist", ":dsearch" and ":djump".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item [!]
使用した場合は、コメントとみなせる行に対しても検索をする。使用しなかった場合は '@option{comments}' によってコメントとみなされる行や C コメント("//" の後ろか /* */ の間)にあるものは無視される。コメントとみなされた行が、途中からコメントでなくなるようなときは見逃すかもしれないことに注意。

また、コメント行であっても、('@option{comments}' によって) 認識されないでとにかくマッチするかもしれない。例:
@verbatim
/* comment
foobar */
@end verbatim
"foobar" に対する検索はマッチする。これは行がコメントとして認識されないためである(たとえ構文強調表示が認識したとしても)。
@quotation
@strong{Note:} @*
マクロ定義はたいていコメントと誤認されることはないので、":dlist" や ":dsearch"、":djump" に [!] を使用することは大差がない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
[/]	A pattern can be surrounded by '/'.  Without '/' only whole words are
	matched, using the pattern "\<pattern\>".  Only after the second '/' a
	next command can be appended with '|'.  Example: >
	:isearch /string/ | echo "the last one"
<	For a ":djump", ":dsplit", ":dlist" and ":dsearch" command the pattern
	is used as a literal string, not as a search pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item [/]
パターンは '/' で囲むことができる。'/' なしの場合、"\<pattern\>" というパターンを使うことによって、完全な語だけがマッチする。2 つ目の '/' の後にだけ、'|' を使うことによって次のコマンドを追加できる。例:
@example
:isearch /string/ | echo "the last one"
@end example
":djump", ":dsplit", ":dlist", ":dsearch" コマンドではパターンは検索パターンとしてではなく文字通りに使われる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
