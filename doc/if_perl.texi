@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node if_perl.txt, , , 目次
@unnumbered Perl インターフェイス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*if_perl.txt*   For Vim version 8.0.  Last change: 2017 Nov 24


		  VIM REFERENCE MANUAL    by Sven Verdoolaege
					 and Matt Gerassimof
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*if_perl.txt*   For Vim バージョン 8.0.  Last change: 2015 Oct 16


                  VIMリファレンスマニュアル    by Sven Verdoolaege
                                              and Matt Gerassimof
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Perl and Vim				*perl* *Perl*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl}
@anchor{Perl}
@cindex perl
@cindex Perl
Perl と Vim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Editing Perl files			|perl-editing|
2. Compiling Vim with Perl interface	|perl-compiling|
3. Using the Perl interface		|perl-using|
4. Dynamic loading			|perl-dynamic|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. Perl のファイルを編集する @tab |@ref{perl-editing}|
@item 2. Perl インターフェイス付きのコンパイル @tab |@ref{perl-compiling}|
@item 3. Perl インターフェイスを使う @tab |@ref{perl-using}|
@item 4. 動的ローディング @tab |@ref{perl-dynamic}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{Vi does not have any of these commands}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi にはこれらのコマンドはありません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Perl interface only works when Vim was compiled with the |+perl| feature.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl インターフェイスは、Vim を |@ref{+perl}| 機能付きでコンパイルしている場合にのみ利用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Editing Perl files					*perl-editing*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-editing}
@cindex perl-editing
@section 1. Perl のファイルを編集する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim syntax highlighting supports Perl and POD files.  Vim assumes a file is
Perl code if the filename has a .pl or .pm suffix.  Vim also examines the first
line of a file, regardless of the filename suffix, to check if a file is a
Perl script (see scripts.vim in Vim's syntax directory).  Vim assumes a file
is POD text if the filename has a .POD suffix.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の構文ハイライト (syntax highlighting) は Perl と POD のファイルもサポートしています。Vim はファイルの拡張子が .pl か .pm であると、Perl のコードだと想定します。また、ファイルの拡張子によらず、Vim はファイルの1行目を調べてファイルが Perl スクリプトであるかどうか確認します (Vim の syntax ディレクトリにある scripts.vim を参照してください)。ファイルの拡張子が .POD であると、Vim は PODテキストであると想定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To use tags with Perl, you need a recent version of Exuberant ctags.  Look
here:
	http://ctags.sourceforge.net
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl でタグを使うには、最近のctagsが必要です。ここを訪れてください:

@url{http://ctags.sourceforge.net}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Alternatively, you can use the Perl script pltags.pl, which is shipped with
Vim in the $VIMRUNTIME/tools directory.  This script has currently more
features than Exuberant ctags' Perl support.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl スクリプトの "pltags.pl" を使うこともできます。これは $VIMRUNTIME/tools ディレクトリにあります。これは今のところ最新の ctags よりも高機能です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Compiling Vim with Perl interface			*perl-compiling*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-compiling}
@cindex perl-compiling
@section 2. Perl インターフェイス付きのコンパイル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To compile Vim with Perl interface, you need Perl 5.004 (or later).  Perl must
be installed before you compile Vim.  Vim's Perl interface does NOT work with
the 5.003 version that has been officially released!  It will probably work
with Perl 5.003_05 and later.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl インターフェイス付きで Vim をコンパイルするには、5.004 もしくはそれ以上のバージョンの Perl が必要です。Perl は Vim をコンパイルする前にインストールしておかなければなりません。Vim の Perl インターフェイスは、公式にリリースされたバージョンである Perl 5.003 では動作しません！Perl 5.003_05 もしくはそれ以上であれば、たぶん動作するでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Perl patches for Vim were made by:
	Sven Verdoolaege <skimo@breughel.ufsia.ac.be>
	Matt Gerassimof
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim への Perl パッチは、次の方によって作成されました:

Sven Verdoolaege <skimo@@breughel.ufsia.ac.be> @*
Matt Gerassimof
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Perl for MS-Windows can be found at: http://www.perl.com/
The ActiveState one should work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl for MS-Windows は、次の場所で見つけることができます:

@url{http://www.perl.com/}

ActiveState のものも動作するでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Using the Perl interface				*perl-using*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-using}
@cindex perl-using
@section 3. Perl インターフェイスを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:perl* *:pe*
:pe[rl] {cmd}		Execute Perl command {cmd}.  The current package
			is "main".  Simple example to test if `:perl` is
			working: >
				:perl VIM::Msg("Hello")
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:perl}
@anchor{:pe}
@cindex :perl
@cindex :pe
@item :pe[rl] @{cmd@}
Perl コマンド @{cmd@} を実行します。現在のパッケージは "main" です。`@command{:perl}` が動作するかを確認する単純な例は:
@example
:perl VIM::Msg("Hello")
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:pe[rl] << {endpattern}
{script}
{endpattern}
			Execute Perl script {script}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :pe[rl] << @{endpattern@}
@itemx @{script@}
@itemx @{endpattern@}
Perlスクリプト @{script@} を実行します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			{endpattern} must NOT be preceded by any white space.
			If {endpattern} is omitted, it defaults to a dot '.'
			like for the |:append| and |:insert| commands.  Using
			'.' helps when inside a function, because "$i;" looks
			like the start of an |:insert| command to Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@{endpattern@} の前に空白を置いてはいけません。@{endpattern@} を省略した時は |@ref{:append}| や |@ref{:insert}| のように '.' が使われます。これは関数の中で使う時に便利です。なぜなら "$i;" は |@ref{:insert}| コマンドの開始と紛らわしいからです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			This form of the |:perl| command is mainly useful for
			including perl code in vim scripts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

|@ref{:perl}| コマンドのこの方法は Vim script の中に Perl スクリプトを埋め込む時に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Note: This command doesn't work when the Perl feature
			wasn't compiled in.  To avoid errors, see
			|script-here|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Perl のサポートを有効にしてコンパイルされていないとこのコマンドは機能しません。エラーを回避するには |@ref{script-here}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Example vim script: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim script の例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	function! WhitePearl()
	perl << EOF
		VIM::Msg("pearls are nice for necklaces");
		VIM::Msg("rubys for rings");
		VIM::Msg("pythons for bags");
		VIM::Msg("tcls????");
	EOF
	endfunction
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
function! WhitePearl()
perl << EOF
        VIM::Msg("pearls are nice for necklaces");
        VIM::Msg("rubys for rings");
        VIM::Msg("pythons for bags");
        VIM::Msg("tcls????");
EOF
endfunction
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
To see what version of Perl you have: >
	:perl print $^V
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使っている Perl のバージョンを見るには:
@example
:perl print $^V
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:perldo* *:perld*
:[range]perld[o] {cmd}	Execute Perl command {cmd} for each line in the
			[range], with $_ being set to the text of each line in
			turn, without a trailing <EOL>.  Setting $_ will change
			the text, but note that it is not possible to add or
			delete lines using this command.
			The default for [range] is the whole file: "1,$".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:perldo}
@anchor{:perld}
@cindex :perldo
@cindex :perld
@item :[range]perld[o] @{cmd@}
Perl コマンド @{cmd@} を @{range@} のそれぞれの行に対して実行します。$_ はテキスト中のそれぞれの行のテキストに、余計な <EOL> なしでセットされます。$_ をセットすることでテキストを変更しますが、このコマンドを使って行を挿入したり、削除したりすることはできないということに注意してください。

デフォルトの [range] はすべての行です: "1,$"。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here are some things you can try: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかの例をあげますと:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  :perl $a=1
  :perldo $_ = reverse($_);1
  :perl VIM::Msg("hello")
  :perl $line = $curbuf->Get(42)
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:perl $a=1
:perldo $_ = reverse($_);1
:perl VIM::Msg("hello")
:perl $line = $curbuf->Get(42)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E299*
Executing Perl commands in the |sandbox| is limited.  ":perldo" will not be
possible at all.  ":perl" will be evaluated in the Safe environment, if
possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E299}
@cindex E299
|@ref{sandbox}| の中の Perl コマンドの実行は制限されています。":perldo" は常に使えません。":perl" は安全な環境の中で、可能なら評価されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
							*perl-overview*
Here is an overview of the functions that are available to Perl: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-overview}
@cindex perl-overview
Perl で使える関数の一覧です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  :perl VIM::Msg("Text")		# displays a message
  :perl VIM::Msg("Wrong!", "ErrorMsg")	# displays an error message
  :perl VIM::Msg("remark", "Comment")	# displays a highlighted message
  :perl VIM::SetOption("ai")		# sets a vim option
  :perl $nbuf = VIM::Buffers()		# returns the number of buffers
  :perl @buflist = VIM::Buffers()	# returns array of all buffers
  :perl $mybuf = (VIM::Buffers('qq.c'))[0] # returns buffer object for 'qq.c'
  :perl @winlist = VIM::Windows()	# returns array of all windows
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .6 .4
@item :perl VIM::Msg("Text") @tab メッセージを表示します
@item :perl VIM::Msg("Error", "ErrorMsg") @tab エラーメッセージを表示します
@item :perl VIM::Msg("remark", "Comment") @tab ハイライトされたメッセージを表示します
@item :perl VIM::SetOption("ai") @tab Vim のオプションをセットします
@item :perl $nbuf = VIM::Buffers() @tab 全てのバッファ数を返す
@item :perl @@buflist = VIM::Buffers() @tab 全てのバッファの配列を返す
@item :perl $mybuf = (VIM::Buffers('qq.c'))[0] @tab 'qq.c' のバッファオブジェクト # を返す
@item :perl @@winlist = VIM::Windows() @tab 全てのウィンドウの配列を返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  :perl $nwin = VIM::Windows()		# returns the number of windows
  :perl ($success, $v) = VIM::Eval('&path') # $v: option 'path', $success: 1
  :perl ($success, $v) = VIM::Eval('&xyz')  # $v: '' and $success: 0
  :perl $v = VIM::Eval('expand("<cfile>")') # expands <cfile>
  :perl $curwin->SetHeight(10)		# sets the window height
  :perl @pos = $curwin->Cursor()	# returns (row, col) array
  :perl @pos = (10, 10)
  :perl $curwin->Cursor(@pos)		# sets cursor to @pos
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :perl $nwin = VIM::Windows() @tab ウィンドウ数を返す
@item :perl ($success, $v) = VIM::Eval('&path') @tab $v: '@option{path}' オプション、$success: 1
@item :perl ($success, $v) = VIM::Eval('&xyz') @tab $v: '' $sucess: 0
@item :perl $v = VIM::Eval('expand("<cfile>")') @tab <cfile> を展開
@item :perl $curwin->SetHeight(10) @tab ウィンドウの高さを設定します
@item :perl @@pos = $curwin->Cursor() @tab (行, 列) 配列を返します
@item :perl @@pos = (10, 10) @tab
@item :perl $curwin->Cursor(@@pos) @tab カーソルを @@pos にセットします
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  :perl $curwin->Cursor(10,10)		# sets cursor to row 10 col 10
  :perl $mybuf = $curwin->Buffer()	# returns the buffer object for window
  :perl $curbuf->Name()			# returns buffer name
  :perl $curbuf->Number()		# returns buffer number
  :perl $curbuf->Count()		# returns the number of lines
  :perl $l = $curbuf->Get(10)		# returns line 10
  :perl @l = $curbuf->Get(1 .. 5)	# returns lines 1 through 5
  :perl $curbuf->Delete(10)		# deletes line 10
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :perl $curwin->Cursor(10,10) @tab カーソルを 10 行 10 列目にセットします
@item :perl $mybuf = $curwin->Buffer() @tab ウィンドウのバッファオブジェクトを返す
@item :perl $curbuf->Name() @tab バッファ名を返します
@item :perl $curbuf->Number() @tab バッファ番号を返します
@item :perl $curbuf->Count() @tab 行数を返します
@item :perl $l = $curbuf->Get(10) @tab 10 行目を返します
@item :perl @@l = $curbuf->Get(1 .. 5) @tab 1 行目から5行目までを返します
@item :perl $curbuf->Delete(10) @tab 10 行目を削除します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  :perl $curbuf->Delete(10, 20)		# delete lines 10 through 20
  :perl $curbuf->Append(10, "Line")	# appends a line
  :perl $curbuf->Append(10, "Line1", "Line2", "Line3") # appends 3 lines
  :perl @l = ("L1", "L2", "L3")
  :perl $curbuf->Append(10, @l)		# appends L1, L2 and L3
  :perl $curbuf->Set(10, "Line")	# replaces line 10
  :perl $curbuf->Set(10, "Line1", "Line2")	# replaces lines 10 and 11
  :perl $curbuf->Set(10, @l)		# replaces 3 lines
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :perl $curbuf->Delete(10, 20) @tab 10 行目から 20 行目までを削除します
@item :perl $curbuf->Append(10, "Line") @tab 行を挿入します
@item :perl $curbuf->Append(10, "Line1", "Line2", "Line3") @tab 3 行挿入します
@item :perl @@l = ("L1", "L2", "L3") @tab
@item :perl $curbuf->Append(10, @@l) @tab L1, L2, L3 を挿入します
@item :perl $curbuf->Set(10, "Line") @tab 10 行目を置き換えます
@item :perl $curbuf->Set(10, "Line1", "Line2") @tab 10 行目と 11 行目を置き換えます
@item :perl $curbuf->Set(10, @@l) @tab 3 行置き換えます
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*perl-Msg*
VIM::Msg({msg}, {group}?)
			Displays the message {msg}.  The optional {group}
			argument specifies a highlight group for Vim to use
			for the message.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Msg}
@cindex perl-Msg
@item VIM::Msg(@{msg@}, @{group@}?)
@{msg@} メッセージを表示する。オプショナルな @{group@} 引数は、そのメッセージの Vim でのハイライトグループを指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-SetOption*
VIM::SetOption({arg})	Sets a vim option.  {arg} can be any argument that the
			":set" command accepts.  Note that this means that no
			spaces are allowed in the argument!  See |:set|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-SetOption}
@cindex perl-SetOption
@item VIM::SetOption(@{arg@})
Vim のオプションをセットします。@{arg@} は ":set" コマンドで使える引数であればなんでもよいです。このことは、引数の中にスペースを入れることは許されないということを意味しますので、注意してください。参照: |@ref{:set}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Buffers*
VIM::Buffers([{bn}...])	With no arguments, returns a list of all the buffers
			in an array context or returns the number of buffers
			in a scalar context.  For a list of buffer names or
			numbers {bn}, returns a list of the buffers matching
			{bn}, using the same rules as Vim's internal
			|bufname()| function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Buffers}
@cindex perl-Buffers
@item VIM::Buffers([@{bn@}...])
引数なしだと、配列コンテキストではすべてのバッファのリストを、スカラーコンテキストではバッファの数を返します。バッファ名 @{bn@} もしくは、バッファ番号 @{bn@} のリストが与えられた場合は、@{bn@} にマッチするバッファのリストを返します。ここでは Vim の内部関数 |@ref{bufname()}| と同じルールが用いられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			WARNING: the list becomes invalid when |:bwipe| is
			used.  Using it anyway may crash Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
|@ref{:bwipe}| が使われると、このリストは無効になります。それを使おうとすると Vim がクラッシュすることがあります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Windows*
VIM::Windows([{wn}...])	With no arguments, returns a list of all the windows
			in an array context or returns the number of windows
			in a scalar context.  For a list of window numbers
			{wn}, returns a list of the windows with those
			numbers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Windows}
@cindex perl-Windows
@item VIM::Windows([@{wn@}...])
引数なしだと、配列コンテキストではすべてのウィンドウのリストを返し、スカラーコンテキストではウィンドウの数を返します。ウィンドウ数 @{wn@} にリストが与えられた場合は、それらの番号のウィンドウのリストを返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			WARNING: the list becomes invalid when a window is
			closed.  Using it anyway may crash Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
|@ref{:bwipe}| が使われると、このリストは無効になります。それを使おうとすると Vim がクラッシュすることがあります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-DoCommand*
VIM::DoCommand({cmd})	Executes Ex command {cmd}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-DoCommand}
@cindex perl-DoCommand
@item VIM::DoCommand(@{cmd@})
Ex コマンド @{cmd@} を実行します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Eval*
VIM::Eval({expr})	Evaluates {expr} and returns (success, value) in list 
			context or just value in scalar context.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Eval}
@cindex perl-Eval
@item VIM::Eval(@{expr@})
@{expr@} を評価して、リストコンテキストでは (success, value) を返し、スカラーコンテキストでは単に値を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			success=1 indicates that val contains the value of
			{expr}; success=0 indicates a failure to evaluate
			the expression.  '@x' returns the contents of register
			x, '&x' returns the value of option x, 'x' returns the
			value of internal |variables| x, and '$x' is equivalent
			to perl's $ENV{x}.  All |functions| accessible from
			the command-line are valid for {expr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

success=1 だと、val は @{expr@} の値を含みます。

success=0 だと、式の評価に失敗したことを示しています。

'@@x' はレジスタ x の内容を返し、'&x' はオプション x の値を返します。'x' は内部変数 |@ref{variables}| x を返し、'$x' は Perl の $ENV@{x@} と同じです。コマンドラインからアクセスできるすべての |@ref{functions}| は @{expr@} に使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			A |List| is turned into a string by joining the items
			and inserting line breaks.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

リスト |@ref{List}| は文字列に変換されます。そのとき各要素の間に改行が挿入され、連結されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-SetHeight*
Window->SetHeight({height})
			Sets the Window height to {height}, within screen
			limits.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-SetHeight}
@cindex perl-SetHeight
@item Window->SetHeight(@{height@})
ウィンドウの高さをスクリーンの上限以内で @{height@} にセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-GetCursor*
Window->Cursor({row}?, {col}?)
			With no arguments, returns a (row, col) array for the
			current cursor position in the Window.  With {row} and
			{col} arguments, sets the Window's cursor position to
			{row} and {col}.  Note that {col} is numbered from 0,
			Perl-fashion, and thus is one less than the value in
			Vim's ruler.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-GetCursor}
@cindex perl-GetCursor
@item Window->Cursor(@{row@}?, @{col@}?)
引数なしだと、ウィンドウの現在のカーソル位置の (row, col) 配列を返します。@{row@} と @{col@} 引数をつけてよばれると、ウィンドウのカーソル位置を @{row@} と @{col@}にセットします。@{col@} は Perl のように0から数えられますので、Vim のルーラーの値より 1 つ小さくなるということに注意してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Window->Buffer()					*perl-Buffer*
			Returns the Buffer object corresponding to the given
			Window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Buffer}
@cindex perl-Buffer
@item Window->Buffer()
与えられたウィンドウに対応するバッファオブジェクトを返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Name*
Buffer->Name()		Returns the filename for the Buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Name}
@cindex perl-Name
@item Buffer->Name()
バッファのファイル名を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Number*
Buffer->Number()	Returns the number of the Buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Number}
@cindex perl-Number
@item Buffer->Number()
バッファの番号を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Count*
Buffer->Count()		Returns the number of lines in the Buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Count}
@cindex perl-Count
@item Buffer->Count()
バッファの行数を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Get*
Buffer->Get({lnum}, {lnum}?, ...)
			Returns a text string of line {lnum} in the Buffer
			for each {lnum} specified.  An array can be passed
			with a list of {lnum}'s specified.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Get}
@cindex perl-Get
@item Buffer->Get(@{lnum@}, @{lnum@}?, ...)
バッファの @{lnum@} 行目のテキストを、指定されているそれぞれの @{lnum@} に関して返します。@{lnum@} のリストとして配列を渡すこともできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Delete*
Buffer->Delete({lnum}, {lnum}?)
			Deletes line {lnum} in the Buffer.  With the second
			{lnum}, deletes the range of lines from the first
			{lnum} to the second {lnum}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Delete}
@cindex perl-Delete
@item Buffer->Delete(@{lnum@}, @{lnum@}?)
バッファの @{lnum@} 行目を削除します。2 つ目の @{lnum@} が指定されていると、始めの @{lnum@} から 2 つ目の @{lnum@} までの範囲の行が削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Append*
Buffer->Append({lnum}, {line}, {line}?, ...)
			Appends each {line} string after Buffer line {lnum}.
			The list of {line}s can be an array.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Append}
@cindex perl-Append
@item Buffer->Append(@{lnum@}, @{line@}, @{line@}?, ...)
それぞれの @{line@} をバッファの @{lnum@} 行目の後に挿入します。@{line@} のリストは配列でもよいです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*perl-Set*
Buffer->Set({lnum}, {line}, {line}?, ...)
			Replaces one or more Buffer lines with specified
			{lines}s, starting at Buffer line {lnum}.  The list of
			{line}s can be an array.  If the arguments are
			invalid, replacement does not occur.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-Set}
@cindex perl-Set
@item Buffer->Set(@{lnum@}, @{line@}, @{line@}?, ...)
バッファの行を 1 行以上 @{line@} で指定される行で置き換えます。置き換えは、@{lnum@} から始まり、@{line@} は配列でもよいです。引数が有効でないものであれば、置き換えは起こりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
$main::curwin
			The current window object.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item $main::curwin
現在のウィンドウオブジェクト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
$main::curbuf
			The current buffer object.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item $main::curbuf
現在のバッファオブジェクト
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
							*script-here*
When using a script language in-line, you might want to skip this when the
language isn't supported.  But this mechanism doesn't work: >
   if has('perl')
     perl << EOF
       this will NOT work!
   EOF
   endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{script-here}
@cindex script-here
Vim script にその他のスクリプトを埋め込むときに、その言語がサポートされていないなら、その部分をスキップしたいでしょう。しかし、次のコードはうまく動きません。
@example
if has('perl')
  perl << EOF
    this will NOT work!
EOF
endif
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Instead, put the Perl/Python/Ruby/etc. command in a function and call that
function: >
    if has('perl')
      function DefPerl()
	perl << EOF
	  this works
    EOF
      endfunction
      call DefPerl()
    endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このようにしないで、関数の中に Perl/Python/Ruby/etc のコードを書き、その関数を呼ぶようにしてください。
@example
if has('perl')
  function DefPerl()
  perl << EOF
    this works
EOF
  endfunction
  call DefPerl()
endif
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note that "EOF" must be at the start of the line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"EOF" は行頭になければなりません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Dynamic loading					*perl-dynamic*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{perl-dynamic}
@cindex perl-dynamic
@section 4. 動的ローディング
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On MS-Windows and Unix the Perl library can be loaded dynamically.  The
|:version| output then includes |+perl/dyn|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-Windows と Unix では Perl ライブラリを動的に読み込むことが可能です。これを行うと |@ref{:version}| の出力に |@ref{+perl/dyn}| が含まれるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This means that Vim will search for the Perl DLL or shared library file only
when needed.  When you don't use the Perl interface you don't need it, thus
you can use Vim without this file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この場合、Vim は必要になったときだけ Perl の DLL や共有ライブラリのファイルを検索します。Perl インターフェイスを使わないときは DLL を必要としないので、DLL なしで Vim を使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MS-Windows ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec MS-Windows
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can download Perl from http://www.perl.org.  The one from ActiveState was
used for building Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@url{http://www.perl.org} から Perl をダウンロードできます。Vim のビルドには ActiveState のものが使われました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To use the Perl interface the Perl DLL must be in your search path.
If Vim reports it cannot find the perl512.dll, make sure your $PATH includes
the directory where it is located.  The Perl installer normally does that.
In a console window type "path" to see what directories are used.  The
'perldll' option can be also used to specify the Perl DLL.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Perl インターフェイスを使うには Perl の DLL が検索パス内に存在しなければなりません。perl512.dll が見つからないというようなメッセージが表示された場合は、$PATH に適切なディレクトリが含まれているかどうか確認してください。通常は Perl のインストーラによって設定されるでしょう。コンソールウィンドウで "path" とタイプすると、どのディレクトリが検索パスになっているか確認できます。また 'perldll' オプションを Perl の DLL を指定するのに使うこともできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The name of the DLL must match the Perl version Vim was compiled with.
Currently the name is "perl512.dll".  That is for Perl 5.12.  To know for
sure edit "gvim.exe" and search for "perl\d*.dll\c".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
DLL の名前はVimをコンパイルした時の Perl のバージョンに一致しなければなりません。現在その名前は "perl512.dll" です。これは Perl5.12 用です。これを確かめるには、"gvim.exe" を開き、"perl\d*.dll\c" を検索してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Unix ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Unix
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'perldll' option can be used to specify the Perl shared library file
instead of DYNAMIC_PERL_DLL file what was specified at compile time.  The
version of the shared library must match the Perl version Vim was compiled
with.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンパイル時に DYNAMIC_PERL_DLL で指定されたファイルの代わりに '@option{perldll}' オプションで使用する Perl の共有ライブラリのファイルを指定するのに使えます。共有ライブラリのバージョンは Vim と共にコンパイルされた Perl のバージョンと一致していなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
