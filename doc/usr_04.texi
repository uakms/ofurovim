@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@node 簡単な編集, 設定の変更, カーソルの移動, 目次
@unnumbered 簡単な編集
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_04.txt*	For Vim version 8.0.  Last change: 2014 Aug 29

		     VIM USER MANUAL - by Bram Moolenaar

			     Making small changes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{usr_04.txt}
@cindex usr_04.txt
@verbatim
*usr_04.txt*	For Vim バージョン 8.0.  Last change: 2014 Aug 29

		     VIM USER MANUAL - by Bram Moolenaar

			     簡単な編集
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
This chapter shows you several ways of making corrections and moving text
around.  It teaches you the three basic ways to change text: operator-motion,
Visual mode and text objects.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
本章では、 テキストの修正方法や他の場所への移動方法をいくつか説明します。テキストを変更するための三つの基本操作方法 (オペレータとモーション、ビジュアルモード、テキストオブジェクト) についても説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|04.1|	Operators and motions
|04.2|	Changing text
|04.3|	Repeating a change
|04.4|	Visual mode
|04.5|	Moving text
|04.6|	Copying text
|04.7|	Using the clipboard
|04.8|	Text objects
|04.9|	Replace mode
|04.10|	Conclusion

     Next chapter: |usr_05.txt|  Set your settings
 Previous chapter: |usr_03.txt|  Moving around
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@menu
* オペレータとモーション:: 04.1
* テキストの変更::         04.2
* 変更の繰り返し::         04.3
* ビジュアルモード::       04.4
* テキストの移動::         04.5
* テキストのコピー::       04.6
* クリップボード::         04.7
* テキストオブジェクト::   04.8
* 置換モード::             04.9
* 終わりに::               04.10
@end menu
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.1*	Operators and motions
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.1}
@node オペレータとモーション
@section オペレータとモーション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In chapter 2 you learned the "x" command to delete a single character.  And
using a count: "4x" deletes four characters.
   The "dw" command deletes a word.  You may recognize the "w" command as the
move word command.  In fact, the "d" command may be followed by any motion
command, and it deletes from the current location to the place where the
cursor winds up.
   The "4w" command, for example, moves the cursor over four words.  The d4w
command deletes four words.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
二章で学んだように、"@command{x}" は 1 文字削除するコマンドです。カウンタを使って、"@command{4x}" とすれば 4 文字削除されます。"@command{dw}" コマンドで単語を削除できます。"@command{w}" が単語単位で移動するコマンドであることを思い出してください。"@command{d}" コマンドにモーション (移動) コマンドを続けることで、現在の場所から、モーションコマンドで移動した場所までを削除できます。例えば、"@command{4w}" コマンドはカーソルを 4 単語分、動かします。ということは、"@command{d4w}" は 4 つの単語を削除するコマンドなわけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
To err is human. To really foul up you need a computer.
                 ------------------>
                         d4w

To err is human. you need a computer.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim only deletes up to the position where the motion takes the cursor.  That's
because Vim knows that you probably don't want to delete the first character
of a word.  If you use the "e" command to move to the end of a word, Vim
guesses that you do want to include that last character:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
モーションコマンドでカーソルが移動した場所までが削除されます。移動先の単語の先頭文字が削除されないのは、そのほうが便利だからです。しかし、"@command{e}" コマンドで単語の末尾まで移動した場合は、末尾の文字も削除したほうが便利ですよね:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
To err is human. you need a computer.
                -------->
                   d2e

To err is human. a computer.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Whether the character under the cursor is included depends on the command you
used to move to that character.  The reference manual calls this "exclusive"
when the character isn't included and "inclusive" when it is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソル下の文字が範囲に含まれるかどうかは、移動に使ったコマンドによって異なります。リファレンスマニュアルでは、移動先の文字が含まれないことを "exclusive" (排他的)、含まれることを "inclusive" (包括的) と呼んでいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "$" command moves to the end of a line.  The "d$" command deletes from the
cursor to the end of the line.  This is an inclusive motion, thus the last
character of the line is included in the delete operation:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{$}" コマンドで行末まで移動できます。"@command{d$}" コマンドならカーソル位置から行末までが削除されます。これは包括的モーションなので行末の文字は削除処理の対象となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
To err is human. a computer.
               ------------>
                    d$

To err is human
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is a pattern here: operator-motion.  You first type an operator command.
For example, "d" is the delete operator.  Then you type a motion command like
"4l" or "w".  This way you can operate on any text you can move over.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オペレータとモーションを組み合わせるときは、最初にオペレータコマンドを入力します。例えば、"@command{d}" は削除オペレータです。次に "@command{4l}" や "@command{w}" といったモーションコマンドを入力します。この方法ならテキストのどんな範囲でも操作できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.2*	Changing text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.2}
@node テキストの変更
@section テキストの変更
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another operator is "c", change.  It acts just like the "d" operator, except
it leaves you in Insert mode.  For example, "cw" changes a word.  Or more
specifically, it deletes a word and then puts you in Insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{c}" は「変更」オペレータです。"@command{d}" オペレータと同じように使えますが、挿入モードに入る点が違います。例えば、"@command{cw}" は単語を変更します。正確に言うと、単語を削除してから挿入モードに入ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
To err is human
   ------->
     c2wbe<Esc>

To be human
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This "c2wbe<Esc>" contains these bits:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{c2wbe}" @key{<Esc>} は次の部分から成ります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	c	the change operator
	2w	move two words (they are deleted and Insert mode started)
	be	insert this text
	<Esc>	back to Normal mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .7
@item @tab c @tab 変更オペレータ
@item @tab 2w @tab 2 単語進む (単語が削除され、挿入モードに入る)
@item @tab be @tab この文字列を挿入する
@item @tab @key{<Esc>} @tab ノーマルモードに戻る
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have paid attention, you will have noticed something strange: The space
before "human" isn't deleted.  There is a saying that for every problem there
is an answer that is simple, clear, and wrong.  That is the case with the
example used here for the "cw" command.  The c operator works just like the
d operator, with one exception: "cw".  It actually works like "ce", change to
end of word.  Thus the space after the word isn't included.  This is an
exception that dates back to the old Vi.  Since many people are used to it
now, the inconsistency has remained in Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
勘のいい人なら、ちょっと変だと感じるかも知れません。@samp{human} の前の空白が削除されていないのです。"どんな問題に関しても単純で、明解で、間違った答えがある" という格言があります。この "@command{cw}" コマンドを使った例がまさにそれです。"@command{c}" オペレータは "@command{d}" オペレータと全く同じように使えますが、"@command{cw}" はその例外なのです。実際にはこれは "@command{ce}" と同じく、単語末までを変更します。ですから、単語の後ろの空白は含まれないのです。これはかつての Vi までさかのぼる例外です。多くの人々がこれを使っているので、Vim でも不本意ながら残してあるのです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MORE CHANGES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec その他の変更コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Like "dd" deletes a whole line, "cc" changes a whole line.  It keeps the
existing indent (leading white space) though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{dd}" で行が削除できるのと同じように、"@command{cc}" で行全体を変更できます。ただし、インデント(行頭の空白類)は残されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Just like "d$" deletes until the end of the line, "c$" changes until the end
of the line.  It's like doing "d$" to delete the text and then "a" to start
Insert mode and append new text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{d$}" で行末まで削除できるのと同じように、"@command{c$}" で行末まで変更できます。この機能は "@command{d$}" で行末まで削除してから "@command{a}" で挿入モードに入り、文を追加するのと同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SHORTCUTS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ショートカット
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some operator-motion commands are used so often that they have been given a
single letter command:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのオペレータとモーションの組合せは頻繁に使われるため、1 文字コマンドとして用意されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	x  stands for  dl  (delete character under the cursor)
	X  stands for  dh  (delete character left of the cursor)
	D  stands for  d$  (delete to end of the line)
	C  stands for  c$  (change to end of the line)
	s  stands for  cl  (change one character)
	S  stands for  cc  (change a whole line)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .1 .1 .6
@item @tab "@command{x}" @tab は @tab "@command{dl}" @ (カーソル下の文字を削除)
@item @tab "@command{X}" @tab は @tab "@command{dh}" @ (カーソルの左側の文字を削除)
@item @tab "@command{D}" @tab は @tab "@command{d$}" @ (行末まで削除)
@item @tab "@command{C}" @tab は @tab "@command{c$}" @ (行末まで変更)
@item @tab "@command{s}" @tab は @tab "@command{cl}" @ (1 文字変更)
@item @tab "@command{S}" @tab は @tab "@command{cc}" @ (1 行変更)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WHERE TO PUT THE COUNT
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec カウンタの使い方
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The commands "3dw" and "d3w" delete three words.  If you want to get really
picky about things, the first command, "3dw", deletes one word three times;
the command "d3w" deletes three words once.  This is a difference without a
distinction.  You can actually put in two counts, however.  For example,
"3d2w" deletes two words, repeated three times, for a total of six words.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{3dw}" も "@command{d3w}" も 3 つの単語を削除するコマンドです。細かいことが気になる方のために補足しておくと、最初の例("@command{3dw}")は 1 単語削除を 3 回実行し、2 つ目の例("@command{d3w}")は 3 単語の削除を 1 度だけ実行します。2 つの違いは区別できません。カウンタを 2 個所で指定することもできます。例えば、"@command{3d2w}" は 2 単語の削除を 3 回繰り返し、結果として 6 単語が削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REPLACING WITH ONE CHARACTER
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 1 文字の置き換え
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "r" command is not an operator.  It waits for you to type a character, and
will replace the character under the cursor with it.  You could do the same
with "cl" or with the "s" command, but with "r" you don't have to press <Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{r}" コマンドはオペレータではありません。文字が入力されるまで待機し、入力された文字で、カーソル下の文字を置き換えます。"@command{cl}" や "@command{s}" でも同じ事ができますが、"@command{r}" の場合は最後に @key{<Esc>} を押す必要がありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
there is somerhing grong here
rT           rt    rw

There is something wrong here
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using a count with "r" causes that many characters to be replaced with the
same character.  Example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{r}" にカウンタを指定すると、指定した数の文字がすべて、同じ文字に置き換えられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There is something wrong here ~
			   5rx

	There is something xxxxx here ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
There is something wrong here
                   5rx

There is something xxxxx here
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To replace a character with a line break use "r<Enter>".  This deletes one
character and inserts a line break.  Using a count here only applies to the
number of characters deleted: "4r<Enter>" replaces four characters with one
line break.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字を改行に置き換えたい場合は "@command{r}" @key{<Enter>} を使います。1 文字削除され、改行が挿入されます。ただし、改行に対してカウンタは適用されません。削除する文字にのみ適用されます。"@command{4r}" @key{<Enter>} は 4 文字削除し、1 つの改行を挿入します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.3*	Repeating a change
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.3}
@node 変更の繰り返し
@section 変更の繰り返し
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "." command is one of the most simple yet powerful commands in Vim.  It
repeats the last change.  For instance, suppose you are editing an HTML file
and want to delete all the <B> tags.  You position the cursor on the first <
and delete the <B> with the command "df>".  You then go to the < of the next
</B> and kill it using the "." command.  The "." command executes the last
change command (in this case, "df>").  To delete another tag, position the
cursor on the < and use the "." command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{.}" コマンドはもっともシンプルでパワフルなコマンドの一つです。これは直前の変更コマンドを繰り返します。例えば、HTML ファイルの編集中に、全ての @samp{<B>} タグを削除するとしましょう。カーソルを最初の "@samp{<}" に移動し、"@command{df>}" コマンドで @samp{<B>} を削除します。次に @samp{</B>} の "@samp{<}" を探し、それを削除するのに "@command{.}" コマンドを使います。"@command{.}" コマンドは直前の変更コマンド(この場合なら "@command{df>}")を実行します。他のタグの削除したければ、カーソルを "@samp{<}" の上に置いて、@key{.} を打てばよいのです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			      To <B>generate</B> a table of <B>contents ~
	f<   find first <     --->
	df>  delete to >	 -->
	f<   find next <	   --------->
	.    repeat df>			    --->
	f<   find next <		       ------------->
	.    repeat df>					    -->
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
                      To <B>generate</B> a table of <B>contents
f<   最初の < を検索  --->
df>  > まで削除          -->
f<   次の < を検索         --------->
.    df> を繰り返し                --->
f<   次の < を検索                    ------------->
.    df> を繰り返し                                -->
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "." command works for all changes you make, except for the "u" (undo),
CTRL-R (redo) and commands that start with a colon (:).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{.}" コマンドではすべての変更を繰り返すことができますが、"@command{u}" (undo)、@command{CTRL-R} (redo)、先頭が "@command{:}" のコマンド、は繰り返せません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another example: You want to change the word "four" to "five".  It appears
several times in your text.  You can do this quickly with this sequence of
commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例2: 文中に何度も出てくる単語 "four" を "five" に変更したいとします。次の手順で変更できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/four<Enter>	find the first string "four"
	cwfive<Esc>	change the word to "five"
	n		find the next "four"
	.		repeat the change to "five"
	n		find the next "four"
	.		repeat the change
			etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/four<Enter>    最初の "four" を探す。
cwfive<Esc>     その単語を "five" に変更する。
n               次の "four" を探す
.               直前の "five" への変更を繰り返す。
n               次の "four" を探す
.               直前の変更を繰り返す。
                以下繰り返し。
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.4*	Visual mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.4}
@node ビジュアルモード
@section ビジュアルモード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To delete simple items the operator-motion changes work quite well.  But often
it's not so easy to decide which command will move over the text you want to
change.  Then you can use Visual mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
単純なものならオペレータ-モーション方式で簡単に変更できますが、変更する範囲に適したコマンドを選択するのが難しいこともあります。そんなときはビジュアルモードを使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You start Visual mode by pressing "v".  You move the cursor over the text you
want to work on.  While you do this, the text is highlighted.  Finally type
the operator command.
   For example, to delete from halfway one word to halfway another word:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードに入るには @key{v} を押します。そしてカーソルを動かして変更したい領域を選択します。選択中はその領域が強調表示されます。最後にオペレータコマンドを入力します。例えば、単語の途中から次の単語の途中までを削除するには、次のようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
This is an examination sample of visual mode
               ---------->
                 velllld

This is an example of visual mode
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When doing this you don't really have to count how many times you have to
press "l" to end up in the right position.  You can immediately see what text
will be deleted when you press "d".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この方法なら、@key{l} を何回押せば目的の場所まで移動できるか？ などと考える必要が全くありません。削除する範囲を確認してから @key{d} を押すことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If at any time you decide you don't want to do anything with the highlighted
text, just press <Esc> and Visual mode will stop without doing anything.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
選択した範囲を変更したくなくなった場合は @key{<Esc>} キーを押してください。ビジュアルモードが終了し、何も変更されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SELECTING LINES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 行選択
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to work on whole lines, use "V" to start Visual mode.  You will
see right away that the whole line is highlighted, without moving around.
When you move left or right nothing changes.  When you move up or down the
selection is extended whole lines at a time.
   For example, select three lines with "Vjj":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行全体を選択するには "@command{V}" コマンドでビジュアルモードを開始します。行全体が選択されます。左右に移動しても選択範囲は変更されません。上下に移動すると、選択範囲が行単位で拡張されます。例えば、"@command{Vjj}" で 3 行を選択してみましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			  +------------------------+
			  | text more text	   |
		       >> | more text more text    | |
	selected lines >> | text text text	   | | Vjj
		       >> | text more		   | V
			  | more text more	   |
			  +------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
                +------------------------+
                | text more text         |
             >> | more text more text    | |
選択された行   >> | text text text         | | Vjj
             >> | text more              | V
                | more text more         |
                +------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SELECTING BLOCKS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ブロック選択
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to work on a rectangular block of characters, use CTRL-V to start
Visual mode.  This is very useful when working on tables.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
四角いブロック (矩形、くけい) の範囲を変更したい場合は @kbd{CTRL-V} でビジュアルモードを開始します。このモードは表を編集するような場合に非常に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
name        Q1      Q2      Q3
pierre      123     455     234
john        0       90      39
steve       392     63      334
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To delete the middle "Q2" column, move the cursor to the "Q" of "Q2".  Press
CTRL-V to start blockwise Visual mode.  Now move the cursor three lines down
with "3j" and to the next word with "w".  You can see the first character of
the last column is included.  To exclude it, use "h".  Now press "d" and the
middle column is gone.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、中央の @samp{Q2} の列を削除するには、カーソルを "@samp{Q2}" の "@samp{Q}" に移動します。@kbd{CTRL-V} を押し、矩形ビジュアルモードに入ります。次にカーソルを "@command{3j}" で 3 行下に動かし、@key{w} を押して 1 単語分右に移動します。この状態では、最後の列の先頭が範囲に含まれているので、@key{h} でそれをはずします。@key{d} を押すと、選択範囲が削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GOING TO THE OTHER SIDE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 反対側に移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have selected some text in Visual mode, and discover that you need to
change the other end of the selection, use the "o" command (Hint: o for other
end).  The cursor will go to the other end, and you can move the cursor to
change where the selection starts.  Pressing "o" again brings you back to the
other end.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードで選択中に、選択範囲の反対側(始点)にカーソルを動かしたいときは、@key{o} を押します (@strong{Hint:} o は "other end" の意味です)。カーソルは始点に動き、始点を自由に変更できるようになります。もう一度 @key{o} を押すと、元の終点側に戻ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using blockwise selection, you have four corners.  "o" only takes you to
one of the other corners, diagonally.  Use "O" to move to the other corner in
the same line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
矩形選択のときは 4 隅が存在します。"@command{o}" は始点と終点を斜めに動くだけです。同じ行の反対側に移動するには "@command{O}" を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that "o" and "O" in Visual mode work very differently from Normal mode,
where they open a new line below or above the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note}:@*
ビジュアルモードの "@command{o}" と "@command{O}" はノーマルモードのコマンドとはまったく違う動作なので注意してください。ノーマルモードではカーソル行の上や下に空行を作る機能です。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.5*	Moving text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.5}
@node テキストの移動
@section テキストの移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you delete something with the "d", "x", or another command, the text is
saved.  You can paste it back by using the p command.  (The Vim name for
this is put).
   Take a look at how this works.  First you will delete an entire line, by
putting the cursor on the line you want to delete and typing "dd".  Now you
move the cursor to where you want to put the line and use the "p" (put)
command.  The line is inserted on the line below the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{d}" や "@command{x}" などのコマンドで何かを削除すると、そのテキストは記録されます。"@command{p}" コマンドを使うと、そのテキストをペースト (貼り付け。Vimではこれをプットと呼びます) できます。どのように動くかを見てみましょう。まず、削除したい行にカーソルを移動し、"@command{dd}" コマンドでその行を削除します。次に、プットしたい場所にカーソルを動かして @key{p} を押します。先ほど削除した行がカーソルの下に挿入されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
 最初           削除後       プット後
a line          a line        a line
line 2    dd    line 3    p   line 3
line 3                        line 2
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Because you deleted an entire line, the "p" command placed the text line below
the cursor.  If you delete part of a line (a word, for instance), the "p"
command puts it just after the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行全体を削除したので、"@command{p}" コマンドにより行が挿入されました。行の一部 (単語など) を削除した場合は、"@command{p}" コマンドはカーソルの直後にそれがプットされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 ------->
			    welp

	Some more boring text to try out commands. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Some more boring try text to out commands.
                 ---->
                  dw

Some more boring text to out commands.
                 ------->
                    welp

Some more boring text to try out commands.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MORE ON PUTTING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec その他のプット
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "P" command puts text like "p", but before the cursor.  When you deleted a
whole line with "dd", "P" will put it back above the cursor.  When you deleted
a word with "dw", "P" will put it back just before the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{P}" コマンドは "@command{p}" と同じですが、カーソルの前にプットします。直前に "@command{dd}" コマンドで行を削除したなら、カーソルの上にその行がプットされます。"@command{dw}" で単語を削除した場合は、カーソルの直前にプットされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can repeat putting as many times as you like.  The same text will be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プットは何回でも好きなだけ繰り返せます。同じ文が毎回使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use a count with "p" and "P".  The text will be repeated as many times
as specified with the count.  Thus "dd" and then "3p" puts three copies of the
same deleted line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{p}" も "@command{P}" もカウンタを指定できます。指定しただけ、プット処理が繰り返されます。例えば、"@command{dd}" の後に "@command{3p}" を実行すると、削除した行のコピーが 3 つプットされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SWAPPING TWO CHARACTERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 2 文字の入れ換え
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Frequently when you are typing, your fingers get ahead of your brain (or the
other way around?).  The result is a typo such as "teh" for "the".  Vim
makes it easy to correct such problems.  Just put the cursor on the e of "teh"
and execute the command "xp".  This works as follows: "x" deletes the
character e and places it in a register.  "p" puts the text after the cursor,
which is after the h.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
入力しているときに、指が頭を追い越してしまうことがしばしばあります。その結果、@samp{the} を @samp{teh} とタイポ (打ち間違い) したりすることがあります。Vim ではこの種の間違いを簡単に修正できます。カーソルを @samp{teh} の @samp{e} の上に置いて、@key{x} @key{p} と打てばよいのです。"@command{x}" で @samp{e} の文字を削除してレジスタに入れ、"@command{p}" で (@samp{h} の上にある) カーソル の後ろにレジスタ内容をプットするのです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	teh     th     the ~
	 x       p
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
teh     th     the
 x       p
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.6*	Copying text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.6}
@node テキストのコピー
@section テキストのコピー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To copy text from one place to another, you could delete it, use "u" to undo
the deletion and then "p" to put it somewhere else.  There is an easier way:
yanking.  The "y" operator copies text into a register.  Then a "p" command
can be used to put it.
   Yanking is just a Vim name for copying.  The "c" letter was already used
for the change operator, and "y" was still available.  Calling this
operator "yank" made it easier to remember to use the "y" key.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストを別の場所にコピーするには、それを削除して、"@command{u}" で削除を取り消し、他の場所で "@command{p}" を使いプットすることもできますが、ヤンク (yank) を使えばもっと簡単です。"@command{y}" オペレータで文字列をレジスタにコピーできます。その文字列は "@command{p}" コマンドでプットできます。
コピーのことを Vim ではヤンクと呼びます。文字 @samp{c} は既に変更オペレータのために使われていたので "@command{y}" を使うことになったわけですが、@key{y} キーを覚えやすくするためにコピー操作をヤンク (yank) と読んでいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since "y" is an operator, you use "yw" to yank a word.  A count is possible as
usual.  To yank two words use "y2w".  Example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{y}" はオペレータなので、"@command{yw}" とすれば単語をヤンクできます。カウンタも当然指定できます。2 単語をヤンクするには、"@command{y2w}" とします。例を示しましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
let sqr = LongVariable *
         -------------->
               y2w

let sqr = LongVariable *
                       p

let sqr = LongVariable * LongVariable
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice that "yw" includes the white space after a word.  If you don't want
this, use "ye".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{yw}" は単語の後の空白まで含まれるので注意してください。それが嫌なら、"@command{ye}" を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "yy" command yanks a whole line, just like "dd" deletes a whole line.
Unexpectedly, while "D" deletes from the cursor to the end of the line, "Y"
works like "yy", it yanks the whole line.  Watch out for this inconsistency!
Use "y$" to yank to the end of the line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{yy}" コマンドは "@command{dd}" が行削除するのと同様に、行全体をヤンクします。ただ、"@command{D}" が行末まで削除するのに対して、"@command{Y}" は "@command{yy}" と同じ動きになります。この点は気をつけてください。行末までヤンクしたい時には "@command{y$}" を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
a text line   yy    a text line            a text line
line 2              line 2          p      line 2
last line           last line              a text line
                                           last line
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.7*	Using the clipboard
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.7}
@node クリップボード
@section クリップボード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are using the GUI version of Vim (gvim), you can find the "Copy" item
in the "Edit" menu.  First select some text with Visual mode, then use the
Edit/Copy menu.  The selected text is now copied to the clipboard.  You can
paste the text in other programs.  In Vim itself too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI 版の Vim (gvim) を使っている場合は、[編集] メニューに [コピー] コマンドがあります。ビジュアルモードで文字列を選択してから、メニューの [編集]-[コピー] を使ってください。選択文字列がクリップボードにコピーされるので、それを他のプログラムにペーストできます。もちろん Vim 自身でも使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have copied text to the clipboard in another application, you can paste
it in Vim with the Edit/Paste menu.  This works in Normal mode and Insert
mode.  In Visual mode the selected text is replaced with the pasted text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のアプリケーションでクリップボードに文字列をコピーすれば、Vim の [編集]-[貼り付け] メニューでそれをペーストできます。これはノーマルモードでも挿入モードでも機能します。ビジュアルモードでは、選択文字列がペーストされた文字列に置換されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "Cut" menu item deletes the text before it's put on the clipboard.  The
"Copy", "Cut" and "Paste" items are also available in the popup menu (only
when there is a popup menu, of course).  If your Vim has a toolbar, you can
also find these items there.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの [編集]-[切り取り] はクリップボードにプットする前に文字列が削除されます。[コピー]、[切り取り]、[貼り付け] の 3 つはポップアップメニューでも使えます (ポップアップメニューが利用可能な場合のみ)。ツールバーが利用可能なら、そこにも同じ項目があるはずです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are not using the GUI, or if you don't like using a menu, you have to
use another way.  You use the normal "y" (yank) and "p" (put) commands, but
prepend "* (double-quote star) before it.  To copy a line to the clipboard: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI を使っていない場合やメニューを使いたくない場合は他の方法を使うしかありません。普通の "@command{y}" や "@command{p}" コマンドを使う前に "@command{"*}" (ダブルクォート + アスタリスク)を指定するのです。行を丸ごとクリップボードにコピーするには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"*yy
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"*yy
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To put text from the clipboard back into the text: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
クリップボードからプットするにはこうします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"*p
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"*p
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This only works on versions of Vim that include clipboard support.  More about
the clipboard in section |09.3| and here: |clipboard|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この機能はクリップボードをサポートした Vim でのみ動きます。クリップボードについての詳細は|@ref{09.3, , 09.3}|章 と |clipboard|をご覧ください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.8*	Text objects
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.8}
@node テキストオブジェクト
@section テキストオブジェクト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the cursor is in the middle of a word and you want to delete that word, you
need to move back to its start before you can do "dw".  There is a simpler way
to do this: "daw".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
単語の真ん中にカーソルがある場合、その単語を削除するには "@command{dw}" を実行する前にカーソルを単語の先頭に戻す必要があります。"@command{daw}" を使うともっと簡単です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	this is some example text. ~
		       daw

	this is some text. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
this is some example text.
               daw

this is some text.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "d" of "daw" is the delete operator.  "aw" is a text object.  Hint: "aw"
stands for "A Word".  Thus "daw" is "Delete A Word".  To be precise, the white
space after the word is also deleted (the white space before the word at the
end of the line).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{daw}" の "@command{d}" は削除オペレータです。"@command{aw}" はテキストオブジェクトです。@samp{Hint:} "@command{aw}" は "A Word" の意味です。つまり "@command{daw}" は "Delete A Word" という意味になります。正確には、単語の後の空白も削除されます (単語が行末にある場合は、行末までのすべての空白が削除されます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using text objects is the third way to make changes in Vim.  We already had
operator-motion and Visual mode.  Now we add operator-text object.
   It is very similar to operator-motion, but instead of operating on the text
between the cursor position before and after a movement command, the text
object is used as a whole.  It doesn't matter where in the object the cursor
was.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストオブジェクトは基本操作方法の一つです。オペレータ-モーション方式とビジュアルモードは既に述べました。そこにオペレータ + テキストオブジェクト方式が加わります。
これはオペレータ-モーション方式と非常に似ていますが、オペレータ-モーション方式では移動コマンドの前と後のカーソル位置がオペレータの範囲となっていたのに対し、テキストオブジェクトではオブジェクト全体を対象とします。オブジェクトのどこにカーソルがあっても構いません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To change a whole sentence use "cis".  Take this text:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文全体を変更するのは "@command{cis}" です。次の文を使いましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Hello there.  This ~
	is an example.  Just ~
	some text. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Hello there.  This
is an example.  Just
some text.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move to the start of the second line, on "is an".  Now use "cis":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 行目の先頭、@samp{is an} の上に移動し、"@command{cis}" を実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Hello there.    Just ~
	some text. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Hello there.    Just
some text.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The cursor is in between the blanks in the first line.  Now you type the new
sentence "Another line.":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルは 1 行目の空白の間にあります。ここで新たな文 @samp{Another line.} を入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Hello there.  Another line.  Just ~
	some text. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Hello there.  Another line.  Just
some text.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"cis" consists of the "c" (change) operator and the "is" text object.  This
stands for "Inner Sentence".  There is also the "as" (a sentence) object.  The
difference is that "as" includes the white space after the sentence and "is"
doesn't.  If you would delete a sentence, you want to delete the white space
at the same time, thus use "das".  If you want to type new text the white
space can remain, thus you use "cis".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{cis}" は変更オペレータの "@command{c}" とテキストオブジェクトの @command{is} から成ります。"is" は "Inner Sentence" の意味です。"@command{as}" (a sentence) オブジェクトというのもあります。"@command{as}" は文の後の空白を含みますが、"@command{is}" は含みません。文を削除するときに、前後の空白も同時に消したい場合は "@command{das}" を使います。文を修正するため、空白を残しておきたい場合は "@command{cis}" を使えばよいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can also use text objects in Visual mode.  It will include the text object
in the Visual selection.  Visual mode continues, thus you can do this several
times.  For example, start Visual mode with "v" and select a sentence with
"as".  Now you can repeat "as" to include more sentences.  Finally you use an
operator to do something with the selected sentences.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストオブジェクトはビジュアルモードでも使えます。テキストオブジェクトを選択範囲に含めることができます。テキストオブジェクトを指定してもビジュアルモードは終了しないので、何度でもテキストオブジェクトを使えます。例えば、"@command{v}" でビジュアルモードを開始して、"@command{as}" で文を選択した後に、"@command{as}" を繰り返してたくさんの文を追加できます。最後にオペレータを使って、選択した文を対象として、何らかの処理を行います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find a long list of text objects here: |text-objects|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストオブジェクトの機能一覧は |text-objects| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.9*	Replace mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.9}
@node 置換モード
@section 置換モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "R" command causes Vim to enter replace mode.  In this mode, each
character you type replaces the one under the cursor.  This continues until
you type <Esc>.
   In this example you start Replace mode on the first "t" of "text":
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{R}" コマンドを使うと置換モードに入ります。このモードでは、入力した文字が、カーソル下の文字を置き換えます。このモードは @key{<Esc>} を押すまで続きます。例えば、@samp{text} の 1 つ目の @samp{t} で置換モードを開始したとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
This is text.
        Rinteresting.<Esc>

This is interesting.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You may have noticed that this command replaced 5 characters in the line with
twelve others.  The "R" command automatically extends the line if it runs out
of characters to replace.  It will not continue on the next line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
末尾の 5 文字が 12 文字の他の文字に置き換えられています。"@command{R}" コマンドは置換する文字がなくなると自動的に行末をずらします。次の行へ移動したりはしません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can switch between Insert mode and Replace mode with the <Insert> key.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Insert>} キーで挿入モードと置換モードを切り換えることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you use <BS> (backspace) to make correction, you will notice that the
old text is put back.  Thus it works like an undo command for the last typed
character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<BS>} キーで修正をしようとすると、元の文字が復元されます。直前に打った文字を undo するような働きをします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*04.10*	Conclusion
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{04.10}
@node 終わりに
@section 終わりに
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The operators, movement commands and text objects give you the possibility to
make lots of combinations.  Now that you know how it works, you can use N
operators with M movement commands to make N * M commands!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オペレータ、移動コマンド、テキストオブジェクトを組み合せると、とてつもない数のコンビネーションを生み出すことができます。N 個のオペレータと M 個の移動コマンドを組み合わせれば N * M 個のコマンドが作れるのです！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find a list of operators here: |operator|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オペレータの一覧は |operator| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example, there are many other ways to delete pieces of text.  Here are a
few often used ones:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストの一部を削除するには数多くの方法があります。ほんの一部ですが、よく使うものを挙げておきましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
x	delete character under the cursor (short for "dl")
X	delete character before the cursor (short for "dh")
D	delete from cursor to end of line (short for "d$")
dw	delete from cursor to next start of word
db	delete from cursor to previous start of word
diw	delete word under the cursor (excluding white space)
daw	delete word under the cursor (including white space)
dG	delete until the end of the file
dgg	delete until the start of the file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .7
@item @tab "@command{x}" @tab カーソル位置の文字を削除 ("@command{dl}" と同じ)
@item @tab "@command{X}" @tab カーソル位置の直前の文字を削除 ("@command{dh}" と同じ)
@item @tab "@command{D}" @tab カーソル位置から行末までを削除 ("@command{d$}" と同じ)
@item @tab "@command{dw}" @tab カーソル位置から次の単語の先頭までを削除
@item @tab "@command{db}" @tab カーソル位置から直前の単語の先頭までを削除
@item @tab "@command{diw}" @tab カーソル位置の単語を削除 (文の後の空白は除く)
@item @tab "@command{daw}" @tab カーソル位置の単語を削除 (文の後の空白を含む)
@item @tab "@command{dG}" @tab ファイルの末尾まで削除
@item @tab "@command{dgg}" @tab ファイルの先頭まで削除
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you use "c" instead of "d" they become change commands.  And with "y" you
yank the text.  And so forth.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{d}" の代わりに "@command{c}" を使うと削除ではなく、変更コマンドになります。"@command{y}" にすればヤンクコマンドです。他のオペレータも同様です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
There are a few often used commands to make changes that didn't fit somewhere
else:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他の章では特に説明されない雑多な変更コマンドをいくつか挙げておきます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	~	change case of the character under the cursor, and move the
		cursor to the next character.  This is not an operator (unless
		'tildeop' is set), thus you can't use it with a motion
		command.  It does work in Visual mode and changes case for
		all the selected text then.

	I	Start Insert mode after moving the cursor to the first
		non-blank in the line.

	A	Start Insert mode after moving the cursor to the end of the
		line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item "@command{~}" @tab カーソル位置の大文字/小文字を変更し、カーソルを次に進めます。これは('@option{tildeop}' がオフの場合は)オペレータではありません。つまりモーションコマンドと組み合わせることができません。ビジュアルモードで使うと選択範囲のテキスト全体が変更されます。
@item "@command{I}" @tab (大文字の @samp{i} です) カーソルを行の最初の非空白文字に移動して挿入モードを開始します。
@item "@command{A}" @tab 行末にカーソルを動かして、挿入モードを開始します。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_05.txt|  Set your settings

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
