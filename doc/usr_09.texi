@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_09.txt, usr_10.txt, usr_08.txt, 目次
@unnumbered GUI を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_09.txt*	For Vim version 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

				Using the GUI
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_09.txt
@verbatim
*usr_09.txt*	For Vim バージョン 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

				GUI を使う
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim works in an ordinary terminal.  GVim can do the same things and a few
more.  The GUI offers menus, a toolbar, scrollbars and other items.  This
chapter is about these extra things that the GUI offers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は普通の端末で動作します。GVim はそれより少しだけ多機能です。GUI ではメニュー、ツールバー、スクロールバーなどが利用できます。本章では GUI が提供するそれらの機能を説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|09.1|	Parts of the GUI
|09.2|	Using the mouse
|09.3|	The clipboard
|09.4|	Select mode

     Next chapter: |usr_10.txt|  Making big changes
 Previous chapter: |usr_08.txt|  Splitting windows
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{09.1, , 09.1}| @tab GUI の部品
@item |@ref{09.2, , 09.2}| @tab GUI でマウスを使う
@item |@ref{09.3, , 09.3}| @tab GUI でクリップボード
@item |@ref{09.4, , 09.4}| @tab GUI で選択モード
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*09.1*	Parts of the GUI
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{09.1}
@section GUI の部品
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You might have an icon on your desktop that starts gvim.  Otherwise, one of
these commands should do it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
おそらく、gvim を起動するためのアイコンがデスクトップにあるはずです。ない場合は、次のコマンドのどちらかで起動できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	gvim file.txt
	vim -g file.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
gvim file.txt
vim -g file.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If this doesn't work you don't have a version of Vim with GUI support.  You
will have to install one first.
   Vim will open a window and display "file.txt" in it.  What the window looks
like depends on the version of Vim.  It should resemble the following picture
(for as far as this can be shown in ASCII!).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI 版の Vim がインストールされていない場合は起動できません。まず最初に GUI 版の Vim をインストールしてください。

起動すると、ウィンドウが開き、そこに "file.txt" が表示されます。ウィンドウの外見は Vim のバージョンによって違うかもしれませんが、だいたい次のような画面が表示されるはずです (この図は ASCII で正しく表示されます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------------------------+
	| file.txt + (~/dir) - VIM			   X |	<- window title
	+----------------------------------------------------+
	| File	Edit  Tools  Syntax  Buffers  Window  Help   |	<- menubar
	+----------------------------------------------------+
	| aaa  bbb  ccc  ddd  eee  fff	ggg  hhh  iii  jjj   |	<- toolbar
	| aaa  bbb  ccc  ddd  eee  fff	ggg  hhh  iii  jjj   |
	+----------------------------------------------------+
	| file text					 | ^ |
	| ~						 | # |
	| ~						 | # |	<- scrollbar
	| ~						 | # |
	| ~						 | # |
	| ~						 | # |
	|						 | V |
	+----------------------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------------------------+
| file.txt + (~/dir) - VIM                         X |  <- ウィンドウタイトル
+----------------------------------------------------+
| File  Edit  Tools  Syntax  Buffers  Window  Help   |  <- メニューバー
+----------------------------------------------------+
| aaa  bbb  ccc  ddd  eee  fff  ggg  hhh  iii  jjj   |  <- ツールバー
| aaa  bbb  ccc  ddd  eee  fff  ggg  hhh  iii  jjj   |
+----------------------------------------------------+
| file text                                      | ^ |
| ~                                              | # |
| ~                                              | # |  <- スクロールバー
| ~                                              | # |
| ~                                              | # |
| ~                                              | # |
|                                                | V |
+----------------------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The largest space is occupied by the file text.  This shows the file in the
same way as in a terminal.  With some different colors and another font
perhaps.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一番大きな領域にはファイルのテキストが表示されています。その部分は端末での表示と同じです。色やフォントは違うかもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE WINDOW TITLE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ウィンドウタイトル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At the very top is the window title.  This is drawn by your window system.
Vim will set the title to show the name of the current file.  First comes the
name of the file.  Then some special characters and the directory of the file
in parens.  These special characters can be present:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最上部はウィンドウタイトルです。この部分はウィンドウシステム (Windows や X のウィンドウマネージャーなど) によって描画されます。Vim はカレントファイルの名前をタイトルに設定します。ファイル名が先頭に表示され、それから、記号、カッコで囲まれたディレクトリ名が表示されます。記号には次の意味があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	-	The file cannot be modified (e.g., a help file)
	+	The file contains changes
	=	The file is read-only
	=+	The file is read-only, contains changes anyway
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item - @tab ファイルは変更不可。(例: ヘルプファイル)
@item + @tab ファイルは変更された。
@item = @tab ファイルは読み込み専用。
@item =+ @tab ファイルは読み込み専用だが、変更された。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If nothing is shown you have an ordinary, unchanged file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何も表示されていなければ、変更されていない通常のファイルです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE MENUBAR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メニューバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You know how menus work, right?  Vim has the usual items, plus a few more.
Browse them to get an idea of what you can use them for.  A relevant submenu
is Edit/Global Settings.  You will find these entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの使い方はわかりますよね？ 一般的な項目に加え、Vim 特有の項目が少しあります。メニューをざっと眺めてどんなものがあるか確認してください。この章に関連したサブメニューが [編集]-[全体設定] にあります。次のような項目です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Toggle Toolbar		make the toolbar appear/disappear
	Toggle Bottom Scrollbar	make a scrollbar appear/disappear at the bottom
	Toggle Left Scrollbar	make a scrollbar appear/disappear at the left
	Toggle Right Scrollbar	make a scrollbar appear/disappear at the right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item ツールバー表示切替 @tab ツールバーの表示のon/off
@item スクロールバー(下)表示切替 @tab スクロールバー(下)の表示のon/off
@item スクロールバー(左)表示切替 @tab スクロールバー(左)の表示のon/off
@item スクロールバー(右)表示切替 @tab スクロールバー(右)の表示のon/off
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On most systems you can tear-off the menus.  Select the top item of the menu,
the one that looks like a dashed line.  You will get a separate window with
the items of the menu.  It will hang around until you close the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどのシステムではメニューの切り離しができます。メニューの最上部にある点線のような項目を選択すると、メニューが別ウィンドウで表示されます。明示的に閉じるまで、ウィンドウは開いたままです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE TOOLBAR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ツールバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This contains icons for the most often used actions.  Hopefully the icons are
self-explanatory.  There are tooltips to get an extra hint (move the mouse
pointer to the icon without clicking and don't move it for a second).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールバーには、よく使われる機能がアイコンの形で格納されています。アイコンを見ればその機能を連想できると思います。マウスをアイコンの上に動かしてクリックせずに一秒ほど待つと、機能の説明がツールチップで表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "Edit/Global Settings/Toggle Toolbar" menu item can be used to make the
toolbar disappear.  If you never want a toolbar, use this command in your
vimrc file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの [編集]-[全体設定]-[ツールバー表示切換] を使うとツールバーを非表示にできます。ツールバーを全く使わないのであれば、次のコマンドを vimrc に書いてください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set guioptions-=T
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set guioptions-=T
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This removes the 'T' flag from the 'guioptions' option.  Other parts of the
GUI can also be enabled or disabled with this option.  See the help for it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは '@option{guioptions}' オプションから "T" フラグを取り除くコマンドです。GUI の他の部品もこのオプションを使って、表示/非表示を指定できます。詳しくはオプションのヘルプを参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE SCROLLBARS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec スクロールバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default there is one scrollbar on the right.  It does the obvious thing.
When you split the window, each window will get its own scrollbar.
   You can make a horizontal scrollbar appear with the menu item
Edit/Global Settings/Toggle Bottom Scrollbar.  This is useful in diff mode, or
when the 'wrap' option has been reset (more about that later).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
初期設定では右側にスクロールバーが表示されます。動作は一般的なアプリケーションと同じです。ウィンドウを分割するとウィンドウごとにスクロールバーが作られます。

メニューの [編集]-[全体設定]-[スクロールバー(下)表示切換] を使うと横スクロールバーを表示できます。差分モードのときや '@option{wrap}' オプションをオフにしているときに便利です。(詳しくは後で説明します)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When there are vertically split windows, only the windows on the right side
will have a scrollbar.  However, when you move the cursor to a window on the
left, it will be this one the that scrollbar controls.  This takes a bit of
time to get used to.
   When you work with vertically split windows, consider adding a scrollbar on
the left.  This can be done with a menu item, or with the 'guioptions' option:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを垂直分割していて、右側のウィンドウにだけスクロールバーが付いている場合は、左側のウィンドウにカーソルを移動すれば、スクロールバーはそのウィンドウに作用するようになります。

垂直分割をよく使うなら、左側にもスクロールバーを付けるといいかもしれません。メニューから選択するか、'@option{guioptions}' を設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:set guioptions+=l
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set guioptions+=l
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This adds the 'l' flag to 'guioptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは '@option{guioptions}' に 'l' フラグを追加しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*09.2*	Using the mouse
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{09.2}
@section GUI でマウスを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Standards are wonderful.  In Microsoft Windows, you can use the mouse to
select text in a standard manner.  The X Window system also has a standard
system for using the mouse.  Unfortunately, these two standards are not the
same.
   Fortunately, you can customize Vim.  You can make the behavior of the mouse
work like an X Window system mouse or a Microsoft Windows mouse.  The following
command makes the mouse behave like an X Window mouse: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
標準は素晴らしい。Microsoft Windows では、マウスを使った標準的な操作方法でテキストを選択できます。X ウィンドウシステムにもマウスの操作方法の標準があります。残念ながら、この二つの標準は別物です。

幸運なことに Vim はカスタマイズできます。マウスの振る舞いを X ウィンドウシステム方式か Microsoft Windows 方式のどちらかに変更できます。次のコマンドでマウスの振る舞いを X ウィンドウシステム方式に設定できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:behave xterm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:behave xterm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following command makes the mouse work like a Microsoft Windows mouse: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでマウスの振る舞いを Microsoft Windows 方式に設定できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:behave mswin
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:behave mswin
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The default behavior of the mouse on UNIX systems is xterm.  The default
behavior on a Microsoft Windows system is selected during the installation
process.  For details about what the two behaviors are, see |:behave|.  Here
follows a summary.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX での初期設定は xterm です。Microsoft Windows での初期設定はインストール時に選択できます。2 つの振る舞いの詳細については|@ref{:behave}|をご覧ください。ここでは概要だけ説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
XTERM MOUSE BEHAVIOR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Xterm 方式のマウスの振る舞い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Left mouse click		position the cursor
Left mouse drag			select text in Visual mode
Middle mouse click		paste text from the clipboard
Right mouse click		extend the selected text until the mouse
				pointer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .35 .65
@item 左クリック @tab カーソル移動
@item 左ドラッグ @tab ビジュアルモードでテキストを選択
@item 中クリック @tab クリップボードからテキストを貼り付け
@item 右クリック @tab マウスポインタで指した場所まで選択範囲を拡張
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MSWIN MOUSE BEHAVIOR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec MSWIN 方式のマウスの振る舞い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Left mouse click		position the cursor
Left mouse drag			select text in Select mode (see |09.4|)
Left mouse click, with Shift	extend the selected text until the mouse
				pointer
Middle mouse click		paste text from the clipboard
Right mouse click		display a pop-up menu
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .35 .65
@item 左クリック @tab カーソル移動
@item 左ドラッグ @tab 選択モードでテキストを選択 (|@ref{09.4}| 参照)
@item シフトキー + 左クリック @tab マウスポインタで指した場所まで選択範囲を拡張
@item 中クリック @tab クリップボードからテキストを貼り付け
@item 右クリック @tab ポップアップメニューを表示
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The mouse can be further tuned.  Check out these options if you want to change
the way how the mouse works:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスの動作はさらに細かく設定できます。マウスの動作を変更したい場合は、以下のオプションを確認してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	'mouse'			in which mode the mouse is used by Vim
	'mousemodel'		what effect a mouse click has
	'mousetime'		time between clicks for a double-click
	'mousehide'		hide the mouse while typing
	'selectmode'		whether the mouse starts Visual or Select mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .75
@item '@option{mouse}' @tab Vim のどのモードでマウスを使うのか
@item '@option{mousemodel}' @tab クリックしたときの動作
@item '@option{mousetime}' @tab ダブルクリックのクリック間隔
@item '@option{mousehide}' @tab 入力している間、マウスを隠す
@item '@option{selectmode}' @tab マウスで選択したときにビジュアルモードとセレクトモードのどちらを開始するか
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*09.3*	The clipboard
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{09.3}
@section GUI でクリップボード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In section |04.7| the basic use of the clipboard was explained.  There is one
essential thing to explain about X-windows: There are actually two places to
exchange text between programs.  MS-Windows doesn't have this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{04.7}| ではクリップボードの基本的な使い方を説明しました。ここでは X-windows での必須事項を説明します。X-windows にはプログラム間でテキストを交換するための空間が 2 つあります。MS-Windows にはそういうのはありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In X-Windows there is the "current selection".  This is the text that is
currently highlighted.  In Vim this is the Visual area (this assumes you are
using the default option settings).  You can paste this selection in another
application without any further action.
   For example, in this text select a few words with the mouse.  Vim will
switch to Visual mode and highlight the text.  Now start another gvim, without
a file name argument, so that it displays an empty window.  Click the middle
mouse button.  The selected text will be inserted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X-Windows にはカレントセレクション ("current selection") があります。これは選択中のテキストのことです。Vim において、それはビジュアル選択している範囲のことです (初期設定の場合)。選択しているテキストは特に何もしなくても他のアプリケーションにペーストできます。

例えば、この文章のどこかを適当にマウスで選択したとします。Vim は自動的にビジュアルモードに切り替わり、選択したテキストが強調表示されます。ここで、別の gvim を引数なしで起動し、空のウィンドウを開きます。中央ボタンをクリックすると、選択したテキストが挿入されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "current selection" will only remain valid until some other text is
selected.  After doing the paste in the other gvim, now select some characters
in that window.  You will notice that the words that were previously selected
in the other gvim window are displayed differently.  This means that it no
longer is the current selection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントセレクションは他のテキストを選択するまで有効です。他の gvim にペーストした後、そのウィンドウのテキストを選択すると、直前に別の gvim で選択していたテキストの表示が変わるのが確認できると思います。その選択範囲はもうカレントセレクションではないのです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You don't need to select text with the mouse, using the keyboard commands for
Visual mode works just as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストの選択はマウスでなくても構いません。ビジュアルモードのコマンドをキーボードで入力しても同じことになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE REAL CLIPBOARD
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 真のクリップボード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now for the other place with which text can be exchanged.  We call this the
"real clipboard", to avoid confusion.  Often both the "current selection" and
the "real clipboard" are called clipboard, you'll have to get used to that.
   To put text on the real clipboard, select a few different words in one of
the gvims you have running.  Then use the Edit/Copy menu entry.  Now the text
has been copied to the real clipboard.  You can't see this, unless you have
some application that shows the clipboard contents (e.g., KDE's Klipper).
   Now select the other gvim, position the cursor somewhere and use the
Edit/Paste menu.  You will see the text from the real clipboard is inserted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、テキストを交換するためのもう一つの空間を説明します。今までの説明との混同を避けるために、ここでは真のクリップボード ("real clipboard") と呼びます。普通はカレントセレクションと真のクリップボードはどちらもクリップボードと呼ばれますが、慣れてください。

真のクリップボードにテキストをプットするために、動作中の gvim で適当なテキストを選択し、メニューの [編集]-[コピー] コマンドを実行してください。これで、テキストが真のクリップボードにコピーされました。クリップボードの内容は専用のアプリケーション (例えば KDE の Klipper) がなければ見ることはできません。

次に、別の gvim に移り、カーソルを適当なところに移動し、メニューの [編集]-[貼り付け] コマンドを実行します。真のクリップボードからテキストが挿入されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING BOTH
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 両方を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This use of both the "current selection" and the "real clipboard" might sound
a bit confusing.  But it is very useful.  Let's show this with an example.
Use one gvim with a text file and perform these actions:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントセレクションと真のクリップボードを両方使うのは少し複雑ですが、でもこれはとても便利なのです。例を挙げましょう。

gvim でテキストファイルを開いて以下の操作を実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-  Select two words in Visual mode.
-  Use the Edit/Copy menu to get these words onto the clipboard.
-  Select one other word in Visual mode.
-  Use the Edit/Paste menu item.  What will happen is that the single selected
   word is replaced with the two words from the clipboard.
-  Move the mouse pointer somewhere else and click the middle button.  You
   will see that the word you just overwrote with the clipboard is inserted
   here.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item
単語をビジュアルモードで選択する。
@item
[編集]-[コピー] メニューを実行して単語をクリップボードに入れる。
@item
ビジュアルモードで別の単語を選択する。
@item
[編集]-[貼り付け] メニューを実行する。選択している単語がクリップボードにある単語で置き換えられます。
@item
マウスポインタを他のところに動かして中央ボタンを押す。直前にクリップボードのテキストで上書きされた単語がその場所に挿入されます。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you use the "current selection" and the "real clipboard" with care, you can
do a lot of useful editing with them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントセレクションと真のクリップボードは気をつけて使いさえすれば、非常に役立
つテクニックになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING THE KEYBOARD
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec キーボードを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you don't like using the mouse, you can access the current selection and
the real clipboard with two registers.  The "* register is for the current
selection.
   To make text become the current selection, use Visual mode.  For example,
to select a whole line just press "V".
   To insert the current selection before the cursor: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスが嫌いなあなたでも、2 つのレジスタを使って、カレントセレクションと真のクリップボードにアクセスできます。カレントセレクションには @command{"*} レジスタでアクセスします。

テキストをカレントセレクションにするにはビジュアルモードを使います。例えば、"@key{V}" を押せば行全体を選択できます。

次のコマンドでカレントセレクションのテキストをカーソルの直前に挿入できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"*P
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"*P
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice the uppercase "P".  The lowercase "p" puts the text after the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
大文字の "P" であることに注意してください。小文字の "p" だとカーソルの直後にプットされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "+ register is used for the real clipboard.  For example, to copy the text
from the cursor position until the end of the line to the clipboard: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
真のクリップボードには @command{"+} レジスタでアクセスします。例えば、カーソル位置から行末までを真のクリップボードにコピーするには、次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"+y$
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"+y$
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Remember, "y" is yank, which is Vim's copy command.
   To insert the contents of the real clipboard before the cursor: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{y}" はヤンク、つまり Vim のコピーコマンドのことでしたね。次のコマンドで真のクリップボードのテキストをカーソルの直前に挿入できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"+P
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"+P
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It's the same as for the current selection, but uses the plus (+) register
instead of the star (*) register.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントセレクションの場合とコマンドは同じですが、スター (@samp{*}) ではなくプラス (@samp{+}) レジスタを使っています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*09.4*	Select mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{09.4}
@section GUI で選択モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
And now something that is used more often on MS-Windows than on X-Windows.
But both can do it.  You already know about Visual mode.  Select mode is like
Visual mode, because it is also used to select text.  But there is an obvious
difference: When typing text, the selected text is deleted and the typed text
replaces it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは X Window よりも MS-Windows でよく利用される機能です。しかし、どちらの環境でも利用できます。ビジュアルモードについては既に知っていますね。選択モードはビジュアルモードに似ています。選択モードもテキストを選択するための機能です。違いは、文字を入力すると、選択されていたテキストが削除され、入力した文字に置き換わることです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To start working with Select mode, you must first enable it (for MS-Windows
it is probably already enabled, but you can do this anyway): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
選択モードを使うには、最初にそれを有効にする必要があります。(MS-Windows では、既に有効になっていると思いますが、これを実行しても問題ありません):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set selectmode+=mouse
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set selectmode+=mouse
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now use the mouse to select some text.  It is highlighted like in Visual mode.
Now press a letter.  The selected text is deleted, and the single letter
replaces it.  You are in Insert mode now, thus you can continue typing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
設定したら、マウスを使ってテキストを選択してみてください。ビジュアルモードのようにテキストが強調表示されます。そして、文字を入力してください。選択されていたテキストが削除され、入力した文字に置き換わります。挿入モードに入るので、続けて文字を入力することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since typing normal text causes the selected text to be deleted, you can not
use the normal movement commands "hjkl", "w", etc.  Instead, use the shifted
function keys.  <S-Left> (shifted cursor left key) moves the cursor left.  The
selected text is changed like in Visual mode.  The other shifted cursor keys
do what you expect.  <S-End> and <S-Home> also work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
普通に文字を入力すると選択中のテキストが削除されてしまうので、通常の移動コマンドの "@command{hjkl}" や "@command{w}" などは使えません。代わりに、シフト + 特殊キーの組み合わせを使ってください。@key{<S-Left>} (シフト + 左矢印キー) でカーソルが左に移動します。ビジュアルモードと同じように選択範囲が変化します。他の矢印キーも同様に使えます。@key{<S-End>} と @key{<S-Home>} も使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can tune the way Select mode works with the 'selectmode' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
選択モードの動作は '@option{selectmode}' オプションで変更できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_10.txt|  Making big changes

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
