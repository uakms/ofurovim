@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node scroll.txt, , , 目次
@unnumbered ウィンドウのスクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*scroll.txt*    For Vim version 8.0.  Last change: 2016 Nov 10


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*scroll.txt*    For Vim バージョン 8.0.  Last change: 2016 Nov 10


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Scrolling						*scrolling*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scrolling}
@cindex scrolling
@section スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These commands move the contents of the window.  If the cursor position is
moved off of the window, the cursor is moved onto the window (with
'scrolloff' screen lines around it).  A page is the number of lines in the
window minus two.  The mnemonics for these commands may be a bit confusing.
Remember that the commands refer to moving the window (the part of the buffer
that you see) upwards or downwards in the buffer.  When the window moves
upwards in the buffer, the text in the window moves downwards on your screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドはウィンドウの内容を移動する。カーソルがウィンドウの外に移動しようとすると、カーソルはウィンドウに留まるように振舞う ('@option{scrolloff}' のスクリーン行をカーソルの周囲に確保する)。

1 ページとはウィンドウの行数から2引いた行数と定義する。これらのコマンドを覚えるのは少し厄介かもしれない。ウィンドウをバッファのうち貴方が見ている一部分と捉えて、ウィンドウの動きをバッファ内での上下の移動に関連付けてコマンドを覚えると良いだろう。

例えばバッファの中でウィンドウが上に動くと、ウィンドウのテキストはスクリーンの下の方へ移動していくことになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See section |03.7| of the user manual for an introduction.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
手始めにユーザーマニュアルの |@ref{03.7}| を読むこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Scrolling downwards		|scroll-down|
2. Scrolling upwards		|scroll-up|
3. Scrolling relative to cursor	|scroll-cursor|
4. Scrolling horizontally	|scroll-horizontal|
5. Scrolling synchronously	|scroll-binding|
6. Scrolling with a mouse wheel |scroll-mouse-wheel|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. 下方スクロール @tab |@ref{scroll-down, , scroll-down}|
@item 2. 上方スクロール @tab |@ref{scroll-up, , scroll-up}|
@item 3. カーソル相関スクロール @tab |@ref{scroll-cursor, , scroll-cursor}|
@item 4. 水平スクロール @tab |@ref{scroll-horizontal, , scroll-horizontal}|
@item 5. 同期スクロール @tab |@ref{scroll-binding, , scroll-binding}|
@item 6. マウスホイールスクロール @tab |@ref{scroll-mouse-wheel, , scroll-mouse-wheel}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Scrolling downwards					*scroll-down*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-down}
@cindex scroll-down
@section 1. 下方スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following commands move the edit window (the part of the buffer that you
see) downwards (this means that more lines downwards in the text buffer can be
seen):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のコマンドは編集ウィンドウ (バッファ内の貴方が見ている一部分) を下に移動する(つまりテキストバッファのより下にある行を見ることができる):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-E*
CTRL-E			Scroll window [count] lines downwards in the buffer.
			Mnemonic: Extra lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-E}
@cindex CTRL-E
@table @asis
@item CTRL-E
バッファの下へ [count] 行ウィンドウをスクロールする。

覚え方: Extra lines @{訳注: Extra=割増@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-D*
CTRL-D			Scroll window Downwards in the buffer.  The number of
			lines comes from the 'scroll' option (default: half a
			screen).  If [count] given, first set 'scroll' option
			to [count].  The cursor is moved the same number of
			lines down in the file (if possible; when lines wrap
			and when hitting the end of the file there may be a
			difference).  When the cursor is on the last line of
			the buffer nothing happens and a beep is produced.
			See also 'startofline' option.
			{difference from vi: Vim scrolls 'scroll' screen
			lines, instead of file lines; makes a difference when
			lines wrap}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-D}
@cindex CTRL-D
@item CTRL-D
ウィンドウをバッファ内で下にスクロールする。スクロールする行数は '@option{scroll}' オプションで指定される (省略した場合: スクリーンの半分の行数)。

[count] が指定された場合、'@option{scroll}' オプションに [count] が設定されてからスクロールする。カーソルもファイル内で同じ行数だけ下へ移動する (もし可能ならば; 行が折り返されている場合やファイルの終端に達した時は違ってくる)。

カーソルがバッファの最終行にある時は何も起こらずビープ音が鳴る。'@option{startofline}' オプションも参照。

@{Vi と異なる点: ファイルの物理行数スクロールさせる代わりに、Vim では '@option{scroll}' 行分スクリーンの論理行でスクロールする; これは行が折り返されている時に違いを生む@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<S-Down>	or				*<S-Down>* *<kPageDown>*
<PageDown>	or				*<PageDown>* *CTRL-F*
CTRL-F			Scroll window [count] pages Forwards (downwards) in
			the buffer.  See also 'startofline' option.
			When there is only one window the 'window' option
			might be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<S-Down>}
@anchor{<kPageDown>}
@anchor{<PageDown>}
@anchor{CTRL-F}
@cindex <S-Down>
@cindex <kPageDown>
@cindex <PageDown>
@cindex CTRL-F
@item <S-Down> または
@itemx @key{<PageDown>} または
@itemx @kbd{CTRL-F}
ウィンドウをバッファ内で [count] ページ前方 (下方) にスクロールする。'@option{startofline}' オプションも参照。

ウィンドウが1つだけのときはオプション '@option{window}' の値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*z+*
z+			Without [count]: Redraw with the line just below the
			window at the top of the window.  Put the cursor in
			that line, at the first non-blank in the line.
			With [count]: just like "z<CR>".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z+}
@cindex z+
@item z+
[count] が無い時: 現在のウィンドウの最下行を最上行にして再描画する。カーソルはその行の、最初の非空白文字に合わせられる。

[count] が有る時: ちょうど "z<CR>" と同じ。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Scrolling upwards					*scroll-up*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-up}
@cindex scroll-up
@section 2. 上方スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following commands move the edit window (the part of the buffer that you
see) upwards (this means that more lines upwards in the text buffer can be
seen):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のコマンドは編集ウィンドウ (バッファ内の貴方が見ている一部分) を上に移動する(つまりテキストバッファのより上にある行を見ることができる):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-Y*
CTRL-Y			Scroll window [count] lines upwards in the buffer.
			Note: When using the MS-Windows key bindings CTRL-Y is
			remapped to redo.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-Y}
@cindex CTRL-Y
@table @asis
@item CTRL-Y
バッファの上へ [count] 行ウィンドウをスクロールする。
@quotation
@strong{Note:} @*
MS-Windows のキーバインディングを使っているときは @kbd{CTRL-Y} は redo にマッピングされている。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-U*
CTRL-U			Scroll window Upwards in the buffer.  The number of
			lines comes from the 'scroll' option (default: half a
			screen).  If [count] given, first set the 'scroll'
			option to [count].  The cursor is moved the same
			number of lines up in the file (if possible; when
			lines wrap and when hitting the end of the file there
			may be a difference).  When the cursor is on the first
			line of the buffer nothing happens and a beep is
			produced.  See also 'startofline' option.
			{difference from vi: Vim scrolls 'scroll' screen
			lines, instead of file lines; makes a difference when
			lines wrap}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-U}
@cindex CTRL-U
@item CTRL-U
ウィンドウをバッファ内で上にスクロールする。スクロールする行数は '@option{scroll}' オプションで指定される (省略した場合: スクリーンの半分の行数)。

[count] が指定された場合、'@option{scroll}' オプションに [count] が設定されてからスクロールする。カーソルもファイル内で同じ行数だけ上へ移動する (もし可能ならば; 行が折り返されている場合やファイルの先頭に達した時は違ってくる)。カーソルがバッファの先頭行にある時は何も起こらずビープ音が鳴る。'@option{startofline}' オプションも参照。

@{Vi と異なる点: ファイルの物理行数スクロールさせる代わりに、Vim では '@option{scroll}' 行分スクリーンの論理行でスクロールする; これは行が折り返されている時に違いを生む@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<S-Up>		or					*<S-Up>* *<kPageUp>*
<PageUp>	or					*<PageUp>* *CTRL-B*
CTRL-B			Scroll window [count] pages Backwards (upwards) in the
			buffer.  See also 'startofline' option.
			When there is only one window the 'window' option
			might be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<S-Up>}
@anchor{<kPageUp>}
@anchor{<PageUp>}
@anchor{CTRL-B}
@cindex <S-Up>
@cindex <kPageUp>
@cindex <PageUp>
@cindex CTRL-B
@item <S-Up> または
@itemx @key{<PageUp>} または
@itemx @kbd{CTRL-B}
ウィンドウをバッファ内で [count] ページ後方 (上方) にスクロールする。'@option{startofline}' オプションも参照。

ウィンドウが 1 つだけのときはオプション '@option{window}' の値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*z^*
z^			Without [count]: Redraw with the line just above the
			window at the bottom of the window.  Put the cursor in
			that line, at the first non-blank in the line.
			With [count]: First scroll the text to put the [count]
			line at the bottom of the window, then redraw with the
			line which is now at the top of the window at the
			bottom of the window.  Put the cursor in that line, at
			the first non-blank in the line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z^}
@cindex z^
@item z^
[count] が無い時: 現在のウィンドウの最上行を最下行にして再描画する。カーソルはその行の、最初の非空白文字に合わせられる。

[count] が有る時: まず [count] 行がウィンドウの最下行になるようにスクロールし、次にウィンドウの最上行になった行を最下行にして再描画する。カーソルはその行の最初の非空白文字に合わせられる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Scrolling relative to cursor				*scroll-cursor*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-cursor}
@cindex scroll-cursor
@section 3. カーソル相関スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following commands reposition the edit window (the part of the buffer that
you see) while keeping the cursor on the same line.  Note that the 'scrolloff'
option may cause context lines to show above and below the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
下記のコマンドはカーソルの位置は変えずに編集ウィンドウ (バッファの見えている一部)の位置を変える。'@option{scrolloff}' オプションを設定していると、カーソルの上または下の周辺行が表示されることに注意。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*z<CR>*
z<CR>			Redraw, line [count] at top of window (default
			cursor line).  Put cursor at first non-blank in the
			line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z<CR>}
@cindex z<CR>
@table @asis
@item z<CR>
[count] 行 (省略時はカーソルのある行) をウィンドウの最上行にして再描画する。カーソルは行内の最初の非空白文字に置かれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zt*
zt			Like "z<CR>", but leave the cursor in the same
			column.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zt}
@cindex zt
@item zt
"z<CR>" と同様だが、カーソルは同じカラムに留める。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zN<CR>*
z{height}<CR>		Redraw, make window {height} lines tall.  This is
			useful to make the number of lines small when screen
			updating is very slow.  Cannot make the height more
			than the physical screen height.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zN<CR>}
@cindex zN<CR>
@item z@{height@}<CR>
ウィンドウを高さ @{height@} 行に変更して再描画する。スクリーンの更新が非常に遅い時に、高さを減らすと有効である。物理的なスクリーンの高さよりも高くすることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*z.*
z.			Redraw, line [count] at center of window (default
			cursor line).  Put cursor at first non-blank in the
			line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z.}
@cindex z.
@item z.
[count] 行 (省略時はカーソルのある行) をウィンドウの中心にして再描画する。カーソルは行内の最初の非空白文字に置かれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zz*
zz			Like "z.", but leave the cursor in the same column.
			Careful: If caps-lock is on, this command becomes
			"ZZ": write buffer and exit!  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zz}
@cindex zz
@item zz
"z." と同様だが、カーソルは同じカラムに留める。
@quotation
@strong{注意:} caps-lock が有効になっていると、このコマンドは "ZZ" になり、バッファを書き出し終了してしまう。
@end quotation
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*z-*
z-			Redraw, line [count] at bottom of window (default
			cursor line).  Put cursor at first non-blank in the
			line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z-}
@cindex z-
@item z-
[count] 行 (省略時はカーソルのある行) をウィンドウの最下行にして再描画する。カーソルは行内の最初の非空白文字に置かれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zb*
zb			Like "z-", but leave the cursor in the same column.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zb}
@cindex zb
@item zb
"z-" と同様だが、カーソルは同じカラムに留める。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Scrolling horizontally				*scroll-horizontal*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-horizontal}
@cindex scroll-horizontal
@section 4. 水平スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the following four commands the cursor follows the screen.  If the
character that the cursor is on is moved off the screen, the cursor is moved
to the closest character that is on the screen.  The value of 'sidescroll' is
not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の 4 つのコマンドはスクリーンに応じてカーソルが移動する。カーソルのある文字がスクリーンが動いたために消えると、カーソルはスクリーン上の一番近い文字に移動する。'@option{sidescroll}' の値は使用されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
z<Right>    or						*zl* *z<Right>*
zl			Move the view on the text [count] characters to the
			right, thus scroll the text [count] characters to the
			left.  This only works when 'wrap' is off.  {not in
			Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zl}
@anchor{z<Right>}
@cindex zl
@cindex z<Right>
@table @asis
@item z@key{<Right>} または
@itemx zl
スクリーンを [count] 文字右へ移動する。従ってテキストは [count] 文字左へスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
z<Left>      or						*zh* *z<Left>*
zh			Move the view on the text [count] characters to the
			left, thus scroll the text [count] characters to the
			right.  This only works when 'wrap' is off.  {not in
			Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zh}
@anchor{z<Left>}
@cindex zh
@cindex z<Left>
@item z@key{<Left>} または
@itemx zh
スクリーンを [count] 文字左へ移動する。従ってテキストは [count] 文字右へスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zL*
zL			Move the view on the text half a screenwidth to the
			right, thus scroll the text half a screenwidth to the
			left.  This only works when 'wrap' is off.  {not in
			Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zL}
@cindex zL
@item zL
スクリーンの幅の半分右へスクロールする。従ってテキストはスクリーンの幅の半分左へスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zH*
zH			Move the view on the text half a screenwidth to the
			left, thus scroll the text half a screenwidth to the
			right.  This only works when 'wrap' is off.  {not in
			Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zH}
@cindex zH
@item zH
スクリーンの幅の半分左へスクロールする。従ってテキストはスクリーンの幅の半分右へスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the following two commands the cursor is not moved in the text, only the
text scrolls on the screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の 2 つのコマンドではテキスト上でカーソルは移動せず、スクリーンのテキストだけがスクロールする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*zs*
zs			Scroll the text horizontally to position the cursor
			at the start (left side) of the screen.  This only
			works when 'wrap' is off.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{zs}
@cindex zs
@table @asis
@item zs
カーソルのある位置がスクリーンの始まり(左側)に来るようにテキストを水平にスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*ze*
ze			Scroll the text horizontally to position the cursor
			at the end (right side) of the screen.  This only
			works when 'wrap' is off.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ze}
@cindex ze
@item ze
カーソルのある位置がスクリーンの終わり(右側)に来るようにテキストを水平にスクロールする。これは '@option{wrap}' がオフの時にだけ働く。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Scrolling synchronously				*scroll-binding*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-binding}
@cindex scroll-binding
@section 5. 同期スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Occasionally, it is desirable to bind two or more windows together such that
when one window is scrolled, the other windows are also scrolled.  In Vim,
windows can be given this behavior by setting the (window-specific)
'scrollbind' option.  When a window that has 'scrollbind' set is scrolled, all
other 'scrollbind' windows are scrolled the same amount, if possible.  The
behavior of 'scrollbind' can be modified by the 'scrollopt' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
時折、2 つかそれ以上のウィンドウを結びつけて、1 つがスクロールしたら他のウィンドウもスクロールして欲しいと思うことがある。Vim ではウィンドウごとに '@option{scrollbind}' オプションを設定することでこのような振る舞いをさせることが可能である。

'@option{scrollbind}' が設定されたあるウィンドウがスクロールした場合、他の '@option{scrollbind}' が設定されたウィンドウが可能なら同じ量だけスクロールする。'@option{scrollbind}' の振る舞いは '@option{scrollopt}' オプションによって変更することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using the scrollbars, the binding only happens when scrolling the window
with focus (where the cursor is).  You can use this to avoid scroll-binding
for a moment without resetting options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
スクロールバーを使っているとき、マウスでスクロールバーを操作しても他のウィンドウはスクロールされない。これは少しの間だけ同期スクロールを使わないでスクロールしたい時に使える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a window also has the 'diff' option set, the scroll-binding uses the
differences between the two buffers to synchronize the position precisely.
Otherwise the following method is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウに '@option{diff}' オプションも設定されているとき、同期スクロールは位置を正確に同期するために 2 つのバッファの差分を利用する。それ以外の場合は以下の方法が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*scrollbind-relative*
Each 'scrollbind' window keeps track of its "relative offset," which can be
thought of as the difference between the current window's vertical scroll
position and the other window's vertical scroll position.  When one of the
'scrollbind' windows is asked to vertically scroll past the beginning or end
limit of its text, the window no longer scrolls, but remembers how far past
the limit it wishes to be.  The window keeps this information so that it can
maintain the same relative offset, regardless of its being asked to scroll
past its buffer's limits.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scrollbind-relative}
@cindex scrollbind-relative
'@option{scrollbind}' された各々のウィンドウは "相対的なオフセット" --すなわち、現在のウィンドウの垂直スクロール位置とその他のウィンドウの垂直スクロール位置の間の差分と考えることができる--を追跡する。'@option{scrollbind}' ウィンドウの 1 つがテキストの最初もしくは最後を超えてスクロールしようとすると、そのウィンドウはそれ以上スクロールはしないが、どれだけ限界を超えて移動しようとしたかは記憶される。そのウィンドウは同じ相対オフセットを維持するために、そのバッファの限界を超えてスクロールを要求されたかに関わらず、この情報を保持し続ける。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
However, if a 'scrollbind' window that has a relative offset that is past its
buffer's limits is given the cursor focus, the other 'scrollbind' windows must
jump to a location where the current window's relative offset is valid.  This
behavior can be changed by clearing the "jump" flag from the 'scrollopt'
option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしながら、そのバッファの限界を超えるような相対オフセットを持つウィンドウにカーソルフォーカスが与えられると、その他の '@option{scrollbind}' されたウィンドウは現在のウィンドウの有効な相対オフセットの位置にジャンプすることになる。この振る舞いは '@option{scrollopt}' オプションから "@var{jump}" フラグを削除することで変えることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*syncbind* *:syncbind* *:sync*
:syncbind		Force all 'scrollbind' windows to have the same
			relative offset.  I.e., when any of the 'scrollbind'
			windows is scrolled to the top of its buffer, all of
			the 'scrollbind' windows will also be at the top of
			their buffers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{syncbind}
@anchor{:syncbind}
@anchor{:sync}
@cindex syncbind
@cindex :syncbind
@cindex :sync
@table @asis
@item :syncbind
すべての '@option{scrollbind}' ウィンドウが同じ相対オフセットを持つように強制する。すなわち '@option{scrollbind}' ウィンドウがそのバッファの先頭にスクロールされた時、その他の '@option{scrollbind}' ウィンドウもまたそれぞれのバッファの先頭に持っていかれる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*scrollbind-quickadj*
The 'scrollbind' flag is meaningful when using keyboard commands to vertically
scroll a window, and also meaningful when using the vertical scrollbar of the
window which has the cursor focus.  However, when using the vertical scrollbar
of a window which doesn't have the cursor focus, 'scrollbind' is ignored.
This allows quick adjustment of the relative offset of 'scrollbind' windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scrollbind-quickadj}
@cindex scrollbind-quickadj
'@option{scrollbind}' フラグはウィンドウを垂直スクロールするキーボードコマンドを使う時に意味があり、またカーソルフォーカスを持つウィンドウの垂直スクロールバーを使うときに意味がある。しかしながら、カーソルフォーカスを持たないウィンドウの垂直スクロールバーを使うときには、'@option{scrollbind}' は無視される。これを '@option{scrollbind}' されたウィンドウの相対オフセットを修正する時に利用できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Scrolling with a mouse wheel				*scroll-mouse-wheel*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{scroll-mouse-wheel}
@cindex scroll-mouse-wheel
@section 6. マウスホイールスクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When your mouse has a scroll wheel, it should work with Vim in the GUI.  How
it works depends on your system.  It might also work in an xterm
|xterm-mouse-wheel|.  By default only vertical scroll wheels are supported,
but some GUIs also support horizontal scroll wheels.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスにスクロールホイールがあるときは、GUI の Vim でそれを使うことができる。どのように動作するかはシステムに依存する。ホイールは xterm でも動作する |@ref{xterm-mouse-wheel}|。デフォルトでは垂直スクロールホイールのみサポートされている。いくつかの GUI では水平スクロールホイールもサポートされている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the Win32 GUI the scroll action is hard coded.  It works just like
dragging the scrollbar of the current window.  How many lines are scrolled
depends on your mouse driver.  If the scroll action causes input focus
problems, see |intellimouse-wheel-problems|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 GUI ではスクロールの動作はソースに埋め込まれている。それはちょうど現在のウィンドウのスクロールバーをドラッグした時のように働く。何行スクロールするかは貴方のマウスドライバに依存する。スクロールの動作が入力フォーカスの問題を引き起こすならば、|@ref{intellimouse-wheel-problems}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the X11 GUIs (Motif, Athena and GTK) scrolling the wheel generates key
presses <ScrollWheelUp>, <ScrollWheelDown>, <ScrollWheelLeft> and
<ScrollWheelRight>.  For example, if you push the scroll wheel upwards a
<ScrollWheelUp> key press is generated causing the window to scroll upwards
(while the text is actually moving downwards).  The default action for these
keys are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X11 GUI (Motif、Athena、GTK) ではホイールを回すと <ScrollWheelUp>, <ScrollWheelDown>, <ScrollWheelLeft>, <ScrollWheelRight> などのキー入力が発生する。例えば、スクロールホイールを上に回すと <ScrollWheelUp> キーが生成され、ウィンドウが上にスクロールする (つまりテキストが下に移動する)。これらのキーのデフォルトの動作は次の通り:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    <ScrollWheelUp>	    scroll three lines up	*<ScrollWheelUp>*
    <S-ScrollWheelUp>	    scroll one page up		*<S-ScrollWheelUp>*
    <C-ScrollWheelUp>	    scroll one page up		*<C-ScrollWheelUp>*
    <ScrollWheelDown>	    scroll three lines down	*<ScrollWheelDown>*
    <S-ScrollWheelDown>	    scroll one page down	*<S-ScrollWheelDown>*
    <C-ScrollWheelDown>	    scroll one page down	*<C-ScrollWheelDown>*
    <ScrollWheelLeft>	    scroll six columns left	*<ScrollWheelLeft>*
    <S-ScrollWheelLeft>	    scroll one page left	*<S-ScrollWheelLeft>*
    <C-ScrollWheelLeft>	    scroll one page left	*<C-ScrollWheelLeft>*
    <ScrollWheelRight>	    scroll six columns right	*<ScrollWheelRight>*
    <S-ScrollWheelRight>    scroll one page right	*<S-ScrollWheelRight>*
    <C-ScrollWheelRight>    scroll one page right	*<C-ScrollWheelRight>*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@anchor{<ScrollWheelUp>}
@cindex <ScrollWheelUp>
@item <ScrollWheelUp> @tab 3 行上にスクロール
@anchor{<S-ScrollWheelUp>}
@cindex <S-ScrollWheelUp>
@item <S-ScrollWheelUp> @tab 1 画面上にスクロール
@anchor{<C-ScrollWheelUp>}
@cindex <C-ScrollWheelUp>
@item <C-ScrollWheelUp> @tab 1 画面上にスクロール
@anchor{<ScrollWheelDown>}
@cindex <ScrollWheelDown>
@item <ScrollWheelDown> @tab 3 行下にスクロール
@anchor{<S-ScrollWheelDown>}
@cindex <S-ScrollWheelDown>
@item <S-ScrollWheelDown> @tab 1 画面下にスクロール
@anchor{<C-ScrollWheelDown>}
@cindex <C-ScrollWheelDown>
@item <C-ScrollWheelDown> @tab 1 画面下にスクロール
@anchor{<ScrollWheelLeft>}
@cindex <ScrollWheelLeft>
@item <ScrollWheelLeft> @tab 6 列左にスクロール
@anchor{<S-ScrollWheelLeft>}
@cindex <S-ScrollWheelLeft>
@item <S-ScrollWheelLeft> @tab 1 画面左にスクロール
@anchor{<C-ScrollWheelLeft>}
@cindex <C-ScrollWheelLeft>
@item <C-ScrollWheelLeft> @tab 1 画面左にスクロール
@anchor{<ScrollWheelRight>}
@cindex <ScrollWheelRight>
@item <ScrollWheelRight> @tab 6 列右にスクロール
@anchor{<S-ScrollWheelRight>}
@cindex <S-ScrollWheelRight>
@item <S-ScrollWheelRight> @tab 1 画面右にスクロール
@anchor{<C-ScrollWheelRight>}
@cindex <C-ScrollWheelRight>
@item <C-ScrollWheelRight> @tab 1 画面右にスクロール
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This should work in all modes, except when editing the command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはコマンドラインを編集する以外の、全てのモードで動作するだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that horizontal scrolling only works if 'nowrap' is set.  Also, unless
the "h" flag in 'guioptions' is set, the cursor moves to the longest visible
line if the cursor line is about to be scrolled off the screen (similarly to
how the horizontal scrollbar works).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
水平スクロールは '@option{nowrap}' が設定されているときのみ機能する。また、'@option{guioptions}' の "@var{h}" フラグが設定されていない場合は、スクロールするとカーソル行が画面外になってしまうようなときに、表示されている範囲の一番長い行にカーソルが移動する (水平スクロールバーの動作に似た感じ)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can modify the default behavior by mapping the keys.  For example, to make
the scroll wheel move one line or half a page in Normal mode: >
   :map <ScrollWheelUp> <C-Y>
   :map <S-ScrollWheelUp> <C-U>
   :map <ScrollWheelDown> <C-E>
   :map <S-ScrollWheelDown> <C-D>
You can also use Alt and Ctrl modifiers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーマッピングによりデフォルトの振る舞いを変更することができる。例えば、ノーマルモードでホイールによるスクロールを 1 行にしたり半画面にしたりできる:
@verbatim
map <MouseDown> <C-Y>
map <S-MouseDown> <C-U>
map <MouseUp> <C-E>
map <S-MouseUp> <C-D>
@end verbatim
Alt や Ctrl といった修飾も可能である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This only works when Vim gets the scroll wheel events, of course.  You can
check if this works with the "xev" program.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはもちろん、Vim がスクロールホイールのイベントを取得している時にだけ働く。この機能が働くかどうかは "xev" プログラムを使用すればチェックできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using XFree86, the /etc/XF86Config file should have the correct entry for
your mouse.  For FreeBSD, this entry works for a Logitech scrollmouse: >
    Protocol     "MouseMan"
    Device       "/dev/psm0"
    ZAxisMapping 4 5
See the XFree86 documentation for information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
XFree86 を使っているときには、/etc/XF86Config に貴方のマウスの正しいエントリがなければならない。FreeBSDでは、このようなエントリがロジテックのスクロールマウス用に必要である。
@verbatim
Protocol     "MouseMan"
Device       "/dev/psm0"
ZAxisMapping 4 5
@end verbatim
詳しくは XFree86 のドキュメントを参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*<MouseDown>* *<MouseUp>*
The keys <MouseDown> and <MouseUp> have been deprecated.  Use <ScrollWheelUp>
instead of <MouseDown> and use <ScrollWheelDown> instead of <MouseUp>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<MouseDown>}
@anchor{<MouseUp>}
@cindex <MouseDown>
@cindex <MouseUp>
<MouseDown> と <MouseUp> は廃止された。<MouseDown> の代わりに <ScrollWheelUp> を、<MouseUp> の代わりに <ScrollWheelDown> を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*xterm-mouse-wheel*
To use the mouse wheel in a new xterm you only have to make the scroll wheel
work in your Xserver, as mentioned above.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{xterm-mouse-wheel}
@cindex xterm-mouse-wheel
新しい xterm でマウスホイールを使うには、上で書かれているように Xserver でスクロールホイールマウスが動作するようにするだけで良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To use the mouse wheel in an older xterm you must do this:
1. Make it work in your Xserver, as mentioned above.
2. Add translations for the xterm, so that the xterm will pass a scroll event
   to Vim as an escape sequence.
3. Add mappings in Vim, to interpret the escape sequences as <ScrollWheelDown>
   or <ScrollWheelUp> keys.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
古いxtermでマウスホイールを使うにはこうする:
@enumerate
@item 上に書かれているように、Xserver で使えるようにする。
@item xterm に変換を追加し、スクロールイベントを Vim へエスケープシーケンスとして渡すようにする。
@item Vim にマッピングを追加し、エスケープシーケンスを <ScrollWheelDown> もしくは <ScrollWheelUp> キーとして解釈できるようにする。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can do the translations by adding this to your ~.Xdefaults file (or other
file where your X resources are kept): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような内容をあなたの ~/.Xdefaults (もしくは別名の貴方の X リソースファイル) に追加すれば変換ができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  XTerm*VT100.Translations:		#override \n\
		s<Btn4Down>: string("0x9b") string("[64~") \n\
		s<Btn5Down>: string("0x9b") string("[65~") \n\
		<Btn4Down>: string("0x9b") string("[62~") \n\
		<Btn5Down>: string("0x9b") string("[63~") \n\
		<Btn4Up>: \n\
		<Btn5Up>:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
XTerm*VT100.Translations:     #override \n\
      s<Btn4Down>: string("0x9b") string("[64~") \n\
      s<Btn5Down>: string("0x9b") string("[65~") \n\
      <Btn4Down>: string("0x9b") string("[62~") \n\
      <Btn5Down>: string("0x9b") string("[63~") \n\
      <Btn4Up>: \n\
      <Btn5Up>:
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Add these mappings to your vimrc file: >
	:map <M-Esc>[62~ <ScrollWheelUp>
	:map! <M-Esc>[62~ <ScrollWheelUp>
	:map <M-Esc>[63~ <ScrollWheelDown>
	:map! <M-Esc>[63~ <ScrollWheelDown>
	:map <M-Esc>[64~ <S-ScrollWheelUp>
	:map! <M-Esc>[64~ <S-ScrollWheelUp>
	:map <M-Esc>[65~ <S-ScrollWheelDown>
	:map! <M-Esc>[65~ <S-ScrollWheelDown>
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のマッピングを vimrc ファイルに追加すること:
@example
:map <M-Esc>[62~ <ScrollWheelUp>
:map! <M-Esc>[62~ <ScrollWheelUp>
:map <M-Esc>[63~ <ScrollWheelDown>
:map! <M-Esc>[63~ <ScrollWheelDown>
:map <M-Esc>[64~ <S-ScrollWheelUp>
:map! <M-Esc>[64~ <S-ScrollWheelUp>
:map <M-Esc>[65~ <S-ScrollWheelDown>
:map! <M-Esc>[65~ <S-ScrollWheelDown>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
