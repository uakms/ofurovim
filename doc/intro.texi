@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node intro.txt, , , 目次
@unnumbered Vim についての前書き、ヘルプの表記について
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*intro.txt*     For Vim version 8.1.  Last change: 2018 Jan 24


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*intro.txt*     For Vim バージョン 8.1.  Last change: 2018 Jan 24


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Introduction to Vim					*ref* *reference*

1. Introduction			|intro|
2. Vim on the internet		|internet|
3. Credits			|credits|
4. Notation			|notation|
5. Modes, introduction		|vim-modes-intro|
6. Switching from mode to mode	|mode-switching|
7. The window contents		|window-contents|
8. Definitions			|definitions|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ref}
@anchor{reference}
@cindex ref
@cindex reference
@unnumberedsec 序文

@multitable @columnfractions .6 .4
@item 1. はじめに @tab |@ref{intro}|
@item 2. インターネット上の Vim 情報 @tab |@ref{internet}|
@item 3. クレジット @tab |@ref{credits}|
@item 4. ヘルプの表記法 @tab |@ref{notation}|
@item 5. モードの紹介 @tab |@ref{vim-modes-intro}|
@item 6. モードの切り替え @tab |@ref{mode-switching}|
@item 7. ウィンドウに表示される内容 @tab |@ref{window-contents}|
@item 8. 用語の定義 @tab |@ref{definitions}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Introduction						*intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{intro}
@cindex intro
@section 1. はじめに
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim stands for Vi IMproved.  It used to be Vi IMitation, but there are so many
improvements that a name change was appropriate.  Vim is a text editor which
includes almost all the commands from the Unix program "Vi" and a lot of new
ones.  It is very useful for editing programs and other plain text.
   All commands are given with the keyboard.  This has the advantage that you
can keep your fingers on the keyboard and your eyes on the screen.  For those
who want it, there is mouse support and a GUI version with scrollbars and
menus (see |gui.txt|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は Vi IMproved (Vi の改良版) です。かつては Vi IMitation (Vi の模造品) でしたが、多くの改良が加えられたので適切な名前に変更されました。Vim はテキストエディタです。Unix のプログラム "Vi" のほとんどのコマンドと、さらに多くの新しいコマンドを備えています。プログラムを書いたりテキストを編集するのにとても便利です。

すべてのコマンドはキーボードから入力します。そのため、キーボードから手を離す必要も、スクリーンから目を離す必要もありません。お望みなら、マウスを使うこともできますし、GUIではスクロールバーやメニューを使うこともできます (|@ref{gui.txt}| 参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
An overview of this manual can be found in the file "help.txt", |help.txt|.
It can be accessed from within Vim with the <Help> or <F1> key and with the
|:help| command (just type ":help", without the bars or quotes).
   The 'helpfile' option can be set to the name of the help file, in case it
is not located in the default place.  You can jump to subjects like with tags:
Use CTRL-] to jump to a subject under the cursor, use CTRL-T to jump back.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマニュアルの概要は |@ref{help.txt}| にあります。Vim から @key{<Help>} や @key{<F1>} キー、|@ref{:help}| コマンドで開くことができます (単に @command{:help} と入力してください。引用符もバーも必要ありません)。

ヘルプファイルが標準の位置にインストールされていない場合は、ヘルプファイルの名前をオプション '@option{helpfile}' に設定してください。タグでジャンプするのと同じようにヘルプの項目へジャンプできます。ジャンプしたい項目にカーソルを合わせて @kbd{CTRL-]} でジャンプできます。@kbd{CTRL-T} で元の場所に戻れます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Throughout this manual the differences between Vi and Vim are mentioned in
curly braces, like this: {Vi does not have on-line help}.  See |vi_diff.txt|
for a summary of the differences between Vim and Vi.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマニュアルでは、Vi と Vim の相違点を次のように中カッコの中に記述しています。@{Vi にはオンラインヘルプはありません@}。Vim と Vi の相違点についての要約は |@ref{vi_diff.txt}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This manual refers to Vim on various machines.  There may be small differences
between different computers and terminals.  Besides the remarks given in this
document, there is a separate document for each supported system, see
|sys-file-list|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマニュアルの内容は Vim が実行されるほとんどの環境で通用しますが、コンピュータや端末によって、少し違う動作をする場合があります。このドキュメントから外れる内容については、システムごとに個別の説明があります。|@ref{sys-file-list}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*pronounce*
Vim is pronounced as one word, like Jim, not vi-ai-em.  It's written with a
capital, since it's a name, again like Jim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{pronounce}
@cindex pronounce
Vim は vi-ai-em ではなく、Jim のように一語として発音します。Vim はまた Jim のように名称なので、(最初の文字を)大文字で書きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This manual is a reference for all the Vim commands and options.  This is not
an introduction to the use of Vi or Vim, it gets a bit complicated here and
there.  For beginners, there is a hands-on |tutor|.  To learn using Vim, read
the user manual |usr_toc.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマニュアルは全ての Vim コマンドとオプションのリファレンスです。Vi や Vim の入門書ではありません (それを入れるとあちこちで説明が込み入ってしまうので)。初心者には、実習 |@ref{tutor}| があります。Vim の使い方を身につけるにはユーザーマニュアル |@ref{usr_toc.txt}| を読んでください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*book*
There are many books on Vi that contain a section for beginners.  There are
two books I can recommend:

	"Vim - Vi Improved" by Steve Oualline
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{book}
@cindex book
初心者向けの内容を含んだ Vi の本はたくさん出ています。私が推薦できる本は 2 冊あります:
@quotation
"Vim - Vi Improved" by Steve Oualline

@{訳注: 日本語版は @*
            ViIMproved‐Vim完全バイブル , 高橋　則利 (翻訳) @*
            技術評論社 ; ISBN: 4774120189@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is the very first book completely dedicated to Vim.  It is very good for
beginners.  The most often used commands are explained with pictures and
examples.  The less often used commands are also explained, the more advanced
features are summarized.  There is a comprehensive index and a quick
reference.  Parts of this book have been included in the user manual
|frombook|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは Vim のみを取り扱った最初の本です。初心者にとてもよい本です。最もよく使われるコマンドが、図と例を使って説明されています。それほど使われないコマンドも説明され、さらに高度な機能は要約されています。総括的な索引とクイックリファレンスがついています。この本の一部はユーザーマニュアルに含まれてます。|@ref{frombook}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Published by New Riders Publishing.  ISBN: 0735710015
For more information try one of these:
	http://iccf-holland.org/click5.html
	http://www.vim.org/iccf/click5.html

	"Learning the Vi editor" by Linda Lamb and Arnold Robbins
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
New Riders Publishing から出版されています。ISBN: 0735710015 @*
より詳しい情報については、ここを見てみてください。

@url{http://iccf-holland.org/click5.html} @*
@url{http://www.vim.org/iccf/click5.html}
@quotation
"Learning the Vi editor" by Linda Lamb and Arnold Robbins

@{訳注: 日本語版は @*
            入門vi 第6版 , 福崎 俊博 (翻訳) @*
            オライリー・ジャパン ; ISBN: 4873110831@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is a book about Vi that includes a chapter on Vim (in the sixth edition).
The first steps in Vi are explained very well.  The commands that Vim adds are
only briefly mentioned.  There is also a German translation.
Published by O'Reilly.  ISBN: 1-56592-426-6.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは Vi についての本で、(第 6 版では) Vim に関する章もあります。Vi の第一歩がとてもよく説明されています。Vim 独自のコマンドは簡単に言及されているだけです。ドイツ語の翻訳もあります。O'Reilly から出版されています。ISBN: 1-56592-426-6.
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Vim on the internet					*internet*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{internet}
@anchor{www}
@anchor{WWW}
@anchor{faq}
@anchor{FAQ}
@anchor{distribution}
@anchor{download}
@cindex internet
@cindex www
@cindex WWW
@cindex faq
@cindex FAQ
@cindex distribution
@cindex download
@cindex インターネット上の Vim 情報
@section 2. インターネット上の Vim 情報
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*www* *WWW*  *faq* *FAQ* *distribution* *download*
The Vim pages contain the most recent information about Vim.  They also
contain links to the most recent version of Vim.  The FAQ is a list of
Frequently Asked Questions.  Read this if you have problems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のページには Vim についての最新情報が載っています。最新バージョンの Vim へのリンクもあります。FAQ はよく尋ねられる質問に対する回答集です。問題があったらまずこれを読むとよいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Vim home page:	  http://www.vim.org/
	Vim FAQ:	  http://vimdoc.sf.net/
	Downloading:	  ftp://ftp.vim.org/pub/vim/MIRRORS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item Vim ホームページ: @tab @url{http://www.vim.org/}
@item Vim FAQ: @tab @url{http://vimdoc.sf.net/}
@item ダウンロード: @tab @url{ftp://ftp.vim.org/pub/vim/MIRRORS}
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Usenet News group where Vim is discussed:		*news* *usenet*
	comp.editors
This group is also for other editors.  If you write about Vim, don't forget to
mention that.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{news}
@anchor{usenet}
@cindex news
@cindex usenet
@cindex ニュースグループ
Vim について討論している Usenet News グループ

	comp.editors

このグループでは他のエディタについても話し合われています。Vim について書く場合は、そのことを必ず明記してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*mail-list* *maillist*
There are several mailing lists for Vim:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{mail-list}
@anchor{maillist}
@cindex mail-list
@cindex maillist
@cindex メーリングリスト
Vim のメーリングリストがいくつかあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<vim@vim.org>					*vim-use* *vim_use*
	For discussions about using existing versions of Vim: Useful mappings,
	questions, answers, where to get a specific version, etc.  There are
	quite a few people watching this list and answering questions, also
	for beginners.  Don't hesitate to ask your question here.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-use}
@anchor{vim_use}
@cindex vim-use
@cindex vim_use
@cindex Vim の使い方に関する議論
@table @asis
@item <vim@@vim.org>
現行バージョンの Vim の使い方に関する議論: 使いやすいマップ、質問、回答、特定のバージョンはどこで手に入るかなど。このメーリングリストにはたくさんの人が参加していて、(初心者の) 質問にも答えてくれます。遠慮せずどんどん質問してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<vim-dev@vim.org>				*vim-dev* *vim_dev* *vimdev*
	For discussions about changing Vim: New features, porting, patches,
	beta-test versions, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-dev}
@anchor{vim_dev}
@anchor{vimdev}
@cindex vim-dev
@cindex vim_dev
@cindex vimdev
@cindex Vim の開発に関する議論
@item <vim-dev@@vim.org>
Vim の開発に関する議論: 新しい機能、移植、パッチ、ベータ版など。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<vim-announce@vim.org>				*vim-announce* *vim_announce*
	Announcements about new versions of Vim; also for beta-test versions
	and ports to different systems.  This is a read-only list.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-announce}
@anchor{vim_announce}
@cindex vim-announce
@cindex vim_announce
@cindex Vim の新バージョンに関するアナウンス
@item <vim-announce@@vim.org>
Vim の新バージョンに関するアナウンス: ベータ版や他システムへの移植についてもアナウンスがあります。このメーリングリストは購読専用です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<vim-mac@vim.org>				*vim-mac* *vim_mac*
	For discussions about using and improving the Macintosh version of
	Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-mac}
@anchor{vim_mac}
@cindex vim-mac
@cindex vim_mac
@cindex Vim のマッキントッシュバージョンの使用、改良に関する議論
@item <vim-mac@@vim.org>
Vim のマッキントッシュバージョンの使用、改良に関する議論。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See http://www.vim.org/maillist.php for the latest information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最新の情報は @url{http://www.vim.org/maillist.php} を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
NOTE:
- You can only send messages to these lists if you have subscribed!
- You need to send the messages from the same location as where you subscribed
  from (to avoid spam mail).
- Maximum message size is 40000 characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:}
@itemize
@item メーリングリストに投稿するにはそのリストに登録する必要があります！
@item 登録したアドレスと同じアドレスで投稿する必要があります (スパムメールを避けるため)。
@item 最大メッセージサイズは 40000 文字です。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*subscribe-maillist*
If you want to join, send a message to
	<vim-subscribe@vim.org>
Make sure that your "From:" address is correct.  Then the list server will
give you help on how to subscribe.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{subscribe-maillist}
@cindex subscribe-maillist
@cindex メーリングリストに参加する
メーリングリストに参加したい場合は、次の場所へメールを送って下さい。

<@url{vim-subscribe@@vim.org}>

"From:" のアドレスが正しいことを確認してください。メーリングリストのサーバーから登録方法についてのヘルプが送られてきます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*maillist-archive*
For more information and archives look on the Vim maillist page:
http://www.vim.org/maillist.php
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{maillist-archive}
@cindex maillist-archive
@cindex メーリングリストのアーカイブ
より詳しい情報とアーカイブについては、Vim メーリングリストページを見てください。
@url{http://www.vim.org/maillist.php}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Bug reports:				*bugs* *bug-reports* *bugreport.vim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{bugs}
@anchor{bug-reports}
@anchor{bugreport.vim}
@cindex bugs
@cindex bug-reports
@cindex bugreport.vim
@cindex バグレポート
@unnumberedsubsec バグレポート:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are two ways to report bugs, both work:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バグを報告するには 2 つの方法があり、どちらも使えます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Send bug reports to: Vim Developers <vim-dev@vim.org>
   This is a maillist, you need to become a member first and many people will
   see the message.  If you don't want that, e.g. because it is a security
   issue, send it to <bugs@vim.org>, this only goes to the Vim maintainer
   (that's Bram).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
バグレポートは Vim 開発陣 <@email{vim-dev@@vim.org}> に送ってください。これはメーリングリストです。最初にメンバーになる必要があります。たくさんの人がそのメッセージを見ます。それが不都合な場合は (例えばセキュリティ関係)、<@email{bugs@@vim.org}> に送ってください。そのメッセージは Vim のメンテナー (Bram) だけに送信されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Open an issue on GitHub: https://github.com/vim/vim/issues
   The text will be forwarded to the vim-dev maillist.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
GitHub に issue を立ててください: @url{https://github.com/vim/vim/issues} 文章は vim-dev メーリングリストにも転送されます。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Please be brief; all the time that is spent on answering mail is subtracted
from the time that is spent on improving Vim!  Always give a reproducible
example and try to find out which settings or other things trigger the bug.

Preferably start Vim with: >
	vim --clean -u reproduce.vim
Where reproduce.vim is a script that reproduces the problem.  Try different
machines, if relevant (is this an MS-Windows specific bug perhaps?).

Send me patches if you can!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メッセージは簡潔にお願いします。メールに回答する時間は、Vim を改良する時間から消費されています！常に再現可能な例をつけてください。そして、バグを引き起こす設定やその他のものを探してください。

なるべくなら Vim を次のように起動してください:
@verbatim
vim --clean -u reproduce.vim
@end verbatim
ここで、@file{reproduce.vim} は問題を再現するスクリプトです。関連があるならば (もしかしたら MS-Windows 固有のバグかも？)、違うマシンでも試してみて下さい。

可能ならばパッチを私に送って下さい。(本家へのレポートは英語でお願いします)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It will help to include information about the version of Vim you are using and
your setup.  You can get the information with this command: >
   :so $VIMRUNTIME/bugreport.vim
This will create a file "bugreport.txt" in the current directory, with a lot
of information of your environment.  Before sending this out, check if it
doesn't contain any confidential information!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のバージョンや設定情報を含めてくれると助かります。次のコマンドで情報を得ることができます:
@example
:so $VIMRUNTIME/bugreport.vim
@end example
このコマンドはカレントディレクトリにあなたの環境に関する多くの情報を持った "@file{bugreport.txt}" というファイルを作ります。このファイルを送る前に、そこにいかなる秘密の情報も含まれていないことを確認してください！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If Vim crashes, please try to find out where.  You can find help on this here:
|debug.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim がクラッシュした場合は、クラッシュした場所を探してみてください。詳しくは |@ref{debug.txt}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In case of doubt or when you wonder if the problem has already been fixed but
you can't find a fix for it, become a member of the vim-dev maillist and ask
your question there. |maillist|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
よく分からなかったり、その問題がすでに解決済みかどうか知りたい場合には、vim-dev メーリングリストで質問してください。|@ref{maillist}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*year-2000* *Y2K*
Since Vim internally doesn't use dates for editing, there is no year 2000
problem to worry about.  Vim does use the time in the form of seconds since
January 1st 1970.  It is used for a time-stamp check of the edited file and
the swap file, which is not critical and should only cause warning messages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{year-2000}
@anchor{Y2K}
@cindex year-2000
@cindex Y2K
@cindex 2000 年問題
Vim の内部では、テキストの編集に日付を使っていないので、2000 年問題はありません。Vim は 1970 年 1 月 1 日 (正午) からの秒形式で時間を使います。これは、開いているファイルとスワップファイルのタイムスタンプをチェックするために使われますが、致命的な問題は起きません。ただ警告メッセージが表示されるだけでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There might be a year 2038 problem, when the seconds don't fit in a 32 bit int
anymore.  This depends on the compiler, libraries and operating system.
Specifically, time_t and the ctime() function are used.  And the time_t is
stored in four bytes in the swap file.  But that's only used for printing a
file date/time for recovery, it will never affect normal editing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかし、32bit 整数で秒があふれてしまう 2038 年問題はあるかもしれません。この問題は、コンパイラ、ライブラリ、オペレーティングシステムに依存しています。time_t、ctime() 関数が使われているときは特にそうです。time_t はスワップファイル内に 4 バイトで格納されますが、これはファイルの回復時にファイルの日付、時間を求めるために使われるだけなので、通常の編集作業には決して影響しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim strftime() function directly uses the strftime() system function.
localtime() uses the time() system function.  getftime() uses the time
returned by the stat() system function.  If your system libraries are year
2000 compliant, Vim is too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の strftime() 関数は strftime() システムコールを直接使います。localtime() は time() システムコールを、getftime() は stat() システムコールで返される時間をそれぞれ使用します。システムライブラリが 2000 年対応なら、Vim もそうです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The user may create scripts for Vim that use external commands.  These might
introduce Y2K problems, but those are not really part of Vim itself.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーは外部コマンドを使用する Vim script を作るかもしれません。このことが Y2K 問題を招くかもしれませんが、Vim 自身の問題ではありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Credits				*credits* *author* *Bram* *Moolenaar*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{credits}
@anchor{author}
@anchor{Bram}
@anchor{Moolenaar}
@cindex credits
@cindex author
@cindex Bram
@cindex Moolenaar
@cindex クレジット
@section 3. クレジット
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most of Vim was written by Bram Moolenaar <Bram@vim.org>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の大部分は Bram Moolenaar<@email{Bram@@vim.org}> によって書かれました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Parts of the documentation come from several Vi manuals, written by:
	W.N. Joy
	Alan P.W. Hewett
	Mark Horton
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ドキュメントの一部は以下の方々によって書かれた Vi のマニュアルによります:

W.N. Joy @*
Alan P.W. Hewett @*
Mark Horton
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim editor is based on Stevie and includes (ideas from) other software,
worked on by the people mentioned here.  Other people helped by sending me
patches, suggestions and giving feedback about what is good and bad in Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim エディタは Stevie をベースにしており、下記の方々のソフトウェア (のアイデア) も参考にしています。他の人々は私に意見やパッチを送ってくれたり、Vim の良い点、悪い点に関するフィードバックをしてくれました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim would never have become what it is now, without the help of these people!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの人々の協力なくして、Vim は現在の姿にはならなかったことでしょう！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Ron Aaron		Win32 GUI changes
	Mohsin Ahmed		encryption
	Zoltan Arpadffy		work on VMS port
	Tony Andrews		Stevie
	Gert van Antwerpen	changes for DJGPP on MS-DOS
	Berkeley DB(3)		ideas for swap file implementation
	Keith Bostic		Nvi
	Walter Briscoe		Makefile updates, various patches
	Ralf Brown		SPAWNO library for MS-DOS
	Robert Colon		many useful remarks
	Marcin Dalecki		GTK+ GUI port, toolbar icons, gettext()
	Kayhan Demirel		sent me news in Uganda
	Chris & John Downey	xvi (ideas for multi-windows version)
	Henk Elbers		first VMS port
	Daniel Elstner		GTK+ 2 port
	Eric Fischer		Mac port, 'cindent', and other improvements
	Benji Fisher		Answering lots of user questions
	Bill Foster		Athena GUI port
	Google			Lets me work on Vim one day a week
	Loic Grenie		xvim (ideas for multi windows version)
	Sven Guckes		Vim promoter and previous WWW page maintainer
	Darren Hiebert		Exuberant ctags
	Jason Hildebrand	GTK+ 2 port
	Bruce Hunsaker		improvements for VMS port
	Andy Kahn		Cscope support, GTK+ GUI port
	Oezguer Kesim		Maintainer of Vim Mailing Lists
	Axel Kielhorn		work on the Macintosh port
	Steve Kirkendall	Elvis
	Roger Knobbe		original port to Windows NT
	Sergey Laskavy		Vim's help from Moscow
	Felix von Leitner	Previous maintainer of Vim Mailing Lists
	David Leonard		Port of Python extensions to Unix
	Avner Lottem		Edit in right-to-left windows
	Flemming Madsen		X11 client-server, various features and patches
	Tony Mechelynck		answers many user questions
	Paul Moore		Python interface extensions, many patches
	Katsuhito Nagano	Work on multi-byte versions
	Sung-Hyun Nam		Work on multi-byte versions
	Vince Negri		Win32 GUI and generic console enhancements
	Steve Oualline		Author of the first Vim book |frombook|
	Dominique Pelle		valgrind reports and many fixes
	A.Politz		Many bug reports and some fixes
	George V. Reilly	Win32 port, Win32 GUI start-off
	Stephen Riehm		bug collector
	Stefan Roemer		various patches and help to users
	Ralf Schandl		IBM OS/390 port
	Olaf Seibert		DICE and BeBox version, regexp improvements
	Mortaza Shiran		Farsi patches
	Peter da Silva		termlib
	Paul Slootman		OS/2 port
	Henry Spencer		regular expressions
	Dany St-Amant		Macintosh port
	Tim Thompson		Stevie
	G. R. (Fred) Walter	Stevie
	Sven Verdoolaege	Perl interface
	Robert Webb		Command-line completion, GUI versions, and
				lots of patches
	Ingo Wilken		Tcl interface
	Mike Williams		PostScript printing
	Juergen Weigert		Lattice version, AUX improvements, UNIX and
				MS-DOS ports, autoconf
	Stefan 'Sec' Zehl	Maintainer of vim.org
	Yasuhiro Matsumoto	many MS-Windows improvements
	Ken Takata		fixes and features
	Kazunobu Kuriyama	GTK 3
	Christian Brabandt	many fixes, features, user support, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item Ron Aaron @tab Win32 GUI に関する変更
@item Mohsin Ahmed @tab 暗号化
@item Zoltan Arpadffy @tab VMS 移植の作業
@item Tony Andrews @tab Stevie
@item Gert van Antwerpen @tab MS-DOS 上の DJGPP に関する変更
@item Berkeley DB(3) @tab スワップファイルの実装に関するアイデア
@item Keith Bostic @tab Nvi
@item Walter Briscoe @tab Makefile の更新、様々なパッチ
@item Ralf Brown @tab MS-DOS 用の SPAWNO ライブラリ
@item Robert Colon @tab 多くの役立つアドバイス
@item Marcin Dalecki @tab GTK+ GUI への移植、ツールバーのアイコン gettext()
@item Kayhan Demirel @tab ウガンダのニュースを送ってくれた
@item Chris & John Downey @tab xvi (マルチウィンドウバージョンのアイデア)
@item Henk Elbers @tab 最初の VMS への移植
@item Daniel Elstner @tab GTK+ 2 への移植
@item Eric Fischer @tab Macへの移植、'cindent'、その他の改良
@item Benji Fisher @tab たくさんのユーザーの質問に答えてくれた
@item Bill Foster @tab Athena GUI への移植
@item Google @tab 週に一日 Vim の仕事をさせてくれる
@item Loic Grenie @tab xvim (マルチウィンドウバージョンのアイデア)
@item Sven Guckes @tab Vim のプロモーター、以前の WWW ページ管理者
@item Darren Hiebert @tab Exuberant ctags
@item Jason Hildebrand @tab GTK+ 2 への移植
@item Bruce Hunsaker @tab VMS への移植版の改良
@item Andy Kahn @tab Cscopeサポート、GTK+ GUI への移植
@item Oezguer Kesim @tab Vim メーリングリストの管理者
@item Axel Kielhorn @tab Macintosh 移植の仕事
@item Steve Kirkendall @tab Elvis
@item Roger Knobbe @tab オリジナルの Windows NT への移植
@item Sergey Laskavy @tab モスクワからの Vim のヘルプ
@item Felix von Leitner @tab Vim メーリングリストの以前の管理者
@item David Leonard @tab Unix への Python 拡張の移植
@item Avner Lottem @tab ウィンドウでの右から左への編集
@item Flemming Madsen @tab X11 client-server、様々な機能とパッチ
@item Tony Mechelynck @tab ユーザーから寄せられたたくさんの質問に回答
@item Paul Moore @tab Pythonインターフェイス拡張、たくさんのパッチ
@item Katsuhito Nagano @tab マルチバイトバージョンに関する作業
@item Sung-Hyun Nam @tab マルチバイトバージョンに関する作業
@item Vince Negri @tab Win32 GUI と一般的なコンソールの拡張
@item Steve Oualline @tab 最初の Vim の本の著者 |@ref{frombook}|
@item Dominique Pelle @tab valgrind のレポートと多くの修正
@item A.Politz @tab たくさんのバグ報告と修正
@item George V. Reilly @tab Win32 移植、Win32 GUI への移植を始める
@item Stephen Riehm @tab バグ収集家
@item Stefan Roemer @tab さまざまなパッチとユーザーへのヘルプ
@item Ralf Schandl @tab IBM OS/390 への移植
@item Olaf Seibert @tab DICE と BeBox バージョン、regexp の改良
@item Mortaza Shiran @tab Farsi のパッチ
@item Peter da Silva @tab termlib
@item Paul Slootman @tab OS/2 への移植
@item Henry Spencer @tab 正規表現に関して
@item Dany St-Amant @tab Macintosh への移植
@item Tim Thompson @tab Stevie
@item G. R. (Fred) Walter @tab Stevie
@item Sven Verdoolaege @tab Perl インターフェイス
@item Robert Webb @tab コマンドライン補完、GUI バージョン、そして多くのパッチ
@item Ingo Wilken @tab 	Tcl インターフェイス
@item Mike Williams @tab PostScrip tの印刷
@item Juergen Weigert @tab Latticeバージョン、AUX の改良、UNIX と MS-DOS への移植、autoconf
@item Stefan 'Sec' Zehl @tab vim.org の管理
@item Yasuhiro Matsumoto @tab 多くの MS-Windows の改良
@item Ken Takata @tab 修正と機能
@item Kazunobu Kuriyama @tab GTK 3
@item Christian Brabandt @tab 多くの修正、機能、ユーザーサポート等
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
I wish to thank all the people that sent me bug reports and suggestions.  The
list is too long to mention them all here.  Vim would not be the same without
the ideas from all these people: They keep Vim alive!
*love* *peace* *friendship* *gross-national-happiness*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{love}
@anchor{peace}
@anchor{friendship}
@anchor{gross-national-happiness}
@cindex love
@cindex peace
@cindex friendship
@cindex gross-national-happiness
バグレポートや提案を送ってくれた人々に感謝します。あまりにたくさんいるので、ここで彼らの名前について触れることはできませんが。これらの人々のアイデアがなければ、Vim は今の Vim にはならなかったことでしょう: 彼らが Vim を生かしつづけたのです！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
In this documentation there are several references to other versions of Vi:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この文書には他のバージョンの Vi に対するいくつかの参照があります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*Vi* *vi*
Vi	"the original".  Without further remarks this is the version
	of Vi that appeared in Sun OS 4.x.  ":version" returns
	"Version 3.7, 6/7/85".  Sometimes other versions are referred
	to.  Only runs under Unix.  Source code only available with a
	license.  More information on Vi can be found through:
		http://vi-editor.org	[doesn't currently work...]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Vi}
@anchor{vi}
@cindex Vi
@cindex vi
@table @asis
@item Vi
"オリジナル"。特に指定がなければSun OS 4.xのバージョンのViを指す。":version" は "Version 3.7, 6/7/85" を返す。別のバージョンに言及することもある。Unix 上でのみ動く。ソースコードは許可を得れば利用可能。Vi についての更なる情報は、以下の場所から得られる: @url{http://vi-editor.org}	[現在機能していないようですが...]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*Posix*
Posix	From the IEEE standard 1003.2, Part 2: Shell and utilities.
	Generally known as "Posix".  This is a textual description of
	how Vi is supposed to work.
	See |posix-compliance|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Posix}
@cindex Posix
@item Posix
IEEE standard 1003.2, Part 2: Shell and utilities より。一般に "Posix" として知られる。Vi の動作仕様の原典です。|@ref{posix-compliance}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*Nvi*
Nvi	The "New" Vi.  The version of Vi that comes with BSD 4.4 and FreeBSD.
	Very good compatibility with the original Vi, with a few extensions.
	The version used is 1.79.  ":version" returns "Version 1.79
	(10/23/96)".  There has been no release the last few years, although
	there is a development version 1.81.
	Source code is freely available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Nvi}
@cindex Nvi
@item Nvi
"New" Vi。BSD 4.4、FreeBSD に付属の Vi。オリジナルの Vi と高い互換性を持ち、少々の拡張がされている。使われているのはバージョン1.79。":version" は "Version 1.79 (10/23/96)" を返す。バージョン 1.81 が開発中だが、ここ数年リリースされていない。ソースコードは自由に利用できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*Elvis*
Elvis	Another Vi clone, made by Steve Kirkendall.  Very compact but isn't
	as flexible as Vim.
	The version used is 2.1.  It is still being developed.  Source code is
	freely available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Elvis}
@cindex Elvis
@item Elvis
別の Vi クローン、Steve Kirkendallの手による。とてもコンパクトだが、Vim ほど高機能ではない。使われているのはバージョン 2.1。まだ開発が続いている。ソースコードは自由に利用できる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Notation						*notation*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{notation}
@cindex notation
@cindex ヘルプの表記法
@section 4. ヘルプの表記法
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When syntax highlighting is used to read this, text that is not typed
literally is often highlighted with the Special group.  These are items in [],
{} and <>, and CTRL-X.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この文章を構文強調を使って表示すると、見たままの意味ではないテキストは特別に強調表示されます。[], @{@}, <> で囲まれた項目や @kbd{CTRL-X} などです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that Vim uses all possible characters in commands.  Sometimes the [], {}
and <> are part of what you type, the context should make this clear.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Vim は入力可能な文字はすべてコマンドで使います。実際に、[], @{@}, <> を入力する場合もあります。それは文脈によって判断できるでしょう。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
[]		Characters in square brackets are optional.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
[]		角カッコで囲まれた文字は省略可能。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						    *count* *[count]*
[count]		An optional number that may precede the command to multiply
		or iterate the command.  If no number is given, a count of one
		is used, unless otherwise noted.  Note that in this manual the
		[count] is not mentioned in the description of the command,
		but only in the explanation.  This was done to make the
		commands easier to look up.  If the 'showcmd' option is on,
		the (partially) entered count is shown at the bottom of the
		window.  You can use <Del> to erase the last digit (|N<Del>|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{count}
@anchor{[count]}
@cindex count
@cindex [count]
@table @asis
@item [count]
コマンドに前置して、そのコマンドを繰り返したり、反復したりするための省略可能な数字。省略した場合、特に注意が無ければ 1 を指定したのと同じになります。
@quotation
@strong{Note:} @*
このマニュアルでは、[count] はコマンドの説明では言及されません。解説する場合だけ説明します。これはコマンドを調べ易くするためです。'@option{showcmd}' オプションが有効だと、(部分的に) 入力されたカウントがウィンドウの下の方に表示されます。@key{<Del>} を使って末尾の数字を削除できます(|@ref{N<Del>}|)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*[quotex]*
["x]		An optional register designation where text can be stored.
		See |registers|.  The x is a single character between 'a' and
		'z' or 'A' and 'Z' or '"', and in some cases (with the put
		command) between '0' and '9', '%', '#', or others.  The
		uppercase and lowercase letter designate the same register,
		but the lowercase letter is used to overwrite the previous
		register contents, while the uppercase letter is used to
		append to the previous register contents.  Without the ""x" or
		with """" the stored text is put into the unnamed register.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[quotex]}
@cindex [quotex]
@item ["x]
テキストの保管場所として、任意のレジスタを指定できることを示す。|@ref{registers}| を参照。x は 'a' から 'z'、'A' から 'Z'、'"'、のどれか一文字です。場合によっては (put コマンドで使うときなど)、'0' から '9'、'%'、'#'、その他の文字も使えます。大文字でも小文字でも同じレジスタを指しますが、小文字を使ったときはレジスタの内容が上書きされ、大文字を使ったときはレジスタの内容に追加されます。"x を指定しなかった場合や、"" を指定した場合は、無名レジスタが使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*{}*
{}		Curly braces denote parts of the command which must appear,
		but which can take a number of different values.  The
		differences between Vim and Vi are also given in curly braces
		(this will be clear from the context).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@{@}}
@cindex @{@}
@item @{@}
中括弧の表記は、コマンドの一部として入力する必要があって、そこには、いろいろな値を入力することができるときに使われます。Vim と Vi の違いを示す場合も中括弧で表記されます (これは文脈から区別できます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*{char1-char2}*
{char1-char2}	A single character from the range char1 to char2.  For
		example: {a-z} is a lowercase letter.  Multiple ranges may be
		concatenated.  For example, {a-zA-Z0-9} is any alphanumeric
		character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@{char1-char2@}}
@cindex @{char1-char2@}
@item @{char1-char2@}
char1 から char2 の範囲のどれか一文字。例えば、@{a-z@} は小文字一文字。複数の範囲が指定される場合もあります。例えば、@{a-zA-Z0-9@} は英数字のどれか一文字です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*{motion}* *movement*
{motion}	A command that moves the cursor.  These are explained in
		|motion.txt|.  Examples:
			w		to start of next word
			b		to begin of current word
			4j		four lines down
			/The<CR>	to next occurrence of "The"
		This is used after an |operator| command to move over the text
		that is to be operated upon.
		- If the motion includes a count and the operator also has a
		  count, the two counts are multiplied.  For example: "2d3w"
		  deletes six words.
		- The motion can be backwards, e.g. "db" to delete to the
		  start of the word.
		- The motion can also be a mouse click.  The mouse is not
		  supported in every terminal though.
		- The ":omap" command can be used to map characters while an
		  operator is pending.
		- Ex commands can be used to move the cursor.  This can be
		  used to call a function that does some complicated motion.
		  The motion is always characterwise exclusive, no matter
		  what ":" command is used.  This means it's impossible to
		  include the last character of a line without the line break
		  (unless 'virtualedit' is set).
		  If the Ex command changes the text before where the operator
		  starts or jumps to another buffer the result is
		  unpredictable.  It is possible to change the text further
		  down.  Jumping to another buffer is possible if the current
		  buffer is not unloaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@{motion@}}
@anchor{movement}
@cindex @{motion@}
@cindex movement
@item @{motion@}
カーソル移動コマンド。これらは、|@ref{motion.txt}| で説明されています。例:

@multitable @columnfractions .2 .8
@item w	@tab 次の単語の最初に移動
@item b @tab 現在の単語の最初へ
@item 4j @tab 4 行下に移動
@item /The<CR> @tab つぎの "The" が、ある場所に移動
@end multitable

オペレータコマンド (|@ref{operator}|) を入力した後で、対象のテキストを選択するため使われます。
@itemize
@item 移動コマンドがカウントを含み、オペレータコマンドもカウントを含むときは、2 つのカウントが掛け合わされる。例えば、"2d3w" は 6 単語を削除する。
@item 移動はバックもできる。例えば、"db" は単語の最初までを削除する。
@item 移動はマウスのクリックでもできる。ただし、マウスをサポートしていない端末もあります。
@item "@command{:omap}" コマンドを使って、オペレータコマンドに対して移動コマンドを入力しているときに働くマップを定義できます。
@item Ex コマンドを使ってカーソルを移動できます。関数を使って複雑な移動をすることもできます。どの ":" コマンドが使われても、移動は常に文字単位で排他的です。そのため、改行を含めずに行末の文字を選択することはできません ('@option{virtualedit}' を設定すれば可能)。

Ex コマンドで、オペレータコマンドを使った場所より前にあるテキストを変更したり、他のバッファに移動した場合、結果は予測できません。オペレータコマンドを使った場所以降のテキストなら変更できます。カレントバッファがアンロードされないなら、他のバッファにジャンプすることも可能です。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*{Visual}*
{Visual}	A selected text area.  It is started with the "v", "V", or
		CTRL-V command, then any cursor movement command can be used
		to change the end of the selected text.
		This is used before an |operator| command to highlight the
		text that is to be operated upon.
		See |Visual-mode|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@{Visual@}}
@cindex @{Visual@}
@item @{Visual@}
選択されたテキストの範囲。"v"、"V"、@kbd{CTRL-V} コマンドで選択を開始し、カーソル移動コマンドで選択範囲を変更できます。オペレータコマンド (|@ref{operator}|) を実行する前に使って、対象のテキストを選択することができます。|@ref{Visual-mode}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*<character>*
<character>	A special character from the table below, optionally with
		modifiers, or a single ASCII character with modifiers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<character>}
@cindex <character>
@item <character>
下記の表に示した特殊文字。修飾キーが付くこともあります。修飾キーと ASCII 文字の組合せもこのように表記されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'character'*
'c'		A single ASCII character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'character'}
@cindex 'character'
@item 'c'
ASCII 文字 1 文字。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-{char}*
CTRL-{char}	{char} typed as a control character; that is, typing {char}
		while holding the CTRL key down.  The case of {char} does not
		matter; thus CTRL-A and CTRL-a are equivalent.  But on some
		terminals, using the SHIFT key will produce another code,
		don't use it then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-@{char@}}
@cindex CTRL-@{char@}
@item @key{CTRL}-@{char@}
制御文字として入力された文字 @{char@}。@key{CTRL} キーを押しながら @{char@} を押す場合です。@{char@} は大文字でも小文字でも区別されません。@kbd{CTRL-A} と @kbd{CTRL-a} は同じです。@key{SHIFT} キーを使うと別のコードを生成する端末もあるため、シフトキーは使わないでください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'option'*
'option'	An option, or parameter, that can be set to a value, is
		enclosed in single quotes.  See |options|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'option'}
@cindex 'option'
@item 'option'
オプション (設定) はシングルクォートで囲んで表記されます。オプションは設定値を変更できます。|@ref{options}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*quotecommandquote*
"command"	A reference to a command that you can type is enclosed in
		double quotes.
`command`	New style command, this distinguishes it from other quoted
		text and strings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{quotecommandquote}
@cindex quotecommandquote
@item "command"
説明の中にでてくる入力可能なコマンドは、ダブルクォートで囲んで表記されます。

@item `command`
コマンドの新しい表記法です。他のクォート表記のテキストや文字列と区別するために使われます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*key-notation* *key-codes* *keycodes*
These names for keys are used in the documentation.  They can also be used
with the ":map" command (insert the key name by pressing CTRL-K and then the
key you want the name for).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{key-notation}
@anchor{key-codes}
@anchor{keycodes}
@cindex key-notation
@cindex key-codes
@cindex keycodes
このドキュメントでは、キーの名前として以下のものが使われます。これらは "@command{:map}" コマンドでも使うことができます (キーの名前を挿入するには、@kbd{CTRL-K} を押してから、名前を挿入したいキーを押します)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
notation	meaning		    equivalent	decimal value(s)	~
-----------------------------------------------------------------------
<Nul>		zero			CTRL-@	  0 (stored as 10) *<Nul>*
<BS>		backspace		CTRL-H	  8	*backspace*
<Tab>		tab			CTRL-I	  9	*tab* *Tab*
							*linefeed*
<NL>		linefeed		CTRL-J	 10 (used for <Nul>)
<FF>		formfeed		CTRL-L	 12	*formfeed*
<CR>		carriage return		CTRL-M	 13	*carriage-return*
<Return>	same as <CR>				*<Return>*
<Enter>		same as <CR>				*<Enter>*
<Esc>		escape			CTRL-[	 27	*escape* *<Esc>*
<Space>		space				 32	*space*
<lt>		less-than		<	 60	*<lt>*
<Bslash>	backslash		\	 92	*backslash* *<Bslash>*
<Bar>		vertical bar		|	124	*<Bar>*
<Del>		delete				127
<CSI>		command sequence intro  ALT-Esc 155	*<CSI>*
<xCSI>		CSI when typed in the GUI		*<xCSI>*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .3 .2 .2
@item 表記 @tab 意味 @tab 等価表現 @tab 10進数値
@anchor{<Nul>}
@cindex <Nul>
@item <Nul> @tab ゼロ @tab CTRL-@ @tab 0 (10として保存)
@anchor{backspace}
@cindex backspace
@item <BS> @tab バックスペース @tab CTRL-H @tab 8
@anchor{tab}
@anchor{Tab}
@anchor{linefeed}
@cindex tab
@cindex Tab
@cindex linefeed
@item <Tab> @tab タブ @tab CTRL-I @tab 9
@item <NL> @tab ラインフィード @tab CTRL-J @tab 10 (<Nul>に使用)
@anchor{formfeed}
@cindex formfeed
@item <FF> @tab フォームフィード @tab CTRL-L @tab 12
@anchor{carriage-return}
@cindex carriage-return
@item <CR> @tab キャリッジリターン @tab CTRL-M @tab 13
@anchor{<Return>}
@cindex <Return>
@item <Return> @tab <CR>と同じ @tab @tab
@anchor{<Enter>}
@cindex <Enter>
@item <Enter> @tab <CR>と同じ @tab @tab
@anchor{escape}
@anchor{<Esc>}
@cindex escape
@cindex <Esc>
@item <Esc> @tab エスケープ @tab CTRL-[ @tab 27
@anchor{space}
@cindex space
@item <Space> @tab スペース @tab @tab 32
@anchor{<lt>}
@cindex <lt>
@item <lt> @tab 小なり (less-than) @tab < @tab 60
@anchor{backslash}
@anchor{<Bslash>}
@cindex backslash
@cindex <Bslash>
@item <Bslash> @tab バックスラッシュ @tab \ @tab 92
@anchor{<Bar>}
@cindex <Bar>
@item <Bar> @tab 垂直バー @tab | @tab 124
@anchor{<CSI>}
@cindex <CSI>
@item <Del> @tab デリート @tab @tab 127
@item <CSI> @tab コマンドの開始バイト @tab ALT-Esc @tab 155
@anchor{<xCSI>}
@cindex <xCSI>
@item <xCSI> @tab GUI における CSI @tab @tab
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<EOL>		end-of-line (can be <CR>, <LF> or <CR><LF>,
		depends on system and 'fileformat')	*<EOL>*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@anchor{<EOL>}
@cindex <EOL>
@item <EOL> @tab 行の終端 (<CR>, <LF>, <CR><LF> のどれか。システムや '@option{fileformat}' に依存)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<Up>		cursor-up			*cursor-up* *cursor_up*
<Down>		cursor-down			*cursor-down* *cursor_down*
<Left>		cursor-left			*cursor-left* *cursor_left*
<Right>		cursor-right			*cursor-right* *cursor_right*
<S-Up>		shift-cursor-up
<S-Down>	shift-cursor-down
<S-Left>	shift-cursor-left
<S-Right>	shift-cursor-right
<C-Left>	control-cursor-left
<C-Right>	control-cursor-right
<F1> - <F12>	function keys 1 to 12		*function_key* *function-key*
<S-F1> - <S-F12> shift-function keys 1 to 12	*<S-F1>*
<Help>		help key
<Undo>		undo key
<Insert>	insert key
<Home>		home				*home*
<End>		end				*end*
<PageUp>	page-up				*page_up* *page-up*
<PageDown>	page-down			*page_down* *page-down*
<kHome>		keypad home (upper left)	*keypad-home*
<kEnd>		keypad end (lower left)		*keypad-end*
<kPageUp>	keypad page-up (upper right)	*keypad-page-up*
<kPageDown>	keypad page-down (lower right)	*keypad-page-down*
<kPlus>		keypad +			*keypad-plus*
<kMinus>	keypad -			*keypad-minus*
<kMultiply>	keypad *			*keypad-multiply*
<kDivide>	keypad /			*keypad-divide*
<kEnter>	keypad Enter			*keypad-enter*
<kPoint>	keypad Decimal point		*keypad-point*
<k0> - <k9>	keypad 0 to 9			*keypad-0* *keypad-9*
<S-...>		shift-key			*shift* *<S-*
<C-...>		control-key			*control* *ctrl* *<C-*
<M-...>		alt-key or meta-key		*meta* *alt* *<M-*
<A-...>		same as <M-...>			*<A-*
<D-...>		command-key (Macintosh only)	*<D-*
<t_xx>		key with "xx" entry in termcap
-----------------------------------------------------------------------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@anchor{cursor-up}
@anchor{cursor_up}
@cindex cursor-up
@cindex cursor_up
@item <Up> @tab 上カーソル
@anchor{cursor-down}
@anchor{cursor_down}
@cindex cursor-down
@cindex cursor_down
@item <Down> @tab 下カーソル
@anchor{cursor-left}
@anchor{cursor_left}
@cindex cursor-left
@cindex cursor_left
@item <Left> @tab 左カーソル
@anchor{cursor-right}
@anchor{cursor_right}
@cindex cursor-right
@cindex cursor_right
@item <Right> @tab 右カーソル
@item <S-Up> @tab シフト + 上カーソル
@item <S-Down> @tab シフト + 下カーソル
@item <S-Left> @tab シフト + 左カーソル
@item <S-Right> @tab シフト + 右カーソル
@item <C-Left> @tab コントロール + 上カーソル
@item <C-Right> @tab コントロール + 上カーソル
@anchor{function_key}
@anchor{function-key}
@cindex function_key
@cindex function-key
@item <F1> - <F12> @tab ファンクションキー 1 から 12
@anchor{<S-F1>}
@cindex <S-F1>
@item <S-F1> - <S-F12> @tab シフト + ファンクションキー 1 から 12
@item
@item <Help> @tab ヘルプキー
@item <Undo> @tab アンドゥキー
@item <Insert> @tab 挿入キー
@anchor{home}
@cindex home
@item <Home> @tab ホーム
@anchor{end}
@cindex end
@item <End> @tab エンド
@anchor{page_up}
@anchor{page-up}
@cindex page_up
@cindex page-up
@item <PageUp> @tab ページアップ
@anchor{page_down}
@anchor{page-down}
@cindex page_down
@cindex page-down
@item <PageDown> @tab ページダウン
@anchor{keypad-home}
@cindex keypad-home
@item <kHome> @tab テンキーのホーム (左上)
@anchor{keypad-end}
@cindex keypad-end
@item <kEnd> @tab テンキーのエンド (左下)
@anchor{keypad-page-up}
@cindex keypad-page-up
@item <kPageUp> @tab テンキーのページアップ (右上)
@anchor{keypad-page-down}
@cindex keypad-page-down
@item <kPageDown> @tab テンキーのページダウン (右下)
@anchor{keypad-plus}
@cindex keypad-plus
@item <kPlus> @tab テンキーの +
@anchor{keypad-minus}
@cindex keypad-minus
@item <kMinus> @tab テンキーの -
@anchor{keypad-multiply}
@cindex keypad-multiply
@item <kMultiply> @tab テンキーの *
@anchor{keypad-divide}
@cindex keypad-divide
@item <kDivide> @tab テンキーの /
@anchor{keypad-enter}
@cindex keypad-enter
@item <kEnter> @tab テンキーの Enter
@anchor{keypad-point}
@cindex keypad-point
@item <kPoint> @tab テンキーのピリオド
@anchor{keypad-0}
@anchor{keypad-9}
@cindex keypad-0
@cindex keypad-9
@item <k0> - <k9> @tab テンキーの0から9
@anchor{shift}
@anchor{<S-}
@cindex shift
@cindex <S-
@item <S-...> @tab シフトキー
@anchor{control}
@anchor{ctrl}
@anchor{<C-}
@cindex control
@cindex ctrl
@cindex <C-
@item <C-...> @tab コントロールキー
@anchor{meta}
@anchor{alt}
@anchor{<M-}
@cindex meta
@cindex alt
@cindex <M-
@item <M-...> @tab @key{alt} または @key{meta} キー
@anchor{<A-}
@cindex <A-
@item <A-...> @tab <M-...> と同じ
@anchor{<D-}
@cindex <D-
@item <D-...> @tab コマンドキー (Macintosh のみ)
@item <t_xx> @tab termcap で "xx" エントリを持つキー
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: The shifted cursor keys, the help key, and the undo key are only
available on a few terminals.  On the Amiga, shifted function key 10 produces
a code (CSI) that is also used by key sequences.  It will be recognized only
after typing another key.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
シフトされたカーソルキー、ヘルプキー、アンドゥキーを使える端末はあまりありません。Amiga 上では、シフトされたファンクションキー 10 は、キーシーケンスに使われるコード (CSI) を生成します。このコードを入力すると、他のキーを入力するまで待機状態になります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: There are two codes for the delete key.  127 is the decimal ASCII value
for the delete key, which is always recognized.  Some delete keys send another
value, in which case this value is obtained from the termcap entry "kD".  Both
values have the same effect.  Also see |:fixdel|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
削除キーのコードは 2 つあります。127 は削除キーの 10 進 ASCII 値で、これは常に認識されます。削除キーが別の値を生成することもあり、その場合は、termcap エントリの "kD" からその値を得ます。どちらも同じ効果をもちます。|@ref{:fixdel}| も参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: The keypad keys are used in the same way as the corresponding "normal"
keys.  For example, <kHome> has the same effect as <Home>.  If a keypad key
sends the same raw key code as its non-keypad equivalent, it will be
recognized as the non-keypad code.  For example, when <kHome> sends the same
code as <Home>, when pressing <kHome> Vim will think <Home> was pressed.
Mapping <kHome> will not work then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
テンキーのキーは、"普通" のキーと同じ用途に使われます。例えば、<kHome> は @key{<Home>} と同じ効果を持ちます。テンキーのキーから、普通のキーと同じキーコードが送信される場合、それは普通のキーとして認識されます。例えば、<kHome> から @key{<Home>} と同じコードが送信される場合、<kHome> が押されたとしても、@key{<Home>} が押されたと認識されます。その場合、<kHome> へのマッピングは機能しません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*<>*
Examples are often given in the <> notation.  Sometimes this is just to make
clear what you need to type, but often it can be typed literally, e.g., with
the ":map" command.  The rules are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<>}
@cindex <>
例ではよく <> 表記が使われます。これは、何を入力すべきかを明確に表記するために使われますが、文字どおりに入力する必要がある場合もあります。例えば、"@command{:map}" コマンドで使う場合など。規則は以下のとおりです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
 1.  Any printable characters are typed directly, except backslash and '<'
 2.  A backslash is represented with "\\", double backslash, or "<Bslash>".
 3.  A real '<' is represented with "\<" or "<lt>".  When there is no
     confusion possible, a '<' can be used directly.
 4.  "<key>" means the special key typed.  This is the notation explained in
     the table above.  A few examples:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item バックスラッシュと '<' 以外の印字可能文字はそのまま表記される。
@item バックスラッシュは "\\" (ダブルバックスラッシュ)、または "<Bslash>" と表記される。
@item 実際の '<' は "\<"、または "<lt>" と表記される。混乱を招く恐れがなければ、'<' はそのまま使われる。
@item "<key>" は特殊キーを打つことを示す。これは上記の表で説明している表記です。いくつか例を挙げます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   <Esc>		Escape key
	   <C-G>		CTRL-G
	   <Up>			cursor up key
	   <C-LeftMouse>	Control- left mouse click
	   <S-F11>		Shifted function key 11
	   <M-a>		Meta- a  ('a' with bit 8 set)
	   <M-A>		Meta- A  ('A' with bit 8 set)
	   <t_kd>		"kd" termcap entry (cursor down key)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item <Esc> @tab エスケープキー
@item <C-G> @tab @kbd{CTRL-G}
@item <Up> @tab 上カーソルキー
@item <C-LeftMouse> @tab コントロール + 左マウスクリック
@item <S-F11> @tab シフト + ファンクションキー 11
@item <M-a> @tab Meta + a  ('a' with bit 8 set)
@item <M-A> @tab Meta + A  ('A' with bit 8 set)
@item <t_kd> @tab "kd" termcap エントリ (下カーソルキー)
@end multitable
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to use the full <> notation in Vim, you have to make sure the '<'
flag is excluded from 'cpoptions' (when 'compatible' is not set, it already is
by default). >
	:set cpo-=<
The <> notation uses <lt> to escape the special meaning of key names.  Using a
backslash also works, but only when 'cpoptions' does not include the 'B' flag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
<> 表記を使うには、'@option{cpoptions}' から '@var{<}' フラグを除く必要があります ('@option{compatible}' がオフのときは、初期設定でそうなっています)。
@example
:set cpo-=<
@end example
<> 表記の特別な意味をなくすには <lt> を使います。バックスラッシュを使う方法も機能しますが、それは '@option{cpoptions}' が '@var{B}' フラグを含んでいないときだけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Examples for mapping CTRL-H to the six characters "<Home>": >
	:imap <C-H> \<Home>
	:imap <C-H> <lt>Home>
The first one only works when the 'B' flag is not in 'cpoptions'.  The second
one always works.
To get a literal "<lt>" in a mapping: >
	:map <C-L> <lt>lt>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-H} を "<Home>" の 6 文字にマップする例:
@example
:imap <C-H> \<Home>
:imap <C-H> <lt>Home>
@end example
最初の例は '@option{cpoptions}' に '@var{B}' フラグが含まれていない場合のみ機能します。2 番目の例は常に機能します。マップで "<lt>" を文字どおりに使うには 次のようにします:
@example
:map <C-L> <lt>lt>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For mapping, abbreviation and menu commands you can then copy-paste the
examples and use them directly.  Or type them literally, including the '<' and
'>' characters.  This does NOT work for other commands, like ":set" and
":autocmd"!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マップ、短縮入力、メニューコマンドについては、例をコピー＆ペーストして、そのまま使うことができます。あるいは、'<' と '>' も含めて、そのまま入力してください。これは "@command{:set}" や "@command{:autocmd}" などの他のコマンドでは機能しません！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Modes, introduction				*vim-modes-intro* *vim-modes*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-modes-intro}
@anchor{vim-modes}
@cindex vim-modes-intro
@cindex vim-modes
@cindex モードの紹介
@section 5. モードの紹介
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim has seven BASIC modes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim には 7 つの基本モードがあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*Normal* *Normal-mode* *command-mode*
Normal mode		In Normal mode you can enter all the normal editor
			commands.  If you start the editor you are in this
			mode (unless you have set the 'insertmode' option,
			see below).  This is also known as command mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Normal}
@anchor{Normal-mode}
@anchor{command-mode}
@cindex Normal
@cindex Normal-mode
@cindex command-mode
@cindex ノーマルモード
@table @asis
@item ノーマルモード
ノーマルモードでは普通の編集コマンドを全て入力できます。エディタをスタートするとこのモードに入ります (オプション '@option{insertmode}' を設定しているときは違います。以下を参照)。これはコマンドモードとも呼ばれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Visual mode		This is like Normal mode, but the movement commands
			extend a highlighted area.  When a non-movement
			command is used, it is executed for the highlighted
			area.  See |Visual-mode|.
			If the 'showmode' option is on "-- VISUAL --" is shown
			at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ビジュアルモード
ノーマルモードに似ていますが、移動コマンドで選択領域が拡大されます。移動コマンド以外のコマンドを使うと、選択領域に対してそのコマンドが実行されます。|@ref{Visual-mode}| を参照。
オプション '@option{showmode}' がオンなら、"@samp{-- VISUAL --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Select mode		This looks most like the MS-Windows selection mode.
			Typing a printable character deletes the selection
			and starts Insert mode.  See |Select-mode|.
			If the 'showmode' option is on "-- SELECT --" is shown
			at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 選択モード
これは、MS-Windows でテキストを選択するときの動作に似ています。印字可能文字が入力されると、選択範囲を削除し、挿入モードに入ります。|@ref{Select-mode}| を参照。
オプション '@option{showmode}' がオンなら、"@samp{-- SELECT --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Insert mode		In Insert mode the text you type is inserted into the
			buffer.  See |Insert-mode|.
			If the 'showmode' option is on "-- INSERT --" is shown
			at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 挿入モード
挿入モードでは、タイプされたテキストはバッファに挿入されます。|@ref{Insert-mode}| を参照。
オプション '@option{showmode}' がオンなら、"@samp{-- INSERT --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Command-line mode	In Command-line mode (also called Cmdline mode) you
Cmdline mode		can enter one line of text at the bottom of the
			window.  This is for the Ex commands, ":", the pattern
			search commands, "?" and "/", and the filter command,
			"!".  |Cmdline-mode|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item コマンドラインモード
コマンドラインモードでは、ウィンドウの下部に 1 行のテキストを入力できます。これは Ex コマンド、":"、パターン検索コマンド、"?"、"/"、そしてフィルタコマンド、"!" で使用します。|@ref{Cmdline-mode}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Ex mode			Like Command-line mode, but after entering a command
			you remain in Ex mode.  Very limited editing of the
			command line.  |Ex-mode|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Ex モード
コマンドラインモードに似てますが、コマンド入力後も Ex モードに留まります。コマンドライン編集は、かなり制限されます。|@ref{Ex-mode}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Terminal-Job mode	Interacting with a job in a terminal window.  Typed
			keys go to the job and the job output is displayed in
			the terminal window.  See |terminal| about how to
			switch to other modes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Terminal-Job モード
ターミナルウィンドウの中でジョブと相互作用します。入力されたキーはジョブに渡され、ジョブの出力はターミナルウィンドウに表示されます。他のモードへの移行の仕方は |@ref{terminal}| を参照。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are seven ADDITIONAL modes.  These are variants of the BASIC modes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
加えて、7 つのモードがあります。これらは基本モードの変種です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*Operator-pending* *Operator-pending-mode*
Operator-pending mode	This is like Normal mode, but after an operator
			command has started, and Vim is waiting for a {motion}
			to specify the text that the operator will work on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Operator-pending}
@anchor{Operator-pending-mode}
@cindex Operator-pending
@cindex Operator-pending-mode
@cindex オペレータ待機モード
@table @asis
@item オペレータ待機モード
ノーマルモードに似てますが、オペレータコマンドが実行された後で、その適用範囲を決定するための移動コマンド (@{motion@}) を得るために、Vim が待機している状態です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Replace mode		Replace mode is a special case of Insert mode.  You
			can do the same things as in Insert mode, but for
			each character you enter, one character of the existing
			text is deleted.  See |Replace-mode|.
			If the 'showmode' option is on "-- REPLACE --" is
			shown at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 置換モード
置換モードは挿入モードの特別版です。挿入モードと同様のことができますが、一文字入力するごとに、その場所にある文字が 1 つ削除されます。|@ref{Replace-mode}| を参照。オプション '@option{showmode}' がオンなら、"@samp{-- REPLACE --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Virtual Replace mode	Virtual Replace mode is similar to Replace mode, but
			instead of file characters you are replacing screen
			real estate.  See |Virtual-Replace-mode|.
			If the 'showmode' option is on "-- VREPLACE --" is
			shown at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 仮想置換モード
仮想置換モードは置換モードに似ていますが、ファイルの文字の上ではなく、画面上の任意の位置を置換できます。|@ref{Virtual-Replace-mode}| を参照。

'@option{showmode}' がオンなら、"@samp{-- VREPLACE --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Insert Normal mode	Entered when CTRL-O given in Insert mode.  This is
			like Normal mode, but after executing one command Vim
			returns to Insert mode.
			If the 'showmode' option is on "-- (insert) --" is
			shown at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 挿入ノーマルモード
挿入モードで @kbd{CTRL-O} を入力すると、このモードに入ります。ノーマルモードに似てますが、コマンドが実行された後、挿入モードに戻ります。

オプション '@option{showmode}' がオンなら、"@samp{-- (insert) --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Terminal-Normal mode	Using Normal mode in a terminal window.  Making
			changes is impossible.  Use an insert command, such as
			"a" or "i", to return to Terminal-Job mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Terminal-Normal モード
ターミナルウィンドウではノーマルモードを使います。変更はできないようになっています。ターミナルジョブモードに戻るには、"a" や "i" のような挿入コマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Insert Visual mode	Entered when starting a Visual selection from Insert
			mode, e.g., by using CTRL-O and then "v", "V" or
			CTRL-V.  When the Visual selection ends, Vim returns
			to Insert mode.
			If the 'showmode' option is on "-- (insert) VISUAL --"
			is shown at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 挿入ビジュアルモード
挿入モードでビジュアル選択を開始すると、このモードに入ります。例えば、@kbd{CTRL-O} を使い, その後 "v"、"V"、@kbd{CTRL-V} を使ったときです。ビジュアル選択が終了すると、挿入モードに戻ります。

オプション '@option{showmode}' がオンなら、"@samp{-- (insert) VISUAL --}" がウィンドウの最下部に表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Insert Select mode	Entered when starting Select mode from Insert mode.
			E.g., by dragging the mouse or <S-Right>.
			When the Select mode ends, Vim returns to Insert mode.
			If the 'showmode' option is on "-- (insert) SELECT --"
			is shown at the bottom of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 挿入選択モード
挿入モードで選択モードを開始すると、このモードに入ります。例えば、マウスをドラッグしたり、@kbd{<S-Right>} を押したときです。選択モードが終了すると、挿入モードに戻ります。

オプション '@option{showmode}' がオンなら、"@samp{-- (insert) SELECT --}" がウィンドウの最下部に表示されます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Switching from mode to mode				*mode-switching*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{mode-switching}
@cindex mode-switching
@cindex モードの切り替え
@section 6. モードの切り替え
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If for any reason you do not know which mode you are in, you can always get
back to Normal mode by typing <Esc> twice.  This doesn't work for Ex mode
though, use ":visual".
You will know you are back in Normal mode when you see the screen flash or
hear the bell after you type <Esc>.  However, when pressing <Esc> after using
CTRL-O in Insert mode you get a beep but you are still in Insert mode, type
<Esc> again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何らかの理由で、現在のモードがわからなくなったときは、@key{<Esc>} を 2 度押すことで常にノーマルモードに戻ることができます。Ex モードでは機能しないので、その場合は "@command{:visual}" を使ってください。

@key{<Esc>} を押したとき、スクリーンフラッシュや、ベルの音で、ノーマルモードに戻ったことを知ることができます。挿入モードで @kbd{CTRL-O} の後に @key{<Esc>} を押した場合、ビープ音は鳴りますが、まだ挿入モードの中なので、もう一度 @key{<Esc>} を押してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*i_esc*
		TO mode						    ~
		Normal	Visual	Select	Insert	  Replace   Cmd-line  Ex ~
FROM mode								 ~
Normal			v V ^V	  *4	 *1	   R gR     : / ? !   Q
Visual		 *2		  ^G	 c C	    --	      :       --
Select		 *5	^O ^G		 *6	    --	      --      --
Insert		 <Esc>	  --	  --		  <Insert>    --      --
Replace		 <Esc>	  --	  --	<Insert>	      --      --
Command-line	 *3	  --	  --	 :start	    --		      --
Ex		 :vi	  --	  --	 --	    --	      --

-- not possible
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{i_esc}
@cindex i_esc
@verbatim
                移動先のモード
                Normal  Visual  Select  Insert    Replace   Cmd-line  Ex
現在のモード
ノーマル                v V ^V    *4     *1        R gR     : / ? !   Q
ビジュアル       *2               ^G     c C        --        :       --
選択             *5     ^O ^G            *6         --        --      --
挿入             <Esc>    --      --              <Insert>    --      --
置換             <Esc>    --      --    <Insert>              --      --
コマンドライン   *3       --      --     :start     --                --
Ex               :vi      --      --     --         --        --

-- 不可
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
*1 Go from Normal mode to Insert mode by giving the command "i", "I", "a",
   "A", "o", "O", "c", "C", "s" or S".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item *1
ノーマルモードから挿入モードへは、コマンド "i", "I", "a", "A", "o", "O", "c", "C", "s", "S" で入ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*2 Go from Visual mode to Normal mode by giving a non-movement command, which
   causes the command to be executed, or by hitting <Esc> "v", "V" or "CTRL-V"
   (see |v_v|), which just stops Visual mode without side effects.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item *2
ビジュアルモードからノーマルモードへは非移動コマンドで入れますが、そのコマンドは実行されてしまいます。@key{<Esc>}、"v"、"V"、"@kbd{CTRL-V}" (|@ref{v_v}| を参照) を入力すれば、副作用なしにビジュアルモードから出られます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*3 Go from Command-line mode to Normal mode by:
   - Hitting <CR> or <NL>, which causes the entered command to be executed.
   - Deleting the complete line (e.g., with CTRL-U) and giving a final <BS>.
   - Hitting CTRL-C or <Esc>, which quits the command-line without executing
     the command.
   In the last case <Esc> may be the character defined with the 'wildchar'
   option, in which case it will start command-line completion.  You can
   ignore that and type <Esc> again.  {Vi: when hitting <Esc> the command-line
   is executed.  This is unexpected for most people; therefore it was changed
   in Vim.  But when the <Esc> is part of a mapping, the command-line is
   executed.  If you want the Vi behaviour also when typing <Esc>, use ":cmap
   ^V<Esc> ^V^M"}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item *3
コマンドラインモードからノーマルモードへ移行するには次のようにします:
@itemize
@item @key{<CR>} か @key{<NL>} を入力する。入力途中のコマンドは実行されます。
@item 行の全てを削除し (例、@kbd{CTRL-U} を使う)、そして、@key{<BS>} を入力する。
@item @kbd{CTRL-C} または @key{<Esc>} を入力する、入力途中のコマンドを実行せずに終了できます。
@end itemize
最後の方法ですが、@key{<Esc>} が '@option{wildchar}' に設定されている場合があります。その場合、コマンドライン補完が実行されますが、それを無視して、再び @key{<Esc>} を入力してください。

@{Vi では、@key{<Esc>} を入力すると、そのコマンドラインが実行されます。これは多くの人が期待するような動作ではないので、Vim では変更されました。しかし、その @key{<Esc>} がマップの一部であるような場合には、コマンドラインは実行されます。@key{<Esc>} を入力したときに、Vi と同じように動作して欲しいときは、"@command{:cmap ^V@key{<Esc>} ^V^M}" を使ってください@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*4 Go from Normal to Select mode by:
   - use the mouse to select text while 'selectmode' contains "mouse"
   - use a non-printable command to move the cursor while keeping the Shift
     key pressed, and the 'selectmode' option contains "key"
   - use "v", "V" or "CTRL-V" while 'selectmode' contains "cmd"
   - use "gh", "gH" or "g CTRL-H"  |g_CTRL-H|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item *4
ノーマルモードから選択モードに移行するには次のようにします:

@itemize
@item '@option{selectmode}' が "@var{mouse}" を含んでいるときは、マウスでテキストを選択する。
@item '@option{selectmode}' が "@var{key}" を含んでいるときは、シフトキーを押しながら、特殊キーでカーソルを動かします。(@command{:set keymodel+=startsel} が必要)
@item '@option{selectmode}' が "@var{cmd}" を含んでいるときは、"v"、"V"、"@kbd{CTRL-V}" を使う。
@item "gh"、"gH"、"g @kbd{CTRL-H}" を使う。|@ref{g_CTRL-H}|
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*5 Go from Select mode to Normal mode by using a non-printable command to move
   the cursor, without keeping the Shift key pressed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item *5
選択モードからノーマルモードに移行するには、シフトキーを押さずに特殊キーでカーソルを動かします。(@command{:set keymodel+=stopsel} が必要)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*6 Go from Select mode to Insert mode by typing a printable character.  The
   selection is deleted and the character is inserted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item *6
選択モードから挿入モードへ移行するには、印字可能文字 (普通の文字) を入力します。選択範囲は削除され、入力した文字が挿入されます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'insertmode' option is on, editing a file will start in Insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{insertmode}' がオンのときは、編集作業は挿入モードで始まります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	*CTRL-\_CTRL-N* *i_CTRL-\_CTRL-N* *c_CTRL-\_CTRL-N* *v_CTRL-\_CTRL-N*
Additionally the command CTRL-\ CTRL-N or <C-\><C-N> can be used to go to
Normal mode from any other mode.  This can be used to make sure Vim is in
Normal mode, without causing a beep like <Esc> would.  However, this does not
work in Ex mode.  When used after a command that takes an argument, such as
|f| or |m|, the timeout set with 'ttimeoutlen' applies.
When focus is in a terminal window, CTRL-\ CTRL-N goes to Normal mode for only
one command, see |t_CTRL-\_CTRL-N|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-\_CTRL-N}
@anchor{i_CTRL-\_CTRL-N}
@anchor{c_CTRL-\_CTRL-N}
@anchor{v_CTRL-\_CTRL-N}
@kindex CTRL-\_CTRL-N
@kindex i_CTRL-\_CTRL-N
@kindex c_CTRL-\_CTRL-N
@kindex v_CTRL-\_CTRL-N
@kbd{CTRL-\ CTRL-N} と <C-\><C-N> を使って、どのモードからでもノーマルモードに移行できます。このコマンドを使えば、確実にノーマルモードになることができます。@key{<Esc>} のときのようにビープ音はなりません。ただし、Ex モードでは機能しません。|@ref{f}| や |@ref{m}| のように引数をとるコマンドの後で使われたときは、'@option{ttimeoutlen}' で設定されたタイムアウトが適用されます。

フォーカスがターミナルウィンドウにあるとき、@kbd{CTRL-\} @kbd{CTRL-N} はたった 1 つのコマンドでノーマルモードに移行します。|@ref{t_CTRL-\_CTRL-N}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	*CTRL-\_CTRL-G* *i_CTRL-\_CTRL-G* *c_CTRL-\_CTRL-G* *v_CTRL-\_CTRL-G*
The command CTRL-\ CTRL-G or <C-\><C-G> can be used to go to Insert mode when
'insertmode' is set.  Otherwise it goes to Normal mode.  This can be used to
make sure Vim is in the mode indicated by 'insertmode', without knowing in
what mode Vim currently is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-\_CTRL-G}
@anchor{i_CTRL-\_CTRL-G}
@anchor{c_CTRL-\_CTRL-G}
@anchor{v_CTRL-\_CTRL-G}
@kindex CTRL-\_CTRL-G
@kindex i_CTRL-\_CTRL-G
@kindex c_CTRL-\_CTRL-G
@kindex v_CTRL-\_CTRL-G
'@option{insertmode}' がオンのときは、@kbd{CTRL-\ CTRL-G} や <C-\><C-G> で挿入モードに移行できます。オフのときはノーマルモードに移行します。このコマンドを使えば、現在どのモードにいるのかにかかわらず、'@option{insertmode}' に設定されたモードに移行することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				    *Q* *mode-Ex* *Ex-mode* *Ex* *EX* *E501*
Q			Switch to "Ex" mode.  This is a bit like typing ":"
			commands one after another, except:
			- You don't have to keep pressing ":".
			- The screen doesn't get updated after each command.
			- There is no normal command-line editing.
			- Mappings and abbreviations are not used.
			In fact, you are editing the lines with the "standard"
			line-input editing commands (<Del> or <BS> to erase,
			CTRL-U to kill the whole line).
			Vim will enter this mode by default if it's invoked as
			"ex" on the command-line.
			Use the ":vi" command |:visual| to exit "Ex" mode.
			Note: In older versions of Vim "Q" formatted text,
			that is now done with |gq|.  But if you use the
			|vimrc_example.vim| script "Q" works like "gq".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Q}
@anchor{mode-Ex}
@anchor{Ex-mode}
@anchor{Ex}
@anchor{EX}
@anchor{E501}
@cindex Q
@cindex mode-Ex
@cindex Ex-mode
@cindex Ex
@cindex EX
@erindex E501
@table @asis
@item Q
"Ex" モードに切り替えます。このモードは "@command{:}" コマンドを続けて入力するようなものですが、次の点が違います:

@itemize
@item 毎回 "@key{:}" を押す必要がない。
@item コマンドを実行するごとに画面が更新されない。
@item 通常のコマンドライン編集機能は使えない。
@item マップと短縮入力は使えない。つまり、"標準の" 行編集コマンドだけを使って入力します (削除に @key{<Del>} または @key{<BS>}、行削除に @kbd{CTRL-U} を使用する)。Vim が "ex" という名前で実行された場合には、このモードで起動します。"Ex" モードを抜けるには、"@command{:vi}" コマンド |@ref{:visual}| を使います。
@quotation
@strong{Note:} @*
Vim の昔のバージョンでは "Q" がテキストを整形するコマンドでしたが、いまは |@ref{gq}| になっています。ただし |@ref{vimrc_example.vim}| を使っている場合は、"Q" と "gq" は同じ動作をします。
@end quotation
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*gQ*
gQ			Switch to "Ex" mode like with "Q", but really behave
			like typing ":" commands after another.  All command
			line editing, completion etc. is available.
			Use the ":vi" command |:visual| to exit "Ex" mode.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gQ}
@cindex gQ
@item gQ
"Ex" モードに切り替えます。"Q" と同じですが、実際に "@command{:}" コマンドでコマンドを入力するのと同じように動作します。コマンドライン編集や補完などがすべて利用可能です。"Ex" モードを抜けるには、"@command{:vi}" コマンド |@ref{:visual}| を使います。@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. The window contents					*window-contents*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{window-contents}
@cindex window-contents
@cindex ウィンドウに表示される内容
@section 7. ウィンドウに表示される内容
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Normal mode and Insert/Replace mode the screen window will show the current
contents of the buffer: What You See Is What You Get.  There are two
exceptions:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードと挿入/置換モードでは、スクリーンに現在のバッファの内容が表示されます。つまり、見ているものが得られるもの (WYSIWYG) です。しかし、例外が 2 つがあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- When the 'cpoptions' option contains '$', and the change is within one line,
  the text is not directly deleted, but a '$' is put at the last deleted
  character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item オプション '@option{cpoptions}' が '@var{$}' を含んでいて、一行に収まる範囲を変更 (|@ref{c}|) するときは、テキストはすぐに削除されず、削除される文字の最後の位置に '$' が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- When inserting text in one window, other windows on the same text are not
  updated until the insert is finished.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item あるウィンドウでテキストを挿入していて、別のウィンドウでも同じテキストを表示しているとき、挿入を完了するまでそのウィンドウの表示は更新されません。@{訳注: 確認できず@}
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{Vi: The screen is not always updated on slow terminals}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi: 遅い端末では画面が常に更新されるとは限りません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Lines longer than the window width will wrap, unless the 'wrap' option is off
(see below).  The 'linebreak' option can be set to wrap at a blank character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの幅より長い行は、折り返して表示されます。'@option{wrap}' がオフのときは折り返されません (下記参照)。'@option{linebreak}' を設定すると空白文字で折り返すことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the window has room after the last line of the buffer, Vim will show '~' in
the first column of the last lines in the window, like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウ内でバッファの最終行より下に表示領域がある場合、以下のように、それら
の行の始めに '~' が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-----------------------+
	|some line		|
	|last line		|
	|~			|
	|~			|
	+-----------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-----------------------+
|some line              |
|last line              |
|~                      |
|~                      |
+-----------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Thus the '~' lines indicate that the end of the buffer was reached.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このように、'~' はバッファの最後に到達したことを示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the last line in a window doesn't fit, Vim will indicate this with a '@' in
the first column of the last lines in the window, like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウに表示されている最後の行が表示しきれない場合、以下のように、最終行の場所に '@@' が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-----------------------+
	|first line		|
	|second line		|
	|@			|
	|@			|
	+-----------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-----------------------+
|first line             |
|second line            |
|@                      |
|@                      |
+-----------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Thus the '@' lines indicate that there is a line that doesn't fit in the
window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このように、'@@' はウィンドウに収まりきらない行があることを示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the "lastline" flag is present in the 'display' option, you will not see
'@' characters at the left side of window.  If the last line doesn't fit
completely, only the part that fits is shown, and the last three characters of
the last line are replaced with "@@@", like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{display}' に "@var{lastline}" フラグが含まれている場合、'@@' はウィンドウの左側に表示されません。最終行がウィンドウに完全に収まらない場合は、収まる部分のみが表示され、最後の 3 文字が次のように "@@@@@@" で置き換えられます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-----------------------+
	|first line		|
	|second line		|
	|a very long line that d|
	|oesn't fit in the wi@@@|
	+-----------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-----------------------+
|first line             |
|second line            |
|a very long line that d|
|oesn't fit in the wi@@@|
+-----------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If there is a single line that is too long to fit in the window, this is a
special situation.  Vim will show only part of the line, around where the
cursor is.  There are no special characters shown, so that you can edit all
parts of this line.
{Vi: gives an "internal error" on lines that do not fit in the window}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
長すぎてウィンドウに収まりきらない単一の行があるときは、特別な場合として扱われます。Vim はカーソルのある場所付近のみを表示します。特殊記号は表示されません。その行のどの部分でも編集できます。

@{Vi はウィンドウに収まらない行に対しては "内部エラー" を起こします@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The '@' occasion in the 'highlight' option can be used to set special
highlighting for the '@' and '~' characters.  This makes it possible to
distinguish them from real characters in the buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@@' と '~' の強調表示を設定するには、オプション '@option{highlight}' の '@@' を設定します。それらの文字と、バッファの中の本物の文字を区別することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'showbreak' option contains the string to put in front of wrapped lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り返された行の先頭には '@option{showbreak}' に設定した文字が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*wrap-off*
If the 'wrap' option is off, long lines will not wrap.  Only the part that
fits on the screen is shown.  If the cursor is moved to a part of the line
that is not shown, the screen is scrolled horizontally.  The advantage of
this method is that columns are shown as they are and lines that cannot fit
on the screen can be edited.  The disadvantage is that you cannot see all the
characters of a line at once.  The 'sidescroll' option can be set to the
minimal number of columns to scroll.  {Vi: has no 'wrap' option}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{wrap-off}
@cindex wrap-off
@cindex ワードラップオフ
'@option{wrap}' がオフの場合、長い行は折り返されません。スクリーンに収まる分だけ表示されます。カーソルが表示されていない部分に移動すると、スクリーンは水平方向にスクロールします。この方法の利点は、縦の列がありのままに表示されること、スクリーンに収まらない行も編集できることです。欠点としては、一行の全ての文字を一度に見ることができないことが挙げられます。'@option{sidescroll}' にはスクロールする最小の列(カラム)数を設定します。@{Vi には '@option{wrap}' オプションはありません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
All normal ASCII characters are displayed directly on the screen.  The <Tab>
is replaced with the number of spaces that it represents.  Other non-printing
characters are replaced with "^{char}", where {char} is the non-printing
character with 64 added.  Thus character 7 (bell) will be shown as "^G".
Characters between 127 and 160 are replaced with "~{char}", where {char} is
the character with 64 subtracted.  These characters occupy more than one
position on the screen.  The cursor can only be positioned on the first one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
全ての普通の ASCII 文字はスクリーンに直接表示されます。@key{<Tab>} は、それが表現する数のスペースに置き換えられます。他の非表示文字は、"^@{char@}" に置き換えられます、このとき @{char@} には、その非表示文字に 64 を足した文字が入ります。つまり、文字 7 (ベル文字) は "^G" と表示されます。127 から 160 までの文字は "~@{char@}" で置き換えられます、このとき @{char@} には、その文字から 64 を引いた文字が入ります。これらの文字はスクリーン上では複数幅で表示されます。カーソルはその複数幅の先頭にのみ移動させることができます
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you set the 'number' option, all lines will be preceded with their
number.  Tip: If you don't like wrapping lines to mix with the line numbers,
set the 'showbreak' option to eight spaces:
	":set showbreak=\ \ \ \ \ \ \ \ "
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{number}' がオンの場合、全ての行の先頭に行番号が表示されます。Tip: 行を折り返したときに、行番号と行の表示を混ぜたくないときは、'@option{showbreak}' に 8 つのスペースをセットします:
@example
":set showbreak=\ \ \ \ \ \ \ \ "
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you set the 'list' option, <Tab> characters will not be shown as several
spaces, but as "^I".  A '$' will be placed at the end of the line, so you can
find trailing blanks.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{list}' がオンの場合、@key{<Tab>} 文字はいくつかのスペースとしてではなく、"^I" として表示されます。'$' が行末に表示されるので、行の最後についた空白を見つけることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Command-line mode only the command-line itself is shown correctly.  The
display of the buffer contents is updated as soon as you go back to Command
mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインモードでは、コマンドラインのみが正しく表示されます。バッファの内容の表示は、コマンドラインモードから抜けたときに更新されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The last line of the window is used for status and other messages.  The
status messages will only be used if an option is on:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの最下行はステータスやその他のメッセージのために使われます。ステータスメッセージが使われるのは、オプションがオンのときのみです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
status message			option	     default	Unix default	~
current mode			'showmode'	on	    on
command characters		'showcmd'	on	    off
cursor position			'ruler'		off	    off
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .2 .2 .3
@item ステータスメッセージ @tab オプション @tab 初期設定 @tab Unix の初期設定
@item 現在のモード @tab '@option{showmode}' @tab on @tab on
@item コマンドの文字 @tab '@option{showcmd}' @tab on @tab off
@item カーソルの位置 @tab '@option{ruler}' @tab off @tab off
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The current mode is "-- INSERT --" or "-- REPLACE --", see |'showmode'|.  The
command characters are those that you typed but were not used yet.  {Vi: does
not show the characters you typed or the cursor position}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のモードとは、"@samp{-- INSERT --}" や "@samp{-- REPLACE --}" のことです、|@ref{'showmode'}| を参照。コマンドの文字とは、入力されて、まだ実行されていないコマンドのことです。@{Vi は入力した文字やカーソルの位置を表示しません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have a slow terminal you can switch off the status messages to speed
up editing:
	:set nosc noru nosm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
遅い端末を使っている場合は、ステータスメッセージをオフにすることで編集のスピードを上げることができます:
@example
:set nosc noru nosm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If there is an error, an error message will be shown for at least one second
(in reverse video).  {Vi: error messages may be overwritten with other
messages before you have a chance to read them}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
エラーが起きたとき、エラーメッセージは少なくとも一秒間は表示されます(反転表示で)。@{Vi ではエラーメッセージが読む間もなく他のメッセージに上書きされる場合があります@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some commands show how many lines were affected.  Above which threshold this
happens can be controlled with the 'report' option (default 2).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのコマンドでは、そのコマンドが作用する行数が表示されます。何行以上でその表示をするかは、'@option{report}' で設定できます (初期設定は 2)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On the Amiga Vim will run in a CLI window.  The name Vim and the full name of
the current file name will be shown in the title bar.  When the window is
resized, Vim will automatically redraw the window.  You may make the window as
small as you like, but if it gets too small not a single line will fit in it.
Make it at least 40 characters wide to be able to read most messages on the
last line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Amiga 上では、Vim は CLI ウィンドウで実行されます。Vim の名前と現在のファイル名の絶対パスがタイトルバーに表示されます。ウィンドウがリサイズされると、Vim は自動的にウィンドウを再描画します。ウィンドウは好きなだけ小さくできますが、小さすぎると 1 行のみで収まりきらなくなります。最下行に表示されるメッセージが読めるように、最低でも 40 文字の幅を取ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On most Unix systems, resizing the window is recognized and handled correctly
by Vim.  {Vi: not ok}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどの UNIX システム上で、Vim はウィンドウのリサイズを正しく認識、把握できます。@{Vi ではできません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. Definitions						*definitions*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{definitions}
@cindex definitions
@cindex 用語の定義
@section 8. 用語の定義
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  buffer		Contains lines of text, usually read from a file.
  screen		The whole area that Vim uses to work in.  This can be
			a terminal emulator window.  Also called "the Vim
			window".
  window		A view on a buffer.  There can be multiple windows for
			one buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item バッファ
テキスト行が入っている。一般にファイルから読み込む。
@item スクリーン
Vim が使う領域全体。端末ウィンドウを指す場合もある。"Vim ウィンドウ" とも呼ばれる。
@item ウィンドウ
バッファが表示される場所。1 つのバッファが複数のウィンドウを持つことが可能。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A screen contains one or more windows, separated by status lines and with the
command line at the bottom.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つのスクリーンは 1 つ以上のウィンドウを内包し、それらはステータスラインで区切られ、最下行にはコマンドラインが表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------+
screen	| window 1	| window 2	|
	|		|		|
	|		|		|
	|= status line =|= status line =|
	| window 3			|
	|				|
	|				|
	|==== status line ==============|
	|command line			|
	+-------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
        +-------------------------------+
screen  | window 1      | window 2      |
        |               |               |
        |               |               |
        |= status line =|= status line =|
        | window 3                      |
        |                               |
        |                               |
        |==== status line ==============|
        |command line                   |
        +-------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The command line is also used for messages.  It scrolls up the screen when
there is not enough room in the command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドラインはメッセージを表示するためにも使われます。コマンドラインに十分な表示領域がない場合はスクリーンがスクロールします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A difference is made between four types of lines:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行には 4 種類あり、次の違いがあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  buffer lines		The lines in the buffer.  This is the same as the
			lines as they are read from/written to a file.  They
			can be thousands of characters long.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item バッファ行
バッファ内の行。ファイルに読み書きする行のこと。行の長さは制限なし。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  logical lines		The buffer lines with folding applied.  Buffer lines
			in a closed fold are changed to a single logical line:
			"+-- 99 lines folded".  They can be thousands of
			characters long.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 論理行
折り畳みが適用されたバッファ行。複数のバッファ行が折り畳まれ論理行 1 行となり、次のように表示される: "@samp{+-- 99 lines folded}"。行の長さは制限なし。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  window lines		The lines displayed in a window: A range of logical
			lines with wrapping, line breaks, etc.  applied.  They
			can only be as long as the width of the window allows,
			longer lines are wrapped or truncated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ウィンドウ行
ウィンドウに表示される行: 折り返し、ラインブレークなどが適用された後の論理行の一部。長さはウィンドウの幅以下。それ以上長い行は折り返されるか切り詰められる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
  screen lines		The lines of the screen that Vim uses.  Consists of
			the window lines of all windows, with status lines
			and the command line added.  They can only be as long
			as the width of the screen allows.  When the command
			line gets longer it wraps and lines are scrolled to
			make room.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item スクリーン行
Vim が使うスクリーンの行。全てのウィンドウのウィンドウ行とステータスライン、コマンドラインからなる。長さはスクリーンの幅以下。コマンドラインがそれ以上長くなったときは折り返して表示され、表示領域を作るために行がスクロールされる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
buffer lines	logical lines	window lines	screen lines ~

1. one		1. one		1. +-- folded   1.  +-- folded
2. two		2. +-- folded	2. five		2.  five
3. three	3. five		3. six		3.  six
4. four		4. six		4. seven	4.  seven
5. five		5. seven			5.  === status line ===
6. six						6.  aaa
7. seven					7.  bbb
						8.  ccc ccc c
1. aaa		1. aaa		1. aaa		9.  cc
2. bbb		2. bbb		2. bbb		10. ddd
3. ccc ccc ccc	3. ccc ccc ccc	3. ccc ccc c	11. ~ 
4. ddd		4. ddd		4. cc		12. === status line ===
				5. ddd		13. (command line)
				6. ~ 
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .22 .22 .22 .34
@item バッファ行 @tab 論理行 @tab ウィンドウ行 @tab スクリーン行
@item
@item 1. one @tab 1. one @tab 1. +@minus{}@minus{} folded @tab 1.  +@minus{}@minus{} folded
@item 2. two @tab 2. +@minus{}@minus{} folded @tab 2. five @tab 2.  five
@item 3. three @tab 3. five @tab 3. six @tab 3.  six
@item 4. four @tab 4. six @tab 4. seven @tab 4.  seven
@item 5. five @tab 5. seven @tab @tab 5.  === status line ===
@item 6. six @tab @tab @tab 6.  aaa
@item 7. seven @tab @tab @tab 7.  bbb
@item @tab @tab @tab 8.  ccc ccc c
@item 1. aaa @tab 1. aaa @tab 1. aaa @tab 9.  cc
@item 2. bbb @tab 2. bbb @tab 2. bbb @tab 10. ddd
@item 3. ccc ccc ccc @tab 3. ccc ccc ccc @tab 3. ccc ccc c @tab 11. ~
@item 4. ddd @tab 4. ddd @tab 4. cc @tab 12. === status line ===
@item @tab @tab 5. ddd @tab 13. (command line)
@item @tab @tab 6. ~
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
