@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node gui_mac.txt, , , 目次
@unnumbered Mac での Vim のグラフィカルユーザーインターフェイス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*gui_mac.txt*	For Vim version 8.0.  Last change: 2012 Jan 13


		  VIM REFERENCE MANUAL    by Bjorn Winckler
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*gui_mac.txt*   For Vim version 8.0.  Last change: 2012 Jan 13


                  VIMリファレンスマニュアル    by Björn Winckler
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The MacVim Graphical User Interface			*macvim* *gui-macvim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim}
@anchor{gui-macvim}
@cindex macvim
@cindex gui-macvim
MacVim グラフィカルユーザーインターフェイス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 1. MacVim differences		|macvim-differences|
 2. Starting MacVim		|macvim-start|
 3. Preferences			|macvim-preferences|
 4. Special colors		|macvim-colors|
 5. Menus			|macvim-menus|
 6. Toolbar			|macvim-toolbar|
 7. Dialogs			|macvim-dialogs|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. MacVim の違い @tab |@ref{macvim-differences}|
@item 2. MacVim の起動@tab |@ref{macvim-start}|
@item 3. 初期設定 @tab |@ref{macvim-preferences}|
@item 4. スペシャルカラー @tab |@ref{macvim-colors}|
@item 5. メニュー @tab |@ref{macvim-menus}|
@item 6. ツールバー @tab |@ref{macvim-toolbar}|
@item 7. ダイアログ @tab |@ref{macvim-dialogs}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
 8. System services		|macvim-services|
 9. mvim:// URL handler		|macvim-url-handler|
10. Keyboard shortcuts		|macvim-shortcuts|
11. Trackpad gestures		|macvim-gestures|
12. International		|macvim-international|
13. Known bugs/missing features	|macvim-todo|
14. Hints			|macvim-hints|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 8. システムサービス @tab |@ref{macvim-services}|
@item 9. mvim:// URL ハンドラー @tab |@ref{macvim-url-handler}|
@item 10. キーボードショートカット @tab |@ref{macvim-shortcuts}|
@item 11. トラックパッドジェスチャー @tab |@ref{macvim-gestures}|
@item 12. 国際化 @tab |@ref{macvim-international}|
@item 13. バグと未実装の機能 @tab |@ref{macvim-todo}|
@item 14. ヒント @tab |@ref{macvim-hints}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Other relevant documentation:
|gui.txt|	For generic items of the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その他の関連する文章:
@multitable @columnfractions .3 .7
@item |@ref{gui.txt}| @tab GUI の一般的な要素。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{Vi does not have a GUI}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi に GUI はありません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. MacVim differences					*macvim-differences*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-differences}
@cindex macvim-differences
@section 1. MacVim の違い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One of the goals of MacVim is to make Vim behave like a proper Mac OS X
application.  For this reason MacVim behaves slightly different from other GUI
ports of Vim.  Most of the modifications are provided in the system gvimrc
file; you can quickly open this file and look at it yourself by typing: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim のゴールのひとつは、Vim を Mac OS X 本来のアプリケーションの動作をするようにすることです。この理由は、MacVim は Vim の他の GUI 版とは少しばかり挙動が異っているからです。修正の多くは、システムの gvimrc ファイルで提供されています。次のように入力することで、このファイルを素速く開いて確認することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:tabe $VIM/gvimrc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tabe $VIM/gvimrc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note that this file will be overwritten each time you update MacVim, so it is
best to keep your own modifications inside "~/.gvimrc".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このファイルは MacVim をアップデートする度に上書きされることに注意してください。そのため、自分の変更は "~/.gvimrc" に書いておくのが良いです。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-windows*
There is some confusion regarding the term "window" in MacVim since it means
one thing to Vim and another to MacVim.  A "window" in Vim is what opens up
when you type ":sp", whereas a "window" in MacVim is the GUI window which
contains the text view, scrollbars, toolbar and tabline.  To avoid confusion,
the former is referred to as a Vim-window, whereas the latter is simply called
a window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-windows}
@cindex macvim-windows
@unnumberedsubsec MacVim でのウィンドウ (window)
MacVim の "window" という用語に関していくつかの混乱があります。それは、ひとつは Vim についての事と、もうひとつは MacVim についての事です。Vim での "window" は ":sp" を入力したときに開いたものです。ところが MacVim での "window" は、テキストビュー、スクロールバー、ツールバーそしてタブラインを含んでいる GUI ウィンドウのことなのです。混乱を回避するために、前者を Vim-window と呼び、後者は単に window と呼ぶことにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-encoding*
It is not possible to modify 'termencoding' in MacVim; this option is forcibly
set to "utf-8".  The option 'encoding' also defaults to "utf-8" (as opposed to
"latin1" in the other GUI ports).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-encoding}
@cindex macvim-encoding
@unnumberedsubsec MacVim でのエンコーディング
MacVim で '@option{termencoding}' を変更することはできません。このオプションは強制的に "@var{utf-8}" に設定されています。'@option{encoding}' オプションはまた、(他の GUI 版では "latin1" であるのに対して) デフォルトで "@var{utf-8}" です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: UTF-8 can represent all characters defined in Unicode, which includes
all characters in all other standard encodings, so it should be perfectly safe
to edit files in any encoding while 'encoding' is set to "utf-8".  Of course,
you may need to set 'fileencodings' to auto-detect the encoding of the files
you edit, or force the detection with |++enc| on the command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
UTF-8 は Unicode で定義されているすべての文字を表わすことができます。Unicode は他の標準的なエンコーディングすべてにおけるすべての文字を含んでいます。そのため、'@option{encoding}' が "@var{utf-8}" に設定されている限り、どのようなエンコーディングのファイルを編集しても、完全に信頼できるでしょう。もちろん、あなたは編集しているファイルのエンコーディングの '@option{fileencodings}' を自動判定したり、コマンドラインから |@ref{++enc}| を強制的に検出したいかもしれません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
However, if you are editing files that use multiple encodings (container
formats like MIME or Unix mbox files) or no standard encoding (binary data,
see also |edit-binary|), you may want to prevent MacVim from re-encoding the
file at all. In this situation, you will need to set both 'encoding' and
'fileencodings' to a simple single-byte encoding such as Latin1 so that when
the file is read into memory, the original bytes are left untouched.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしながら、もしもマルチエンコーディング (MIME のようなコンテナフォーマットや Unix の mbox ファイル) のファイルを編集していたり、標準ではないエンコーディングのファイル (バイナリデータ、|@ref{edit-binary}| を参照) を編集しているのなら、MacVim がファイルを再エンコーディングすることなど全く望まないでしょう。この状況では、'@option{encoding}' も '@option{fileencodings}' も Latin1 のような単純なシングルバイトのエンコーディングに設定する必要があります。そうすると、ファイルがメモリに読み込まれた時に、オリジナルのバイトには手を加えられません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-shift-movement*
Text editors on Mac OS X lets the user hold down shift+movement key to extend
the selection.  Also, pressing a printable key whilst selecting replaces the
current selection with that character.  MacVim can emulate this kind of
behaviour (by providing key bindings and by setting 'keymodel' and
'selectmode' to non-default values) although it is not enabled by default.  To
make MacVim behave more like TextEdit and less like Vim, add the following
lines to your "~/.vimrc" (not .gvimrc) file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-shift-movement}
@cindex macvim-shift-movement
@unnumberedsubsec MacVim でのシフトキー
Mac OS X のテキストエディタでは、シフトキーを押しながら矢印キーを押すことで選択範囲を伸縮します。また、選択をした状態で pringable なキー @{訳注: @key{⌘} や @key{fn} じゃない @key{1} や @key{a} のキーのこと？@} を押すと、現在選択されているものが、その押された文字で置き換えられます。

MacVim ではこのような挙動をエミュレートすることができます (そのようにキーバインドを設定し、'@option{keymodel}' と '@option{selectmode}' を初期値以外に設定することによって)。とはいえ、デフォルトでは有効にされていません。MacVim をもっと TextEdit に似せたり、Vim とは違ったものにしたいのなら、次の設定を "~/@file{.vimrc}" (@file{.gvimrc} ではないよ！) に追加しましょう:

@{訳注: そんなやつおるんか？Vim 使う意味ないんちゃう？@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	if has("gui_macvim")
	  let macvim_hig_shift_movement = 1
	endif
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if has("gui_macvim")
  let macvim_hig_shift_movement = 1
endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*macvim-drag-n-drop*
Dragging files and dropping them on a window opens those files in tabs in that
window, unless Vim is in command-line mode.  In command-line mode the names of
the files are added to the command line.  Holding down modifier keys whilst
dragging is not supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-drag-n-drop}
@cindex macvim-drag-n-drop
@unnumberedsubsec MacVim でのドラッグ＆ドロップ
Vim がコマンドラインモードでなければ、ファイルを window にドラッグ＆ドロップすると、その window 内でファイルをタブでそれぞれ開きます。コマンドラインモードのときは、ファイルの名前がコマンドラインに追加されます。ドラッグしている間にモディファイアキーを押すことはサポートされていません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If a file is dropped on the Dock icon, it is always opened in a new tab
regardless of the mode Vim is currently in.  The same holds if you
double-click on a file in the Finder.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを Dock アイコンにドロップしたときは、Vim が現在どのようなモードにいるのかに関わらず、常に新しいタブで開かれます。@{訳注: 自分の環境では新規 window で開かれてしまうのだけど？下に説明あり！@} ファイルを Finder 上でダブルクリックしたときにも同じことが言えます。@{訳注: これはファイルが「このアプリケーションで開く:」にて MacVim.app と関連付けられていないとダメですね@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "Open files from applications" preference in the General preference pane
gives more options on how dropped files should open, in case tabs are not
desired.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
環境設定の "Open files from applications" にてドロップしたファイルをどのように開くのかのオプションがあります。この場合はタブは望まれていません。

@{訳注: メニューバーから MacVim -> Preferences... -> General Tab -> "Open files from applications:" に "in a new window" と "in the current window" のラジオボタンがあり、さらに後者にはセレクトボックスで 4 種類を選べるようになっています@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-default-menu*
The default menu in MacVim has been changed to conform better with the Apple
Human Interface Guidelines (HIG).  At the moment this breaks the localized
menus, so only English menus are supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-default-menu}
@cindex macvim-default-menu
@unnumberedsubsec MacVim でのメニュー
MacVim のデフォルトのメニューは Apple のヒューマンインターフェイスガイドライン (HIG) により適合するように変更されています。現時点でこれは、ローカライズされたメニューを壊します。ですから、英語のメニューだけがサポートされています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: The menus are a work in progress.  If you know something about the HIG
and want to contribute to MacVim you could do so by making the menus better.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
メニューは作業中です。HIG について何か知っていて、MacVim に貢献したいと思いましたら、メニューをより良くして貢献してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-window-title*
The default window title does not include the argument list because it looks
really bad once you start using tabs.  For example, dropping two files, then
dropping two more, and switching back to the first tab would cause weird
strings like "((3) of 2)" to appear in the window title.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-window-title}
@cindex macvim-window-title
@unnumberedsubsec MacVim でのウィンドウのタイトル
デフォルトの window タイトルは引数のリストを含んでいません。これはいったんタブ機能を使いはじめると、本当に見た目が良くないからです。例えば、2 つのファイルをドロップし、それから 2 つ以上のファイルをドロップし...としてから、最初のタブに戻るとします。すると window タイトル中に "((3) of 2)" のような奇妙な文字列が現れてしまいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-tablabel*
Tab labels only show the tail of the file name to make the tabs more readable
when editing files in deeply nested folders.  Add the line "set guitablabel="
to your .gvimrc file to revert back to the default Vim tab label.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-tablabel}
@cindex macvim-tablabel
@unnumberedsubsec MacVim でのタブのラベル
タブのラベルは深くネストされたフォルダのファイルを編集している際に、タブをより読み易くするため、ファイル名の末尾を表示します。Vim のタブラベルのデフォルトに戻すには、@file{.gvimrc} ファイルに "set guitablabel=" を加えてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-options*
These are the non-standard options that MacVim supports:
	'antialias'	'blurradius'	'fullscreen'
	'fuoptions'	'macligatures'	'macmeta'	'macthinstrokes'
	'toolbariconsize'	'transparency'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-options}
@cindex macvim-options
@unnumberedsubsec MacVim のオプション
MacVim がサポートしている非標準なオプションがあります:

'@option{antialias}', '@option{blurradius}', '@option{fullscreen}', '@option{fuoptions}', '@option{macligatures}', '@option{macmeta}', '@option{macthinstrokes}', '@option{toolbariconsize}', '@option{transparency}'
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-commands*
These are the non-standard commands that MacVim supports:
	|:macaction|	|:macmenu|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-commands}
@cindex macvim-commands
@unnumberedsubsec MacVim のコマンド
MacVim がサポートしている非標準なコマンドがあります:

|@ref{:macaction}|, |@ref{:macmenu}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-find*
Whenever you search for something in Vim (e.g. using "/") the search query is
copied to the OS X "Find Pasteboard".  The idea is that if you search for
something and switch to another application, then you can hit <D-g> (or <D-G>)
to repeat the search in the new app.  The same feature works if you search in
some app, switch to MacVim and hit <D-g>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-find}
@cindex macvim-find
@unnumberedsubsec MacVim での検索
(例えば "/" を使って) Vim で何かを検索するときはいつでも、検索クエリが OS X の "Find Pasteboard" にコピーされます。@{訳注: メニューバーから MacVim -> Edit -> Find -> Find... で表示されるダイアログの Find: テキストエリアに、検索した文字列がコピーされるのと同様に、他のアプリケーションのものにもコピーされている！システムクリップボードの検索版みたいなものがあったんですね。@}

このアイデアは何かを検索してから他のアプリケーションに移動したときに @kbd{<D-g>} (もしくは @kbd{<D-G>}) @{訳注: @key{⌘}-@key{G}@} を押すことによって、他のアプリケーションに移っても検索を繰り返すことができます。いくつかのアプリケーションで同様の機能が動作するので、他のアプリケーションから MacVim に戻ってきて @kbd{<D-g>} で検索を続けることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the command |n| is not the same as <D-g>.  The former will repeat
the last search made in Vim, whereas the latter searches for the string on the
OS X Find Pasteboard using the action findNext: (see |:macaction|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
コマンド |@ref{n}| は @kbd{<D-g>} とは同じでないことに注意してください。前者は Vim で生成された最後の検索を繰り返します。ところが、後者は findNext: (|@ref{:macaction}| を参照) を使って、OS X の "Find Pasteboard" にある文字列を検索します。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <D-g> key equivalent is a great way to bring a search from one window to
another in MacVim.  Simply search for something in one window (using "/") then
switch to another (e.g. with <D-`>) and hit <D-g> and the search will be
repeated in the new window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{<D-g>} キーに相当するものは、MacVim である window から他の window へ検索を引き継ぐのにとても良い方法です。("/" を使って) ある window で何か簡単な検索をしてから、(例えば @kbd{<D-`>} で) 他の window に移動し、@kbd{<D-g>} を押せば、新しい window でも検索が繰り返されるでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*macvim-backspace* *macvim-delete*
The 'backspace' option is set in the system vimrc to make the delete key
behave in a more familiar way to new users.  If you dislike this non-default
behaviour, then add the line "set backspace&" to your "~/.vimrc" file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-backspace}
@anchor{macvim-delete}
@cindex macvim-backspace
@cindex macvim-delete
@unnumberedsubsec MacVim での @key{delete} キー
'@option{backspace}' オプションは、新規ユーザーがとても慣れ親しんだ @key{delete} キーの動作となるように、システムの vimrc で 設定されています。この非デフォルトの挙動が好きでないのなら、"~/@file{.vimrc}" ファイルに "set backspace&" を加えてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Starting MacVim					*macvim-start*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-start}
@cindex macvim-start
@section 2. MacVim の起動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The easiest way to start MacVim is by double-clicking its icon in the Finder,
but most users will probably prefer to use the Terminal.  First some Finder
related ways of starting MacVim are described, then Terminal is discussed.
Note that you can put MacVim anywhere on your hard drive, but in this help
file it is assumed that you have put it inside your /Applications folder.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim を起動する一番簡単な方法は Finder でアイコンをダブルクリックすることです。しかし、ほとんどのユーザーはたぶん、ターミナルを使うのを好むでしょう。

MacVim を起動する方法に関連することを、はじめに Finder について説明をし、次に Terminal について検討をします。
@quotation
@strong{Note:} @*
MacVim はハードディスクのどこにでも置くことができますが、このヘルプファイルでは、/Applications フォルダに置いてあることを想定していることに注意してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
MacVim automatically registers itself as an editor of several standard file
formats.  This enables you to double-click a file to open it with MacVim (if
it is not associated with another program), or to right-click a file to bring
up the "Open with" menu.  You can also drag and drop files onto the Dock icon
to open them in tabs in a new window, or you can drop them in an already open
window to open the files in tabs in that specific window (it is possible to
have files open in e.g. splits by changing the "Open files from applications"
option in the General preference pane).  Finally, you can use Mac OS X System
Services to open files in MacVim, see |macvim-services|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim は自動的に、いくつの標準的なファイルフォーマットのエディタとして自分自身を登録します。これはファイルをダブルクリックすることで (もしも他のアプリケーションに関連付けられていなければ) MacVim で開くことを可能にします。もしくはファイルを右クリックしてコンテキストメニューから "Open with" @{訳注: このアプリケーションで開く@} で開けます。

新規 window のタブで開くために、Dock アイコンにファイルをドラッグ＆ドロップすることもできます。もしくは、目的の window のタブでファイルを開くために、すでに開いている window にドロップすることができます (例えば、環境設定で "Open files from applications" オプションを変更することにより、分割でファイルを開くことが可能です)。

最後に、MacVim でファイルを開くために、Mac OS X のシステムサービスを使うこともできます。|@ref{macvim-services}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Use |mvim| script to start MacVim from Terminal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim をターミナルから起動するために |@ref{mvim}| スクリプトを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Or use the "open" command (this method can not be used to pass parameters to
Vim) >
	open -a MacVim file ...
The advantage of using the latter method is that the settings relating to file
opening in the preferences panel are respected, and files open instantly if
|Quickstart| is enabled.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
または "open" コマンドを使います (この方法では Vim にパラメータを渡すことができません)。
@verbatim
open -a MacVim file ...
@end verbatim
後者の方法を使うことの利点は、環境設定パネルでのファイルを開くことに関連する設定が尊重されることです。そして |@ref{Quickstart}| が有効なら、直ちにファイルを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Once in terminal Vim it is possible to start MacVim by using the following
command:
	:gui [++opt] [+cmd] [-f|-b] [files...]
Note: Forking ("-b") currently does not work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ターミナルの Vim で次のコマンドを使うことで MacVim を起動することができます。
@example
:gui [++opt] [+cmd] [-f|-b] [files...]
@end example
@quotation
@strong{Note:} @*
フォークの ("-b") は現在は動作しないことに注意してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*mvim*
The "mvim" shell script bundled with MacVim. >
	/Applications/MacVim.app/Contents/bin/mvim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{mvim}
@cindex mvim
"mvim" シェルスクリプトは MacVim に同梱されています。
@verbatim
/Applications/MacVim.app/Contents/bin/mvim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This is a wrapper script to launch Vim executable in the bundle.  Put this
folder >
	/Applications/MacVim.app/Contents/bin
in your path and then simply type "mvim" to start MacVim from Terminal. >
	$ mvim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは bundle 内の Vim を起動するラッパースクリプトです。次のフォルダをパスに追加すると、
@verbatim
/Applications/MacVim.app/Contents/bin
@end verbatim
"mvim" と入力することでターミナルから簡単に MacVim を起動することができます。
@verbatim
$ mvim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
You can also specify files to open with. >
	$ mvim file ...
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを指定して開くこともできます。
@verbatim
$ mvim file ...
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Also the bin folder has convenient scripts for diffing and opening file as the file is read-only. >
	* Diff:		mvimdiff
	* Read-only:	mview
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
bin フォルダには diff をしたり、ファイルを読み込み専用で開いたりする便利なスクリプトが入っています。
@itemize
@item Diff: mvimdiff
@item Read-only: mview
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use "vim", "vimdiff", and "view" if you want to use non-GUI Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI 無しの Vim を使いたいのなら、"vim", "vimdiff" そして "view" を使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Quickstart*
Quickstart ensures that new windows open instantaneously e.g. when <D-n> is
pressed.  This feature can be enabled from the Advanced preferences pane (it
is disabled by default).  Note that this setting does not affect the speed
with which windows open when using the |mvim| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Quickstart}
@cindex Quickstart
@unnumberedsubsec クイックスタート
クイックスタートは例えば @kbd{<D-n>} @{訳注: <@key{⌘}-@key{N}>@} を押したときに、即座に新規 window を開くことを保証します。この機能は環境設定の Advanced Tab の部分で有効にすることができます (デフォルトでは無効です)。
@quotation
@strong{Note:} @*
この設定は |@ref{mvim}| コマンドを使ったときに、ウィンドウを開く速度には影響しないことに注意してください。

@{訳注: クイックはクイックでもそのクイックではないよ！という意味なのかな？@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that any changes to runtime files that are kept in a non-standard
location (i.e. not in ~/.vim) will not be picked up for the first window that
opens after any changes.  Also, there are some issues related to reading and
writing of the |viminfo| file which can lead to the command line history
appearing to be lost (as well as any other information stored in the |viminfo|
file).  For example, if you open a window, edit some files then close the
window, then the next window that opens will not have the same command line
history as the window you just closed (however the next window you open will).
For these reasons Quickstart is disabled by default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
非標準な (つまり ~/@file{.vim} ではない) 場所にある runtime ファイルへのどのような変更も、変更があった後に開いた最初の window には反映されないことに注意してください。

また、失われたコマンドライン履歴を導く |@ref{viminfo}| ファイルの読み込みと書き込みに関連するいくつかの課題があります (|@ref{viminfo}| ファイルに保存される他の情報も同じです) 。

例えば、window を開いて、いくつかのファイルを編集して window を閉じ、それから次の window を開くと、window を閉じたばかりなのでいくつかのコマンドライン履歴を持たないでしょう (しかしながら次に開いた window は持っているでしょう)。クイックスタートがデフォルトで無効になっているのはこういう理由からです。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*odbeditor* *external-editor*
MacVim can act as an 'external editor' for Mac OS X applications that support
the ODB Editor Protocol (or the 'external editor' protocol).  Each application
has different ways of configuring this option, check the application's
documentation.  Once configured properly MacVim can be used to open files in
such an application.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{odbeditor}
@anchor{external-editor}
@cindex odbeditor
@cindex external-editor
MacVim は ODB エディタプロトコル (もしくは 'external editor' プロトコル) をサポートする Mac OS X の外部エディタとして動作することができます。

それぞれのアプリケーションにはこのオプションを設定するのに異った方法を持っています。アプリケーションのドキュメントをチェックしてください。

適切に設定された MacVim はそのアプリケーションの中でファイルを開くのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A technical note: MacVim handles file open, modified and closed events.  In
the open event the FTok and Burl parameters are parsed (the latter is ignored
at the moment though).  In the modified and closed events the Tokn parameter
is sent back to the server application.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{テクニカル Note:} @*
MacVim はファイルを開く、変更された、閉じられたというイベントを扱います。開くイベントでは、FTok と Burl パラメーターがパースされます (けれども、現時点では文字は無視されます)。変更されたと閉じられたイベントでは、Tokn パラメーターがサーバーアプリケーションに送り戻されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Preferences				    *macvim-prefs* *macvim-preferences*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-prefs}
@anchor{macvim-preferences}
@cindex macvim-prefs
@cindex macvim-preferences
@section 3. 初期設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some settings are global to the MacVim application and would not make sense as
Vim options.  These settings are stored in the user defaults database and can
be accessed via the "MacVim.Preferences..." menu item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかの設定は MacVim アプリケーションに対してグローバルなもので、Vim のオプションとしては意味を無しません。これらの設定はユーザーのデフォルトデータベース保存されていて、"MacVim.Preferences..." メニュー項目を通してアクセスすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-user-defaults*
Not all entries in the user defaults database are exposed via the preference
panel, usually because they should not be changed by the user under normal
circumstances.  These options can still be changed with the "defaults" command
by opening Terminal and typing >
	defaults write org.vim.MacVim KEY VALUE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-user-defaults}
@cindex macvim-user-defaults
普通は標準的な環境においては、ユーザーによって変更されるべきではないので、ユーザーデフォルトデータベースの一部が環境設定から見られます。これらのオプションは今でもターミナルを開いて "defaults" コマンドによって次のように変更することができます。
@example
defaults write org.vim.MacVim KEY VALUE
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Check the man page on "defaults" for more information on this command as well
as general information regarding Mac OS X user defaults.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドのより多くの情報は、Mac OS X ユーザーデフォルトに関する一般的な情報と同じように、"defaults" の man ページを確認してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here is a list of relevant dictionary entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
関連する辞書項目のリストをあげます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
KEY				VALUE ~
MMCellWidthMultiplier		width of a normal glyph in em units [float]
MMDialogsTrackPwd		open/save dialogs track the Vim pwd [bool]
MMFullScreenFadeTime		fade delay for non-native fullscreen [float]
MMLoginShellArgument		login shell parameter [string]
MMLoginShellCommand		which shell to use to launch Vim [string]
MMNoFontSubstitution		disable automatic font substitution [bool]
MMNoTitleBarWindow		hide title bar [bool]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@headitem キー @tab 値
@item MMCellWidthMultiplier @tab em 単位の標準的なグリフの幅 [float]
@item MMDialogsTrackPwd @tab open/save ダイアログが Vim の pwd を追跡する [bool]
@item MMFullScreenFadeTime @tab 非ネイティブのフルスクリーンがフェードする遅延時間 [float]
@item MMLoginShellArgument @tab ログインシェルのパラメーター [string]
@item MMLoginShellCommand @tab Vim を起動するのに使うシェル [string]
@item MMNoFontSubstitution @tab 自動的にフォントを代用するのを無効にする [bool]
@item MMNoTitleBarWindow @tab タイトルバーを隠す [bool]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
MMShareFindPboard		share search text to Find Pasteboard [bool]
MMShowAddTabButton		enable "add tab" button on tabline [bool]
MMTabMaxWidth			maximum width of a tab [int]
MMTabMinWidth			minimum width of a tab [int]
MMTabOptimumWidth		default width of a tab [int]
MMTextInsetBottom		text area offset in pixels [int]
MMTextInsetLeft			text area offset in pixels [int]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item MMShareFindPboard @tab 検索語を Find Pasteboard で共有する [bool]
@item MMShowAddTabButton @tab タブ行で "add tab" ボタンを有効にする [bool]
@item MMTabMaxWidth @tab タブの最大幅 [int]
@item MMTabMinWidth @tab タブの最小幅 [int]
@item MMTabOptimumWidth @tab タブのデフォルト幅 [int]
@item MMTextInsetBottom @tab ピクセルでのテキストエリアのオフセット [int]
@item MMTextInsetLeft @tab ピクセルでのテキストエリアのオフセット [int]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
MMTextInsetRight		text area offset in pixels [int]
MMTextInsetTop			text area offset in pixels [int]
MMTexturedWindow		use brushed metal window (Tiger only) [bool]
MMTranslateCtrlClick		interpret ctrl-click as right-click [bool]
MMUseMouseTime			use mousetime to detect multiple clicks [bool]
MMVerticalSplit			files open in vertical splits [bool]
MMZoomBoth			zoom button maximizes both directions [bool]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item MMTextInsetRight @tab ピクセルでのテキストエリアのオフセット [int]
@item MMTextInsetTop @tab ピクセルでのテキストエリアのオフセット [int]
@item MMTexturedWindow @tab メタル調ウィンドウを使う (Tiger のみ) [bool]
@item MMTranslateCtrlClick @tab ctrl-click を right-click と解釈する [bool]
@item MMUseMouseTime @tab 複数のクリックを解釈するのに mousetime を使う [bool]
@item MMVerticalSplit @tab 垂直に分割してファイルを開く [bool]
@item MMZoomBoth @tab zoom ボタンをどの方向にも最大化する [bool]
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As an example, if you have more than one mouse button and would wish to free
up Ctrl-click so you can bind it to something else, then the appropriate
command is: >
	defaults write org.vim.MacVim MMTranslateCtrlClick 0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一例として、複数ボタンのマウスを持っていて Ctrl-click から解放されたいと思っていて、何か他のものに設定することができるのなら、次のコマンドが適切です:
@example
defaults write org.vim.MacVim MMTranslateCtrlClick 0
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you wish to restore all user defaults to their starting values, open
Terminal and type: >
	defaults delete org.vim.MacVim
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしも起動時の値をデフォルトに戻したいのなら、ターミナルを開いて次のように入力します:
@example
defaults delete org.vim.MacVim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*macvim-login-shell*
Applications opened from the Finder do not automatically source the user's
environment variables (which are typically set in .profile or .bashrc).  This
presents a problem when using |:!| to execute commands in the shell since e.g.
$PATH might not be set properly.  To work around this problem MacVim starts
new Vim processes via a login shell so that all environment variables are set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@anchor{macvim-login-shell}
@cindex macvim-login-shell
Finder から開かれたアプリケーションは自動的にユーザーの環境変数 (典型的なものは @file{.profile} や @file{.bashrc} の設定) を読み込みません。これはシェルでコマンドを実行するために |@ref{:!}| を使用する際に、例えば @env{$PATH} が適切に設定されていないかもしれず、問題が出ます。

この問題に対処するために、MacVim は新しい Vim のプロセスをログインシェルを通して起動します。そのため、すべての環境変数は設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default MacVim uses the $SHELL environment variable to determine which
shell to use (if $SHELL is not set "/bin/bash" is used).  It is possible to
override this choice by setting the user default MMLoginShellCommand to the
shell that should be used (e.g. "/bin/tcsh").  MacVim tries to make the shell
a login shell by prepending argv[0] with a dash.  If you use an exotic shell
and need to pass it a parameter to make it a login shell then you can set the
user default MMLoginShellArgument (e.g. to "-l").  Finally, if the "bash"
shell is used, then "-l" is automatically added as an argument.  To override
this behaviour set MMLoginShellArgument to "--".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトで MacVim は、使うべきシェルを決定するのに @env{$SHELL} 環境変数を使います (もし @env{$SHELL} が設定されていなければ、"/bin/bash" が使われます)。この選択は、ユーザーデフォルト設定の MMLoginShellCommand に使いたいシェル (例えば "/bin/tcsh") を設定することで上書きすることができます。

MacVim はダッシュを付けた argv[0] を前置することによって、シェルをログインシェルにしようとします。もしも別のシェルを使っていて、それをログインシェルとするためにパラメーターを渡す必要があるなら、ユーザーデフォルト設定の MMLoginShellArgument を (例えば "-l" に) 設定することができます。

最後に、もしも "bash" シェルが使われているなら、"-l" は自動的に引数に加えられます。この挙動を上書きするには、MMLoginShellArgument に "@minus{}@minus{}" を設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Special colors					*macvim-colors*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-colors}
@cindex macvim-colors
@section 4. スペシャルカラー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The colors in MacVim are defined in two dictionaries inside the "Resources"
folder of the application bundle (MacVim.app/Contents/Resources).  It is
possible to add more colors by modifying these files.  Color names are case
insensitive when accessed from Vim, but in the dictionary they must be
lowercase.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim でのカラーは bundle アプリケーションの "Resources" フォルダ (MacVim.app/Contents/Resources) にある 2 つの辞書で定義されています。これらのファイルを編集することでカラーを追加することができます。Vim からアクセスされたときに、カラーの名前は大文字小文字は関係ありません。しかし、この辞書の中では小文字でなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*SystemColors.plist*
There are only a few system colors that can be accessed from Vim.  These
colors are defined in the dictionary "SystemColors.plist".  This dictionary
stores (key, value) pairs where the key is the name of the color and the
value is an NSColor selector name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{SystemColors.plist}
@cindex SystemColors.plist
Vim からアクセスすることのできるシステムカラーは少ししかありません。これらのカラーは "SystemColors.plist" 辞書で定義されています。この辞書は (key, value) のペアで保存しています。key はカラーの名前で、value は NSColor セレクタ名です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The most useful system colors are: >
	MacSelectedTextBackgroundColor
	MacSecondarySelectedColor
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もっとも役に立つシステムカラーは次です:
@itemize
@item MacSelectedTextBackgroundColor
@item MacSecondarySelectedColor
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The former is the "Highlight Color" which can be changed in the "Appearance"
section of the System Preferences.  The latter is the selection color used by
a Cocoa application when it is not in focus.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
前者はシステム環境設定の "Appearance" セクション @{訳注: システム環境設定 -> 一般 -> アピアランス@} で変更することができる "Highlight Color" です。後者はフォーカスが外れたときに Cocoa アプリケーションによって使われる選択カラーです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Colors.plist*
Apart from the system colors, it is also possible to use the standard X11
color names (see http://en.wikipedia.org/wiki/X11_color_names) which usually
come in a file called "rgb.txt".  MacVim does not have such a file, instead it
keeps these colors in a dictionary called "Colors.plist". The key in this
dictionary is the name of the color and the value is an RGB value on the form
#rrggbb stored as an integer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Colors.plist}
@cindex Colors.plist
システムカラーとは別に、標準的な X11 カラーの名前 (@url{http://en.wikipedia.org/wiki/X11_color_names} を参照) を使うことができます。これはたいてい "rgb.txt" というファイルにあります。

MacVim にはこのようなファイルはありません。代わりに "Colors.plist" と呼ばれる辞書内にこれらのカラーを保存しています。この辞書の key はカラーの名前で、value は RGB 値 (#rrggbb という形の整数) です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*macvim-colorscheme*
MacVim ships with a custom color scheme that is used instead of the default
Vim color scheme.  The color scheme can be changed with >
	:colorscheme macvim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-colorscheme}
@cindex macvim-colorscheme
MacVim には Vim のデフォルトカラースキームの代わりに、カスタムカラースキームが同梱されています。このカラースキームは次のようにして変更することができます:
@example
:colorscheme macvim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If you prefer a dark background color, then type >
	:set bg=dark
after having loaded the "macvim" color scheme.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ダークカラーがお好みなら、"macvim" を読み込んだあとに次のように入力しましょう。
@example
:set bg=dark
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Use the |:colorscheme| command if you want to use another color scheme.  Note
that if you want to set syntax highlight colors manually, then you must either
create your own color scheme or add the line >
	let macvim_skip_colorscheme=1
to your ~/.vimrc (~/.gvimrc will not work).  Otherwise the "macvim" color
scheme will be loaded when the system gvimrc file is sourced and mess up your
changes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のカラースキームを使いたいのなら、|@ref{:colorscheme}| コマンドを使います。
@quotation
@strong{Note:} @*
シンタックスハイライトの色を手動で設定したい場合、自身のカラースキームを作成するか、~/@file{.vimrc} (~/@file{.gvimrc} ではうまくいかないでしょう) に次の行を加えるか、のどちらかをすることに注意してください。
@example
let macvim_skip_colorscheme=1
@end example
さもなければ、システムの @file{gvimrc} ファイルが読み込まれた時に "macvim" カラースキームが読み込まれるでしょう。そしてあなたが変更したものが台無しになるのです。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The color scheme uses the system "Highlight Color", which can be changed in
the "Appearance" pane of the System Preferences.  It also changes the
highlight color when a window becomes inactive.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カラースキームはシステムの "Highlight Color" を使います。これはシステム環境設定の "Appearance" パネルで変更することができます。window がアクティブでなくなったときの "Highlight Color" も変更することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Menus						*macvim-menus*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-menus}
@cindex macvim-menus
@section 5. メニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Menus in Mac OS X behave slightly different from other platforms.  For that
reason two new commands have been added to Vim.  To understand what these
commands do you must first understand how menus work on OS X.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Mac OS X でのメニューは他のプラットフォームとは少しばかり挙動が違います。そのため、Vim に 2 つの新しいコマンドが追加されています。これらのコマンドが何をするのかを理解するため、まずは OS X でのメニューがどのように動作するのかを理解しなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Each entry in a menu is called a "menu item".  With each menu item is
associated: a title, a key equivalent and an action message.  When a menu is
displayed the title is shown on the left and the key equivalent (if any) is
shown on the right.  Key equivalents enable you to access a menu item using
the keyboard instead of having to use the mouse.  When a menu item is clicked
it will send it's associated action message.  Actions can be used to instruct
MacVim to paste some text (paste:), open a new window (newWindow:), etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューのエントリは "menu item" と呼ばれます。メニュー項目はそれぞれが関連づけられています: タイトルと等価キー @{訳注: ショートカットキーのこと？@} とアクションメッセージ。

メニューが表示されたとき、タイトルが左側に表示され、(もしもあるなら) 等価キーが右側に表示されます。等価キーはメニュー項目にマウスを使う代わりに、キーボードを使ってアクセスすることを可能にします。

メニュー項目がクリックされると、それに関連付けられたアクションメッセージが送られます。アクションは MacVim にテキストをペースト (paste:) すること、新規 window を開くこと (newWindow:) などを指示するのに使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Certain actions are standard throughout OS X which is why MacVim must be able
to set these for each menu item.  (E.g. the menu item "Edit.Paste" must be
bound to the action "paste:" otherwise pasting won't work in dialogs since
that is the action that instructs them to paste something.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるアクションは OS X にすっかり標準化されています。MacVim はこれらをそれぞれのメニュー項目について設定しうるようになっていなければならないからです。(例えば、メニュー項目の "Edit.Paste" は "paste:" アクションに束縛されていなければなりません。そうでないと、ダイアログでペーストが機能しません。このアクションは何かをペーストすることを指示するからです。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Menus are configured using the |:macmenu| command and the |:macaction| command
can be used to send action messages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューは |@ref{:macmenu}| コマンドを使って設定され、|@ref{:macaction}| コマンドはアクションメッセージを送るのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:maca* *:macaction*
:maca[ction] {action:}	Send the message "action:" to the first responder.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:maca}
@anchor{:macaction}
@cindex :maca
@cindex :macaction
@item :maca[ction] @{action:@}
最初の responder にメッセージ "action:" を送ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The list of allowed actions can be seen by typing
			    :maca <C-d>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
可能なアクションのリストは次を入力することによって見ることができます。
@example
:maca <C-d>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			An attempt to send an action not listed here will
			result in an error.  This list is specified in a
			property list file called |Actions.plist|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここでリストされていないアクションを送ろうとすると、エラーになります。このリストは |@ref{Actions.plist}| と呼ばれるプロパティリストのファイルに記されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:macm* *:macmenu*
:macm[enu] {menu} {key}={arg} ...
			Set Mac specific properties for {menu}.  The
			properties that can be set are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:macm}
@anchor{:macmenu}
@cindex :macm
@cindex :macmenu
@item :macm[enu] @{menu@} @{key@}=@{arg@} ...
@{menu@} の Mac 特有のプロパティを設定します。設定できるプロパティは:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			    action	the action this menu sends
			    alt		"yes" if alternate of previous menu
			    key		the key equivalent of this menu
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item action @tab このメニューが送るアクション
@item alt @tab 前のメニューの切り替えなら "yes" @{訳注: メニューを表示して option (alt) キーを押すと別のメニューが表示されるあれのこと？@}
@item key @tab このメニューの等価キー
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			This command must be used in a startup file, for
			example in "~/.gvimrc".  It has no effect otherwise.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドは起動ファイル中で使われなければなりません。例えば "~/@file{.gvimrc}"。そうでなければ効果がありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			For convenience, a menu with "action=name:" which is
			bound to <Nop> will act as if bound to
			":maca name:<CR>".  Thus, if "Menu.Item" is given by
			    :an Menu.Item <Nop>
			    :macm Menu.Item action=name:
			then ":emenu Menu.Item" is equivalent to
			":maca name:".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
便宜上、<Nop> に束縛された "action=name:" というメニューは、":maca name:<CR>" と束縛されたかのように動作します。それゆえ、もし "Menu.Item" が次のように与えられているのなら、
@example
:an Menu.Item <Nop>
:macm Menu.Item action=name:
@end example
":emenu Menu.Item" は次と等価です。
@example
":maca name:"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The key equivalent is specified with the <D-..>
			syntax.  This is case-sensitive, so <D-a> means Cmd-a
			whereas <D-A> means Cmd-Shift-a.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
等価キーは <D-..> 構文で明示されています。これは大文字小文字を区別するので、@kbd{<D-a>} は @key{Cmd}-@key{a} を意味し、@kbd{<D-A>} は @key{Cmd}-@key{Shift}-@key{a} を意味します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Note that key equivalents must contain the Cmd
			modifier flag (<D-..>), and they take precedence over
			normal mappings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
等価キーは Cmd 修飾フラグ (<D-..>) を含んでいなければならないことに注意してください。そしてこれらは普通のマッピングよりも優先されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Use the syntax "key=<nop>" to clear the key equivalent
			of a menu.  This can be used to free up a key
			combination that is set in the system gvimrc so that
			it may be mapped to using ":map".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの等価キーをクリアするには構文 "key=<nop>" を使います。これはシステムの @file{gvimrc} で設定されているキーコンビネーションを解放するのに使うことができます。そのため、":map" を使ってマップされるでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Recognised values of "alt" are "0", "no", "1", and
			"yes".  The default is "no".  An alternate menu must
			have the same key equivalent as the previous menu,
			except the modifier flags must differ.  The alternate
			menu is by default hidden and only shows up when the
			modifier is held down.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"alt" で認識される値は "0", "no", "1", と "yes" です。デフォルトは "no" です。alternate (切り替え) メニューは、修飾フラグが異なっていなければならないことを除いて、前のメニューとして同様の等価キーを持っていなければなりません。alternate メニューはデフォルトで隠されていて、修飾キーが押された時にだけ表示されます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here are some examples on how to use these commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドの使い方の例をいくつかあげます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Create a menu item with title "New Window" under the "File" menu, with key
equivalent Cmd-n, which opens a new window when selected: >
	:an 10.290 File.New\ Window <Nop>
	:macm File.New\ Window action=newWindow: key=<D-n>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item "File" メニューの下に "New Window" というタイトル、等価キーは @key{Cmd}-@key{n} でメニュー項目を作成します。これは選択されると新規 window を開きます:
@example
:an 10.290 File.New\ Window <Nop>
:macm File.New\ Window action=newWindow: key=<D-n>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Change the key equivalent to cycle through tabs to Cmd-Left/Right: >
	:macm Window.Previous\ Tab  key=<D-Left>
	:macm Window.Next\ Tab	    key=<D-Right>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @key{Tab} を @key{Cmd}-@key{Left}/@key{Right} により、等価キーを回帰的に変更します:
@example
:macm Window.Previous\ Tab  key=<D-Left>
:macm Window.Next\ Tab      key=<D-Right>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. Create a mapping in normal mode which closes the current tab/window: >
	:map <C-w> :maca performClose:<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ノーマルモードでのマッピングを作成します。これは現在のタブや window を閉じます:
@example
:map <C-w> :maca performClose:<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
4. Free up Cmd-t and remap it to open a file browser in a split view: >
	macm File.New\ Tab key=<nop>
	nmap <D-t> :sp .<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @key{Cmd}-@key{t} を解放し、分割画面でファイルビューアを開くように再マップします:
@example
macm File.New\ Tab key=<nop>
nmap <D-t> :sp .<CR>
@end example
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note: These two lines must be added to .gvimrc else the first line will fail.
The second line is case sensitive, so <D-T> (Cmd-Shift-t) is not the same as
<D-t> (Cmd-t)!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
この 2 行は @file{.gvimrc} に記述されていなければならないことに注意してください。そうでなければ、1 行目は失敗するでしょう。2 行目は大文字小文字を区別しますので、@kbd{<D-T>} (@key{Cmd}-@key{Shift}-@key{t}) は @kbd{<D-t>} (@key{Cmd}-@key{t}) と同じではありません！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The default menus are set up in "$VIMRUNTIME/menu.vim".  Take a look at that
file for more examples on how to set up menus.  Note: When no window is open a
minimal default menu is used.  The default menu is set up in MainMenu.nib
which resides in "Resources/English.lproj/" folder inside the app bundle.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトのメニューは "@env{$VIMRUNTIME}/@file{menu.vim}" で設定されています。メニューがどのように設定されているかのより多くの例はこのファイルを見ましょう。
@quotation
@strong{Note:} @*
window が無い状態ではデフォルトのメニューが使われることに注意してください。デフォルトのメニューは @file{MainMenu.nib} で設定されています。これは bundle アプリケーション内の "Resources/English.lproj/" フォルダにあります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Actions.plist*
Some action messages would not be suitable to call from within Vim, so there
is a dictionary called "Actions.plist" (in the Resources folder of the
application bundle) which contains all actions that may be called.  The key in
this dictionary is the name of the action message (case sensitive), the value
is not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Actions.plist}
@cindex Actions.plist
いくつかのアクションメッセージは Vim の範疇から呼ぶに適していません。そのため "Actions.plist" と呼ばれる (bundle アプリケーションの Resources フォルダ内に) 辞書 があります。ここには呼ばれるであろうすべてのアクションが含まれています。この辞書の key はアクションメッセージの (大文字小文字を区別する) 名前で、value は使われていません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Hint: The |:macaction| command supports command-line completion so you can
enter ":maca<Space><C-d>" to see a list of all available actions.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Hint:} @*
|@ref{:macaction}| コマンドはコマンドラン補完をサポートしています。ですので、すべての利用できるアクションのリストを ":maca@key{<Space>}@kbd{<C-d>}" と入力することで見ることができます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here is a random assortment of actions from Actions.plist which might be
useful.  
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Actions.plist から役に立ちそうなアクションを未分類であげてみます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Action				Description ~
fileOpen:			Show "File Open" dialog
findNext:			Search forward using the "Find Pasteboard"
findPrevious:			Search backward using the "Find Pasteboard"
fontSizeDown:			Decrease font size
fontSizeUp:			Increase font size
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@headitem Action @tab 説明
@item fileOpen: @tab "File Open" ダイアログを開く
@item findNext: @tab "Find Pasteboard" を使って次を検索
@item findPrevious: @tab "Find Pasteboard" を使って前を検索
@item fontSizeDown: @tab フォントのサイズを小さくする
@item fontSizeUp: @tab フォントのサイズを大きくする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
hide:				Hide MacVim
miniaturizeAll:			Minimize all windows to the dock
newWindow:			Open a new (empty) window
orderFrontCharacterPalette:	Show the the "Special Characters" dialog
orderFrontFontPanel:		Show the Font panel
orderFrontPreferencePanel:	Show the Preferences panel
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item hide: @tab MacVim を隠す
@item miniaturizeAll: @tab すべての window を Dock に収納する
@item newWindow: @tab (空の) 新規 window を開く
@item orderFrontCharacterPalette: @tab "Special Characters" ダイアログを開く
@item orderFrontFontPanel: @tab フォントパネルを開く
@item orderFrontPreferencePanel: @tab 環境設定パネルを開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
performMiniaturize:		Minimize window to the dock
performZoom:			Zoom window (same as clicking the green blob)
terminate:			Quit MacVim
zoomAll:			Zoom all windows
_cycleWindows:			Select next window (similar to <D-`>)
_cycleWindowsBackwards:		Select previous window (similar to <D-S-`>)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item performMiniaturize: @tab window を Dock に収納する
@item performZoom: @tab (緑色のボタンを押したのと同じように) window を拡大する
@item terminate: @tab MacVim を終了する
@item zoomAll: @tab すべての window を拡大する
@item _cycleWindows: @tab (@kbd{<D-`>} と同じように) 次の window を選択する
@item _cycleWindowsBackwards: @tab (@kbd{<D-S-`>} と同じように) 前の window を選択する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Toolbar						*macvim-toolbar*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-toolbar}
@cindex macvim-toolbar
@section 6. ツールバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The toolbar in MacVim works just like in the other GUIs (see |gui-toolbar|),
with the addition of two separator items (see |menu-separator|).  You can use
them as follows: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim のツールバーは、2 つのセパレーター項目 (|@ref{menu-separator}| を参照) を加えて、他の GUI (|@ref{gui-toolbar}| 参照) と同じように動作します。次のように使うことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:an ToolBar.-space1-        <Nop>
	:an ToolBar.-flexspace2-    <Nop>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:an ToolBar.-space1-        <Nop>
:an ToolBar.-flexspace2-    <Nop>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The first example creates an empty space on the toolbar, the second creates an
empty space which will shink or expand so that the items to the right of it
are right-aligned.  A space (flexspace) will be created for any toolbar item
whose name begins with "-space" ("-flexspace") and ends with "-"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初の例はツールバーに空のスペースを作成します。次の例は伸縮する空のスペースを作成します。そのため、右側の項目は右揃えにされます。スペース (flexspace) は、"-space" ("-flexspace") ではじまり "-" で終わる名前の、どのようなツールバー項目も作成します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Toolbar icons should be tiff, png or icns, of dimension 32x32 or 24x24 pixels.
The larger size is used when 'tbis' is "medium" or "large", otherwise the
smaller size is used (which is the default).  If the icon file only contains
one dimension then Mac OS X will scale the icon to the appropriate dimension
if necessary.  To avoid this, use a file format which supports multiple
resolutions (such as icns) and provide both 32x32 and 24x24 versions of the
icon.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールバーのアイコンは、32x32 か 24x24 のサイズの tiff, png, icns 形式である必要があります。大きい方のサイズは '@option{tbis}' が "@var{medium}" か "@var{large}" の時に使われます。そうでなければ小さい方のサイズが (デフォルトとして) 使われます。

アイコンファイルが 1 つのサイズしかないとき、Mac OS X は必要があればアイコンを適切なサイズに調整します。これを回避するために、(icns のような) 複数の解像度をサポートするファイル形式を使います。そして 32x32 と 24x24 の両方のアイコンを準備しておきます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: Only a subset of the builtin toolbar items presently have icons.  If no
icon can be found a warning triangle is displayed instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
アイコンを持っているのは、現在は組み込みのツールバー項目のサブセットだけであることに注意してください。もしもアイコンが見つからなければ、変わりに警告三角が表示されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. Dialogs						*macvim-dialogs*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-dialogs}
@cindex macvim-dialogs
@section 7. ダイアログ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Dialogs can be controlled with the keyboard in two ways.  By default each
button in a dialog is bound to a key.  The button that is highlighted by blue
is bound to Enter, any button with the title "Cancel" is bound to Escape, and
any button with the title "Don't Save" is bound to <D-d>.  Other buttons are
usually bound to the first letter in the title of the button.  There is no
visual feedback to indicate which letter a button is bound to, so sometimes
some experimentation might be required in order to figure out which key to
press.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ダイアログをキーボードでコントロールする方法は 2 つあります。デフォルトではダイアログのそれぞれのボタンはキーに束縛されています。青色でハイライトされているボタンは @key{Enter} に、"Cancel" ボタンは @key{Escape} に、"Don't Save" ボタンは @kbd{<D-d>} に束縛されています。

他のボタンはたいていボタンタイトルの最初の文字に束縛されています。ボタンがどの文字に束縛されているかの表示については視覚的なフィードバックはありません。そのため、どのキーを押せば良いのか理解するために試行錯誤が必要かもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The second way of controlling dialogs with the keyboard is to enable "Full
keyboard access" in the "Keyboard" pane of the System Preferences (you can
also toggle this on or off by pressing Ctrl-F7).  Once keyboard access is
enabled it is possible to move between buttons with Tab and pressing Space to
select the current button.  The current button is indicated with a blue
outline.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーボードでダイアログをコントロールする 2 つ目の方法は、システム環境設定の "Keyboard" パネルで "Full keyboard access" を有効にすることです (@key{Ctrl}-@key{F7} を押すことでオン・オフをトグルすることもできます)。

いったんキーボードアクセスが有効にされると、@kbd{Tab} でボタン間を移動し、@kbd{Space} を押すことで現在のボタンを選択することができるようになります。現在のボタンは青枠で示されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. System services					*macvim-services*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-services}
@cindex macvim-services
@section 8. システムサービス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
MacVim supports two system services.  These can be accessed from the MacVim
submenu in the Services menu or by right-clicking a selection.  For services
to work, MacVim.app should be located in the /Applications folder.  (You might
have to logout and then login again before Mac OS X detects the MacVim
services.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim は 2 つのシステムサービスをサポートしています。これらは MacVim のサービスメニュー (Services ▶) のサブメニューから、もしくはマウスの右クリックで表示されるポップアップメニューからアクセスすることができます。

サービスが動作するために MacVim.app は /Applications フォルダ内に置かれている必要があります。(Mac OS X が MacVim のサービスを見つける前に、ログアウトして再度ログインする必要があるかもしれません。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These are the currently supported services:
	* New MacVim Buffer With Selection: Create a new buffer and paste the
	  currently selected text.
	* New MacVim Buffer Here: Create a new buffer and set the current
	  directory to the file or folder that is selected in the Finder.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在サポートされているサービスは:
@itemize
@item
New MacVim Buffer With Selection: 新規バッファを作成して、現在選択しているテキストをペーストします。
@item
New MacVim Buffer Here: 新規バッファを作成して、現在のディレクトリを Finder で選択されているファイルもしくはフォルダに設定します。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The services respect the "Open files from applications" setting in the general
preferences.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Services は一般設定にある "Open files from applications" を尊重します。@{訳注: 右クリックで表示されるポップアップメニューにあるやつかな？@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
9. mvim:// URL handler				*mvim://* *macvim-url-handler*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{mvim://}
@anchor{macvim-url-handler}
@cindex mvim://
@cindex macvim-url-handler
@section 9. mvim:// URL ハンドラー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
MacVim supports a custom URL handler for "mvim://" URLs. The handler is
supposed to be compatible to TextMate's URL scheme as documented at >
	http://blog.macromates.com/2007/the-textmate-url-scheme/.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim は "mvim://" URL のために、カスタム URL ハンドラーをサポートしています。このハンドラーは TextMate と互換性のある URL スキームをサポートしています。これについてのドキュメントは下記。

@url{http://blog.macromates.com/2007/the-textmate-url-scheme/}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Currently, this means that the format is >
	mvim://open?<arguments>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のところ、次のフォーマットが使えます。
@example
mvim://open?<arguments>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
where "arguments" can be:
	* url — the actual file to open (i.e. a file://... URL), if you leave
		out this argument, the frontmost document is implied
	* line — line number to go to (one based)
	* column — column number to go to (one based)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"arguments" が取りうるのは:
@multitable @columnfractions .2 .8
@item url @tab 開きたい実際のファイル (すなわち file://... URL)。この引数を省略したなら、最前面の書類が指定されます。
@item line @tab 移動したい行番号 (1 から始まる)
@item column @tab 移動したい列番号 (1 から始まる)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example, the link >
	mvim://open?url=file:///etc/profile&line=20
will open the file /etc/profile on line 20 when clicked in a web browser.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、次のリンクは
@example
mvim://open?url=file:///etc/profile&line=20
@end example
ウェブブラウザーでクリックされたときに、/etc/@file{profile} ファイルの 20 行目を開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that url has to be a file:// url pointing to an existing local file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
URL は存在しているローカルファイルを差す file:// URL になっている必要があることに注意してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
10. Keyboard shortcuts					*macvim-shortcuts*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-shortcuts}
@cindex macvim-shortcuts
@section 10. キーボードショートカット
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most keyboard shortcuts in MacVim are bound to menu items and can be
discovered by looking through the menus (see |macvim-menus| on how to create
your own menu shortcuts, see |cmd-key| on how to map your own commands to
Cmd-key shortcuts).  The remaining shortcuts are listed here:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim ではほとんどのキーボードショートカットがメニュー項目と束縛されていて、メニューに目を通すことで見つけることができます (自身のメニューショートカットを作成するには |@ref{macvim-menus}| を、自身のコマンドを @key{Cmd} キーショートカットにマップするには |@ref{cmd-key}| を参照)。残りのショートカットは次にあげます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-.* *<D-.>*
Cmd-.			Interrupt Vim.  Unlike Ctrl-C which is sent as normal
			keyboard input (and hence has to be received and then
			interpreted) this sends a SIGINT signal to the Vim
			process.  Use this shortcut if the Vim process appears
			to have locked up and is not responding to key presses.
			This Cmd-key combination cannot be unmapped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{Cmd-.}
@anchor{<D-.>}
@cindex Cmd-.
@cindex <D-.>
@item Cmd-.
Vim を中断します。通常のキーボード入力 (したがって、受け取られなければならず、それから解釈されます) として送られる @kbd{Ctrl-C} とは違い、これは Vim プロセスに SIGINT シグナルを送ります。

もしも Vim のプロセスがロックアップしているように見えて、キー入力を受付けないのであれば、このショートカットを使います。この @key{Cmd} キーの組み合わせはアンマップすることができません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-`* *<D-`>*
Cmd-`			Cycle to the next window.  On an American keyboard the
			`-key is located under the Esc-key.  On European
			keyboards this key is often adjacent to the left
			Shift-key and it may be not even be marked with "`".
			This Cmd-key combination can only be unmapped via the
			"Keyboard" System Preferences.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Cmd-`}
@anchor{<D-`>}
@cindex Cmd-`
@cindex <D-`>
@item Cmd-`
window を回帰的に切り替えます。アメリカのキーボード上では、@key{`} キーは @key{Esc} キーの下に位置しています。ヨーロッパのキーボード上では、このキーは左の @key{Shift} キーの近くにあり、"@samp{`}" と記されていないかもしれません。この @key{Cmd} キーの組み合わせはシステム環境設定の "Keyboard" からでしかアンマップすることができません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-Left*  *<D-Left>*
Cmd-Left		Move cursor to the beginning of the line
			(see |cmd-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Cmd-Left}
@anchor{<D-Left>}
@cindex Cmd-Left
@cindex <D-Left>
@item Cmd-Left
カーソルを行の先頭に移動します (|@ref{cmd-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-Right* *<D-Right>*
Cmd-Right		Move cursor to the end of the line (see |cmd-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Cmd-Right}
@anchor{<D-Right>}
@cindex Cmd-Right
@cindex <D-Right>
@item Cmd-Right
カーソルを行の末尾に移動します (|@ref{cmd-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-Up*    *<D-Up>*
Cmd-Up			Move cursor to the first line (see |cmd-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Cmd-Up}
@anchor{<D-Up>}
@cindex Cmd-Up
@cindex <D-Up>
@item Cmd-Up
カーソルを最初の行 (バッファの先頭) に移動します (|@ref{cmd-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Cmd-Down*  *<D-Down>*
Cmd-Down		Move cursor to the last line (see |cmd-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Cmd-Down}
@anchor{<D-Down>}
@cindex Cmd-Down
@cindex <D-Down>
@item Cmd-Down
カーソルを最後の行 (バッファの末尾) に移動します (|@ref{cmd-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Alt-Left*  *<M-Left>*
Alt-Left		Move cursor to the beginning of the previous word
			(see |alt-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Alt-Left}
@anchor{<M-Left>}
@cindex Alt-Left
@cindex <M-Left>
@item Alt-Left
カーソルを前の単語の先頭に移動します (|@ref{alt-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Alt-Right* *<M-Right>*
Alt-Right		Move cursor to the beginning of the next word
			(see |alt-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Alt-Right}
@anchor{<M-Right>}
@cindex Alt-Right
@cindex <M-Right>
@item Alt-Right
カーソルを次の単語の先頭に移動します (|@ref{alt-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Alt-Up*    *<M-Up>*
Alt-Up			Move cursor one paragraph forward (see |alt-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Alt-Up}
@anchor{<M-Up>}
@cindex Alt-Up
@cindex <M-Up>
@item Alt-Up
カーソルを上の段落に移動します (|@ref{alt-movement}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Alt-Down*  *<M-Down>*
Alt-Down		Move cursor to the previous paragraph
			(see |alt-movement|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Alt-Down}
@anchor{<M-Down>}
@cindex Alt-Down
@cindex <M-Down>
@item Alt-Down
カーソルを次の段落に移動します (|@ref{alt-movement}| を参照)。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*cmd-movement* *alt-movement*
The above mappings involving Cmd/Alt + arrow key are enabled by default in the
system gvimrc file "$VIM/gvimrc".  You can quickly disable all of these by
adding the following lines to your "~/.vimrc" (not .gvimrc) file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cmd-movement}
@anchor{alt-movement}
@cindex cmd-movement
@cindex alt-movement
上記の @key{Cmd}/@key{Alt} + 矢印キーを含むマッピングは、デフォルトでシステムの gvimrc ファイル "@env{$VIM}/@file{gvimrc}" で有効にされています。これらの全ては "~/@file{.vimrc}" (@file{.gvimrc} ではない) に次の行を追加することで、素速く無効にすることができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	if has("gui_macvim")
	  let macvim_skip_cmd_opt_movement = 1
	endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if has("gui_macvim")
  let macvim_skip_cmd_opt_movement = 1
endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note: These are the only key mappings that MacVim makes (not counting menu key
equivalents which are not set up with :map).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
MacVim が作成するキーマッピングだけであることに注意してください (:map では設定されないメニューの等価キーは含みません)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |macvim-shift-movement| if you want Shift to select text when used in
conjunction with the above Cmd/Alt movement shortcuts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上記の @key{Cmd}/@key{Alt} 移動のショートカットと共に @key{Shift} でテキストを 選択したいなら、|@ref{macvim-shift-movement}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*cmd-key* *cmd-shortcuts*
Creating key mappings that involve the Cmd key (<D-..> in Vim notation) can
sometimes be slightly involved.  Here are all the things you need to consider:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cmd-key}
@anchor{cmd-shortcuts}
@cindex cmd-key
@cindex cmd-shortcuts
@key{Cmd} キー (Vim の記法では <D-..>) を含むキーマッピングの作成は、ときどき少しばかり難解になりえます。ここでは考察するのに必要なすべてのことをあげます：
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Make sure the shortcut is not used by a menu item by looking through the
  menus.  If it is then you need to unbind it before you can map to it.  This
  is described under the help for the |:macmenu| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item
ショートカットはメニューに目を通してメニュー項目によって使われていないようにします。もしも使われているのなら、マップをする前に束縛を解放しておく必要があります。これは |@ref{:macmenu}| コマンドのヘルプの下方に説明されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Bindings to <D-..> are case sensitive: <D-d> is not the same as <D-D>.  If
  you want to map something to Cmd+Shift+d, then you need to use <D-D>, not
  <D-S-d> or <D-S-D>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
<D-..> への束縛は、大文字小文字を区別します: <D-d> は <D-D> と同じではありません。何かを @key{Cmd}+@key{Shift}+@key{d} にマップしたいのなら、<D-S-d> や <D-S-D> ではなく、<D-D> を使う必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Some command key shortcuts are reserved by Mac OS X and cannot be mapped to
  (e.g. <D-Tab>).  However, some of these shortcuts can be freed up in the
  System Preferences under Keyboard (e.g. Cmd+Space).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
いくつかのコマンドキーショートカットは、Mac OS X によって予約されていて、それにはマップすることができません (例 <D-Tab>)。しかしながら、これらショートカットのいくつかは、システム環境設定の "Keyboard" で解放することができます (例 @key{Cmd}+@key{Space})。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- A few command key mappings are set up by MacVim, see |cmd-movement|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
コマンドキーマッピングは少しだけ MacVim で設定されています。|@ref{cmd-movement}| を参照してください。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
11. Trackpad gestures					*macvim-gestures*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-gestures}
@cindex macvim-gestures
@section 11. トラックパッドジェスチャー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
MacVim supports trackpad swipe gestures.  By default this can be used to
navigate back/forward in the help (try it!).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MacVim はトラックパッドのスワイプジェスチャーをサポートしています。デフォルトではヘルプの中で back/forward ナビゲーションで使うことができます (やってみよう！)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Each gesture generates one of the following Vim pseudo keys:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それそれのジェスチャーは次にあげる Vim の疑似キーを生成します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						 *<SwipeLeft>* *<SwipeRight>*
	Generated when swiping three fingers across the trackpad in a
	horizontal direction.  The Apple Magic Mouse generates these
	events when swiping two fingers in a horizontal direction.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<SwipeLeft>}
@anchor{<SwipeRight>}
@cindex <SwipeLeft>
@cindex <SwipeRight>
トラックパッドを水平方向に 3 つ指でのスワイプしたときに生成されます。Apple のマジックマウスは、水平方向に 2 つ指でスワイプしたときにこれらのイベントを生成します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						 *<SwipeUp>*   *<SwipeDown>*
	Generated when swiping three fingers across the trackpad in a
	vertical direction.  (Not supported by the Apple Magic Mouse.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{<SwipeUp>}
@anchor{<SwipeDown>}
@cindex <SwipeUp>
@cindex <SwipeDown>
トラックパッドを垂直方向に 3 つ指でのスワイプしたときに生成されます。(Apple のマジックマウスではサポートされていません。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can map these keys like with any other key using the |:map| family of
commands.  For example, the following commands map left/right swipe to change
to the previous/next tab in normal mode: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:map}| コマンド類を使って他のキーにこれらのキーを好きなようにマップすることができます。例えば、下記のコマンドはノーマルモードで left/right スワイプをタブの previous/next にマップします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	nmap <SwipeLeft> gT
	nmap <SwipeRight> gt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
nmap <SwipeLeft> gT
nmap <SwipeRight> gt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As another example, here is how to switch buffers by swiping left/right: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もうひとつの例。これは left/right にスワイプすることで、バッファを切り替える方法です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	nmap <SwipeLeft> :bN<CR>
	nmap <SwipeRight> :bn<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
nmap <SwipeLeft> :bN<CR>
nmap <SwipeRight> :bn<CR>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See the section on |key-mapping| for more help on how to map keys.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーマッピングの方法のより詳しいヘルプは |@ref{key-mapping}| の節を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
12. International					*macvim-international*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-international}
@cindex macvim-international
@section 12. 国際化
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When editing non-English text it may be convenient to keep separate keyboard
layouts for normal and insert mode.  This is supported via the 'imd' option on
Mac OS X 10.5 or later (on 10.4 the 'imd' option support is not as useful as
it only switches between Roman and non-Roman input sources and it has been
known not to work very reliably).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
英語ではないテキストを編集しているときに、ノーマルモードと挿入モードでキーボードレイアウトが分かれたままになっていれば便利でしょう。これは Mac OS X 10.5 以降で '@option{imd}' オプションによってサポートされています (10.4 では '@command{imd}' オプションのサポートは、Roman 入力ソースと 非 Roman 入力ソースの切り替えのみで、役に立ちません。またぜんぜん頼りにならないことがわかっています)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example: When 'noimd' is enabled (i.e. IM is enabled) the input source is
saved when toggling between normal and insert mode, so you can use a US layout
in normal mode then switch to insert mode and choose a Swedish layout.  When
you go back to normal mode the US layout will be selected and when you enter
insert mode the Swedish layout is selected.  This also works when searching
for text etc. see 'imc', 'imi', 'ims'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば: '@option{noimd}' が有効 (すなわち IM が有効) のときは、ノーマルモードと挿入モードを切り替えた最に入力ソースは保存されています。

そのため、ノーマルモードで US レイアウトを使うことができ、それから、挿入モードに移行して Swedish レイアウトを選択することができます。

ノーマルモードに再び戻ると、US レイアウトが選択されていることでしょう。そして、挿入モードに移行すれば、Swedish レイアウトが選択されています。

これはテキスト検索などのときにも動作します。|@ref{'imc'}|, |@ref{'imi'}|, |@ref{'ims'}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the layout used in normal mode is the layout used when 'noimd' is
set (i.e when IM is enabled).  If you find that MacVim switches to the
wrong layout when going back to normal mode, then select the layout you want
to use in normal mode and type ":set imd" followed by ":set noimd".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong {Note:} @*
ノーマルモードで使われるレイアウトは、'@option{noimd}' が設定されたとき (すなわち IM が有効にされたとき) に使われたレイアウトであることに注意してください。ノーマルモードに戻ったときに、MacVim が間違ったレイアウトに切り替わるようなら、ノーマルモードで使いたいレイアウトを選択し、"@command{:set noimd}" に続けて "@command{:set imd}" を入力してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
13. Known bugs/missing features				*macvim-todo*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-todo}
@cindex macvim-todo
@section 13. バグと未実装の機能
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This list is by no means exhaustive, it only enumerates some of the more
prominent bugs/missing features.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このリストは決して徹底的ではありません。いくつかのとても突出したバグや未実装の機能を列挙しただけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Localized menus are not supported.  Choosing anything but "English" in the
  "International" pane of "System Prefences" may break the menus (and
  toolbar).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item
ローカライズメニューはサポートされていません。システム環境設定の "International" パネルで英語以外の何かを選択すると、メニュー (とツールバー) が壊れるかもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Some Unicode characters are not handled well (e.g. nonspacing marks)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
いくつかの Unicode 文字 (例えば nonspacing marks) をうまく扱うことができません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Sometimes multibyte characters look "too wide", i.e. they overlap the
  following character.  It might help to change 'ambiwidth', or override the
  automatic font substitution by setting 'guifontwide' manually.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
マルチバイト文字がときどき "広過ぎる" ように見えます。すなわち、続く文字と重なっているのです。'@option{ambiwidth}' を変更するか、手動で '@option{guifontwide}' を設定することによって、自動的に代替フォントで上書きすると良いかもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Printing.  As a temporary solution <D-p> creates a PostScript file which is
  then opened in Preview where it may be printed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
印刷について。一時的な解決として、@kbd{<D-p>} が PostScript ファイルを生成し、これを Preview で開きます。ここから印刷すれば良いでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The toolbar looks ugly and is not very useful.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ツールバーの見た目が悪く使い易くありません。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you find new bugs then please post your findings to the vim_mac mailing
list:							*vim_mac_group*   >
	http://groups.google.com/group/vim_mac
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新たなバグを発見したなら、どうか vim_mac メーリングリストに連絡してください:

@anchor{vim_mac_group}
@cindex vim_mac_group
@url{http://groups.google.com/group/vim_mac}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is also the best place for making feature requests as well as for asking
general questions about MacVim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここはまた機能の要求をしたり MacVim に関する一般的な質問をするには良い場所です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
14. Hints						*macvim-hints*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{macvim-hints}
@cindex macvim-hints
@section 14. ヒント
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this section some general (not necessarily MacVim specific) hints are
given.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この節ではいくつかの一般的な (必ずしも MacVim に特有のものではない) ヒントを示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You try opening a bunch of files in tabs but not all files get opened in their
own tab.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
タブで複数のファイルを開こうとしたのに、タブですべてのファイルが開かれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
To get around this, set 'tabpagemax' to something big in your .gvimrc file
(e.g. ":set tabpagemax=100").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
これを回復するには、@file{.gvimrc} ファイルで '@option{tabpagemax}' に大きな値を設定しましょう (例 ":set tabpagemax=100").
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You want to open a file in a tab in an already opened window, but typing "mvim
filename" in Terminal opens it up in a separate window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
すでに開かれた window 内のタブでファイルを開きたいのに、ターミナルで "mvim filename" と入力すると 別の window で開かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
Use the |--remote-tab| switch.  If you have several windows open you might
have to specify which window you want the file to open in by using the
|--servername| switch.  The title of a window usually ends in something like
"VIM" or "VIM3" --- this is the server name of that window.  So to open a file
named "foobar.txt" in a window whose title ends in "VIM3" you would type (the
order of the arguments matters): >
	mvim --servername VIM3 --remote-tab foobar.txt
For more information, consult the |client-server| manual page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
|@ref{--remote-tab, , @minus{}@minus{}remote-tab}| スイッチを使います。もしもいくつかの window が開かれているなら、|@ref{--servername, , @minus{}@minus{}servername}| スイッチを使うことによって、ファイルを開きたい window を指定しなければならないでしょう。

たいてい window のタイトルは "VIM" や "VIM3" のようなもので終っています。@minus{}@minus{}@minus{} これはその window のサーバー名です。
ですから、タイトルが "VIM3" で終わっている window で "foobar.txt" という名前のファイルを開くには、次のように入力します (引数の順番は重要です):
@verbatim
mvim --servername VIM3 --remote-tab foobar.txt
@end verbatim
より多くの情報は、|@ref{client-server}| マニュアルページを調べましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You like to be able to select text by holding down shift and pressing the
arrow keys and find the Vim way of selecting text strange.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
テキストを @key{shift} キーを押しながら矢印キーで選択できるのが好みで、選択したテキストを Vim で検索すると変です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
See |macvim-shift-movement|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
|@ref{macvim-shift-movement}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You do not want MacVim to set up any key mappings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
MacVim にどんなキーマッピングも設定したくありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
See |cmd-movement|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
|@ref{cmd-movement}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
Enabling localized menus breaks the toolbar and the menus as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
ローカライズメニューを有効にすると、ツールバーもメニューも変になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
This is a known problem, see |macvim-todo|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
これは知られている問題です。|@ref{macvim-todo}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
When you click the (green) zoom button you want the window to maximize
horizontally as well as vertically.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
(緑色の) ズームボタンを押したとき、window を水平と垂直方向に最大化したい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
Hold down Cmd and click the zoom button.  If you prefer this to be the default
action, then set the user default MMZoomBoth (see |macvim-prefs|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
@key{Cmd} を押しながらズームボタンをクリックします。もしもこれがデフォルトの挙動であることが好みであれば、ユーザーデフォルトの MMZoomBoth を設定してください (|@ref{macvim-prefs}| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
Typing feels sluggish when the cursor is just before a right bracket (i.e.
')', '}', or ']').
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
カーソルが右のブラケット (すなわち ')', '@}', や ']') の前にあると、タイピングが緩慢な感じになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
Disable the "matchparen" plugin (see |matchparen|) by typing :NoMatchParen.
If that helps, then you can permanently disable "matchparen" by adding the
following line to your "~/.vimrc": >
	let loaded_matchparen=1
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
:NoMatchParen を入力することで "matchparen" プラグイン (|@ref{matchparen}| を参照) を無効にします。

もしもこれが助けになれば、次の行を "~/@file{.vimrc}" に追加することで、恒久的に "matchparen" を無効にすることができます:
@example
let loaded_matchparen=1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Scenario: ~
You want to use MacVim as an editor for some external application.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Scenario:} @*
MacVim を他のアプリケーションの外部エディタとして使いたい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
If the external application lets you set a program to execute then something
like "mvim -f" might be all you need (the "-f" switch ensures that the "mvim"
script returns only after you close the editor window, otherwise "mvim"
returns immediately). If the external program honors the EDITOR environment
variable (e.g Git does this) then you may get away by adding the following
line to your "~/.profile": >
	export EDITOR='mvim -f'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
外部アプリケーションが実行するプログラムを設定することを許可しているのであれば、"mvim -f" のようなものが必要とすることのすべてです ("-f" スイッチは、"mvim" スクリプトがエディタの window を閉じたあとでのみ返すことを確実にします。そうでなければ "mvim" は直ちに返します)。

もしも外部プログラムが @env{EDITOR} 環境変数を尊重するのであれば (例えば Git はこうなっている)、"~/@file{.profile}" に次の行を追加することで回避できるでしょう:
@example
export EDITOR='mvim -f'
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If you have not installed the "mvim" script in your path you can provide the
path to the Vim binary instead.  Thus, if "MacVim.app" resides in the
Applications folder then you would use the following line: >
	export EDITOR='/Applications/MacVim.app/Contents/MacOS/Vim -g -f'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パス中に "mvim" スクリプトがインストールされていないのであれば、Vim バイナリへのパスを代わりに指定することができます。したがって、"MacVim.app" が Applications フォルダに存在しているなら、次の行を使いましょう:
@example
export EDITOR='/Applications/MacVim.app/Contents/MacOS/Vim -g -f'
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You have set MacVim to open from an external program and when you finish
editing (by closing the MacVim window) you want the external program to regain
focus.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
MacVim を外部プログラムから開くように設定していて、(MacVim window を閉じて) 編集を終了したときに、外部プログラムにフォーカスを戻したい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
Use the VimLeave autocommand to hide MacVim when the window closes: >
	au VimLeave * maca hide:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
window を閉じたときに MacVim を隠すために VimLeave 自動コマンドを使います:
@example
au VimLeave * maca hide:
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Assuming your external program has a setting for which command to execute to
bring up an editor, you would set that option to something like: >
	mvim -f -c "au VimLeave * maca hide:"
(See the above Scenario for an explanation of the "-f" switch.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
外部プログラムがエディタを起動するためにコマンドを実行するように設定されていると仮定するならば、次のようなオプションを設定するとよいでしょう:
@verbatim
mvim -f -c "au VimLeave * maca hide:"
@end verbatim
(上記の "-f" スイッチの説明の Scenario を参照してください。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You would like to remap Caps Lock to Esc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
@key{Caps Lock} を @key{Esc} にリマップしたい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
The app "PCKeyboardHack" can be used to remap Caps Lock.  It is available as a
free download from: >
	http://pqrs.org/macosx/keyremap4macbook/extra.html
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
"PCKeyboardHack" アプリケーションは Caps Lock をリマップすることに使えます。以下から自由にダウンロードすることができます:

@url{http://pqrs.org/macosx/keyremap4macbook/extra.html}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
On some Apple keyboards the Caps Lock key doesn't immediately register and
this makes Caps Lock "drop" key presses.  To work around this problem go into
the "Keyboard" System Preference and remap Caps Lock to Ctrl first (click the
"Modifier Keys..." button).  This trick may also be necessary if the Caps Lock
light turns on/off despite having remapped to Esc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

いくつかの Apple キーボードでは @key{Caps Lock} キーは即時に登録できません。そしてこれは @key{Caps Lock} のキー入力を "取りこぼす" ようになります。この問題を回避するために、システム環境変数 "Keyboard" に移動して、まずは @key{Caps Lock} を @key{Ctrl} にリマップします ("Modifier Keys..." ボタンを押します)。


もしも @key{Esc} にリマップしているにも関わらず、@key{Caps Lock} のライトがオン・オフするのであれば、このトリックが必要になるかもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You have problems creating custom mappings involving the Cmd key.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
@key{Cmd} キーを含むカスタムキーマッピングを作成するのに問題があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
To bind to a key involving Cmd you use the "<D-..>" syntax.  Many Cmd-key
mappings are already used by the menus so if your mapping doesn't work then
the solution is usually to first unmap the menu binding (see |macvim-menus|,
in particular read the end of that section).  Also see the section on
|macvim-shortcuts| for some Cmd-key combinations which are not used by the
menus but still need to be freed up before they can be used in custom bindings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
@key{Cmd} を含むキーを束縛するために、"<D-..>" 構文を使います。

多くの @key{Cmd} キーマッピングはメニューによってすでに使われています。そのため、もしあなたのマッピングが動作しないのであれば、解決策は通常、はじめにメニューの束縛をアンマップすることです (|@ref{macvim-menus}| を参照。特に節の終わりを読みましょう)。

また、メニューによって使われているのではなく、カスタムバインディングで使われる前になおも解放される必要のある @key{Cmd} キーの組み合わせのためには、|@ref{macvim-shortcuts}| の節を確認してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scenario: ~
You can't find the information on MacVim you thought should be in this manual
page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Scenario:} @*
マニュアルページの中に思うように MacVim の情報を見つけられません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Solution: ~
Post your question on the |vim_mac| mailing list and wait for an answer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@strong{Solution:} @*
|@ref{vim_mac}| メーリングリストに質問を投稿してください。そして解答を待ちましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:sw=4:ts=8:ft=help:norl:
@end ifset
