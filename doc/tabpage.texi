@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node tabpage.txt, , , 目次
@unnumbered タブページを操作するコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*tabpage.txt*   For Vim version 8.1.  Last change: 2018 Mar 29


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*tabpage.txt*   For Vim バージョン 8.1.  Last change: 2018 Mar 29


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Editing with windows in multiple tab pages.		*tab-page* *tabpage*

The commands which have been added to use multiple tab pages are explained
here.  Additionally, there are explanations for commands that work differently
when used in combination with more than one tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tab-page}
@anchor{tabpage}
@cindex tab-page
@cindex tabpage
タブページの使い方

タブページを使うために追加されたコマンドについて説明します。複数のタブページを開いていると違う働きをするコマンドについても説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Introduction			|tab-page-intro|
2. Commands			|tab-page-commands|
3. Other items			|tab-page-other|
4. Setting 'tabline'		|setting-tabline|
5. Setting 'guitablabel'	|setting-guitablabel|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. はじめに @tab |@ref{tab-page-intro}|
@item 2. コマンド @tab |@ref{tab-page-commands}|
@item 3. その他 @tab |@ref{tab-page-other}|
@item 4. '@option{tabline}' の設定 @tab |@ref{setting-tabline}|
@item 5. '@option{guitablabel}' の設定 @tab |@ref{setting-guitablabel}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{Vi does not have any of these commands}
{not able to use multiple tab pages when the |+windows| feature was disabled
at compile time}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi にはこれらのコマンドはありません@}

@{|@ref{+windows}| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Introduction						*tab-page-intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tab-page-intro}
@cindex tab-page-intro
@section 1. はじめに
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A tab page holds one or more windows.  You can easily switch between tab
pages, so that you have several collections of windows to work on different
things.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページは複数のウィンドウを持てます。タブページを使うと、作業別のウィンドウの集合を簡単に切り替えることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Usually you will see a list of labels at the top of the Vim window, one for
each tab page.  With the mouse you can click on the label to jump to that tab
page.  There are other ways to move between tab pages, see below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、Vim ウィンドウの最上部にタブページを表すラベルの一覧が表示されます。そのラベルをマウスでクリックすると、そのタブページにジャンプできます。他の方法でもタブページを移動できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most commands work only in the current tab page.  That includes the |CTRL-W|
commands, |:windo|, |:all| and |:ball| (when not using the |:tab| modifier).
The commands that are aware of other tab pages than the current one are
mentioned below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどのコマンドは作業中のタブページ内だけで動作します。|@ref{CTRL-W}| コマンドや、|@ref{:tab}| を前置しない |@ref{:windo}|, |@ref{:all}|, |@ref{:ball}| なども同様です。カレントタブページ以外にも作用するコマンドについては以下で説明しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Tabs are also a nice way to edit a buffer temporarily without changing the
current window layout.  Open a new tab page, do whatever you want to do and
close the tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページを使うと、一時的なバッファを使用するときに、作業中のウィンドウレイアウトを変更しなくてすみます。新しいタブページを開いて、何か作業をし、そのタブページを閉じる、という具合です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Commands						*tab-page-commands*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tab-page-commands}
@cindex tab-page-commands
@section 2. コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
OPENING A NEW TAB PAGE:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タブページを開くには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When starting Vim "vim -p filename ..." opens each file argument in a separate
tab page (up to 'tabpagemax').  See |-p|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を "@command{vim -p filename ...}" と起動すると、それぞれのファイルごとに (最大 '@option{tabpagemax}' までの) タブページを開けます。|@ref{-p}| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A double click with the mouse in the non-GUI tab pages line opens a new, empty
tab page.  It is placed left of the position of the click.  The first click
may select another tab page first, causing an extra screen update.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
CUI の Vim でタブページラインをダブルクリックすると新しいタブページが作成されます。新しいタブページはクリックした場所の左に作成されます。最初のクリックが他のタブページの選択になってしまうときは、スクリーンが余計に更新されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This also works in a few GUI versions, esp. Win32 and Motif.  But only when
clicking right of the labels.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この機能は Win32 と Motif の GUI でも使えます。ただし、ラベルの右をクリックした場合のみです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the GUI tab pages line you can use the right mouse button to open menu.
|tabline-menu|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI でタブページラインを右クリックするとメニューが表示されます。|@ref{tabline-menu}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For the related autocommands see |tabnew-autocmd|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
関連する自動コマンドについては、|@ref{tabnew-autocmd}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[count]tabe[dit]				*:tabe* *:tabedit* *:tabnew*
:[count]tabnew
		Open a new tab page with an empty window, after the current
		tab page.  If [count] is given the new tab page appears after
		the tab page [count] otherwise the new tab page will appear
		after the current one. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabe}
@anchor{:tabedit}
@anchor{:tabnew}
@cindex :tabe
@cindex :tabedit
@cindex :tabnew
@item :[count]tabe[dit] または
@itemx :[count]tabnew
カレントタブページの後ろに空のウィンドウを持った新しいタブページを作成します。[count] が与えられる場合、新しいタブページは [count] 番目のタブページの後ろに作成され、[count] が省略される場合はカレントタブページの後ろに作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    :tabnew	" opens tabpage after the current one
		    :.tabnew	" as above
		    :+tabnew	" opens tabpage after the next tab page
				" note: it is one further than :tabnew
		    :-tabnew	" opens tabpage before the current one
		    :0tabnew	" opens tabpage before the first one
		    :$tabnew	" opens tabpage after the last one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item :tabnew @tab カレントタブページの後ろに新規タブページを作成
@item :.tabnew @tab 同上
@item :+tabnew @tab 右のタブページの後ろに新規タブページを作成 @* 注: tabnew よりも 1 つ右側に作られる
@item :-tabnew @tab カレントタブページの前に新規タブページを作成
@item :0tabnew @tab 新規タブページを左端に作成
@item :$tabnew @tab 新規タブページを右端に作成
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[count]tabe[dit] [++opt] [+cmd] {file}
:[count]tabnew [++opt] [+cmd] {file}
		Open a new tab page and edit {file}, like with |:edit|.
		For [count] see |:tabnew| above.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :[count]tabe[dit] [++opt] [+cmd] @{file@} または
@itemx :[count]tabnew [++opt] [+cmd] @{file@}
@{file@} を新しいタブページで開きます。|@ref{:edit}| と同じです。[count] については上記 |@ref{:tabnew}| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[count]tabf[ind] [++opt] [+cmd] {file}			*:tabf* *:tabfind*
		Open a new tab page and edit {file} in 'path', like with
		|:find|.  For [count] see |:tabnew| above.
		{not available when the |+file_in_path| feature was disabled
		at compile time}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tabf}
@anchor{:tabfind}
@cindex :tabf
@cindex :tabfind
@item :[count]tabf[ind] [++opt] [+cmd] @{file@}
'@option{path}' 内の @{file@} を新しいタブページで開きます。|@ref{:find}| と同じです。[count] については上記 |@ref{:tabnew}| 参照。

@{|@ref{+file_in_path}| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[count]tab {cmd}					*:tab*
		Execute {cmd} and when it opens a new window open a new tab
		page instead.  Doesn't work for |:diffsplit|, |:diffpatch|,
		|:execute| and |:normal|.
		If [count] is given the new tab page appears after the tab
		page [count] otherwise the new tab page will appear after the
		current one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tab}
@cindex :tab
@item :[count]tab @{cmd@}
@{cmd@} を実行します。そのコマンドが新しいウィンドウを作成するときは、その代わりに新しいタブページを作成します。|@ref{:diffsplit}| と |@ref{:diffpatch}|, |@ref{:execute}|, |@ref{:normal}| に対しては機能しません。[count] を指定すると、現在のタブページから見て [count] 番目のタブページの後ろに作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Examples: >
		    :tab split	    " opens current buffer in new tab page
		    :tab help gt    " opens tab page with help for "gt"
		    :.tab help gt   " as above
		    :+tab help	    " opens tab page with help after the next
				    " tab page
		    :-tab help	    " opens tab page with help before the
				    " current one
		    :0tab help	    " opens tab page with help before the
				    " first one
		    :$tab help	    " opens tab page with help after the last
				    " one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@multitable @columnfractions .3 .7
@item :tab split @tab 現在のバッファを新規タブで開く
@item :tab help gt @tab "gt" に対するヘルプを新規タブで開く
@item :.tab help gt @tab 同上
@item :+tab help @tab 次のタブページのその次に help のタブページを開く
@item :-tab help @tab 現在のタブの前に help のタブを開く
@item :0tab help @tab 最初のタブページの前に help のタブページを開く
@item :$tab help @tab 最後のタブページの次に help のタブページを開く
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-W gf	Open a new tab page and edit the file name under the cursor.
		See |CTRL-W_gf|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item CTRL-W gf
カーソル下のファイル名のファイルを新しいタブページで開きます。|@ref{CTRL-W_gf}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-W gF	Open a new tab page and edit the file name under the cursor
		and jump to the line number following the file name.
		See |CTRL-W_gF|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item CTRL-W gF
カーソル下のファイル名のファイルを新しいタブページで開きます。そして、ファイル名の後ろに指定された行番号にジャンプします。|@ref{CTRL-W_gF}| を参照してください。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CLOSING A TAB PAGE:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タブページを閉じるには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Closing the last window of a tab page closes the tab page too, unless there is
only one tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複数のタブページを開いているときは、タブページ内の最後のウィンドウを閉じると、そのタブページが閉じられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using the mouse: If the tab page line is displayed you can click in the "X" at
the top right to close the current tab page.  A custom |'tabline'| may show
something else.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページラインが表示されているときは、右上に表示されている "X" をマウスでクリックすると、カレントタブページが閉じます。|@ref{'tabline'}| を設定しているときは、他の何かが表示されているかもしれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tabc* *:tabclose*
:tabc[lose][!]	Close current tab page.
		This command fails when:
		- There is only one tab page on the screen.		*E784*
		- When 'hidden' is not set, [!] is not used, a buffer has
		  changes, and there is no other window on this buffer.
		Changes to the buffer are not written and won't get lost, so
		this is a "safe" command. >
		    :tabclose	    " close the current tab page
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabc}
@anchor{:tabclose}
@cindex :tabc
@cindex :tabclose
@item :tabc[lose][!]
カレントタブページを閉じます。

このコマンドは次のときに失敗します:
@itemize
@anchor{E784}
@erindex E784
@item タブページが 1 つしかないとき。
@item '@option{hidden}' がオフのときに [!] を使わず、バッファに変更があり、そのバッファを表示しているウィンドウが他にない場合。
@end itemize
バッファの変更はファイルに保存されませんが、失われることもありません。このコマンドは安全なコマンドです。
@multitable @columnfractions .3 .7
@item :tabclose @tab カレントタブページを閉じる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{count}tabc[lose][!]
:tabc[lose][!] {count}
		Close tab page {count}.  Fails in the same way as `:tabclose`
		above. >
		    :-tabclose	    " close the previous tab page
		    :+tabclose	    " close the next tab page
		    :1tabclose	    " close the first tab page
		    :$tabclose	    " close the last tab page
		    :tabclose -2    " close the two previous tab page
		    :tabclose +	    " close the next tab page
		    :tabclose 3	    " close the third tab page
		    :tabclose $	    " close the last tab page
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :@{count@}tabc[lose][!] または
@itemx :tabc[lose][!] @{count@}
@{count@} 番目のタブページを閉じます。`:tabclose` と同じ理由で失敗することがあります。
@multitable @columnfractions .3 .7
@item :-tabclose @tab カレントタブページの前のタブページを閉じる
@item :+tabclose @tab カレントタブページの次のタブページを閉じる
@item :1tabclose @tab 左端のタブページを閉じる
@item :$tabclose @tab 右端のタブページを閉じる
@item :tabclose -2 @tab 2 つ前のタブページを閉じる
@item :tabclose + @tab 次のタブページを閉じる
@item :tabclose 3 @tab 3 番目のタブページを閉じる
@item :tabclose $ @tab 右端のタブページを閉じる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*:tabo* *:tabonly*
:tabo[nly][!]	Close all other tab pages.
		When the 'hidden' option is set, all buffers in closed windows
		become hidden.
		When 'hidden' is not set, and the 'autowrite' option is set,
		modified buffers are written.  Otherwise, windows that have
		buffers that are modified are not removed, unless the [!] is
		given, then they become hidden.  But modified buffers are
		never abandoned, so changes cannot get lost. >
		    :tabonly	    " close all tab pages except the current
				    " one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tabo}
@anchor{:tabonly}
@cindex :tabo
@cindex :tabonly
@item :tabo[nly][!]
カレントタブページ以外のすべてのタブページを閉じます。

オプション '@option{hidden}' がオンのとき、閉じたウィンドウのバッファはすべて隠しバッファになります。

'@option{hidden}' がオフ、'@option{autowrite}' がオンのときは、変更のあるバッファはファイルに保存されます。そうでないときは、変更のあるバッファを表示しているウィンドウは閉じません。[!] を指定した場合は、変更のあるバッファは隠しバッファになります。変更のあるバッファは絶対に破棄されないので、変更を失うことはありません。
@multitable @columnfractions .2 .8
@item :tabonly @tab カレントタブページ以外のすべてのタブページを閉じる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{count}tabo[nly][!]
:tabo[nly][!] {count}
		Close all tab pages except {count} one. >
		    :.tabonly	    " as above
		    :-tabonly	    " close all tab pages except the previous
				    " one
		    :+tabonly	    " close all tab pages except the next one
		    :1tabonly	    " close all tab pages except the first one
		    :$tabonly	    " close all tab pages except the last one
		    :tabonly -	    " close all tab pages except the previous
				    " one
		    :tabonly +2     " close all tab pages except the two next
				    " one
		    :tabonly 1	    " close all tab pages except the first one
		    :tabonly $	    " close all tab pages except the last one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :@{count@}tabo[nly][!] または
@itemx :tabo[nly][!] @{count@}
@{count@} のタブページ以外のすべてのタブページを閉じます。
@multitable @columnfractions .2 .8
@item :.tabonly @tab 上に同じ
@item :-tabonly @tab カレントタブページの前のタブページ以外を全て閉じる
@item :+tabonly @tab カレントタブページの次のタブページ以外を全て閉じる
@item :1tabonly @tab 最初のタブページ以外を全て閉じる
@item :$tabonly @tab 最後のタブページ以外を全て閉じる
@item :tabonly - @tab カレントタブページの前のタブページ以外を全て閉じる
@item :tabonly +2 @tab カレントタブページの2つ次のタブページ以外を全て閉じる
@item :tabonly 1 @tab 最初のタブページ以外を全て閉じる
@item :tabonly $ @tab 最後のタブページ以外を全て閉じる
@end multitable
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SWITCHING TO ANOTHER TAB PAGE:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タブページを切り替えるには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using the mouse: If the tab page line is displayed you can click in a tab page
label to switch to that tab page.  Click where there is no label to go to the
next tab page.  |'tabline'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページラインが表示されているときは、タブページラベルをマウスでクリックすると、そのタブページに移動できます。ラベルが表示されていない場所をクリックすると、次のタブページに移動できます。|@ref{'tabline'}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:tabn[ext]				*:tabn* *:tabnext* *gt*
<C-PageDown>				*CTRL-<PageDown>* *<C-PageDown>*
gt					*i_CTRL-<PageDown>* *i_<C-PageDown>*
		Go to the next tab page.  Wraps around from the last to the
		first one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabn}
@anchor{:tabnext}
@anchor{gt}
@anchor{CTRL-<PageDown>}
@anchor{<C-PageDown>}
@anchor{i_CTRL-<PageDown>}
@anchor{i_<C-PageDown>}
@cindex :tabn
@cindex :tabnext
@cindex gt
@cindex CTRL-<PageDown>
@cindex <C-PageDown>
@cindex i_CTRL-<PageDown>
@cindex i_<C-PageDown>
@item :tabn[ext] または
@itemx <C-PageDown> または
@itemx gt
次のタブページに移動します。次のタブページがない場合は、最初のタブページに移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{count}tabn[ext]
:tabn[ext] {count}
		Go to tab page {count}.  The first tab page has number one. >
		    :-tabnext	" go to the previous tab page
		    :+tabnext	" go to the next tab page
		    :+2tabnext	" go to the two next tab page
		    :1tabnext	" go to the first tab page
		    :$tabnext	" go to the last tab page
		    :tabnext $	" as above
		    :tabnext -	" go to the previous tab page
		    :tabnext -1	" as above
		    :tabnext +	" go to the next tab page
		    :tabnext +1	" as above
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :@{count@}tabn[ext] または
@itemx :tabn[ext] @{count@}
@{count@} 番目のタブページに移動します。最初のタブページの番号は 1 です。
@multitable @columnfractions .2 .8
@item :-tabnext @tab 前のタブページに移動する
@item :+tabnext @tab 次のタブページに移動する
@item :+2tabnext @tab 2 つ次のタブページに移動する
@item :1tabnext @tab 最初のタブページに移動する
@item :$tabnext @tab 最後のタブページに移動する
@item :tabnext $ @tab 同上
@item :tabnext - @tab 前のタブページに移動する
@item :tabnext -1 @tab 同上
@item :tabnext + @tab 次のタブページに移動する
@item :tabnext +1 @tab 同上
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{count}<C-PageDown>
{count}gt	Go to tab page {count}.  The first tab page has number one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{count@}<C-PageDown> または
@itemx @{count@}gt
@{count@} 番目のタブページに移動します。最初のタブページの番号は 1 です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
:tabp[revious]				*:tabp* *:tabprevious* *gT* *:tabN*
:tabN[ext]				*:tabNext* *CTRL-<PageUp>*
<C-PageUp>			 *<C-PageUp>* *i_CTRL-<PageUp>* *i_<C-PageUp>*
gT		Go to the previous tab page.  Wraps around from the first one
		to the last one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tabp}
@anchor{:tabprevious}
@anchor{gT}
@anchor{:tabN}
@anchor{:tabNext}
@anchor{CTRL-<PageUp>}
@anchor{<C-PageUp>}
@anchor{i_CTRL-<PageUp>}
@anchor{i_<C-PageUp>}
@cindex :tabp
@cindex :tabprevious
@cindex gT
@cindex :tabN
@cindex :tabNext
@cindex CTRL-<PageUp>
@cindex <C-PageUp>
@cindex i_CTRL-<PageUp>
@cindex i_<C-PageUp>
@item :tabp[revious] または
@itemx :tabN[ext] または
@itemx <C-PageUp> または
@itemx gT
前のタブページに移動します。前のタブページがない場合は、最後のタブページに移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:tabp[revious] {count}
:tabN[ext] {count}
{count}<C-PageUp>
{count}gT	Go {count} tab pages back.  Wraps around from the first one
		to the last one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :tabp[revious] @{count@} または
@itemx :tabN[ext] @{count@} または
@itemx @{count@}<C-PageUp> または
@itemx @{count@}gT
@{count@} の数だけ前のタブページに移動します。前のタブページがない場合は最後のタブページに移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:tabr[ewind]			*:tabfir* *:tabfirst* *:tabr* *:tabrewind*
:tabfir[st]	Go to the first tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tabfir}
@anchor{:tabfirst}
@anchor{:tabr}
@anchor{:tabrewind}
@cindex :tabfir
@cindex :tabfirst
@cindex :tabr
@cindex :tabrewind
@item :tabr[ewind] または
@itemx :tabfir[st]
最初のタブページに移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tabl* *:tablast*
:tabl[ast]	Go to the last tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:tabl}
@anchor{:tablast}
@cindex :tabl
@cindex :tablast
@item :tabl[ast]
最後のタブページに移動します。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Other commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec その他のコマンド:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*:tabs*
:tabs		List the tab pages and the windows they contain.
		Shows a ">" for the current window.
		Shows a "+" for modified buffers.
		For example:
			Tab page 1 ~
			  + tabpage.txt ~
			    ex_docmd.c ~
			Tab page 2 ~
			>   main.c ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabs}
@cindex :tabs
@item :tabs
タブページと、含まれているウィンドウの一覧を表示します。
@itemize @bullet
@item ">" と表示されるのはカレントウィンドウです。
@item "+" と表示されるのは変更のあるバッファです。
@end itemize
例:
@verbatim
タブページ 1
  + tabpage.txt
    ex_docmd.c
タブページ 2
>   main.c
@end verbatim
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REORDERING TAB PAGES:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タブページを並べ替えるには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:tabm[ove] [N]						*:tabm* *:tabmove*
:[N]tabm[ove]
		Move the current tab page to after tab page N.  Use zero to
		make the current tab page the first one.  Without N the tab
		page is made the last one. >
		    :.tabmove	" do nothing
		    :-tabmove	" move the tab page to the left
		    :+tabmove	" move the tab page to the right
		    :0tabmove	" move the tab page to the beginning of the tab
				" list
		    :tabmove 0	" as above
		    :tabmove	" move the tab page to the last
		    :$tabmove	" as above
		    :tabmove $	" as above
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabm}
@anchor{:tabmove}
@cindex :tabm
@cindex :tabmove
@item :tabm[ove] [N] または
@itemx :[N]tabm[ove]
カレントタブページを N 番目のタブページの後ろに移動します。カレントタブページを一番目のタブページにするにはゼロを指定します。N を省略すると最後に移動します。
@multitable @columnfractions .4 .6
@item :.tabmove @tab 何もしない
@item :-tabmove @tab タブページを左に移動
@item :+tabmove @tab タブページを右に移動
@item :0tabmove @tab タブページを左端に移動
@item :tabmove 0 @tab 同上
@item :tabmove @tab タブページを右端に移動
@item :$tabmove @tab 同上
@item :tabmove $ @tab 同上
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:tabm[ove] +[N]
:tabm[ove] -[N]
		Move the current tab page N places to the right (with +) or to
		the left (with -). >
		    :tabmove -	" move the tab page to the left
		    :tabmove -1	" as above
		    :tabmove +	" move the tab page to the right
		    :tabmove +1	" as above
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :tabm[ove] +[N] または
@itemx :tabm[ove] -[N]
カレントタブページを N 個右 (+ の場合) または左 (- の場合) に移動します。
@multitable @columnfractions .4 .6
@item :tabmove - @tab タブページを左に移動
@item :tabmove -1 @tab 同上
@item :tabmove + @tab タブページを右に移動
@item :tabmove +1 @tab 同上
@end multitable
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Note that although it is possible to move a tab behind the N-th one by using
:Ntabmove. And move it by N places by using :+Ntabmove. For clarification what
+N means in this context see |[range]|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
:Ntabmove を使うことでタブを N 番目のタブの後ろに移動することができることと、:+Ntabmove を使って N 個後ろに移動できることに注意してください。この場合に +N が何を意味するかについては、|@ref{[range]}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LOOPING OVER TAB PAGES:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タブページごとにコマンドを実行するには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tabd* *:tabdo*
:[range]tabd[o] {cmd}
		Execute {cmd} in each tab page or if [range] is given only in
		tab pages which tab page number is in the [range].  It works
		like doing this: >
			:tabfirst
			:{cmd}
			:tabnext
			:{cmd}
			etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tabd}
@anchor{:tabdo}
@cindex :tabd
@cindex :tabdo
@item :[range]tabd[o] @{cmd@}
タブページごと、または [range] が与えられた場合はその範囲のタブページのみにコマンドを実行します。これは次のような動作をします:
@example
:tabfirst
:@{cmd@}
:tabnext
:@{cmd@}
etc.
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		This only operates in the current window of each tab page.
		When an error is detected on one tab page, further tab pages
		will not be visited.
		The last tab page (or where an error occurred) becomes the
		current tab page.
		{cmd} can contain '|' to concatenate several commands.
		{cmd} must not open or close tab pages or reorder them.
		{not in Vi}
		Also see |:windo|, |:argdo|, |:bufdo|, |:cdo|, |:ldo|, |:cfdo|
		and |:lfdo|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドは各タブページのカレントウィンドウで実行されます。いずれかのタブページでエラーが起きたときは、その場で実行を中断します。

最後のタブページ (またはエラーが起きたタブページ) がカレントタブページになります。

@{cmd@} は '|' を使って複数のコマンドを繋げることができます。@{cmd@} はタブページを開いたり閉じたり並べ替えたりしてはいけません。

@{Vi にはありません@}

|@ref{:windo}|, |@ref{:argdo}|, |@ref{:bufdo}|, |@ref{:cdo}|, |@ref{:ldo}|, |@ref{:cfdo}|, |@ref{:lfdo}| も参照してください。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Other items						*tab-page-other*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tab-page-other}
@cindex tab-page-other
@section 3. その他
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*tabline-menu*
The GUI tab pages line has a popup menu.  It is accessed with a right click.
The entries are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tabline-menu}
@cindex tabline-menu
GUI のタブページラインにはポップアップメニューがあります。右クリックで次のメニューが表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Close		Close the tab page under the mouse pointer.  The
			current one if there is no label under the mouse
			pointer.
	New Tab		Open a tab page, editing an empty buffer.  It appears
			to the left of the mouse pointer.
	Open Tab...	Like "New Tab" and additionally use a file selector to
			select a file to edit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item Close @tab マウスポインタの下のタブページを閉じます。マウスがラベルの上にないときは、カレントタブページを閉じます。
@item New Tab @tab タブページを新規バッファで開きます。マウスポインタの左側に作成されます。
@item Open Tab... @tab "New Tab" と同じですが、ファイル選択ダイアログを使って選択したファイルを新しいタブページで開きます。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Diff mode works per tab page.  You can see the diffs between several files
within one tab page.  Other tab pages can show differences between other
files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
差分モードはタブページ単位で機能します。1 つのタブページ内でファイル間の差分を表示できます。そして、他のタブページでは他のファイルとの差分を表示することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Variables local to a tab page start with "t:". |tabpage-variable|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページローカル変数は "t:" で始まります。|@ref{tabpage-variable}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Currently there is only one option local to a tab page: 'cmdheight'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在、タブページローカルなオプションは '@option{cmdheight}' だけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*tabnew-autocmd*
The TabLeave and TabEnter autocommand events can be used to do something when
switching from one tab page to another.  The exact order depends on what you
are doing.  When creating a new tab page this works as if you create a new
window on the same buffer and then edit another buffer.  Thus ":tabnew"
triggers:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{tabnew-autocmd}
@cindex tabnew-autocmd
オートコマンドイベントの TabLeave と TabEnter を使って、タブページを切り替えるときにコマンドを実行できます。イベントが起きる正確な順番は何をしたかによって変わります。新しいタブページを作成したときは、例えば、編集中のバッファを新しいウィンドウで開き、それからそのウィンドウで別のバッファを開いたときと同じような動きをします。つまり、"@command{:tabnew}" では次の順番でイベントが実行されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	WinLeave		leave current window
	TabLeave		leave current tab page
	WinEnter		enter window in new tab page
	TabEnter		enter new tab page
	BufLeave		leave current buffer
	BufEnter		enter new empty buffer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item WinLeave @tab カレントウィンドウから離れる
@item TabLeave @tab カレントタブページから離れる
@item WinEnter @tab 新しいタブページのウィンドウに入る
@item TabEnter @tab 新しいタブページに入る
@item BufLeave @tab カレントバッファから離れる
@item BufEnter @tab 新しい空のバッファに入る
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When switching to another tab page the order is:
	BufLeave
	WinLeave
	TabLeave
	TabEnter
	WinEnter
	BufEnter
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページを切り替えたときは次の順番です:
@multitable @columnfractions .99
@item BufLeave
@item WinLeave
@item TabLeave
@item TabEnter
@item WinEnter
@item BufEnter
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Setting 'tabline'					*setting-tabline*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{setting-tabline}
@cindex setting-tabline
@section 4. '@option{tabline}' の設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'tabline' option specifies what the line with tab pages labels looks like.
It is only used when there is no GUI tab line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{tabline}' を設定してタブページラベルの表示方法を指定できます。これは CUI の タブページラインで使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use the 'showtabline' option to specify when you want the line with
tab page labels to appear: never, when there is more than one tab page or
always.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{showtabline}' を設定してタブページラインを表示するかどうかを指定できます。表示しない、タブページが複数あるときだけ表示する、常に表示する、から選べます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The highlighting of the tab pages line is set with the groups TabLine
TabLineSel and TabLineFill.  |hl-TabLine| |hl-TabLineSel| |hl-TabLineFill|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページラインの強調表示には TabLine, TabLineSel, TabLineFill が使われます。|@ref{hl-TabLine}| |@ref{hl-TabLineSel}| |@ref{hl-TabLineFill}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A "+" will be shown for a tab page that has a modified window.  The number of
windows in a tabpage is also shown.  Thus "3+" means three windows and one of
them has a modified buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
変更されているウィンドウを含むタブページには "+" が表示されます。タブページ内のウィンドウの個数も表示されます。よって "3+" という表示は 3 個のウィンドウを含む、そのうちの 1 つが変更されているバッファを含むということを意味します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'tabline' option allows you to define your preferred way to tab pages
labels.  This isn't easy, thus an example will be given here.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{tabline}' を使って、タブページラベルを好みの表示に設定できます。これはあまり簡単ではないので、サンプルを用意してあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For basics see the 'statusline' option.  The same items can be used in the
'tabline' option.  Additionally, the |tabpagebuflist()|, |tabpagenr()| and
|tabpagewinnr()| functions are useful.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
基本的には '@option{statusline}' を参照してください。同じアイテムが '@option{tabline}' で使用できます。加えて、|@ref{tabpagebuflist()}|, |@ref{tabpagenr()}|, |@ref{tabpagewinnr()}| という関数も使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since the number of tab labels will vary, you need to use an expression for
the whole option.  Something like: >
	:set tabline=%!MyTabLine()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページラベルの数は変化するので、オプションには式を使う必要があります。次のように設定します:
@example
:set tabline=%!MyTabLine()
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then define the MyTabLine() function to list all the tab pages labels.  A
convenient method is to split it in two parts:  First go over all the tab
pages and define labels for them.  Then get the label for each tab page. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
では、関数 MyTabLine() を定義して、すべてのタブページラベルを表示するようにします。タブページラベル全体の作成と、個々のタブページラベルの作成、という 2 つの段階に分けると簡単です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	function MyTabLine()
	  let s = ''
	  for i in range(tabpagenr('$'))
	    " select the highlighting
	    if i + 1 == tabpagenr()
	      let s .= '%#TabLineSel#'
	    else
	      let s .= '%#TabLine#'
	    endif

	    " set the tab page number (for mouse clicks)
	    let s .= '%' . (i + 1) . 'T'

	    " the label is made by MyTabLabel()
	    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
	  endfor

	  " after the last tab fill with TabLineFill and reset tab page nr
	  let s .= '%#TabLineFill#%T'

	  " right-align the label to close the current tab page
	  if tabpagenr('$') > 1
	    let s .= '%=%#TabLine#%999Xclose'
	  endif

	  return s
	endfunction
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " 強調表示グループの選択
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " タブページ番号の設定 (マウスクリック用)
    let s .= '%' . (i + 1) . 'T'

    " ラベルは MyTabLabel() で作成する
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " 最後のタブページの後は TabLineFill で埋め、タブページ番号をリセッ
  " トする
  let s .= '%#TabLineFill#%T'

  " カレントタブページを閉じるボタンのラベルを右添えで作成
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif

  return s
endfunction
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now the MyTabLabel() function is called for each tab page to get its label. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
関数 MyTabLabel() は個々のタブページラベルを得るために呼ばれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	function MyTabLabel(n)
	  let buflist = tabpagebuflist(a:n)
	  let winnr = tabpagewinnr(a:n)
	  return bufname(buflist[winnr - 1])
	endfunction
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname(buflist[winnr - 1])
endfunction
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is just a simplistic example that results in a tab pages line that
resembles the default, but without adding a + for a modified buffer or
truncating the names.  You will want to reduce the width of labels in a
clever way when there is not enough room.  Check the 'columns' option for the
space available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このサンプルは単純なものです。生成されるのは未設定時のタブページラインとほぼ同じですが、変更のあるバッファに + が付けたり、名前を切り詰めたりはしません。十分な表示領域がない場合など、なんらかのうまい方法でラベルの幅を減らしたいでしょう。利用できる表示領域はオプション '@option{columns}' を確認してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Setting 'guitablabel'				*setting-guitablabel*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{setting-guitablabel}
@cindex setting-guitablabel
@section 5. '@option{guitablabel}' の設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the GUI tab pages line is displayed, 'guitablabel' can be used to
specify the label to display for each tab page.  Unlike 'tabline', which
specifies the whole tab pages line at once, 'guitablabel' is used for each
label separately.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI のタブページラインが表示されているとき、'@option{guitablabel}' を設定してタブページラベルの表示方法を指定できます。'@option{tabline}' とは違い、一度にタブページライン全体を指定するのではなく、個々のラベルを得るために '@option{guitablabel}' が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
'guitabtooltip' is very similar and is used for the tooltip of the same label.
This only appears when the mouse pointer hovers over the label, thus it
usually is longer.  Only supported on some systems though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{guitabtooltip}' という良く似たオプションがあります。これはラベルのツールチップを表示するために使われます。ツールチップはマウスポインタがラベルの上に乗っているときだけ表示されるので、普通は、長い文字を表示します。いくつかのシステムだけサポートされています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See the 'statusline' option for the format of the value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
書式についてはオプション '@option{statusline}' を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "%N" item can be used for the current tab page number.  The |v:lnum|
variable is also set to this number when the option is evaluated.
The items that use a file name refer to the current window of the tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"%N" はカレントタブページ番号になります。このオプションを評価するときに、|@ref{v:lnum}| にも同じ番号が設定されます。ファイル名を参照するアイテムにはタブページのカレントウィンドウのものが使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that syntax highlighting is not used for the option.  The %T and %X
items are also ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションでは強調表示は使えません。%T と %X は無視されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A simple example that puts the tab page number and the buffer name in the
label: >
	:set guitablabel=%N\ %f
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
簡単な例として、次のものはタブページ番号とバッファ名をラベルに表示します:
@example
:set guitablabel=%N\ %f
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
An example that resembles the default 'guitablabel': Show the number of
windows in the tab page and a '+' if there is a modified buffer: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の例は '@option{guitablabel}' の標準設定の動作と似た動作をします。タブページのウィンドウ数と、変更のあるバッファがあるときには '+' を表示します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	function GuiTabLabel()
	  let label = ''
	  let bufnrlist = tabpagebuflist(v:lnum)

	  " Add '+' if one of the buffers in the tab page is modified
	  for bufnr in bufnrlist
	    if getbufvar(bufnr, "&modified")
	      let label = '+'
	      break
	    endif
	  endfor

	  " Append the number of windows in the tab page if more than one
	  let wincount = tabpagewinnr(v:lnum, '$')
	  if wincount > 1
	    let label .= wincount
	  endif
	  if label != ''
	    let label .= ' '
	  endif

	  " Append the buffer name
	  return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	endfunction

	set guitablabel=%{GuiTabLabel()}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
function GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)

  " このタブページに変更のあるバッファがるときには '+' を追加する
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor

  " ウィンドウが複数あるときにはその数を追加する
  let wincount = tabpagewinnr(v:lnum, '$')
  if wincount > 1
    let label .= wincount
  endif
  if label != ''
    let label .= ' '
  endif

  " バッファ名を追加する
  return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
endfunction

set guitablabel=%{GuiTabLabel()}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the function must be defined before setting the option, otherwise
you get an error message for the function not being known.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
この関数はオプションを設定する前に定義しておく必要があります。そうしないと、関数未定義のエラーが表示されてしまいます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to fall back to the default label, return an empty string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
標準のラベルを使いたい場合は、空文字列を返してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to show something specific for a tab page, you might want to use a
tab page local variable. |t:var|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるタブページに固有の何かを表示したいときは、タブページローカル変数 |@ref{t:var}| が便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
