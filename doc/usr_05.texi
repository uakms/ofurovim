@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@node usr_05.txt, usr_06.txt, usr_04.txt, 目次
@unnumbered 設定の変更
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_05.txt*	For Vim version 8.0.  Last change: 2016 Mar 28

		     VIM USER MANUAL - by Bram Moolenaar

			      Set your settings
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_05.txt
@verbatim
*usr_05.txt*	For Vim バージョン 8.40.  Last change: 2016 Mar 28

		     VIM USER MANUAL - by Bram Moolenaar

			      設定の変更
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim can be tuned to work like you want it to.  This chapter shows you how to
make Vim start with options set to different values.  Add plugins to extend
Vim's capabilities.  Or define your own macros.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あなたの望みどおりに Vim をチューニングできます。本章では、好みの設定で Vim を起動する方法を説明します。Vim にプラグインを追加して機能拡張したり、自分でマクロを定義する方法も説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|05.1|	The vimrc file
|05.2|	The example vimrc file explained
|05.3|	Simple mappings
|05.4|	Adding a package
|05.5|	Adding a plugin
|05.6|	Adding a help file
|05.7|	The option window
|05.8|	Often used options

     Next chapter: |usr_06.txt|  Using syntax highlighting
 Previous chapter: |usr_04.txt|  Making small changes
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{05.1, , 05.1}| @tab vimrc ファイル
@item |@ref{05.2, , 05.2}| @tab 見本 vimrc ファイルの解説
@item |@ref{05.3, , 05.3}| @tab 簡単なマップ
@item |@ref{05.4, , 05.4}| @tab パッケージの追加
@item |@ref{05.5, , 05.5}| @tab プラグインの追加
@item |@ref{05.6, , 05.6}| @tab ヘルプファイルの追加
@item |@ref{05.7, , 05.7}| @tab オプションウィンドウ
@item |@ref{05.8, , 05.8}| @tab よく使うオプション
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.1*	The vimrc file					*vimrc-intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.1}
@anchor{vimrc-intro}
@cindex vimrc-intro
@section vimrc ファイル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You probably got tired of typing commands that you use very often.  To start
Vim with all your favorite option settings and mappings, you write them in
what is called the vimrc file.  Vim executes the commands in this file when it
starts up.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
よく使うコマンドを入力するのが面倒に感じたことがあるでしょう。好みのオプションやマップを設定した状態で Vim を起動するには、@file{vimrc} というファイルに設定を書いてください。そのファイルに書いたコマンドは、Vim が起動するときに実行されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you already have a vimrc file (e.g., when your sysadmin has one setup for
you), you can edit it this way: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すでに @file{vimrc} ファイルがある場合 (例えばシステム管理者が設置した場合など) は、次のコマンドでそのファイルを開くことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit $MYVIMRC
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit $MYVIMRC
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you don't have a vimrc file yet, see |vimrc| to find out where you can
create a vimrc file.  Also, the ":version" command mentions the name of the
"user vimrc file" Vim looks for.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{vimrc} ファイルがまだない場合は |vimrc| を参照して @file{vimrc} ファイルを作成する場所を確認してください。"@command{:version}" コマンドで表示される "ユーザー vimrc" の表示を見て確認することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For Unix and Macintosh this file is always used and is recommended:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix と Macintosh ではこのファイルを使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	~/.vimrc ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
~/.vimrc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For MS-DOS and MS-Windows you can use one of these:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-DOS と MS-Windows では次のどちらかです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	$HOME/_vimrc ~
	$VIM/_vimrc ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
$HOME/_vimrc
$VIM/_vimrc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The vimrc file can contain all the commands that you type after a colon.  The
most simple ones are for setting options.  For example, if you want Vim to
always start with the 'incsearch' option on, add this line your vimrc file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{vimrc} ファイルには、コロン (@samp{:}) を押してから入力するコマンドなら、どのコマンドでも書くことができます。一番わかりやすいのはオプション設定です。例えば、毎回 '@option{incsearch}' オプションをオンに設定したい場合は、@file{vimrc} ファイルに次の 1 行を加えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set incsearch
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set incsearch
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For this new line to take effect you need to exit Vim and start it again.
Later you will learn how to do this without exiting Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この新しい行を有効にするには、Vim を終了し、再起動する必要があります。再起動しないで設定を反映する方法は後で説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This chapter only explains the most basic items.  For more information on how
to write a Vim script file: |usr_41.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この章では、ごく基本的な項目だけを説明します。Vim script のより詳しい情報については |@ref{usr_41.txt, , usr_41.txt}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.2*	The example vimrc file explained		*vimrc_example.vim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.2}
@anchor{vimrc_example.vim}
@cindex vimrc_example.vim
@section 見本 vimrc ファイルの解説
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the first chapter was explained how the example vimrc (included in the
Vim distribution) file can be used to make Vim startup in not-compatible mode
(see |not-compatible|).  The file can be found here:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
第一章では、Vim の配布物に付属の見本 @file{vimrc} ファイルを使って、非互換モード (|@ref{not-compatible, ,not-compatible}|参照) で Vim を起動する方法を説明しました。見本 @file{vimrc} ファイルは次のディレクトリにあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	$VIMRUNTIME/vimrc_example.vim ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
$VIMRUNTIME/vimrc_example.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this section we will explain the various commands used in this file.  This
will give you hints about how to set up your own preferences.  Not everything
will be explained though.  Use the ":help" command to find out more.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この節では、このファイルで使われているコマンドを説明します。自分用の設定をするときの参考にしてください。しかし、全てを説明するわけではないので、詳しいことは "@command{:help}" コマンドで調べてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	set nocompatible
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set nocompatible
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As mentioned in the first chapter, these manuals explain Vim working in an
improved way, thus not completely Vi compatible.  Setting the 'compatible'
option off, thus 'nocompatible' takes care of this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
第一章で述べたように、このマニュアルでは「Vim」について説明しているので、Vi とは完全に互換性がない部分があります。ここに書かれたように動作させるには、'@option{compatible}' オプションをオフに設定する、すなわち '@var{nocompatible}' にする必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	set backspace=indent,eol,start
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set backspace=indent,eol,start
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This specifies where in Insert mode the <BS> is allowed to delete the
character in front of the cursor.  The three items, separated by commas, tell
Vim to delete the white space at the start of the line, a line break and the
character before where Insert mode started.
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
挿入モードで @key{<BS>} を使って削除できる文字を指定しています。コンマで区切られた 3 つの部分はそれぞれ次の文字の削除を許可しています。

@multitable @columnfractions .1 .3 .6
@item @tab indent @tab 行頭の空白
@item @tab eol @tab 改行
@item @tab start @tab 挿入モード開始位置より手前の文字
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set autoindent
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set autoindent
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This makes Vim use the indent of the previous line for a newly created line.
Thus there is the same amount of white space before the new line.  For example
when pressing <Enter> in Insert mode, and when using the "o" command to open a
new line.
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しい行を作成したときに、直前の行と同じだけインデントされるようになります。つまり、新しい行の行頭に直前の行と同じだけの空白が挿入されます。例えば、挿入モードで @key{<Enter>} キーを押したときや、"@command{o}" コマンドで新しい行を作成したときに機能します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	if has("vms")
	  set nobackup
	else
	  set backup
	endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if has("vms")
  set nobackup
else
  set backup
endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This tells Vim to keep a backup copy of a file when overwriting it.  But not
on the VMS system, since it keeps old versions of files already.  The backup
file will have the same name as the original file with "~" added.  See |07.4|
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを上書きしたときに、バックアップファイルを削除しないように指定しています。ただし VMS システムでは OS が古いバージョンを保持してくれるので、オフにしています。バックアップファイルのファイル名はオリジナルの名前に "@samp{~}" を加えたものになります。|@ref{07.4, , 07.4}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set history=50
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set history=50
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Keep 50 commands and 50 search patterns in the history.  Use another number if
you want to remember fewer or more lines.
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドを 50 個分、検索パターンを 50 個分、ヒストリ(履歴)として残します。記録の容量を増減したいときはこの値を変更してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set ruler
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set ruler
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Always display the current cursor position in the lower right corner of the
Vim window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のカーソル位置(行、桁)を Vim ウィンドウの右下に常に表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	set showcmd
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set showcmd
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Display an incomplete command in the lower right corner of the Vim window,
left of the ruler.  For example, when you type "2f", Vim is waiting for you to
type the character to find and "2f" is displayed.  When you press "w" next,
the "2fw" command is executed and the displayed "2f" is removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
入力途中の (まだ実行していない) コマンドを Vim ウィンドウの右下 (rulerの左側) に表示します。例えば、"@command{2f}" と入力したとき、Vim は検索文字の入力を待っていて、画面の右下には "2f" と表示されます。次に "@command{w}" と入力すると、"@command{2fw}" というコマンドが完成するので、それが実行され、画面の "2f" という表示も消去されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------------------------+
	|text in the Vim window				  |
	|~						  |
	|~						  |
	|-- VISUAL --			2f     43,8   17% |
	+-------------------------------------------------+
	 ^^^^^^^^^^^		      ^^^^^^^^ ^^^^^^^^^^
	  'showmode'		     'showcmd'	'ruler'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------------------------+
|text in the Vim window                           |
|~                                                |
|~                                                |
|-- VISUAL --                   2f     43,8   17% |
+-------------------------------------------------+
 ^^^^^^^^^^^                  ^^^^^^^^ ^^^^^^^^^^
  'showmode'                 'showcmd'  'ruler'
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	set incsearch
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set incsearch
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Display the match for a search pattern when halfway typing it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
検索パターンを入力中に、入力途中のパターンにマッチする文字列を表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	map Q gq
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
map Q gq
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This defines a key mapping.  More about that in the next section.  This
defines the "Q" command to do formatting with the "gq" operator.  This is how
it worked before Vim 5.0.  Otherwise the "Q" command starts Ex mode, but you
will not need it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーマップを定義しています。詳しくは次の節で述べます。ここでは、"@command{gq}" オペレータのフォーマット機能を "@command{Q}" コマンドとして定義しています。"@command{Q}" の動作が Vim 4.0 以前と同じになります。実際の "@command{Q}" は EX モードへの移行コマンドですが、おそらく必要ないでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This mapping yanks the visually selected text and searches for it in C files.
This is a complicated mapping.  You can see that mappings can be used to do
quite complicated things.  Still, it is just a sequence of commands that are
executed like you typed them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマップは、選択されたテキストをヤンクして、それを C ファイルの中から検索します。これは複雑なマップです。マップを使ってとても難しいことができるということが分かってもらえたと思います。とはいっても、実際にコマンドを手入力するのと同じように一連のコマンドを実行しているに過ぎません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	if &t_Co > 2 || has("gui_running")
	  syntax on
	  set hlsearch
	endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This switches on syntax highlighting, but only if colors are available.  And
the 'hlsearch' option tells Vim to highlight matches with the last used search
pattern.  The "if" command is very useful to set options only when some
condition is met.  More about that in |usr_41.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カラー表示が使えるかどうかを確認し、構文強調表示を有効にしています。さらに、'@option{hlsearch}' オプションをオンにして、検索にマッチした箇所が強調表示されるようにしています。特定の条件のときだけオプションを設定したい場合は "@command{if}" コマンドが便利です。 詳しくは、|@ref{usr_41.txt, , usr_41.txt}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*vimrc-filetype*  >
	filetype plugin indent on
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vimrc-filetype}
@cindex vimrc-filetype
@verbatim
filetype plugin indent on
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This switches on three very clever mechanisms:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
3 つの便利な機能を有効にしています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Filetype detection.
   Whenever you start editing a file, Vim will try to figure out what kind of
   file this is.  When you edit "main.c", Vim will see the ".c" extension and
   recognize this as a "c" filetype.  When you edit a file that starts with
   "#!/bin/sh", Vim will recognize it as a "sh" filetype.
   The filetype detection is used for syntax highlighting and the other two
   items below.
   See |filetypes|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item ファイルタイプの検出
ファイルを開いたときに、そのファイルの種類を特定します。例えば、"@file{main.c}" を開いた場合は、拡張子の "@samp{.c}" を見てファイルタイプは "@var{c}" だと判断します。ファイルの 1 行目が "@samp{#!/bin/sh}" で始まっていた場合は、ファイルタイプは "@var{sh}" だと判断します。検出されたファイルタイプは構文強調と次の 2 つの項目で使われます。|filetypes| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
2. Using filetype plugin files
   Many different filetypes are edited with different options.  For example,
   when you edit a "c" file, it's very useful to set the 'cindent' option to
   automatically indent the lines.  These commonly useful option settings are
   included with Vim in filetype plugins.  You can also add your own, see
   |write-filetype-plugin|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ファイルタイププラグインを使う
ファイルを開いたときに、ファイルタイプに応じたオプションが設定されます。例えば、"c" ファイルの場合なら自動的にインデントしてくれる '@option{cindent}' オプションは欠かせないでしょう。こういった、一般的に便利な設定がファイルタイププラグインの中に入っています。自分でプラグインを追加することもできます。|@ref{write-filetype-plugin, , write-filetype-plugin}|参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
3. Using indent files
   When editing programs, the indent of a line can often be computed
   automatically.  Vim comes with these indent rules for a number of
   filetypes.  See |:filetype-indent-on| and 'indentexpr'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item インデントファイルを使う
プログラミング言語のインデントはほとんど自動的に計算できます。Vim にはファイルタイプに応じたインデントルールが数多く用意されています。|:filetype-indent-on| と '@option{indentexpr}' 参照。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
>
	autocmd FileType text setlocal textwidth=78
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
autocmd FileType text setlocal textwidth=78
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This makes Vim break text to avoid lines getting longer than 78 characters.
But only for files that have been detected to be plain text.  There are
actually two parts here.  "autocmd FileType text" is an autocommand.  This
defines that when the file type is set to "text" the following command is
automatically executed.  "setlocal textwidth=78" sets the 'textwidth' option
to 78, but only locally in one file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行が長くなりすぎないように 78 文字で分割するように指定しています。このルールはテキストファイルにだけ適用されます。この記述には二つの要素があります。"@samp{autocmd FileType text}" はオートコマンド定義です。この場合、ファイルタイプが "@var{text}" に設定されたときに、指定したコマンドが自動的に実行されます。"@samp{setlocal textwidth=78}" はそのファイルの '@option{textwidth}' オプションを @var{78} に設定しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*restore-cursor*  >
	autocmd BufReadPost *
	    \ if line("'\"") > 1 && line("'\"") <= line("$") |
	    \   exe "normal! g`\"" |
	    \ endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{restore-cursor}
@cindex restore-cursor
@verbatim
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another autocommand.  This time it is used after reading any file.  The
complicated stuff after it checks if the '" mark is defined, and jumps to it
if so.  The backslash at the start of a line is used to continue the command
from the previous line.  That avoids a line getting very long.
See |line-continuation|.  This only works in a Vim script file, not when
typing commands at the command-line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オートコマンドをもう 1 つ。ファイルを読み込んだ直後に実行されるオートコマンドを定義しています。後ろのごちゃごちゃした部分は「@var{'"} マークが定義されているかどうかをチェックし、定義があればそこにジャンプする」という意味です。コマンドを複数行に分けて書くために、行頭に "@samp{\}" を書いています。行がやたらと長くなるのを防ぐためです。|line-continuation| 参照。"@samp{\}" は Vim script 内でのみ使えます。コマンドラインで入力するときは使えません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.3*	Simple mappings
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.3}
@section 簡単なマップ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A mapping enables you to bind a set of Vim commands to a single key.  Suppose,
for example, that you need to surround certain words with curly braces.  In
other words, you need to change a word such as "amount" into "{amount}".  With
the :map command, you can tell Vim that the F5 key does this job.  The command
is as follows: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マップを使うと、複数のコマンドを 1 つのキー繰作にまとめることができます。例えば、ある単語を @samp{@{@}} で囲みたいとします。つまり、"amount" を "@{amount@}" にしたいわけです。"@command{:map}" コマンドを使って、その操作を @key{<F5>} キーに割り当てることができます。次のように書きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:map <F5> i{<Esc>ea}<Esc>
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:map <F5> i@{<Esc>ea@}<Esc>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note:
	When entering this command, you must enter <F5> by typing four
	characters.  Similarly, <Esc> is not entered by pressing the <Esc>
	key, but by typing five characters.  Watch out for this difference
	when reading the manual!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このコマンドを入力するときの注意点。@samp{<F5>} は見たままの 4 文字の文字列として入力してください。@samp{<Esc>} も同じです。@key{<Esc>} キーを押すのではなく、5 文字の文字列として入力してください。このマニュアルを読むときはその違いに注意してください !
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Let's break this down:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この定義を分解してみましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    <F5>	The F5 function key.  This is the trigger key that causes the
		command to be executed as the key is pressed.

    i{<Esc>	Insert the { character.  The <Esc> key ends Insert mode.

    e		Move to the end of the word.

    a}<Esc>	Append the } to the word.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @samp
@item <F5>
ファンクションキーの @key{<F5>} です。このキーを押すと、定義してあるコマンドが実行されます。

@item i@{<Esc>
"@samp{@{}" 文字を挿入し、@key{<Esc>} キーで挿入モードから抜けます。

@item e
単語の末尾に移動します。

@item a@}<Esc>
"@samp{@}}" 文字を追加します。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After you execute the ":map" command, all you have to do to put {} around a
word is to put the cursor on the first character and press F5.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この "@command{:map}" コマンドを実行した後は、カーソルを単語の先頭に動かして @key{<F5>} キーを押すだけで単語の両側に @samp{@{@}} を追加できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this example, the trigger is a single key; it can be any string.  But when
you use an existing Vim command, that command will no longer be available.
You better avoid that.
   One key that can be used with mappings is the backslash.  Since you
probably want to define more than one mapping, add another character.  You
could map "\p" to add parentheses around a word, and "\c" to add curly braces,
for example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この例では、コマンドは 1 キーでしたが、どの文字列でも割り当てることができます。ただし、Vim のコマンドと同じ文字列を割り当てると、元のコマンドが使えなくなるので、それは避けた方が無難です。

複数キーを組み合わせるときには、バックスラッシュ(日本語環境では円記号)がよく使われます。マップをたくさん定義したい場合は、複数文字を使ってください。例えば、単語を @samp{()} で囲むには "@command{\p}" で、単語を @samp{@{@}} で囲むには "@command{\c}" で、といったことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:map \p i(<Esc>ea)<Esc>
	:map \c i{<Esc>ea}<Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:map \p i(<Esc>ea)<Esc>
:map \c i@{<Esc>ea@}<Esc>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You need to type the \ and the p quickly after another, so that Vim knows they
belong together.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@samp{\}" と "@samp{p}" はくっつけてください。そうすれば Vim は 2 文字のマップだと認識できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":map" command (with no arguments) lists your current mappings.  At
least the ones for Normal mode.  More about mappings in section |40.1|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
引数なしの "@command{:map}" コマンドで現在のマップ定義の一覧を表示できます。表示されたマップは、少なくともノーマルモードで使えます。より詳しくは |@ref{40.1, , 40.1}| 章を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.4*	Adding a package			*add-package* *matchit-install*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.4}
@anchor{add-package}
@anchor{matchit-install}
@cindex add-package
@cindex matchit-install
@section パッケージの追加
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A package is a set of files that you can add to Vim.  There are two kinds of
packages: optional and automatically loaded on startup.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パッケージとは Vim に追加するファイルの集合です。パッケージには、任意のタイミングで読み込めるものと、起動時に自動的に読み込まれるものの2種類があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim distribution comes with a few packages that you can optionally use.
For example, the matchit plugin.  This plugin makes the "%" command jump to
matching HTML tags, if/else/endif in Vim scripts, etc.  Very useful, although
it's not backwards compatible (that's why it is not enabled by default).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は、数個の任意に読み込めるパッケージと一緒に配布されています。例えば matchit プラグインです。このプラグインは "@command{%}" コマンドを、HTML タグや Vim script の if/else/endif やその他のものにマッチするようにします。とても便利なのですが後方互換性はありません。それがデフォルトでは無効にされている理由です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To start using the matchit plugin, add one line to your vimrc file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
matchit プラグインを使い始めるには、以下の行をあなたの @file{vimrc} ファイルに追加してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	packadd! matchit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
packadd! matchit
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That's all!  After restarting Vim you can find help about this plugin: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
たったこれだけです。あとは Vim を再起動するだけで、このプラグインについてのヘルプを見つけられます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:help matchit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help matchit
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This works, because when `:packadd` loaded the plugin it also added the
package directory in 'runtimepath', so that the help file can be found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これが動作するのは `:packadd` でプラグインを読み込む際に、パッケージのディレクトリを '@option{runtimepath}' に追加するためです。それによりヘルプファイルを見つけられるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find packages on the Internet in various places.  It usually comes as
an archive or as a repository.  For an archive you can follow these steps:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パッケージはインターネットの様々な場所から入手できるでしょう。通常それらは圧縮アーカイブかレポジトリの形態を採用しているでしょう。アーカイブであれば以下のようなステップでインストールできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	1. create the package directory: >
		mkdir -p ~/.vim/pack/fancy
<	   "fancy" can be any name of your liking.  Use one that describes the
	   package.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
パッケージディレクトリを作成する:

@example
mkdir -p ~/.vim/pack/fancy
@end example

"fancy" はあなたの好きな名前に変更できます。パッケージを表すのに良いものを使いましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	2. unpack the archive in that directory.  This assumes the top
	   directory in the archive is "start": >
	   	cd ~/.vim/pack/fancy
		unzip /tmp/fancy.zip
<	   If the archive layout is different make sure that you end up with a
	   path like this:
		~/.vim/pack/fancy/start/fancytext/plugin/fancy.vim ~
	   Here "fancytext" is the name of the package, it can be anything
	   else.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
そのディレクトリにアーカイブを解凍しましょう。以下はアーカイブ内のトップディレクトリは "@samp{start}" であると仮定しています:

@example
cd ~/.vim/pack/fancy
unzip /tmp/fancy.zip
@end example

アーカイブ展開後のレイアウトが、以下のようなパスになっていなければ、適宜修正してください:

@verbatim
~/.vim/pack/fancy/start/fancytext/plugin/fancy.vim
@end verbatim

ここの "@samp{fancytext}" はパッケージ名なので、実際には別の名前になるでしょう。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More information about packages can be found here: |packages|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パッケージについてのより詳しい情報は次の項目を参照してください: |packages|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.5*	Adding a plugin					*add-plugin* *plugin*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.5}
@anchor{add-plugin}
@anchor{plugin}
@cindex add-plugin
@cindex plugin
@section プラグインの追加
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim's functionality can be extended by adding plugins.  A plugin is nothing
more than a Vim script file that is loaded automatically when Vim starts.  You
can add a plugin very easily by dropping it in your plugin directory.
{not available when Vim was compiled without the |+eval| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインを追加することで機能拡張できます。プラグインといっても、Vim が起動されたときに自動的に読み込まれるだけの、ただの Vim script ファイルです。ファイルをプラグインディレクトリにコピーするだけで簡単にプラグインを追加できます。
@{訳注: |+eval| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are two types of plugins:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 種類のプラグインがあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    global plugin: Used for all kinds of files
  filetype plugin: Only used for a specific type of file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item グローバルプラグイン
@tab 全種類のファイルで使われるプラグイン
@item ファイルタイププラグイン
@tab 特定タイプのファイルでのみ使われるプラグイン
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The global plugins will be discussed first, then the filetype ones
|add-filetype-plugin|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まず、グローバルプラグインについて説明し、次にファイルタイププラグインの説明 |@ref{add-filetype-plugin, , add-filetype-plugin}| をします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GLOBAL PLUGINS						*standard-plugin*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{standard-plugin}
@cindex standard-plugin
@unnumberedsubsec グローバルプラグイン
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you start Vim, it will automatically load a number of global plugins.
You don't have to do anything for this.  They add functionality that most
people will want to use, but which was implemented as a Vim script instead of
being compiled into Vim.  You can find them listed in the help index
|standard-plugin-list|.  Also see |load-plugins|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動すると、自動的にいくつものグローバルプラグインがロードされます。特に何もしなくて大丈夫です。グローバルプラグインは、ほとんどの人が欲しいと思うだろう機能を提供しています。それらの機能は Vim の中にコンパイルして組み込まれているのではなく、Vim script として実装されています。ヘルプの目次にプラグインの一覧があります |standard-plugin-list|。|load-plugins| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*add-global-plugin*
You can add a global plugin to add functionality that will always be present
when you use Vim.  There are only two steps for adding a global plugin:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{add-global-plugin}
@cindex add-global-plugin
グローバルプラグインを追加すると、いつでもその機能を使えるようになります。グローバルプラグインを追加するのは簡単です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Get a copy of the plugin.
2. Drop it in the right directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item
プラグインを入手する
@item
正しいディレクトリにコピーする
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GETTING A GLOBAL PLUGIN
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec グローバルプラグインを入手する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Where can you find plugins?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインはどこにありますか？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Some come with Vim.  You can find them in the directory $VIMRUNTIME/macros
  and its sub-directories.
- Download from the net.  There is a large collection on http://www.vim.org.
- They are sometimes posted in a Vim |maillist|.
- You could write one yourself, see |write-plugin|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item
Vim の配布物にいくつか含まれています。$VIMRUNTIME/macros ディレクトリをご覧ください。
@item
インターネットからダウンロードする。たくさんのプラグインが @url{http://www.vim.org} にあります。
@item
Vim のメーリングリスト |maillist| に投稿されることもあります。
@item
あなたが自作することもできます。プラグインの書き方 |@ref{write-plugin, , write-plugin}| をどうぞ。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some plugins come as a vimball archive, see |vimball|.
Some plugins can be updated automatically, see |getscript|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのプラグインは vimball アーカイブで配布されています。|vimball| 参照。いくつかのプラグインは自動更新可能です。|getscript| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING A GLOBAL PLUGIN
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec グローバルプラグインを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
First read the text in the plugin itself to check for any special conditions.
Then copy the file to your plugin directory:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まず、プラグイン自身のドキュメントを読んで、動作条件を確認してください。次にそれをプラグインディレクトリにコピーします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	system		plugin directory ~
	Unix		~/.vim/plugin/
	PC and OS/2	$HOME/vimfiles/plugin or $VIM/vimfiles/plugin
	Amiga		s:vimfiles/plugin
	Macintosh	$VIM:vimfiles:plugin
	Mac OS X	~/.vim/plugin/
	RISC-OS		Choices:vimfiles.plugin
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item system @tab plugin directory
@item Unix @tab ~/.vim/plugin/
@item PC や OS/2 @tab $HOME/vimfiles/plugin か $VIM/vimfiles/plugin
@item Amiga @tab s:vimfiles/plugin
@item Macintosh @tab $VIM:vimfiles:plugin
@item Mac OS X @tab ~/.vim/plugin/
@item RISC-OS @tab Choices:vimfiles.plugin
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example for Unix (assuming you didn't have a plugin directory yet): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix の場合の例 (プラグインディレクトリがまだない場合)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	mkdir ~/.vim
	mkdir ~/.vim/plugin
	cp /tmp/yourplugin.vim ~/.vim/plugin
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
mkdir ~/.vim
mkdir ~/.vim/plugin
cp /tmp/yourplugin.vim ~/.vim/plugin
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That's all!  Now you can use the commands defined in this plugin.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これだけです。もうこのプラグインで定義されたコマンドが使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Instead of putting plugins directly into the plugin/ directory, you may
better organize them by putting them into subdirectories under plugin/.
As an example, consider using "~/.vim/plugin/perl/*.vim" for all your Perl
plugins.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
plugin/ ディレクトリ以下にファイルを置く代わりに、それらのファイルを plugin/ ディレクトリ以下のサブディレクトリに置くこともできます。例えば、Perl 用のプラグインを "@file{~/.vim/plugin/perl/*.vim}" に置いたりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
FILETYPE PLUGINS			*add-filetype-plugin* *ftplugins*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{add-filetype-plugin}
@anchor{ftplugins}
@cindex add-filetype-plugin
@cindex ftplugins
@unnumberedsubsec ファイルタイププラグイン
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim distribution comes with a set of plugins for different filetypes that
you can start using with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の配布パッケージにはたくさんのファイルタイププラグインが入っています。次のコマンドで利用開始できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:filetype plugin on
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:filetype plugin on
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That's all!  See |vimrc-filetype|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これだけです。|@ref{vimrc-filetype, , vimrc-filetype}|も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are missing a plugin for a filetype you are using, or you found a
better one, you can add it.  There are two steps for adding a filetype plugin:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使いたいファイルタイププラグインがない場合や、標準より良いものを見つけた場合は追加することもできます。ファイルタイププラグインの追加は次の手順で行います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Get a copy of the plugin.
2. Drop it in the right directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item
プラグインを入手する
@item
正しいディレクトリにコピーする
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GETTING A FILETYPE PLUGIN
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ファイルタイププラグインを入手する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find them in the same places as the global plugins.  Watch out if the
type of file is mentioned, then you know if the plugin is a global or a
filetype one.  The scripts in $VIMRUNTIME/macros are global ones, the filetype
plugins are in $VIMRUNTIME/ftplugin.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルタイププラグインもグローバルプラグインと同じ方法で入手できます。プラグインの種類が記載されているのでそれを見て、そのプラグインがグローバルプラグインかファイルタイププラグインか確認してください。$VIMRUNTIME/macros に入っているのはグローバルプラグインです。$VIMRUNTIME/ftplugin に入っているのはファイルタイププラグインです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING A FILETYPE PLUGIN					*ftplugin-name*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ftplugin-name}
@cindex ftplugin-name
@unnumberedsubsec ファイルタイププラグインを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can add a filetype plugin by dropping it in the right directory.  The
name of this directory is in the same directory mentioned above for global
plugins, but the last part is "ftplugin".  Suppose you have found a plugin for
the "stuff" filetype, and you are on Unix.  Then you can move this file to the
ftplugin directory: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルタイププラグインは正しいディレクトリにコピーするだけで追加できます。ディレクトリの場所はグローバルプラグインと同じですが、ディレクトリ名の最後の部分が "ftplugin" となります。例えば "stuff" ファイルタイプ用のプラグインを Unix システムに入れるとしましょう。入手したファイルを次のコマンドで ftplugin ディレクトリに移します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	mv thefile ~/.vim/ftplugin/stuff.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
mv thefile ~/.vim/ftplugin/stuff.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If that file already exists you already have a plugin for "stuff".  You might
want to check if the existing plugin doesn't conflict with the one you are
adding.  If it's OK, you can give the new one another name: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そのファイルがすでにある場合は、既存のプラグインと追加しようとしているプラグインを同時に使っても問題ないかどうか確認してください。問題がなければ別の名前に変えましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	mv thefile ~/.vim/ftplugin/stuff_too.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
mv thefile ~/.vim/ftplugin/stuff_too.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The underscore is used to separate the name of the filetype from the rest,
which can be anything.  If you use "otherstuff.vim" it wouldn't work, it would
be loaded for the "otherstuff" filetype.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アンダースコアはファイルタイプの名前とそれ以外を区切るのに使います。アンダースコア以降はどんな文字列でも構いません。しかし、"@file{otherstuff.vim}" といった名前にした場合はうまく動きません。そのファイルは "@samp{otherstuff}" というファイルタイプのときにだけロードされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On MS-DOS you cannot use long filenames.  You would run into trouble if you
add a second plugin and the filetype has more than six characters.  You can
use an extra directory to get around this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-DOS では長いファイル名が使えません。プラグインを追加するときに、ファイルタイプ名が 6 文字以上だと問題が生じます。そういうときはさらにディレクトリを掘ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	mkdir $VIM/vimfiles/ftplugin/fortran
	copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
mkdir $VIM/vimfiles/ftplugin/fortran
copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The generic names for the filetype plugins are: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルタイププラグインの名前付けルールは次の通りです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
ftplugin/<filetype>.vim
ftplugin/<filetype>_<name>.vim
ftplugin/<filetype>/<name>.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here "<name>" can be any name that you prefer.
Examples for the "stuff" filetype on Unix: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"<name>" の部分はどんな文字列でも構いません。以下は Unix での "stuff" ファイルタイプの例です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	~/.vim/ftplugin/stuff.vim
	~/.vim/ftplugin/stuff_def.vim
	~/.vim/ftplugin/stuff/header.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
~/.vim/ftplugin/stuff.vim
~/.vim/ftplugin/stuff_def.vim
~/.vim/ftplugin/stuff/header.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <filetype> part is the name of the filetype the plugin is to be used for.
Only files of this filetype will use the settings from the plugin.  The <name>
part of the plugin file doesn't matter, you can use it to have several plugins
for the same filetype.  Note that it must end in ".vim".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
<filetype> の部分はプラグインの対象になっているファイルタイプ名です。同じファイルタイプのファイルだけがそのプラグインを使います。<name> の部分は無視されます。1 つのファイルタイプに複数のプラグインを登録する場合に使ってください。
@quotation
@strong{Note:} @*
ファイルの拡張子は必ず ".vim" にしてください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Further reading:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳しくは以下を参照してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|filetype-plugins|	Documentation for the filetype plugins and information
			about how to avoid that mappings cause problems.
|load-plugins|		When the global plugins are loaded during startup.
|ftplugin-overrule|	Overruling the settings from a global plugin.
|write-plugin|		How to write a plugin script.
|plugin-details|	For more information about using plugins or when your
			plugin doesn't work.
|new-filetype|		How to detect a new file type.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .75
@item |filetype-plugins|
@tab ファイルタイププラグインについてのドキュメントと、マップで問題が発生した場合の対処方法。
@item |load-plugins|
@tab 起動時にロードされるグローバルプラグイン。
@item |ftplugin-overrule|
@tab 標準のファイルタイププラグインの設定を上書きする。
@item |@ref{write-plugin, , write-plugin}|
@tab プラグインスクリプトの書き方。
@item |plugin-details|
@tab プラグインの使い方やプラグインが動かない場合についての詳細な情報。
@item |new-filetype|
@tab 新しいファイルタイプを追加するには。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.6*	Adding a help file				*add-local-help*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.6}
@anchor{add-local-help}
@cindex add-local-help
@section ヘルプファイルの追加
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are lucky, the plugin you installed also comes with a help file.  We
will explain how to install the help file, so that you can easily find help
for your new plugin.
   Let us use the "doit.vim" plugin as an example.  This plugin comes with
documentation: "doit.txt".  Let's first copy the plugin to the right
directory.  This time we will do it from inside Vim.  (You may skip some of
the "mkdir" commands if you already have the directory.) >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
運が良ければ、プラグインにはヘルプファイルが添付されています。ここでは、ヘルプファイルのインストール方法を説明します。 インストールしておけば新しいプラグインのヘルプを簡単に調べることができます。

"doit.vim" プラグインを例にやってみましょう。このプラグインにはヘルプ "@file{doit.txt}" が付属しています。最初にプラグイン本体を適切なディレクトリにコピーしましょう。(ディレクトリがすでにある場合は、"@command{mkdir}" コマンドを省略してください。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:!mkdir ~/.vim
	:!mkdir ~/.vim/plugin
	:!cp /tmp/doit.vim ~/.vim/plugin
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:!mkdir ~/.vim
:!mkdir ~/.vim/plugin
:!cp /tmp/doit.vim ~/.vim/plugin
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "cp" command is for Unix, on MS-DOS you can use "copy".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{cp}" は Unix のコマンドです。MS-DOS では "@command{copy}" を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now create a "doc" directory in one of the directories in 'runtimepath'. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次に '@option{runtimepath}' のいずれかのディレクトリに "doc" ディレクトリを作ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:!mkdir ~/.vim/doc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:!mkdir ~/.vim/doc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Copy the help file to the "doc" directory. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"doc" ディレクトリにヘルプファイルをコピーします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:!cp /tmp/doit.txt ~/.vim/doc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:!cp /tmp/doit.txt ~/.vim/doc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now comes the trick, which allows you to jump to the subjects in the new help
file: Generate the local tags file with the |:helptags| command. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
続いて、新しいヘルプファイルの項目にジャンプできるように仕掛けをします。|:helptags| コマンドを使ってタグファイルを生成してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:helptags ~/.vim/doc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:helptags ~/.vim/doc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can use the >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、これで次のコマンドが使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help doit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help doit
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
command to find help for "doit" in the help file you just added.  You can see
an entry for the local help file when you do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは上で追加したヘルプファイルの中から "doit" のヘルプを探すコマンドです。次のコマンドでローカルヘルプの目次を見ることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help local-additions
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help local-additions
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The title lines from the local help files are automagically added to this
section.  There you can see which local help files have been added and jump to
them through the tag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここには、インストールしたローカルヘルプのタイトルが自動的に追加されます。ここを見れば、どんなローカルヘルプが追加されているかわかります。ここからタグジャンプもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For writing a local help file, see |write-local-help|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ローカルヘルプファイルの書き方については |@ref{write-local-help, , write-local-help}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.7*	The option window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.7}
@section オプションウィンドウ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are looking for an option that does what you want, you can search in
the help files here: |options|.  Another way is by using this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何かのオプションを探しているなら、ヘルプファイル |options| から見つけることができるでしょう。もう 1 つ、次のコマンドを使う方法もあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:options
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:options
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This opens a new window, with a list of options with a one-line explanation.
The options are grouped by subject.  Move the cursor to a subject and press
<Enter> to jump there.  Press <Enter> again to jump back.  Or use CTRL-O.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいウィンドウが開き、1 行解説付きのオプションの一覧が表示されます。オプションは種類別にグループ化されています。カーソルを目次の上に動かして @key{<Enter>} を押すとそこにジャンプできます。もう一度 @key{<Enter>} を押すか、@kbd{CTRL-O} を押すと戻れます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can change the value of an option.  For example, move to the "displaying
text" subject.  Then move the cursor down to this line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その場でオプションの値を設定できます。例えば、"displaying text" グループに移動し、カーソルを次の行まで持っていきます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set wrap	nowrap ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set wrap    nowrap
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you hit <Enter>, the line will change to:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここで @key{<Enter>} を押すと、表示が次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set nowrap	wrap ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set nowrap  wrap
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The option has now been switched off.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションはオフになりました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Just above this line is a short description of the 'wrap' option.  Move the
cursor one line up to place it in this line.  Now hit <Enter> and you jump to
the full help on the 'wrap' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この行の上には '@option{wrap}' オプションの簡単な説明があります。説明のところにカーソルを動かして、@key{<Enter>} を押すと、'@option{wrap}' オプションのヘルプにジャンプできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For options that take a number or string argument you can edit the value.
Then press <Enter> to apply the new value.  For example, move the cursor a few
lines up to this line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
数値や文字列を引数に取るオプションの場合、値を編集できます。修正後に @key{<Enter>} キーを押すとそれが新しい値として設定されます。例えば、カーソルを次の行まで ('@option{wrap}' の少し上に) 動かしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set so=0 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
set so=0
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Position the cursor on the zero with "$".  Change it into a five with "r5".
Then press <Enter> to apply the new value.  When you now move the cursor
around you will notice that the text starts scrolling before you reach the
border.  This is what the 'scrolloff' option does, it specifies an offset
from the window border where scrolling starts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{$}" コマンドでカーソルを "0" の上に動かし、"@command{r5}" で値を @var{5} に変更します。@key{<Enter>} を押すと、その値が設定されます。カーソルを動かしてみると、画面の端までカーソルが達する前にスクロールが始まることに気づくと思います。これは '@option{scrolloff}' オプションのしわざです。ウィンドウの端からのオフセットを設定し、スクロールが開始する位置を指定しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*05.8*	Often used options
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{05.8}
@section よく使うオプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are an awful lot of options.  Most of them you will hardly ever use.
Some of the more useful ones will be mentioned here.  Don't forget you can
find more help on these options with the ":help" command, with single quotes
before and after the option name.  For example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim には本当に大量のオプションがあります。ほとんどのオプションは使う機会がないと思います。ここでは一部のよく使うものだけを説明します。これらのオプションにはより詳しいヘルプがあることをお忘れなく。ヘルプを見るには、"@command{:help}" に続けてアポストロフィで囲んだオプション名を指定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:help 'wrap'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:help 'wrap'
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In case you have messed up an option value, you can set it back to the
default by putting an ampersand (&) after the option name.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの値がおかしくなってしまったら、初期設定に戻すことができます。初期設定に戻すのにはアンパサンド(&)を使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword&
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword&
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
NOT WRAPPING LINES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 行の折り曲げの禁止
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim normally wraps long lines, so that you can see all of the text.  Sometimes
it's better to let the text continue right of the window.  Then you need to
scroll the text left-right to see all of a long line.  Switch wrapping off
with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
長い行は、文の全体が見えるように、画面の右端で折り曲げて表示されます。しかしウィンドウの右にはみ出した方が良い場合もあります。その場合は、左右にスクロールして長い行を表示することになります。次のコマンドで折り曲げしないようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set nowrap
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set nowrap
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will automatically scroll the text when you move to text that is not
displayed.  To see a context of ten characters, do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
表示されていない領域にカーソルを動かすと自動的にスクロールされます。10 文字ずつスクロールするには、次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set sidescroll=10
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set sidescroll=10
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This doesn't change the text in the file, only the way it is displayed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはファイルの内容には影響しません。表示方法を変更するだけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WRAPPING MOVEMENT COMMANDS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 折り返して移動するコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most commands for moving around will stop moving at the start and end of a
line.  You can change that with the 'whichwrap' option.  This sets it to the
default value: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどの移動コマンドは行頭と行末で移動を停止します。'@option{whichwrap}' オプションでそれを変更できます。次の例では、'@option{whichwrap}' を初期設定に設定しています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set whichwrap=b,s
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set whichwrap=b,s
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This allows the <BS> key, when used in the first position of a line, to move
the cursor to the end of the previous line.  And the <Space> key moves from
the end of a line to the start of the next one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここでは、@key{<BS>} キーで行頭から 1 つ上の行の行末へ動くことを許可しています。また、@key{<Space>} キーで行末から次の行の行頭への移動することを許可しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To allow the cursor keys <Left> and <Right> to also wrap, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルキーの @key{<Left>} と @key{<Right>} もこのコマンドで折り返しを許可できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set whichwrap=b,s,<,>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set whichwrap=b,s,<,>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is still only for Normal mode.  To let <Left> and <Right> do this in
Insert mode as well: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この指定はノーマルモードでのみ有効です。挿入モードでも @key{<Left>} と @key{<Right>} を許可するには次のように指定します: >
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set whichwrap=b,s,<,>,[,]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set whichwrap=b,s,<,>,[,]
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are a few other flags that can be added, see 'whichwrap'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他にもいくつかフラグがあります。詳しくは '@option{whichwrap}' を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
VIEWING TABS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec TAB を表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When there are tabs in a file, you cannot see where they are.  To make them
visible: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル中に Tab 文字があっても、それを視認することはできません。Tab 文字が表示されるようにしましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set list
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set list
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now every tab is displayed as ^I.  And a $ is displayed at the end of each
line, so that you can spot trailing spaces that would otherwise go unnoticed.
   A disadvantage is that this looks ugly when there are many Tabs in a file.
If you have a color terminal, or are using the GUI, Vim can show the spaces
and tabs as highlighted characters.  Use the 'listchars' option: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Tab 文字が @samp{^I} と表示されます。行末には @samp{$} と表示され、通常なら気づかないような、行末の空白もよくわかるようになります。

これの欠点はファイルに Tab 文字がたくさんあると見づらくなる点です。カラー端末か GUI を使っている場合は、空白と Tab 文字を別の文字に置き換えて強調表示することができます。'@option{listchars}' オプションを使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set listchars=tab:>-,trail:-
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set listchars=tab:>-,trail:-
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now every tab will be displayed as ">---" (with more or less "-") and trailing
white space as "-".  Looks a lot better, doesn't it?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Tab 文字は全て "@samp{>---}" と表示され、行末の空白は "@samp{-}" と表示されます。この方がずっとイイと思いませんか？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
KEYWORDS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec キーワード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'iskeyword' option specifies which characters can appear in a word: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{iskeyword}' オプションは単語に使える文字を定義しています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	  iskeyword=@,48-57,_,192-255 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
  iskeyword=@@,48-57,_,192-255
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "@" stands for all alphabetic letters.  "48-57" stands for ASCII
characters 48 to 57, which are the numbers 0 to 9.  "192-255" are the
printable latin characters.
   Sometimes you will want to include a dash in keywords, so that commands
like "w" consider "upper-case" to be one word.  You can do it like this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@samp{@@}" は「すべてのアルファベット」を表しています。"48-57" は ASCII コード の 48 から 57 までの文字、つまり "0" から "9" までの数字を表しています。"192-255" は印字可能なラテン文字です。

例えば、"upper-case" を 1 つの単語と扱って欲しい場合は、"@var{-}" をキーワードに追加します。次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword+=-
	:set iskeyword
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword+=-
:set iskeyword
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	  iskeyword=@,48-57,_,192-255,- ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
  iskeyword=@,48-57,_,192-255,-
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you look at the new value, you will see that Vim has added a comma for you.
   To remove a character use "-=".  For example, to remove the underscore: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しい設定をみると、"@samp{-}" の直前に "@samp{,}" が自動的に追加されています。キーワードから文字を削除するには "-=" を使います。アンダースコアを削除するには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set iskeyword-=_
	:set iskeyword
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set iskeyword-=_
:set iskeyword
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	  iskeyword=@,48-57,192-255,- ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
  iskeyword=@,48-57,192-255,-
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This time a comma is automatically deleted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@samp{_}" を削除すると "@samp{,}" も自動的に削除されました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
ROOM FOR MESSAGES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メッセージ行
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When Vim starts there is one line at the bottom that is used for messages.
When a message is long, it is either truncated, thus you can only see part of
it, or the text scrolls and you have to press <Enter> to continue.
   You can set the 'cmdheight' option to the number of lines used for
messages.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
初期設定では、最下段の 1 行がメッセージの表示に使われます。メッセージが長いときは、メッセージを切り詰めて一部だけ表示するか、メッセージをスクロールして表示し、最後に @key{<Enter>} を押してもらうかのどちらかです。

メッセージの表示に使う行数は '@option{cmdheight}' オプションで設定できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set cmdheight=3
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set cmdheight=3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This does mean there is less room to edit text, thus it's a compromise.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
編集画面が狭くなってしまうので、ほどほどの値を設定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_06.txt|  Using syntax highlighting

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
