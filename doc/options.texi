@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node options.txt, , , 目次
@unnumbered 全オプションの説明
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*options.txt*	For Vim version 8.0.  Last change: 2017 Dec 21


		  VIM REFERENCE MANUAL	  by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*options.txt*	For Vim バージョン 8.0.  Last change: 2017 Dec 21


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Options							*options*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{options}
@cindex options
オプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Setting options			|set-option|
2. Automatically setting options	|auto-setting|
3. Options summary			|option-summary|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. オプションの設定 @tab |@ref{set-option, , set-option}|
@item 2. オプションの自動設定 @tab |@ref{auto-setting, , auto-setting}|
@item 3. オプションの要約 @tab |@ref{option-summary, , option-summary}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For an overview of options see quickref.txt |option-list|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの概要については、quickref.txt |@ref{option-list, , option-list}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim has a number of internal variables and switches which can be set to
achieve special effects.  These options come in three forms:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim には、特別な働きをさせるための多くの内部変数とスイッチがある。それらのオプションには 3 種類ある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	boolean		can only be on or off		*boolean* *toggle*
	number		has a numeric value
	string		has a string value
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{boolean}
@anchor{toggle}
@cindex boolean
@cindex toggle
@multitable @columnfractions .45 .55
@item 切替 boolean オプション @tab オンかオフかのどちらかの値をとる
@item 数値 number オプション @tab 数値の値を取る
@item 文字列 string オプション @tab 文字列の値を取る
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@{@strong{訳注:} このヘルプの中で多く出てくる語句で、分かりにくいものを説明する。
@table @asis
@item - ローカルな:
あるバッファまたはウィンドウにのみ適用されるような、という意味。
@item - ローカルオプション:
あるバッファまたはウィンドウ内の設定のみを変え、その他のバッファまたはウィンドウの設定に影響しないようなオプション。
@item - ウィンドウについてローカルな:
あるウィンドウにのみ適用されるような、という意味。バッファについてローカルな、も同様な意味を持つ。
@item - グローバルな:
Vim 全体に適用されるような、または、Vim全体で共通の値を使うような、という意味。
@end table
上の 4 項目については |option-summary| も参照。
@table @asis
@item - non-printable, unprintable:
文字が画面に表示可能なフォントに対応していないこと。具体的には @key{<CTRL>} などを押しながら入力した文字や @key{<ESC>} が例である。主に制御に利用される。
@end table
訳語で、さらに相応しいものがあればご提案を下さい。@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Setting options					*set-option* *E764*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{set-option}
@anchor{E764}
@cindex set-option
@cindex E764
@section 1. オプションの設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:se* *:set*
:se[t]			Show all options that differ from their default value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:se}
@anchor{:set}
@cindex :se
@cindex :set
@table @asis
@item :se[t]
既定値と違う値のオプションを全て表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] all		Show all but terminal options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] all
ターミナルオプション以外の全てのオプションを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] termcap		Show all terminal options.  Note that in the GUI the
			key codes are not shown, because they are generated
			internally and can't be changed.  Changing the terminal
			codes in the GUI is not useful either...
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] termcap
ターミナルオプションを全て表示する。
@quotation
@strong{Note:} @*
GUI バージョンでは、キーコードは表示されないので注意。なぜなら、キーコードは内部的に生成され、変更が不可能だからだ。それに、GUI バージョンでターミナルコードを変更するのは便利とは言えない...
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*E518* *E519*
:se[t] {option}?	Show value of {option}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E518}
@anchor{E519}
@cindex E518
@cindex E519
@item :se[t] @{option@}?
@{option@} の値を表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] {option}		Toggle option: set, switch it on.
			Number option: show value.
			String option: show value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] @{option@}
切替オプション: セット、すなわちオンに切り替える。

数値オプション: 値を表示する。

文字列オプション: 値を表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] no{option}	Toggle option: Reset, switch it off.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] no@{option@}
切替オプション: リセット、すなわちオフに切り替える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							   *:set-!* *:set-inv*
:se[t] {option}!   or
:se[t] inv{option}	Toggle option: Invert value. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-!}
@anchor{:set-inv}
@cindex :set-!
@cindex :set-inv
@item :se[t] @{option@}! または
@itemx :se[t] inv@{option@}
切替オプション: オンとオフを切り替える。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*:set-default* *:set-&* *:set-&vi* *:set-&vim*
:se[t] {option}&	Reset option to its default value.  May depend on the
			current value of 'compatible'. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-default}
@anchor{:set-&}
@anchor{:set-&vi}
@anchor{:set-&vim}
@cindex :set-default
@cindex :set-&
@cindex :set-&vi
@cindex :set-&vim
@item :se[t] @{option@}&
オプションを既定値に設定する。オプション '@option{compatible}' のその時点の値によって違うかもしれない。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:se[t] {option}&vi	Reset option to its Vi default value. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] @{option@}&vi
オプションをViの既定値に設定する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:se[t] {option}&vim	Reset option to its Vim default value. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] @{option@}&vim
オプションを Vim の既定値に設定する。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] all&		Set all options to their default value.  The values of 
			these options are not changed:
			  all terminal options, starting with t_
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] all&
全てのオプションを既定値に設定する。ただし以下のオプションについては変更しない。

t_ で始まる端末用のオプション全部
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			  'columns'
			  'cryptmethod'
			  'encoding'
			  'key'
			  'lines'
			  'term'
			  'ttymouse'
			  'ttytype'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
'columns'
'cryptmethod'
'encoding'
'key'
'lines'
'term'
'ttymouse'
'ttytype'
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Warning: This may have a lot of side effects.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{警告:} これにはたくさんの副作用があるだろう。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:set-args* *E487* *E521*
:se[t] {option}={value}		or
:se[t] {option}:{value}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-args}
@anchor{E487}
@anchor{E521}
@cindex :set-args
@cindex E487
@cindex E521
@item :se[t] @{option@}=@{value@} または
@itemx :se[t] @{option@}:@{value@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Set string or number option to {value}.
			For numeric options the value can be given in decimal,
			hex (preceded with 0x) or octal (preceded with '0').
			The old value can be inserted by typing 'wildchar' (by
			default this is a <Tab> or CTRL-E if 'compatible' is
			set).  See |cmdline-completion|.
			White space between {option} and '=' is allowed and
			will be ignored.  White space between '=' and {value}
			is not allowed.
			See |option-backslash| for using white space and
			backslashes in {value}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
数値および文字列オプションの値を @{value@} に設定する。

数値オプションの値は、10 進数、(0x を頭に付けて) 16 進数、または ('0' を頭に付けて) 8 進数で指定できる。オプション '@option{wildchar}' で指定された文字 (既定では <Tab>、オプション '@option{compatible}' がオンならば @kbd{CTRL-E}) を打ち込むと、古い値を挿入できる。|cmdline-completion| を参照。

@{option@} と '=' の間には空白を入れることができる。それらは無視される。'=' と @{value@} の間に空白を入れてはいけない。

@{value@} 内での空白や '\' の使用に関しては、|option-backslash| を参照 @{訳注: 文書先頭も参照@}。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] {option}+={value}				*:set+=*
			Add the {value} to a number option, or append the
			{value} to a string option.  When the option is a
			comma separated list, a comma is added, unless the
			value was empty.
			If the option is a list of flags, superfluous flags
			are removed.  When adding a flag that was already
			present the option value doesn't change.
			Also see |:set-args| above.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set+=}
@cindex :set+=
@item :se[t] @{option@}+=@{value@}
数値オプションに対しては @{value@} だけその値を増す。文字列オプションに対しては後ろに @{value@} を追加する。オプションがコンマ区切りのリストのときは、値が空でない限り、元の値と @{value@} の間にコンマが付け加えられる。

オプションがフラグのリストであるときは、冗長なフラグは取り除かれる。すでに入っているフラグを加えようとしたときは、そのオプションの値は変わらない。上の |:set-args| も参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] {option}^={value}				*:set^=*
			Multiply the {value} to a number option, or prepend
			the {value} to a string option.  When the option is a
			comma separated list, a comma is added, unless the
			value was empty.
			Also see |:set-args| above.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set^=}
@cindex :set^=
@item :se[t] @{option@}^=@{value@}
数値オプションに対してはその値を @{value@} 倍する。文字列オプションに対しては前に @{value@} を追加する。オプションがコンマ区切りのリストのときは、@{value@} と元の値の間にコンマが付け加えられる。上の |:set-args| も参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] {option}-={value}				*:set-=*
			Subtract the {value} from a number option, or remove
			the {value} from a string option, if it is there.
			If the {value} is not found in a string option, there
			is no error or warning.  When the option is a comma
			separated list, a comma is deleted, unless the option
			becomes empty.
			When the option is a list of flags, {value} must be
			exactly as they appear in the option.  Remove flags
			one by one to avoid problems.
			Also see |:set-args| above.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-=}
@cindex :set-=
@item :se[t] @{option@}-=@{value@}
数値オプションに対しては @{value@} だけその値を減らす。文字列オプションに対しては @{value@} を (それが含まれていたら) 取り除く。そのとき @{value@} が含まれていなくても、警告やエラーは出ない。オプションがコンマ区切りのリストであり、取り除くオプションが唯一の値でない限り、間のコンマも削除される。

オプションがフラグのリストであるときは、@{value@} は値の中に現れるままに、正確に指定しなければならない。問題が起こるのを避けるために、フラグを取り除くときは 1 個ずつ指定すること。上の |:set-args| も参照。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The {option} arguments to ":set" may be repeated.  For example: >
	:set ai nosi sw=3 ts=3
If you make an error in one of the arguments, an error message will be given
and the following arguments will be ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 回のコマンド "@command{:set}" に対し、複数の @{option@} を引数に指定できる。例:
@example
:set ai nosi sw=3 ts=3
@end example
引数の中にエラーがあると、エラーメッセージが現れ、エラーの元になったオプション以降は無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:set-verbose*
When 'verbose' is non-zero, displaying an option value will also tell where it
was last set.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-verbose}
@cindex :set-verbose
オプション '@option{verbose}' の値が非 0 なら、オプションの値を表示するとき、同時に、そのオプションが最後に設定されたのはどこであったかも分かる。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:verbose set shiftwidth cindent?
<	  shiftwidth=4 ~
		  Last set from modeline ~
	  cindent ~
		  Last set from /usr/local/share/vim/vim60/ftplugin/c.vim ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:verbose set shiftwidth cindent?
@end example
@verbatim
shiftwidth=4
    Last set from modeline
cindent |
    Last set from /usr/local/share/vim/vim60/ftplugin/c.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This is only done when specific option values are requested, not for ":verbose
set all" or ":verbose set" without an argument.
When the option was set by hand there is no "Last set" message.
When the option was set while executing a function, user command or
autocommand, the script in which it was defined is reported.
Note that an option may also have been set as a side effect of setting
'compatible'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは特定のオプション名が指定されたときのみ機能する。コマンド "@command{:set all}" や、引数のないコマンド "@command{:verbose}" ではメッセージが現れない。

オプションが手動で設定されていると、メッセージ "Last set" は現れない。オプションが関数やユーザーコマンド、オートコマンド autocommand の実行中に設定されたときは、それらが定義されているスクリプト名が報告される。
@quotation
@strong{Note:} @*
'@option{compatible}' を設定すると副作用として他のオプションも設定されることがある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
A few special texts:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のような特殊なメッセージがある:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Last set from modeline ~
		Option was set in a |modeline|.
	Last set from --cmd argument ~
		Option was set with command line argument |--cmd| or +.
	Last set from -c argument ~
		Option was set with command line argument |-c|, +, |-S| or
		|-q|.
	Last set from environment variable ~
		Option was set from an environment variable, $VIMINIT,
		$GVIMINIT or $EXINIT.
	Last set from error handler ~
		Option was cleared when evaluating it resulted in an error.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .01 .99
@item @tab
@table @asis
@item Last set from modeline
モードライン |modeline| の中でオプションが設定された。
@item Last set from @minus{}@minus{}cmd argument
コマンドライン引数 |@option{--cmd}| または + によりオプションが設定された。
@item Last set from -c argument
コマンドライン引数 |-c|, +, |-S|, |-q| によりオプションが設定された。
@item Last set from environment variable
環境変数、@env{$VIMINIT}, @env{$GVIMINIT}, @env{$EXINIT} によりオプションが設定された。
@item Last set from error handler
オプションを評価中にエラーが発生し、クリアされた。
@end table
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{not available when compiled without the |+eval| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vim が |+eval| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:set-termcap* *E522*
For {option} the form "t_xx" may be used to set a terminal option.  This will
override the value from the termcap.  You can then use it in a mapping.  If
the "xx" part contains special characters, use the <t_xx> form: >
	:set <t_#4>=^[Ot
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set-termcap}
@anchor{E522}
@cindex :set-termcap
@cindex E522
Termcap オプションを設定するには、@{option@} に "t_xx" の形式を使ってもよい。これは termcap による値を上書きする。これはマッピングの中で利用することもできる。"xx" の部分が特別な文字を含むときは、<t_xx> の形式を使うこと:
@example
:set <t_#4>=^[Ot
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This can also be used to translate a special code for a normal key.  For
example, if Alt-b produces <Esc>b, use this: >
	:set <M-b>=^[b
(the ^[ is a real <Esc> here, use CTRL-V <Esc> to enter it)
The advantage over a mapping is that it works in all situations.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは特殊なコードを普通のキーに変換する際にも使われる。例えば @kbd{Alt-b} が <Esc>b を出力するなら、次のようにすること。
@example
:set <M-b>=^[b
@end example
(ここで ^[ は本物の <Esc> である。入力には @kbd{CTRL-V} @key{<Esc>} を使うこと) マッピングの利点は、どんなときにも機能することである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can define any key codes, e.g.: >
	:set t_xy=^[foo;
There is no warning for using a name that isn't recognized.  You can map these
codes as you like: >
	:map <t_xy> something
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーコードを定義することができる。例:
@example
:set t_xy=^[foo;
@end example
未知のキーコード名を使っても警告は表示されない。これらのキーコードに対してマップを定義できる:
@example
:map <t_xy> something
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<								*E846*
When a key code is not set, it's like it does not exist.  Trying to get its
value will result in an error: >
	:set t_kb=
	:set t_kb
	E846: Key code not set: t_kb
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E846}
@cindex E846
キーコードが設定されていない場合、それは存在しないのと同じである。その値を取得しようとするとエラーになる:
@example
:set t_kb=
:set t_kb
@end example
@display
E846: Key code not set: t_kb
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The t_xx options cannot be set from a |modeline| or in the |sandbox|, for
security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
t_xx の形のオプションは安全上の理由により、モードライン |modeline| やサンドボックス |sandbox| では設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The listing from ":set" looks different from Vi.  Long string options are put
at the end of the list.  The number of options is quite large.  The output of
"set all" probably does not fit on the screen, causing Vim to give the
|more-prompt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド "@command{:set}" によるリスト表示の外見は、Vi とは違う。長い文字列オプションはリストの終わりに現れる。オプションの数も極めて多い。コマンド "@command{set all}" による表示は、画面に収まらないだろう。そうしたとき、Vim は「継続」プロンプト |more-prompt| を出す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*option-backslash*
To include white space in a string option value it has to be preceded with a
backslash.  To include a backslash you have to use two.  Effectively this
means that the number of backslashes in an option value is halved (rounded
down).
A few examples: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{option-backslash}
@cindex option-backslash
文字列オプションの値に空白を含めるには、空白の前に '\' を置く必要がある。値に '\' を含めるには、2 個繰り返す。結果的には、オプションの値の中の '\' の数は半分になる (端数は切り捨て)。

例をいくつか挙げる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   :set tags=tags\ /usr/tags	    results in "tags /usr/tags"
   :set tags=tags\\,file	    results in "tags\,file"
   :set tags=tags\\\ file	    results in "tags\ file"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set tags=tags\ /usr/tags   の結果は "tags /usr/tags"
:set tags=tags\\,file       の結果は "tags\,file"
:set tags=tags\\\ file      の結果は "tags\ file"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "|" character separates a ":set" command from a following command.  To
include the "|" in the option value, use "\|" instead.  This example sets the
'titlestring' option to "hi|there": >
   :set titlestring=hi\|there
This sets the 'titlestring' option to "hi" and 'iconstring' to "there": >
   :set titlestring=hi|set iconstring=there
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字 "|" によって、コマンド "@command{:set}" を後に続くコマンドと分けることができる。文字列オプションの値に "|" を含めるには、代わりに "\|" を使うこと。次の例ではオプション '@option{titlestring}' の値を "@var{hi|there}" に設定している。
@example
:set titlestring=hi\|there
@end example
しかし次の例では、2 個のオプション '@option{titlestring}', '@option{iconstring}' をそれぞれ "@var{hi}", "@var{there}" に設定している。
@example
:set titlestring=hi|set iconstring=there
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Similarly, the double quote character starts a comment.  To include the '"' in
the option value, use '\"' instead.  This example sets the 'titlestring'
option to 'hi "there"': >
   :set titlestring=hi\ \"there\"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
また、ダブルクォート文字はコメントを開始する。オプションの値に '"' を含めるには '\"' と書くこと。次の例は '@option{titlestring}' を '@var{hi "there"}' に設定する:
@example
:set titlestring=hi\ \"there\"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For MS-DOS and WIN32 backslashes in file names are mostly not removed.  More
precise: For options that expect a file name (those where environment
variables are expanded) a backslash before a normal file name character is not
removed.  But a backslash before a special character (space, backslash, comma,
etc.) is used like explained above.
There is one special situation, when the value starts with "\\": >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-DOS と Win32 では、ファイル名の中の '\' は大抵は取り除かれない。正確に言うと、値にファイル名を取るオプション (環境変数が展開されるもの) では、通常のファイル名に使われる文字の前の '\' は取り除かれない。しかし、特別な文字 (空白、'\' そのもの、コンマ等) の前の '\' は、上で説明した通りの働きをする。

オプションの値が "\\" で始まるときは、特別な状態になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   :set dir=\\machine\path	    results in "\\machine\path"
   :set dir=\\\\machine\\path	    results in "\\machine\path"
   :set dir=\\path\\file	    results in "\\path\file" (wrong!)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set dir=\\マシン名\パス    の結果は "\\マシン名\パス"
:set dir=\\\\マシン名\\パス の結果は "\\マシン名\パス"
:set dir=\\パス\\ファイル   の結果は "\\パス\ファイル" (間違い!)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
For the first one the start is kept, but for the second one the backslashes
are halved.  This makes sure it works both when you expect backslashes to be
halved and when you expect the backslashes to be kept.  The third gives a
result which is probably not what you want.  Avoid it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初の例では、始まりの部分の '\' はそのまま保たれている。しかし2番目の例では、'\' の数は半分になっている。つまり、'\' をそのまま保ちたいときでも、半分にしたいときでも、どちらがよいか指定できることが分かる。3番目の結果は、おそらく希望通りのものではないだろう。このやり方は避けること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*add-option-flags* *remove-option-flags*
				*E539* *E550* *E551* *E552*
Some options are a list of flags.  When you want to add a flag to such an
option, without changing the existing ones, you can do it like this: >
   :set guioptions+=a
Remove a flag from an option like this: >
   :set guioptions-=a
This removes the 'a' flag from 'guioptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{add-option-flags}
@anchor{remove-option-flags}
@anchor{E539}
@anchor{E550}
@anchor{E551}
@anchor{E552}
@cindex add-option-flags
@cindex remove-option-flags
@cindex E539
@cindex E550
@cindex E551
@cindex E552
値がフラグのリストからなるオプションもある。そういったオプションにフラグを追加したいとき、既存の値を変更したくないならば、こうすること。
@example
:set guioptions+=a
@end example
オプションからフラグを取り除くには、こうすること。
@example
:set guioptions-=a
@end example
これはオプション '@option{guioptions}' からフラグ '@var{a}' を取り除く。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note that you should add or remove one flag at a time.  If 'guioptions' has
the value "ab", using "set guioptions-=ba" won't work, because the string "ba"
doesn't appear.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
フラグは1個ずつ追加したり取り除いたりするよう注意。オプション '@option{guioptions}' が "@var{ab}" という値であるとき、"@samp{set guioptions-=ba}" は機能しない。なぜなら、"ba" という文字列は現れていないからである。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			   *:set_env* *expand-env* *expand-environment-var*
Environment variables in specific string options will be expanded.  If the
environment variable exists the '$' and the following environment variable
name is replaced with its value.  If it does not exist the '$' and the name
are not modified.  Any non-id character (not a letter, digit or '_') may
follow the environment variable name.  That character and what follows is
appended to the value of the environment variable.  Examples: >
   :set term=$TERM.new
   :set path=/usr/$INCLUDE,$HOME/include,.
When adding or removing a string from an option with ":set opt-=val" or ":set
opt+=val" the expansion is done before the adding or removing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:set_env}
@anchor{expand-env}
@anchor{expand-environment-var}
@cindex :set_env
@cindex expand-env
@cindex expand-environment-var
特定の文字列オプションでは環境変数が展開される。'$' とそれに続く環境変数名が、その値に置き換えられる (その環境変数が存在するとき)。環境変数が存在しないとき、'$' とそれに続く変数名は変更を受けない。識別子に使えない non-id 文字 (英字、数字、'_' 以外) なら、どれでも環境変数名の後に続けることができる。識別子に使えない文字とそれに続く文字は、環境変数の値の後ろにそのまま追加される。例:
@example
:set term=$TERM.new
:set path=/usr/$INCLUDE,$HOME/include,.
@end example
コマンド ":set opt-=値" でオプションから文字列を取り除いたり、コマンド "@command{:set opt+=値}" でオプションに文字列を追加したりするときには、環境変数の展開が行われてからそうした操作がなされる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Handling of local options			*local-options*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{local-options}
@cindex local-options
@unnumberedsubsec ローカルオプションの扱い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some of the options only apply to a window or buffer.  Each window or buffer
has its own copy of this option, thus each can have its own value.  This
allows you to set 'list' in one window but not in another.  And set
'shiftwidth' to 3 in one buffer and 4 in another.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのオプションは、1 つのウィンドウや 1 つのバッファのみに適用される。それぞれのウィンドウやバッファは、そうしたオプションの独自のコピーを保持しているため、独自の値を持つことができる。

これにより、あるウィンドウ内では '@option{list}' オプションをオンにするが、他のウィンドウではオフにする、ということが可能になる。またオプション '@option{shiftwidth}' を、あるバッファ内では 3 にし、他では 4 にすることもできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following explains what happens to these local options in specific
situations.  You don't really need to know all of this, since Vim mostly uses
the option values you would expect.  Unfortunately, doing what the user
expects is a bit complicated...
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以降では、特定の状況下でそれらのローカルオプションがどうなるかを説明する。実際には、それらを全て知る必要はない。なぜなら、Vim はおそらくユーザーが予想する通りにオプションの値を使うからである。残念ながら、ユーザーの予想通りに働くのは、いくらか複雑なことである...
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When splitting a window, the local options are copied to the new window.  Thus
right after the split the contents of the two windows look the same.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを分割すると、ローカルオプションは新しいウィンドウにコピーされて引き継がれる。そのため、ウィンドウを分割した直後には、2つのウィンドウの内容は同じように見える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When editing a new buffer, its local option values must be initialized.  Since
the local options of the current buffer might be specifically for that buffer,
these are not used.  Instead, for each buffer-local option there also is a
global value, which is used for new buffers.  With ":set" both the local and
global value is changed.  With "setlocal" only the local value is changed,
thus this value is not used when editing a new buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいバッファを編集するとき、そのバッファのローカルオプションは初期化されなければならない。その以前のカレントバッファのローカルオプションは、そのバッファのみに適用すべきものかもしれないので、新しいバッファには適用されない。その代わり、バッファについてローカルなオプションにはそれぞれグローバルな値があり、新しいバッファにはそれが適用される。

コマンド "@command{:set}" によって、ローカルな値とグローバルな値の両方が変更される。コマンド "@command{setlocal}" はローカルな値のみを変更するので、それで指定した値は新しいバッファには適用されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When editing a buffer that has been edited before, the options from the window
that was last closed are used again.  If this buffer has been edited in this
window, the values from back then are used.  Otherwise the values from the
last closed window where the buffer was edited last are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すでに編集されているバッファを編集するときは、最後に閉じられたウィンドウ内のローカルオプションが再び使われる。このバッファがこのウィンドウ内ですでに編集されていたなら、そのときの値が再び用いられる。そうでなければ、そのバッファが最後に編集されて閉じられたウィンドウ内の値が用いられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It's possible to set a local window option specifically for a type of buffer.
When you edit another buffer in the same window, you don't want to keep
using these local window options.  Therefore Vim keeps a global value of the
local window options, which is used when editing another buffer.  Each window
has its own copy of these values.  Thus these are local to the window, but
global to all buffers in the window.  With this you can do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特定のバッファの種類についてウィンドウ内のローカルオプションを設定することも可能である。同じウィンドウ内で別のバッファを編集するときは、ウィンドウについてローカルなオプションを使い続けたくはないだろう。

そのため Vim はウィンドウについてローカルなオプションのグローバルな値を記憶しており、別のバッファの編集時にはそれを用いる。ウィンドウはそれぞれ、それらの値の独自のコピーを持っている。

そのため、それらのオプションはウィンドウについてはローカルであるが、そのウィンドウ内の全てのバッファについてグローバルである。それらを用いて、次のようなことが可能である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:e one
	:set list
	:e two
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:e 1 つ目
:set list
:e 2 つ目
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Now the 'list' option will also be set in "two", since with the ":set list"
command you have also set the global value. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
こうするとオプション '@option{list}' はバッファ "2 つ目" にも適用される。コマンド "@command{:set list}" により、グローバルな値もオンになったからである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:set nolist
	:e one
	:setlocal list
	:e two
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set nolist
:e 1 つ目
:setlocal list
:e 2 つ目
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Now the 'list' option is not set, because ":set nolist" resets the global
value, ":setlocal list" only changes the local value and ":e two" gets the
global value.  Note that if you do this next: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
今度はバッファ "2 つ目" ではオプション '@option{list}' はオフである。なぜならコマンド "@command{:set nolist}" がグローバルな値をオフにしたが、コマンド "@command{:setlocal list}" はバッファ "1 つ目" についてローカルな値をオンにしただけで、"@command{:e 2 つ目}" ではグローバルな値が適用されるからである。
@quotation
@strong{Note:} @*
次にこうすると
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:e one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:e 1 つ目
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
You will get back the 'list' value as it was the last time you edited "one".
The options local to a window are remembered for each buffer.  This also
happens when the buffer is not loaded, but they are lost when the buffer is
wiped out |:bwipe|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最後にバッファ "1 つ目" を編集したときの通りにオプション '@option{list}' の値が戻る。ウィンドウについてローカルなオプションはバッファ毎に記憶される。バッファがロードされていなくても同様に記憶されている。ただし、バッファが破棄 (|:bwipe|) されたときは設定は消える。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:setl* *:setlocal*
:setl[ocal] ...		Like ":set" but set only the value local to the
			current buffer or window.  Not all options have a
			local value.  If the option does not have a local
			value the global value is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:setl}
@anchor{:setlocal}
@cindex :setl
@cindex :setlocal
@table @asis
@item :setl[ocal] ...
コマンド "@command{:set}" と似ているが、カレントバッファ／ウィンドウについてローカルな値のみを設定する。全てのオプションがローカルな値を持つわけではない。オプションがローカルな値を持たないときは、グローバルな値が設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			With the "all" argument: display local values for all
			local options.
			Without argument: Display local values for all local
			options which are different from the default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
引数が "all" のとき: 全てのローカルオプションのローカルな値を表示する。

引数がないとき: 全てのローカルオプションのローカルな値で、既定値と異なるものを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			When displaying a specific local option, show the
			local value.  For a global/local boolean option, when
			the global value is being used, "--" is displayed
			before the option name.
			For a global option the global value is
			shown (but that might change in the future).
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特定のローカルオプションを表示するときは、ローカルな値も表示する。グローバルまたはローカルな切替オプションに対しては、グローバルな値が表示される場合には、オプション名の前に "@samp{--}" が表示される。

グローバルオプションに対しては、グローバルな値が表示される (しかし、これは将来変更されるかもしれない)。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:setl[ocal] {option}<	Set the local value of {option} to its global value by
			copying the value.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :setl[ocal] @{option@}<
値をコピーすることによって @{option@} のローカルな値をグローバルな値と同じにする。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:se[t] {option}<	For |global-local| options: Remove the local value of
			{option}, so that the global value will be used.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :se[t] @{option@}<
|global-local| オプションに対して: @{option@} のローカル値を削除する。そうすることでグローバル値が使われるようになる。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:setg* *:setglobal*
:setg[lobal] ...	Like ":set" but set only the global value for a local
			option without changing the local value.
			When displaying an option, the global value is shown.
			With the "all" argument: display global values for all
			local options.
			Without argument: display global values for all local
			options which are different from the default.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:setg}
@anchor{:setglobal}
@cindex :setg
@cindex :setglobal
@item :setg[lobal] ...
コマンド "@command{:set}" と似ているが、ローカルオプションのグローバルな値のみを設定し、ローカルな値は変更しない。オプションの値を表示するときは、グローバルな値が表示される。

引数が "all" のとき: 全てのローカルオプションのグローバルな値を表示する。

引数がないとき: 全てのローカルオプションのグローバルな値で、既定値と異なるものを表示する。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For buffer-local and window-local options:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バッファ／ウィンドウについてローカルなオプションに対して:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Command		 global value	    local value ~
      :set option=value	     set		set
 :setlocal option=value	      -			set
:setglobal option=value	     set		 -
      :set option?	      -		       display
 :setlocal option?	      -		       display
:setglobal option?	    display		 -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .50 .25 .25
@headitem コマンド @tab グローバルな値 @tab ローカルな値
@item :set オプション=値 @tab 設定される @tab 設定される
@item :setlocal オプション=値 @tab なし @tab 設定される
@item :setglobal オプション=値 @tab 設定される @tab なし
@item :set オプション? @tab なし @tab 表示される
@item :setlocal オプション? @tab なし @tab 表示される
@item :setglobal オプション? @tab 表示される @tab なし
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Global options with a local value			*global-local*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{global-local}
@cindex global-local
@unnumberedsubsec ローカルな値を持つグローバルオプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Options are global when you mostly use one value for all buffers and windows.
For some global options it's useful to sometimes have a different local value.
You can set the local value with ":setlocal".  That buffer or window will then
use the local value, while other buffers and windows continue using the global
value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションがグローバルであるというのは、1 つの値を全てのバッファとウィンドウに用いるような場合である。いくつかのグローバルオプションでは、ローカルな別の値を持てると便利である。ローカルな値は、コマンド "@command{:setlocal}" で設定できる。するとコマンド "@command{:setlocal}" を実行したバッファとウィンドウではローカルな値が用いられるが、他のバッファでは引き続きグローバルな値が用いられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example, you have two windows, both on C source code.  They use the global
'makeprg' option.  If you do this in one of the two windows: >
	:set makeprg=gmake
then the other window will switch to the same value.  There is no need to set
the 'makeprg' option in the other C source window too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、あなたは 2 つのウィンドウを開き、両方で C 言語のソースファイルを編集しているとする。グローバルなオプション '@option{makeprg}' は両方に適用される。そこでウィンドウの片方で
@example
:set makeprg=gmake
@end example
とすると、別のウィンドウでも同じ値が用いられる。別のウィンドウに移ってオプション 'makeprg' を設定する必要はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
However, if you start editing a Perl file in a new window, you want to use
another 'makeprg' for it, without changing the value used for the C source
files.  You use this command: >
	:setlocal makeprg=perlmake
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかし、新しいウィンドウで Perl のソースファイルの編集を始めると、'@option{makeprg}' に別の値を設定したくなる。しかし C ソースに適用された値を変えたくはない。そんなときには次のようにする。
@example
:setlocal makeprg=perlmake
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
You can switch back to using the global value by making the local value empty: >
	:setlocal makeprg=
This only works for a string option.  For a boolean option you need to use the
"<" flag, like this: >
	:setlocal autoread<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のようにローカルな値を空にすると、グローバルな値に戻る。
@example
:setlocal makeprg=
@end example
ただし、この方法は文字列オプションにしか使えない。切替オプションには、次のように "<" フラグを使う必要がある。
@example
:setlocal autoread<
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note that for non-boolean options using "<" copies the global value to the
local value, it doesn't switch back to using the global value (that matters
when the global value changes later).  You can also use: >
	:set path<
This will make the local value of 'path' empty, so that the global value is
used.  Thus it does the same as: >
	:setlocal path=
Note: In the future more global options can be made global-local.  Using
":setlocal" on a global option might work differently then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
非切替オプションの変更で "<" を使うと、グローバルな値がローカルな値にコピーされるが、それはグローバルな値を使うようにするのとは少し違うことに注意 (これは後でグローバルな値が変更されたときに問題になる。@{訳注: グローバルな値が変更されても、"<" でコピーした値までは変更されない。あくまでもローカルな値だから@})。次を使うこともできる:
@example
:set path<
@end example
これは '@option{path}' のローカルな値を空にし、グローバルな値が使われるようにする。すなわち、次と同じことをする:
@example
:setlocal path=
@end example
@end quotation
@quotation
@strong{Note:} @*
将来、値にグローバルとローカルの区別のあるオプションが増えたら、グローバルオプションにコマンド "@command{:setlocal}" を使ったときの結果が変わるかもしれない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Setting the filetype
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ファイルタイプの設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:setf[iletype] [FALLBACK] {filetype}			*:setf* *:setfiletype*
			Set the 'filetype' option to {filetype}, but only if
			not done yet in a sequence of (nested) autocommands.
			This is short for: >
				:if !did_filetype()
				:  setlocal filetype={filetype}
				:endif
<			This command is used in a filetype.vim file to avoid
			setting the 'filetype' option twice, causing different
			settings and syntax files to be loaded.

			When the optional FALLBACK argument is present, a
			later :setfiletype command will override the
			'filetype'.  This is to used for filetype detections
			that are just a guess.  |did_filetype()| will return
			false after this command.

			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:setf}
@anchor{:setfiletype}
@cindex :setf
@cindex :setfiletype
@table @asis
@item :setf[iletype] [FALLBACK] @{filetype@}
@{filetype@} に対してオプション '@option{filetype}' を設定する。ただし autocommand の中 (入れ子になっているときは、外側も含めて) でまだ実行されていないときのみ有効である。

これは以下のコマンドの略である。
@verbatim
:if !did_filetype()
:  setlocal filetype={filetype}
:endif
@end verbatim
このコマンドは @file{filetype.vim} の中で使われ、オプション '@option{filetype}' が 2 度設定されて別の設定や構文ファイルが読み込まれることがないようにしている。

任意の引数 FALLBACK が存在すると、後の @command{:setfiletype} コマンドは '@option{filetype}' を上書きする。これはファイルタイプの決定を正確に推測するために使われる。|did_filetype()| はこのコマンドの後では false を返すだろう。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*option-window* *optwin*
:bro[wse] se[t]			*:set-browse* *:browse-set* *:opt* *:options*
:opt[ions]		Open a window for viewing and setting all options.
			Options are grouped by function.
			Offers short help for each option.  Hit <CR> on the
			short help to open a help window with more help for
			the option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{option-window}
@anchor{optwin}
@cindex option-window
@cindex optwin
@anchor{:set-browse}
@anchor{:browse-set}
@anchor{:opt}
@anchor{:options}
@cindex :set-browse
@cindex :browse-set
@cindex :opt
@cindex :options
@item :bro[wse] se[t] または
@itemx :opt[ions]
全てのオプションを表示したり設定するためのウィンドウを開く。オプションは機能ごとにまとめられている。ここではオプションの短い説明が読める。その上で <CR> を打ち込むと、そのオプションについてのヘルプウィンドウが開き、詳しい説明が読める。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Modify the value of the option and hit <CR> on the
			"set" line to set the new value.  For window and
			buffer specific options, the last accessed window is
			used to set the option value in, unless this is a help
			window, in which case the window below help window is
			used (skipping the option-window).
			{not available when compiled without the |+eval| or
			|+autocmd| features}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
表示されている値を修正した後に "set" 行の上で <CR> を打ち込むと、新しい値を設定できる。ウィンドウやバッファ固有のオプションについては、変更した値は最後に使用したウィンドウに適用される。そのウィンドウがヘルプウィンドウだったときは、変更した値はヘルプウィンドウの (オプションウィンドウを抜かして) 1 つ下のウィンドウに適用される。

@{Vim が |+eval| 機能と |+autocmd| 機能付きでコンパイルされたときのみ有効@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*$HOME*
Using "~" is like using "$HOME", but it is only recognized at the start of an
option and after a space or comma.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{$HOME}
@cindex $HOME
"~" は "@var{$HOME}" と同様に扱われるが、こちらは値の先頭にあるか、空白かコンマの後にあるときのみ認識される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On Unix systems "~user" can be used too.  It is replaced by the home directory
of user "user".  Example: >
    :set path=~mool/include,/usr/include,.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix 系のシステムでは "~user" も使える。これは "user" というユーザーのホームディレクトリに置き換えられる。例:
@example
:set path=~mool/include,/usr/include,.
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On Unix systems the form "${HOME}" can be used too.  The name between {} can
contain non-id characters then.  Note that if you want to use this for the
"gf" command, you need to add the '{' and '}' characters to 'isfname'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix 系のシステムでは "$@{HOME@}" という形式も使える。ここで @{@} の間には識別子に使えない文字 @{訳注: 上を参照@} が入ってもよい。
@quotation
@strong{Note:} @*
これをコマンド "gf" のために使いたいなら、文字 '@{' と '@}' をオプション '@option{isfname}' に追加する必要がある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
NOTE: expanding environment variables and "~/" is only done with the ":set"
command, not when assigning a value to an option with ":let".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
環境変数と "~/" の展開はコマンド "@command{:set}" のときのみ行われる。"@option{:let}" でオプションに値を代入するときは展開されない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*$HOME-windows*
On MS-Windows, if $HOME is not defined as an environment variable, then
at runtime Vim will set it to the expansion of $HOMEDRIVE$HOMEPATH.
If $HOMEDRIVE is not set then $USERPROFILE is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{$HOME-windows}
@cindex $HOME-windows
MS-Windows では、@var{$HOME} 環境変数が定義されていない場合は Vim の起動時に @var{$HOMEDRIVE$HOMEPATH} という値で定義される。もしも @var{$HOMEDRIVE} が設定されていなければ @var{$USERPROFILE} が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This expanded value is not exported to the environment, this matters when
running an external command: >
	:echo system('set | findstr ^HOME=')
and >
	:echo luaeval('os.getenv("HOME")')
should echo nothing (an empty string) despite exists('$HOME') being true.
When setting $HOME to a non-empty string it will be exported to the
subprocesses.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この展開された値は環境変数にはエクスポートされない。これは外部コマンドを動作しているときに問題となる:
@example
:echo system('set | findstr ^HOME=')
@end example
そして
@example
:echo luaeval('os.getenv("HOME")')
@end example
は、exists('$HOME') が真であるにも関わらず何も出力しないだろう (空文字列)。@var{$HOME} に空ではない何らかの文字列を設定すると、それはサブプロセスにエクスポートされるだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Note the maximum length of an expanded option is limited.  How much depends on
the system, mostly it is something like 256 or 1024 characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
展開されるオプションの値の長さ制限に注意。システムごとに異なるが、大抵は 256 文字や 1024 文字等の長さである @{訳注: これは半角の場合で、全角では半分@}。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:fix* *:fixdel*
:fix[del]		Set the value of 't_kD':
				't_kb' is     't_kD' becomes	~
				  CTRL-?	CTRL-H
				not CTRL-?	CTRL-?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:fix}
@anchor{:fixdel}
@cindex :fix
@cindex :fixdel
@table @asis
@item :fix[del]
ターミナルオプション 't_kD' @{訳注: デリートキー@} の値を設定する。
@multitable @columnfractions .33 .33 .33
@item 't_kb' が @tab のとき @tab 't_kD' は
@item CTRL-? @tab @tab CTRL-H
@item CTRL-?以外 @tab @tab CTRL-?
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			(CTRL-? is 0177 octal, 0x7f hex) {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(CTRL-? は 8 進数で 0177、16 進数で 0x7f)

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If your delete key terminal code is wrong, but the
			code for backspace is alright, you can put this in
			your .vimrc: >
				:fixdel
<			This works no matter what the actual code for
			backspace is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ターミナルのデリートキーのキーコードが違っているが、バックスペースのキーコードは正しいときは、次のコマンドをファイル @file{.vimrc} に加えればよい。
@example
:fixdel
@end example
これはバックスペースのキーコードが実際に何であっても有効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If the backspace key terminal code is wrong you can
			use this: >
				:if &term == "termname"
				:  set t_kb=^V<BS>
				:  fixdel
				:endif
<			Where "^V" is CTRL-V and "<BS>" is the backspace key
			(don't type four characters!).  Replace "termname"
			with your terminal name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バックスペースのキーコードが違っていたら、以下のようにする。
@verbatim
:if &term == "termname"
:  set t_kb=^V<BS>
:  fixdel
:endif
@end verbatim
ここで "^V" は @kbd{CTRL-V}、"<BS>" はバックスペースを表す (実際に「@key{^}」「@key{V}」などのキーを押さないこと)。"termname" にはユーザーの使うターミナル名を当てはめる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If your <Delete> key sends a strange key sequence (not
			CTRL-? or CTRL-H) you cannot use ":fixdel".  Then use: >
				:if &term == "termname"
				:  set t_kD=^V<Delete>
				:endif
<			Where "^V" is CTRL-V and "<Delete>" is the delete key
			(don't type eight characters!).  Replace "termname"
			with your terminal name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Delete>} キーが奇妙なキーコード列 (CTRL-? でも CTRL-H でもない) を送るときは、コマンド "@kbd{:fixdel}" ではなく以下の方法を使う。
@verbatim
:if &term == "termname"
:  set t_kD=^V<Delete>
:endif
@end verbatim
ここで "^V" は @kbd{CTRL-V}、"<BS>" はデリートキーを表す (実際に「@key{^}」「@key{V}」などのキーを押さないこと)。"termname" にはあなたの使うターミナルの種類を当てはめる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*Linux-backspace*
			Note about Linux: By default the backspace key
			produces CTRL-?, which is wrong.  You can fix it by
			putting this line in your rc.local: >
				echo "keycode 14 = BackSpace" | loadkeys
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Linux-backspace}
@cindex Linux-backspace
@quotation
@strong{Note:} @*
Linux についての注意: 既定ではバックスペースキーは CTRL-? を送るが、これは違っている。これを修正するには、ファイル @file{rc.local} に次の行を加える。
@example
echo "keycode 14 = BackSpace" | loadkeys
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*NetBSD-backspace*
			Note about NetBSD: If your backspace doesn't produce
			the right code, try this: >
				xmodmap -e "keycode 22 = BackSpace"
<			If this works, add this in your .Xmodmap file: >
				keysym 22 = BackSpace
<			You need to restart for this to take effect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{NetBSD-backspace}
@cindex NetBSD-backspace
@quotation
@strong{Note:} @*
NetBSD についての注意: バックスペースキーが正しいキーコードを送らないとき、これを試すこと。
@verbatim
xmodmap -e "keycode 22 = BackSpace"
@end verbatim
有効だったら、ファイル @file{.Xmodmap} に次の行を加えること。
@verbatim
keysym 22 = BackSpace
@end verbatim
これを有効にするには、再起動する必要がある。
@end quotation
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Automatically setting options			*auto-setting*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{auto-setting}
@cindex auto-setting
@section 2. オプションの自動設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Besides changing options with the ":set" command, there are three alternatives
to set options automatically for one or more files:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド "@command{:set}" によるオプションの設定の他に、3 通りの方法で、1 つまたは複数のファイルに自動的にオプションを設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. When starting Vim initializations are read from various places.  See
   |initialization|.  Most of them are performed for all editing sessions,
   and some of them depend on the directory where Vim is started.
   You can create an initialization file with |:mkvimrc|, |:mkview| and
   |:mksession|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item Vim を起動したとき、様々な場所から初期化設定を読み込ませることができる。|initialization| を参照。多くの設定は編集セッション全てに適用されるが、いくつかは Vim を起動したディレクトリによって異なる。初期化設定ファイルはコマンド |:mkvimrc|, |:mkview|, |:mksession| で生成できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. If you start editing a new file, the automatic commands are executed.
   This can be used to set options for files matching a particular pattern and
   many other things.  See |autocommand|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 新しいファイルの編集を始めたとき、自動的に実行されるコマンドがある。これを使うと、特定のパターンにマッチするファイルに対してオプションを設定したり、様々なことが可能である。|autocommand| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. If you start editing a new file, and the 'modeline' option is on, a
   number of lines at the beginning and end of the file are checked for
   modelines.  This is explained here.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 新しいファイルの編集を始めたときオプション '@option{modeline}' がオンなら、ファイルの先頭と末尾の数行ずつがモードラインとして読み込まれる。それをここで説明する。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*modeline* *vim:* *vi:* *ex:* *E520*
There are two forms of modelines.  The first form:
	[text]{white}{vi:|vim:|ex:}[white]{options}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{modeline}
@anchor{vim:}
@anchor{vi:}
@anchor{ex:}
@anchor{E520}
@cindex modeline
@cindex vim:
@cindex vi:
@cindex ex:
@cindex E520
モードラインには 2 つの形式がある。1 つ目の形式は次の通りである。

@table @asis
@item [text]@{white@}@{vi:|vim:|ex:@}[white]@{options@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
[text]			any text or empty
{white}			at least one blank character (<Space> or <Tab>)
{vi:|vim:|ex:}		the string "vi:", "vim:" or "ex:"
[white]			optional white space
{options}		a list of option settings, separated with white space
			or ':', where each part between ':' is the argument
			for a ":set" command (can be empty)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .75
@item [text] @tab 任意のテキスト、なくても良い
@item @{white@} @tab 1 個以上の余白 (<Space> または <Tab>)
@item @{vi:|vim:|ex:@} @tab "vi:" か "vim:" か "ex:" という文字列
@item [white] @tab 空白、なくても良い
@item @{options@} @tab オプション設定が、空白か ':' で区切られて並んだもので、':' の間の部分はコマンド "@command{:set}" の引数である (空でもよい)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Examples:
   vi:noai:sw=3 ts=6 ~
   vim: tw=77 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
vi:noai:sw=3 ts=6
vim: tw=77
@end verbatim
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The second form (this is compatible with some versions of Vi):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 つ目の形式は次の通りである (Vi のバージョンによってはこの形式と互換性がある)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	[text]{white}{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item [text]@{white@}@{vi:|vim:|Vim:|ex:@}[white]se[t] @{options@}:[text]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
[text]			any text or empty
{white}			at least one blank character (<Space> or <Tab>)
{vi:|vim:|Vim:|ex:}	the string "vi:", "vim:", "Vim:" or "ex:"
[white]			optional white space
se[t]			the string "set " or "se " (note the space); When
			"Vim" is used it must be "set".
{options}		a list of options, separated with white space, which
			is the argument for a ":set" command
:			a colon
[text]			any text or empty
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .75
@item [text] @tab 任意のテキスト、なくても良い
@item @{white@} @tab 1 個以上の余白 (<Space> または <Tab>)
@item @{vi:|vim:|Vim:|ex:@} @tab "vi:" か "vim:" か "Vim:" か "ex:" という文字列
@item [white] @tab 空白、なくても良い
@item se[t] @tab "set " または "se " という文字列 (@strong{Note:} 終わりの空白に注意)
@item @{options@} @tab オプション設定が空白で区切られて並んだもので、コマンド ":set" の引数である
@item : @tab コロン
@item [text] @tab 任意のテキスト、なくても良い
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Examples:
   /* vim: set ai tw=75: */ ~
   /* Vim: set ai tw=75: */ ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
/* vim: set ai tw=75: */
/* Vim: set ai tw=75: */
@end verbatim
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The white space before {vi:|vim:|Vim:|ex:} is required.  This minimizes the
chance that a normal word like "lex:" is caught.  There is one exception:
"vi:" and "vim:" can also be at the start of the line (for compatibility with
version 3.0).  Using "ex:" at the start of the line will be ignored (this
could be short for "example:").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{vi:|vim:|Vim:|ex:@} の前には空白が必要である。これが "lex:" 等の普通の言葉を誤認する可能性を低めている。ただし例外があり、"vi:" と "vim:" は行頭に来てもよい (バージョン 3.0 との互換性のため)。"ex:" が行頭に来ると、モードラインとは見なされない ("example:" の略かもしれないから)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*modeline-local*
The options are set like with ":setlocal": The new value only applies to the
buffer and window that contain the file.  Although it's possible to set global
options from a modeline, this is unusual.  If you have two windows open and
the files in it set the same global option to a different value, the result
depends on which one was opened last.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{modeline-local}
@cindex modeline-local
オプションは "@command{:setlocal}" などで設定できる。そうして設定した値は、そのバッファとそれを開いているウィンドウにのみ適用される。モードラインからグローバルオプションを設定することは不可能ではないが、普通そういうことはしない。2 つのウィンドウを開いていて、それぞれのファイルが同じグローバルオプションを違う値に設定しようとしたときは、後に開かれたウィンドウが優先される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When editing a file that was already loaded, only the window-local options
from the modeline are used.  Thus if you manually changed a buffer-local
option after opening the file, it won't be changed if you edit the same buffer
in another window.  But window-local options will be set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既に読み込まれているファイルを開くときは、モードラインからはウィンドウローカルなオプションだけが設定される。つまり、ファイルを開いた後に手動でバッファローカルなオプションを変更したら、そのバッファを別なウィンドウで開いてもそのオプションは変更されないが、ウィンドウローカルなオプションは変更される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*modeline-version*
If the modeline is only to be used for some versions of Vim, the version
number can be specified where "vim:" or "Vim:" is used:
	vim{vers}:	version {vers} or later
	vim<{vers}:	version before {vers}
	vim={vers}:	version {vers}
	vim>{vers}:	version after {vers}
{vers} is 700 for Vim 7.0 (hundred times the major version plus minor).
For example, to use a modeline only for Vim 7.0:
	/* vim700: set foldmethod=marker */ ~
To use a modeline for Vim after version 7.2:
	/* vim>702: set cole=2: */ ~
There can be no blanks between "vim" and the ":".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{modeline-version}
@cindex modeline-version
モードラインの内容が、Vimのバージョンによって使用可能だったり不可能だったりする場合には、"vim:" または "Vim:" のところでバージョンを指定できる。
@multitable @columnfractions .2 .8
@item vim@{vers@}: @tab バージョン @{vers@} 以降 (そのバージョンを含む)
@item vim<@{vers@}: @tab バージョン @{vers@} より前
@item vim=@{vers@}:@tab バージョン @{vers@} のみ
@item vim>@{vers@}:@tab バージョン @{vers@} より後 (そのバージョンを含まない)
@end multitable
@{vers@} に 700 を指定すると Vim 7.0 を表す (メジャー・バージョンナンバーの 100 倍足すマイナー・バージョンナンバー)。

例えば、Vim 7.0 でのみモードラインを使うにはこうする:
@verbatim
/* vim700: set foldmethod=marker */
@end verbatim
Vim 7.2 より新しいバージョンでのみモードラインを使うにはこうする:
@verbatim
/* vim>702: set cole=2: */
@end verbatim
"vim" と ":" の間に空白があってはならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The number of lines that are checked can be set with the 'modelines' option.
If 'modeline' is off or 'modelines' is 0 no lines are checked.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
モードラインを探す行数はオプション '@option{modelines}' で設定できる。オプション '@option{modeline}' がオフであるかオプション '@option{modelines}' の値が 0 だと、モードラインを探さない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that for the first form all of the rest of the line is used, thus a line
like:
   /* vi:ts=4: */ ~
will give an error message for the trailing "*/".  This line is OK:
   /* vi:set ts=4: */ ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
1 番目の形式では、行全体がオプション指定に使われることに注意。そのため次のようにすると、行末の "*/" のためにエラーメッセージが現れる。
@verbatim
/* vi:ts=4: */
@end verbatim
その代わり、こうすればよい。
@verbatim
/* vi:set ts=4: */
@end verbatim
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If an error is detected the rest of the line is skipped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
エラーが発見されると、その行の残りは無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to include a ':' in a set command precede it with a '\'.  The
backslash in front of the ':' will be removed.  Example:
   /* vi:set dir=c\:\tmp: */ ~
This sets the 'dir' option to "c:\tmp".  Only a single backslash before the
':' is removed.  Thus to include "\:" you have to specify "\\:".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド "set" の引数に ':' を含めたいときは、その前に '\' を置くこと。':' の前の '\' は取り除かれる。例:
@verbatim
/* vi:set dir=c\:\tmp: */
@end verbatim
これはオプション '@option{dir}' を "c:\tmp" に変更する。':' の前に '\' が置かれたとき、取り除かれるのは 1 個だけである。だからオプションの値に "\:" を含めたいなら "\\:" を指定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
No other commands than "set" are supported, for security reasons (somebody
might create a Trojan horse text file with modelines).  And not all options
can be set.  For some options a flag is set, so that when it's used the
|sandbox| is effective.  Still, there is always a small risk that a modeline
causes trouble.  E.g., when some joker sets 'textwidth' to 5 all your lines
are wrapped unexpectedly.  So disable modelines before editing untrusted text.
The mail ftplugin does this, for example.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
安全上の理由から、コマンド "@command{set}" 以外は使用できない (誰かがテキストファイルで「トロイの木馬」を作るかもしれないから)。また、全てのオプションが設定できるわけではない。

ある種のオプションにはフラグが設定されており、それが使用されるときには |sandbox| が有効になる。しかしそれでもモードラインが問題を引き起こす可能性はわずかに残る。

例えば、悪意のある誰かが '@option{textwidth}' を 5 にすると、ファイルの全ての行が予期せず折り返されてしまう。そのため、信用できないファイルを編集する前にはモードラインを無効にすること。例えば mail ftplugin はそれを行っている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Hint: If you would like to do something else than setting an option, you could
define an autocommand that checks the file for a specific string.  For
example: >
	au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
And define a function SetVar() that does something with the line containing
"VAR".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Hint: ファイルを読み込みときにオプション設定以外を行いたいなら、ファイル内の特定の文字列を調べる autocommand を定義すればよい。例:
@verbatim
au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
@end verbatim
そして "VAR" を含む行に何かを行うための SetVar() 関数を定義すればよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Options summary					*option-summary*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{option-summary}
@cindex option-summary
@section 3. オプションの要約
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the list below all the options are mentioned with their full name and with
an abbreviation if there is one.  Both forms may be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のリストでは、全てのオプションが、正確な名前と (あれば) 略名で示されている。どちらの形を使ってもよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In this document when a boolean option is "set" that means that ":set option"
is entered.  When an option is "reset", ":set nooption" is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この文書内では、切替オプションを「オンに」するというのは "@command{:set オプション}" を実行することを表す。切り替えオプションを「オフに」するというのは "@command{:set noオプション}" を実行することを表す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For some options there are two default values: The "Vim default", which is
used when 'compatible' is not set, and the "Vi default", which is used when
'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのオプションには、既定値が 2 種類あるものがある: 1 つ目は "Vim default" つまり Vim の既定値で、オプション '@option{compatible}' がオフになっているときに使われる。2 つ目は "Vi default" つまり Vi の既定値で、オプション '@option{compatible}' がオンになっているときに使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most options are the same in all windows and buffers.  There are a few that
are specific to how the text is presented in a window.  These can be set to a
different value in each window.  For example the 'list' option can be set in
one window and reset in another for the same text, giving both types of view
at the same time.  There are a few options that are specific to a certain
file.  These can have a different value for each file or buffer.  For example
the 'textwidth' option can be 78 for a normal text file and 0 for a C
program.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどのオプションは全てのウィンドウやバッファで共通である。さてその中には、テキストがウィンドウ内でどのように表示されるかを定めるものもある。そういったオプションは、ウィンドウごとに違う値にできる。

例えばオプション '@option{list}' は、あるウィンドウ内でオンにしても、同じテキストを編集している別のウィンドウ内ではオフにすることができる。すると同時に違った表示方法が使える。

また、ファイルごとに特定の値にできるオプションもある。そういったオプションは、ファイルごとまたはバッファごとに違う値にできる。例えばオプション '@option{textwidth}' は、通常のテキストファイルには 78 にし、C プログラムのファイルには 0 にするようにできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	global			one option for all buffers and windows
	local to window		each window has its own copy of this option
	local to buffer		each buffer has its own copy of this option
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .35 .65
@item グローバル: @tab 1 つのオプションが全てのバッファやウィンドウに対して適用される
@item ウィンドウについてローカル: @tab ウィンドウがそれぞれ、そのオプションのコピーを独自に持つ
@item バッファについてローカル: @tab バッファがそれぞれ、そのオプションのコピーを独自に持つ
@end multitable
@{訳注: 上の項目については、文書先頭も参照@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When creating a new window the option values from the currently active window
are used as a default value for the window-specific options.  For the
buffer-specific options this depends on the 's' and 'S' flags in the
'cpoptions' option.  If 's' is included (which is the default) the values for
buffer options are copied from the currently active buffer when a buffer is
first entered.  If 'S' is present the options are copied each time the buffer
is entered, this is almost like having global options.  If 's' and 'S' are not
present, the options are copied from the currently active buffer when the
buffer is created.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいウィンドウを開くとき、ウィンドウ固有のオプションには、その前にアクティブだったウィンドウでの値がまず使われる。バッファ固有のオプションは、オプション '@option{cpoptions}' のフラグ '@var{s}' とフラグ '@var{S}' によって違ってくる。

フラグ '@var{s}' が含まれていると (既定ではこうなっている)、新しいバッファが最初にアクティブになったときに、その前にアクティブだったバッファでの値がコピーされる。

フラグ '@var{S}' が含まれていると、バッファがアクティブになる度に値がコピーされる。これはグローバルオプションであるようなものである。フラグ '@var{s}' もフラグ '@var{S}' も含まれていないときは、バッファが作られるときに、その前にアクティブだったバッファでの値がコピーされる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Hidden options						*hidden-options*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{hidden-options}
@cindex hidden-options
@unnumberedsubsec 隠しオプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Not all options are supported in all versions.  This depends on the supported
features and sometimes on the system.  A remark about this is in curly braces
below.  When an option is not supported it may still be set without getting an
error, this is called a hidden option.  You can't get the value of a hidden
option though, it is not stored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
全てのオプションが全てのバージョンでサポートされているわけではない。これは有効にされている機能とシステムにもよる。これに関しての注意は以下の波括弧の中にある。もしあるオプションがサポートされていなくても、そのオプションへの設定はエラーにならず成功する。これを隠しオプションと呼ぶ。しかし隠しオプションの値は保持されていないため、取得することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To test if option "foo" can be used with ":set" use something like this: >
	if exists('&foo')
This also returns true for a hidden option.  To test if option "foo" is really
supported use something like this: >
	if exists('+foo')
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション "foo" が "@command{:set}" で設定できるかどうか判定するにはこのようにする:
@verbatim
if exists('&foo')
@end verbatim
これは隠しオプションに対しても true を返す。オプション "foo" が本当にサポートされているかを判定するにはこのようにする:
@verbatim
if exists('+foo')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E355*
A jump table for the options with a short description can be found at |Q_op|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E355}
@cindex E355
|@ref{Q_op, , Q_op}| にはオプションの短い説明付きの表があり、そこからヘルプにジャンプできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'aleph'* *'al'* *aleph* *Aleph*
'aleph' 'al'		number	(default 128 for MS-DOS, 224 otherwise)
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	The ASCII code for the first letter of the Hebrew alphabet.  The
	routine that maps the keyboard in Hebrew mode, both in Insert mode
	(when hkmap is set) and on the command-line (when hitting CTRL-_)
	outputs the Hebrew characters in the range [aleph..aleph+26].
	aleph=128 applies to PC code, and aleph=224 applies to ISO 8859-8.
	See |rileft.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'aleph'}
@anchor{'al'}
@anchor{aleph}
@anchor{Aleph}
@cindex 'aleph'
@cindex 'al'
@cindex aleph
@cindex Aleph
@table @asis
@item 'aleph' 'al'
数値 (既定値は MS-DOS では 128、それ以外では 224) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

ヘブライ語アルファベットの最初の文字を表す ASCII コード。挿入モード (オプション '@option{hkmap}' がオンのとき) と コマンドラインモード (@kbd{CTRL-_} を打ち込んだとき) の両方において、ヘブライモードのキーボード配列をマッピングするルーチンは、[aleph..aleph+26] の範囲のヘブライ文字を出力する。'@option{aleph}'=128 は PC コード、'@option{aleph}'=224 は ISO 8859-8 に使われる。|rileft.txt| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'allowrevins'* *'ari'* *'noallowrevins'* *'noari'*
'allowrevins' 'ari'	boolean	(default off)
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	Allow CTRL-_ in Insert and Command-line mode.  This is default off, to
	avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get
	into reverse Insert mode, and don't know how to get out.  See
	'revins'.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'allowrevins'}
@anchor{'ari'}
@anchor{'noallowrevins'}
@anchor{'noari'}
@cindex 'allowrevins'
@cindex 'ari'
@cindex 'noallowrevins'
@cindex 'noari'
@item 'allowrevins' 'ari'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

挿入モードとコマンドラインモードで @kbd{CTRL-_} を使用可能にする。これは既定ではオフになっている。ユーザーが間違って @kbd{SHIFT-_} ではなく @kbd{CTRL-_} を打ち込み、右から左に書いていくモードに入って抜けられなくなる事態を防ぐためである。オプション '@option{revins}' を参照。
@quotation
@strong{Note:} @*
このオプションは、オプション '@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			 *'altkeymap'* *'akm'* *'noaltkeymap'* *'noakm'*
'altkeymap' 'akm'	boolean (default off)
			global
			{not in Vi}
			{only available when compiled with the |+farsi|
			feature}
	When on, the second language is Farsi.  In editing mode CTRL-_ toggles
	the keyboard map between Farsi and English, when 'allowrevins' set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'altkeymap'}
@anchor{'akm'}
@anchor{'noaltkeymap'}
@anchor{'noakm'}
@cindex 'altkeymap'
@cindex 'akm'
@cindex 'noaltkeymap'
@cindex 'noakm'
@item 'altkeymap' 'akm'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+farsi| 機能付きでコンパイルされたときのみ有効@}

オンのとき、2 番目の言語がペルシアになる。オプション '@option{allowrevins}' がオンならば、挿入モードでは @kbd{CTRL-_} でペルシアと英語のキーボードマップを切り替えられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When off, the keyboard map toggles between Hebrew and English.  This
	is useful to start the Vim in native mode i.e. English (left-to-right
	mode) and have default second language Farsi or Hebrew (right-to-left
	mode).  See |farsi.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オフのとき、キーボードマップはヘブライ語と英語で切り替えられる。これは普通の状態、つまり英語モード (左から右に書く言語のモード) と既定の第 2 言語であるペルシアまたはヘブライ語モード (右から左に書く言語のモード) を切り替えた上で Vim を開始するのに便利である。|farsi.txt| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'ambiwidth'* *'ambw'*
'ambiwidth' 'ambw'	string (default: "single")
			global
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	Only effective when 'encoding' is "utf-8" or another Unicode encoding.
	Tells Vim what to do with characters with East Asian Width Class
	Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek
	letters, Cyrillic letters).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ambiwidth'}
@anchor{'ambw'}
@cindex 'ambiwidth'
@cindex 'ambw'
@item 'ambiwidth' 'ambw'
文字列 (既定では "single") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@}

'@option{encoding}' が "@var{utf-8}" など Unicode エンコーディングのときのみ効果がある。East Asian Width Class Ambiguous な文字 (ユーロ、登録商標記号、著作権記号、ギリシャ文字、キリル文字など) をどう扱うかを定める。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There are currently two possible values:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のところ、設定可能な値は次の 2 通りである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"single":	Use the same width as characters in US-ASCII.  This is
			expected by most users.
	"double":	Use twice the width of ASCII characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item "single": @tab US-ASCII の文字と同じ幅を使う。これはほとんどのユーザーにとって期待どおりになる。
@item "double": @tab ASCII 文字の 2 倍の幅を使う。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E834* *E835*
	The value "double" cannot be used if 'listchars' or 'fillchars'
	contains a character that would be double width.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E834}
@anchor{E835}
@cindex E834
@cindex E835
"@var{double}" は '@option{listchars}' や '@option{fillchars}' に指定された文字が全角幅になってしまう場合は使えない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There are a number of CJK fonts for which the width of glyphs for
	those characters are solely based on how many octets they take in
	legacy/traditional CJK encodings.  In those encodings, Euro,
	Registered sign, Greek/Cyrillic letters are represented by two octets,
	therefore those fonts have "wide" glyphs for them.  This is also
	true of some line drawing characters used to make tables in text
	file.  Therefore, when a CJK font is used for GUI Vim or
	Vim is running inside a terminal (emulators) that uses a CJK font
	(or Vim is run inside an xterm invoked with "-cjkwidth" option.),
	this option should be set to "double" to match the width perceived
	by Vim with the width of glyphs in the font.  Perhaps it also has
	to be set to "double" under CJK Windows 9x/ME or Windows 2k/XP
	when the system locale is set to one of CJK locales.  See Unicode
	Standard Annex #11 (http://www.unicode.org/reports/tr11).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの文字のグリフの幅を、旧い／伝統的な CJK エンコーディングで何オクテットを占めるかだけによって決めている CJK フォントがたくさんある。そのエンコーディングではユーロ、登録商標記号、ギリシャ文字、キリル文字は 2 オクテットで表現されるので、それらのフォントはこれらの文字に「wide な」グリフを当てている。これはテキストファイルで表を作るための罫線文字にもあてはまる。

そのため GUI 版の Vim に CJK フォントを使うときや、CJK フォントを使うターミナル (エミュレータ) の中で Vim を実行するとき (またはオプション "-cjkwidth" つきで起動された xterm の中で Vim を実行するとき)にはこのオプションを "double" にして、Vimが認識する幅をフォントのグリフの幅に合わせなければならない。

CJK の Windows 9x/ME や Windows 2k/XP でもシステムのロケールが CJK ロケールのどれかに設定されている場合は多分 "double" にしなければならないだろう。

Unicode Standard Annex #11 (@url{http://www.unicode.org/reports/tr11}) を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Vim may set this option automatically at startup time when Vim is
	compiled with the |+termresponse| feature and if |t_u7| is set to the
	escape sequence to request cursor position report.  The response can
	be found in |v:termu7resp|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が |+termresponse| 機能付きでコンパイルされ、|t_u7| にカーソル位置取得のためのエスケープシーケンスが設定されているとき、このオプションの値は Vim の起動時に自動的に設定される。レスポンスは |v:termu7resp| の中に見つけることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'antialias'* *'anti'* *'noantialias'* *'noanti'*
'antialias' 'anti'	boolean (default: off)
			global
			{not in Vi}
			{only available when compiled with GUI enabled
			on Mac OS X}
	This option only has an effect in the GUI version of Vim on Mac OS X
	v10.2 or later.  When on, Vim will use smooth ("antialiased") fonts,
	which can be easier to read at certain sizes on certain displays.
	Setting this option can sometimes cause problems if 'guifont' is set
	to its default (empty string).
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'antialias'}
@anchor{'anti'}
@anchor{'noantialias'}
@anchor{'noanti'}
@cindex 'antialias'
@cindex 'anti'
@cindex 'noantialias'
@cindex 'noanti'
@item 'antialias' 'anti'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が Mac OS X で GUI を有効にしてコンパイルされたときのみ有効@}

このオプションは Mac OS X v10.2 以降の上で GUI 版の Vim を使うときだけ効果がある。これがオンであるとなめらかな (アンチエイリアスされた) フォントが使われる。このフォントはある種のディスプレイ上、あるサイズでは読み易くなる。

'@option{guifont}' が既定値 (空文字列) のときこのオプションを設定すると問題が発生することがある。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'autochdir'* *'acd'* *'noautochdir'* *'noacd'*
'autochdir' 'acd'	boolean (default off)
			global
			{not in Vi}
			{only available when compiled with it, use
			exists("+autochdir") to check}
	When on, Vim will change the current working directory whenever you
	open a file, switch buffers, delete a buffer or open/close a window.
	It will change to the directory containing the file which was opened
	or selected.
	Note: When this option is on some plugins may not work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'autochdir'}
@anchor{'acd'}
@anchor{'noautochdir'}
@anchor{'noacd'}
@cindex 'autochdir'
@cindex 'acd'
@cindex 'noautochdir'
@cindex 'noacd'
@item 'autochdir' 'acd'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim のコンパイル時に有効にされたときのみ有効。使用できるかどうかは exists("+autochdir") で確認できる@}

これがオンであるとファイルを開くとき、バッファを切り替えるとき、バッファを削除するとき、ウィンドウを開閉するときに毎回作業ディレクトリが変更される。開かれた／選択されたファイルを含んでいるディレクトリがカレントディレクトリになる。
@quotation
@strong{Note:} @*
このオプションがオンになっていると動かないプラグインがある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'arabic'* *'arab'* *'noarabic'* *'noarab'*
'arabic' 'arab'		boolean (default off)
			local to window
			{not in Vi}
			{only available when compiled with the |+arabic|
			feature}
	This option can be set to start editing Arabic text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'arabic'}
@anchor{'arab'}
@anchor{'noarabic'}
@anchor{'noarab'}
@cindex 'arabic'
@cindex 'arab'
@cindex 'noarabic'
@cindex 'noarab'
@item 'arabic' 'arab'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+arabic| 機能付きでコンパイルされたときのみ有効@}

アラビア語のテキストを編集するときにこのオプションを設定することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Setting this option will:
	- Set the 'rightleft' option, unless 'termbidi' is set.
	- Set the 'arabicshape' option, unless 'termbidi' is set.
	- Set the 'keymap' option to "arabic"; in Insert mode CTRL-^ toggles
	  between typing English and Arabic key mapping.
	- Set the 'delcombine' option
	Note that 'encoding' must be "utf-8" for working with Arabic text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションを設定すると次のことが行われる:
@itemize @minus
@item '@option{termbidi}' がオンでない限り、オプション '@option{rightleft}' をオンにする。
@item '@option{termbidi}' がオンでない限り、オプション '@option{arabicshape}' をオンにする。
@item オプション '@option{keymap}' を "@var{arabic}" に設定する。これによって挿入モードで @kbd{CTRL-^} を押すと英語とアラビア語のキーマッピングがトグルする。
@item オプション 'delcombine' をオンにする。
@end itemize
アラビア語のテキストを編集するには '@option{encoding}' が "@var{utf-8}" でなければならないことに注意。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Resetting this option will:
	- Reset the 'rightleft' option.
	- Disable the use of 'keymap' (without changing its value).
	Note that 'arabicshape' and 'delcombine' are not reset (it is a global
	option).
	NOTE: This option is reset when 'compatible' is set.
	Also see |arabic.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションをオフにすると次のことが行われる:
@itemize @minus
@item '@option{rightleft}' をオンにする
@item '@option{keymap}' の使用を無効にする(その値は変更しない)
@end itemize
'@option{arabicshape}' と '@option{delcombine}' はオフにならない (これらはグローバルオプションである)。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
|arabic.txt| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'arabicshape'* *'arshape'*
					*'noarabicshape'* *'noarshape'*
'arabicshape' 'arshape'	boolean (default on)
			global
			{not in Vi}
			{only available when compiled with the |+arabic|
			feature}
	When on and 'termbidi' is off, the required visual character
	corrections that need to take place for displaying the Arabic language
	take effect.  Shaping, in essence, gets enabled; the term is a broad
	one which encompasses:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'arabicshape'}
@anchor{'arshape'}
@anchor{'noarabicshape'}
@anchor{'noarshape'}
@cindex 'arabicshape'
@cindex 'arshape'
@cindex 'noarabicshape'
@cindex 'noarshape'
@item 'arabicshape' 'arshape'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+arabic| 機能付きでコンパイルされたときのみ有効@}

これがオンで '@option{termbidi}' がオフになっているとアラビア語を表示するのに必要な文字表示補正が行われる。本質的には字形作成 (shaping) が有効になる。この用語は次の事を含む広い用語である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  a) the changing/morphing of characters based on their location
	     within a word (initial, medial, final and stand-alone).
	  b) the enabling of the ability to compose characters
	  c) the enabling of the required combining of some characters
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item a) 単語の中の位置(初期、中間、最終、孤立)によって文字を変更/変形させる。
@item b) 文字合成機能の有効化
@item c) ある文字の組み合わせの有効化
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When disabled the display shows each character's true stand-alone
	form.
	Arabic is a complex language which requires other settings, for
	further details see |arabic.txt|.
	NOTE: This option is set when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これが無効になっていると、表示がそれぞれの文字の本来の孤立形になる。アラビア語は他にも設定が必要な複雑な言語である。より詳しくは |arabic.txt|を参照。
@quotation
@strong{Note:} @*
This option is set when 'compatible' is set.
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'autoindent'* *'ai'* *'noautoindent'* *'noai'*
'autoindent' 'ai'	boolean	(default off)
			local to buffer
	Copy indent from current line when starting a new line (typing <CR>
	in Insert mode or when using the "o" or "O" command).  If you do not
	type anything on the new line except <BS> or CTRL-D and then type
	<Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor
	to another line has the same effect, unless the 'I' flag is included
	in 'cpoptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'autoindent'}
@anchor{'ai'}
@anchor{'noautoindent'}
@anchor{'noai'}
@cindex 'autoindent'
@cindex 'ai'
@cindex 'noautoindent'
@cindex 'noai'
@item 'autoindent' 'ai'
切替 (既定ではオフ) @*
バッファについてローカル

新しい行を開始したとき (挿入モードで @key{<CR>} を打ち込むか、コマンド "o" や "O" を使ったとき)、新しい行のインデントを現在行と同じくする。新しい行で @key{<BS>} か @kbd{CTRL-D} 以外を打ち込まずに @key{<Esc>}, @kbd{CTRL-O} か @key{<CR>} を打ち込むと、その行のインデントは削除される。'@option{cpoptions}' にフラグ '@var{I}' が入っていないかぎり、カーソルを他の行に移動させても同様である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When autoindent is on, formatting (with the "gq" command or when you
	reach 'textwidth' in Insert mode) uses the indentation of the first
	line.
	When 'smartindent' or 'cindent' is on the indent is changed in
	a different way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{autoindent}' がオンのときは、テキストの整形処理 (コマンド "@command{gq}" を使ったり、挿入モードで 1 行の文字数がオプション '@option{textwidth}' で指定した数に届いたとき) には最初の行のインデントが使われる。

オプション '@option{smartindent}' かオプション '@option{cindent}' がオンのときは、インデントの方法は違ってくる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The 'autoindent' option is reset when the 'paste' option is set and
	restored when 'paste' is reset.
	{small difference from Vi: After the indent is deleted when typing
	<Esc> or <CR>, the cursor position when moving up or down is after the
	deleted indent; Vi puts the cursor somewhere in the deleted indent}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{autoindent}' はオプション '@option{paste}' がセットされたらリセットされ、オプション '@option{paste}' がリセットされたら復元される。

@{Vi との微妙な違い: @key{<Esc>} または @key{<CR>} を打ち込んでインデントが削除された後、上下に移動した後のカーソル位置は削除されたインデントの後ろになる。Vi では削除されたインデントの中のどこかになる@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'autoread'* *'ar'* *'noautoread'* *'noar'*
'autoread' 'ar'		boolean	(default off)
			global or local to buffer |global-local|
			{not in Vi}
	When a file has been detected to have been changed outside of Vim and
	it has not been changed inside of Vim, automatically read it again.
	When the file has been deleted this is not done.  |timestamp|
	If this option has a local value, use this command to switch back to
	using the global value: >
		:set autoread<
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'autoread'}
@anchor{'ar'}
@anchor{'noautoread'}
@anchor{'noar'}
@cindex 'autoread'
@cindex 'ar'
@cindex 'noautoread'
@cindex 'noar'
@item 'autoread' 'ar'
切替 (既定ではオフ) @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

ファイルが Vim の内部では変更されてないが、Vim の外部で変更されたことが判明したとき、自動的に読み直す。ファイルが削除されたときにはこのようにはならない。|timestamp|

このオプションがローカルな値を持つとき、再びグローバルな値を使うようにするには次のようにする。
@example
:set autoread<
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				 *'autowrite'* *'aw'* *'noautowrite'* *'noaw'*
'autowrite' 'aw'	boolean	(default off)
			global
	Write the contents of the file, if it has been modified, on each
	:next, :rewind, :last, :first, :previous, :stop, :suspend, :tag, :!,
	:make, CTRL-] and CTRL-^ command; and when a :buffer, CTRL-O, CTRL-I,
	'{A-Z0-9}, or `{A-Z0-9} command takes one to another file.
	Note that for some commands the 'autowrite' option is not used, see
	'autowriteall' for that.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'autowrite'}
@anchor{'aw'}
@anchor{'noautowrite'}
@anchor{'noaw'}
@cindex 'autowrite'
@cindex 'aw'
@cindex 'noautowrite'
@cindex 'noaw'
@item 'autowrite' 'aw'
切替 (既定ではオフ) @*
グローバル

コマンド @command{:next}, @command{:rewind}, @command{:last}, @command{:first}, @command{:previous}, @command{:stop}, @command{:suspend}, @command{:tag}, @command{:!}, @command{:make}, @kbd{CTRL-]}, @kbd{CTRL-^} を実行したときや、コマンド @command{:buffer}, @kbd{CTRL-O}, @kbd{CTRL-I}, @command{'@{A-Z0-9@}}, @command{`@{A-Z0-9@}} の移動先が別のファイルのとき、ファイルが変更されているなら書き込む。

@quotation
@strong{Note:} @*
'@option{autowrite}' が適用されないコマンドもあることに注意。それについてはオプション '@option{autowriteall}' を参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			 *'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
'autowriteall' 'awa'	boolean	(default off)
			global
			{not in Vi}
	Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
	":qall", ":exit", ":xit", ":recover" and closing the Vim window.
	Setting this option also implies that Vim behaves like 'autowrite' has
	been set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'autowriteall'}
@anchor{'awa'}
@anchor{'noautowriteall'}
@anchor{'noawa'}
@cindex 'autowriteall'
@cindex 'awa'
@cindex 'noautowriteall'
@cindex 'noawa'
@item 'autowriteall' 'awa'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オプション '@option{autowrite}' と似ているが、さらにコマンド "@command{:edit}", "@command{:enew}", "@command{:quit}", "@command{:qall}", "@command{:exit}", "@command{:xit}", "@command{:recover}" を実行したときや、Vim のウィンドウを閉じるときも、ファイルが変更されているなら保存する。

このオプションをオンにすると、同時に '@option{autowrite}' もオンになったような動作になる @{訳注: このオプションは '@command{autowrite}' の適用されるコマンド全てに適用されるので@}。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'background'* *'bg'*
'background' 'bg'	string	(default "dark" or "light", see below)
			global
			{not in Vi}
	When set to "dark", Vim will try to use colors that look good on a
	dark background.  When set to "light", Vim will try to use colors that
	look good on a light background.  Any other value is illegal.
	Vim tries to set the default value according to the terminal used.
	This will not always be correct.
	Setting this option does not change the background color, it tells Vim
	what the background color looks like.  For changing the background
	color, see |:hi-normal|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'background'}
@anchor{'bg'}
@cindex 'background'
@cindex 'bg'
@item 'background' 'bg'
文字列 (既定は "dark" または "light"、下記参照) @*
グローバル @*
@{Vi にはない@}

値が "@var{dark}" のときは、Vim は暗い背景によく合う色を使おうとする。値が "@var{light}" のときは、Vim は明るい背景によく合う色を使おうとする。その他の値は無効である。

Vim は使われているターミナルの種類に従って既定の値を定めるが、常に正しいとは限らない。

このオプションを変更しても背景色は変わらない。これはただ Vim に背景色がどのようなものかを伝えるだけである。背景色の変更には |:hi-normal| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When 'background' is set Vim will adjust the default color groups for
	the new value.  But the colors used for syntax highlighting will not
	change.					*g:colors_name*
	When a color scheme is loaded (the "g:colors_name" variable is set)
	setting 'background' will cause the color scheme to be reloaded.  If
	the color scheme adjusts to the value of 'background' this will work.
	However, if the color scheme sets 'background' itself the effect may
	be undone.  First delete the "g:colors_name" variable when needed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{background}' が変更されると、Vim は既定の色設定グループをその値に合わせて調整する。しかし構文強調表示に使われる色設定は変化しない。

@anchor{g:colors_name}
@cindex g:colors_name
カラースキームが読み込まれているとき (つまり変数 "@var{g:colors_name}" が設定されているとき) '@option{background}' を変更するとカラースキームが再び読み込まれる。カラースキームが '@option{background}' に対応していればこれは適用される。

しかしカラースキームが '@option{background}' 自体を設定しているときは効果がない。必要ならば変数 "@var{g:colors_name}" を消去すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When setting 'background' to the default value with: >
		:set background&
<	Vim will guess the value.  In the GUI this should work correctly,
	in other cases Vim might not be able to guess the right value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{background}' を次のようにして既定値に戻したとき、
@example
:set background&
@end example
Vim はその値を推測する。GUI 版ならばうまくいくはずだが、そうでなければ正しい値を推測できないかもしれない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When the |t_RB| option is set, Vim will use it to request the background
	color from the terminal.  If the returned RGB value is dark/light and
	'background' is not dark/light, 'background' will be set and the
	screen is redrawn.  This may have side effects, make t_BG empty in
	your .vimrc if you suspect this problem.  The response to |t_RB| can
	be found in |v:termrbgresp|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@option{t_RB} オプションが設定されると、Vim はターミナルから背景色をリクエストするために使われる。もしも返された RGB の値が dark/light であり、'@option{background}' が dark/light でなかったなら、'@option{background}' が設定されて画面が再描画される。これは副作用があるかもしれない。問題があると疑わしき場合は、@file{.vimrc} の @option{t_BG} を空にしよう。|t_RB| へのレスポンスは |v:termrbgresp| の中に見つけることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When starting the GUI, the default value for 'background' will be
	"light".  When the value is not set in the .gvimrc, and Vim detects
	that the background is actually quite dark, 'background' is set to
	"dark".  But this happens only AFTER the .gvimrc file has been read
	(because the window needs to be opened to find the actual background
	color).  To get around this, force the GUI window to be opened by
	putting a ":gui" command in the .gvimrc file, before where the value
	of 'background' is used (e.g., before ":syntax on").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI を開始したとき、'@option{background}' の既定値は "@var{light}" である。値がファイル @file{.gvimrc} で定められておらず、Vim が背景色は実際は暗いと判断したときは、'@option{background}' は "@var{dark}" になる。

しかしこれは @file{.gvimrc} が読み込まれた「後」に行われる (実際の背景色を知るためにウィンドウが開かれる必要があるから)。これを避けるには、コマンド "@command{:gui}" を @file{.gvimrc} の中の '@option{background}' の値が使われる前に置いて (例えば "@command{:syntax on}" の前) GUI ウィンドウを強制的に開かせればよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For MS-DOS, Windows and OS/2 the default is "dark".
	For other systems "dark" is used when 'term' is "linux",
	"screen.linux", "cygwin" or "putty", or $COLORFGBG suggests a dark
	background.  Otherwise the default is "light".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-DOS, Windows, OS/2 では初期設定は "@var{dark}" である。他のシステムでは '@option{term}' が "@var{linux}", "@var{screen.linux}", "@var{cygwin}" または "@var{putty}" であるか @env{$COLORFGBG} によって暗い背景が推奨されていれば初期設定は "@var{dark}" になる。そうでなければ初期設定は "@var{light}" である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The |:terminal| command and the |term_start()| function use the
	'background' value to decide whether the terminal window will start
	with a white or black background.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|:terminal| コマンドと |term_start()| 関数は、ターミナルウィンドウが白もしくは黒の背景でスタートするかどうかを決めるために '@option{background}' の値を使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Normally this option would be set in the .vimrc file.  Possibly
	depending on the terminal name.  Example: >
		:if &term == "pcterm"
		:  set background=dark
		:endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、このオプションは .vimrc 内で設定される。おそらく、設定はターミナルの名前に依存する。例:
@verbatim
:if &term == "pcterm"
:  set background=dark
:endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	When this option is set, the default settings for the highlight groups
	will change.  To use other settings, place ":highlight" commands AFTER
	the setting of the 'background' option.
	This option is also used in the "$VIMRUNTIME/syntax/syntax.vim" file
	to select the colors for syntax highlighting.  After changing this
	option, you must load syntax.vim again to see the result.  This can be
	done with ":syntax on".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションが設定されると、強調表示の既定の設定が変更される。他の設定を使いたいなら、'@option{background}' を設定した「後」にコマンド "@command{:highlight}" を置くこと。

このオプションはファイル "@file{$VIMRUNTIME/syntax/syntax.vim}" 内でも、構文強調表示のための色を選択するのに使われる。このオプションを設定した後は @file{syntax.vim} を再読み込みしないと結果が分からない。これにはコマンド "@command{:syntax on}" を実行すればよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'backspace'* *'bs'*
'backspace' 'bs'	string	(default "", set to "indent,eol,start"
							    in |defaults.vim|)
			global
			{not in Vi}
	Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
	mode.  This is a list of items, separated by commas.  Each item allows
	a way to backspace over something:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backspace'}
@anchor{'bs'}
@cindex 'backspace'
@cindex 'bs'
@item 'backspace' 'bs'
文字列 (既定では ""、|defaults.vim| 内で "indent,eol,start" にセットされる) @*
グローバル @*
@{Vi にはない@}

挿入モードでの @key{<BS>}, @key{<Del>}, @kbd{CTRL-W}, @kbd{CTRL-U} の働きに影響する。値はキーワードのコンマ区切りのリストである。それぞれのキーワードがバックスペースの働く対象を定めている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	value	effect	~
	indent	allow backspacing over autoindent
	eol	allow backspacing over line breaks (join lines)
	start	allow backspacing over the start of insert; CTRL-W and CTRL-U
		stop once at the start of insert.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@headitem 値 @tab 効果
@item indent @tab autoindent を超えてバックスペースを働かせる
@item eol @tab 改行を超えてバックスペースを働かせる (行を連結する)
@item start @tab 挿入区間の始めでバックスペースを働かせるが @kbd{CTRL-W} と @kbd{CTRL-U} は挿入区間の始めでいったん止まる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When the value is empty, Vi compatible backspacing is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値が空のときは、バックスペースの働きは Vi 互換になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For backwards compatibility with version 5.4 and earlier:
	value	effect	~
	  0	same as ":set backspace=" (Vi compatible)
	  1	same as ":set backspace=indent,eol"
	  2	same as ":set backspace=indent,eol,start"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バージョン 5.4 またはそれ以前との互換性を保つには次のようにする。
@multitable @columnfractions .15 .85
@headitem 値 @tab 効果
@item 0 @tab ":set backspace=" と同じ (Vi 互換)
@item 1 @tab ":set backspace=indent,eol" と同じ
@item 2 @tab ":set backspace=indent,eol,start" と同じ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	See |:fixdel| if your <BS> or <Del> key does not do what you want.
	NOTE: This option is set to "" when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<BS>} や @key{<Del>} で望み通りの動作ができないときは |:fixdel| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると "" になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'backup'* *'bk'* *'nobackup'* *'nobk'*
'backup' 'bk'		boolean	(default off)
			global
			{not in Vi}
	Make a backup before overwriting a file.  Leave it around after the
	file has been successfully written.  If you do not want to keep the
	backup file, but you do want a backup while the file is being
	written, reset this option and set the 'writebackup' option (this is
	the default).  If you do not want a backup file at all reset both
	options (use this if your file system is almost full).  See the
	|backup-table| for more explanations.
	When the 'backupskip' pattern matches, a backup is not made anyway.
	When 'patchmode' is set, the backup may be renamed to become the
	oldest version of a file.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backup'}
@anchor{'bk'}
@anchor{'nobackup'}
@anchor{'nobk'}
@cindex 'backup'
@cindex 'bk'
@cindex 'nobackup'
@cindex 'nobk'
@item 'backup' 'bk'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

ファイルを上書きする前にバックアップを作る。書き込みが成功してもバックアップはそのまま取っておく。バックアップを取っておきたくはないが、書き込み中にはバックアップが欲しいときには、このオプションをオフにしてオプション '@option{writebackup}' をオンにすること (既定ではそうなっている)。全くバックアップが要らないなら両方をオフにすること (ユーザーのファイルシステムがほとんど満杯ならこうするとよい)。詳しくは |backup-table| を参照。

どちらにしてもオプション '@option{backupskip}' のパターンがマッチすると、バックアップは作られない。オプション '@option{patchmode}' がオンのときは、バックアップはリネームされてファイルの最も古いバージョンになることがある。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'backupcopy'* *'bkc'*
'backupcopy' 'bkc'	string	(Vi default for Unix: "yes", otherwise: "auto")
			global or local to buffer |global-local|
			{not in Vi}
	When writing a file and a backup is made, this option tells how it's
	done.  This is a comma separated list of words.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backupcopy'}
@anchor{'bkc'}
@cindex 'backupcopy'
@cindex 'bkc'
@item 'backupcopy' 'bkc'
文字列 (Unix での Vi の既定値: "yes"、それ以外: "auto") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

ファイルの書き込みをしてバックアップが作られるとき、その方法をこのオプションで指定する。このオプションはコンマで区切られた単語のリストである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The main values are:
	"yes"	make a copy of the file and overwrite the original one
	"no"	rename the file and write a new one
	"auto"	one of the previous, what works best
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
主な値は次の通り:
@multitable @columnfractions .1 .9
@item "yes" @tab 先にファイルのコピーを作ってバックアップにして、更新した内容は元のファイルに上書きする
@item "no" @tab 先に元のファイルをリネームしてバックアップにして、更新した内容は新しいファイルに書き出す
@item "auto" @tab どちらか適切な方を選ぶ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Extra values that can be combined with the ones above are:
	"breaksymlink"	always break symlinks when writing
	"breakhardlink"	always break hardlinks when writing
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の値を上のどれか 1 つと組み合わせることができる:
@multitable @columnfractions .3 .7
@item "breaksymlink" @tab 書き込み時に常にシンボリックリンクを切る。
@item "breakhardlink" @tab 書き込み時に常にハードリンクを切る。
@end multitable
@quotation
@{@strong{訳注:}
@verbatim
$ ls -lF
total 2
-rw-r--r--  1 ao  ao  24  9 17 12:26 hontai
lrwxr-xr-x  1 ao  ao   6  9 17 12:29 l@ -> hontai
@end verbatim
となっているとき、ファイル l を編集して :w すると、
@table @asis
@item backupcopy=auto の場合:
@verbatim
-rw-r--r--  1 ao  ao  24  9 17 12:26 l
lrwxr-xr-x  1 ao  ao   6  9 17 12:29 l@ -> hontai
-rw-r--r--  1 ao  ao  27  9 17 12:31 hontai
@end verbatim
@item backupcopy=auto,breaksymlink の場合:
@verbatim
-rw-r--r--  1 ao  ao  27  9 17 12:26 hontai
lrwxr-xr-x  1 ao  ao   6  9 17 12:29 l~@ -> hontai
-rw-r--r--  1 ao  ao  30  9 17 12:32 l
@end verbatim
@end table
という結果になる。@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Making a copy and overwriting the original file:
	- Takes extra time to copy the file.
	+ When the file has special attributes, is a (hard/symbolic) link or
	  has a resource fork, all this is preserved.
	- When the file is a link the backup will have the name of the link,
	  not of the real file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルのコピーを作ってから元のファイルを上書きする方法:
@multitable @columnfractions .1 .9
@item X @tab ファイルのコピーに余計な時間がかかる。
@item O @tab 編集したファイルが特別な属性を持っていたり、ファイルがハードリンクやシンボリックリンクであったり、リソースフォークを持っているときでも、全て元のまま保たれる。
@item X @tab 編集したファイルがリンクのとき、バックアップの名前がリンク先の文書の名前でなく、リンクの名前になってしまう。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Renaming the file and writing a new one:
	+ It's fast.
	- Sometimes not all attributes of the file can be copied to the new
	  file.
	- When the file is a link the new file will not be a link.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルをリネームしてから新しいファイルに書き出す方法:
@multitable @columnfractions .1 .9
@item O @tab 高速である。
@item X @tab 時々、元のファイルの属性の一部しか新しいファイルにコピーされないことがある。
@item X @tab 編集したファイルがリンクのとき、新しいファイルはリンクにならない。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "auto" value is the middle way: When Vim sees that renaming file
	is possible without side effects (the attributes can be passed on and
	the file is not a link) that is used.  When problems are expected, a
	copy will be made.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"auto" の値にすると折衷策を採る。Vim が副作用なしにリネームの方法が使えると判断したとき (属性がコピーでき、ファイルがリンクでないとき) は、そちらが使われる。それでは問題がありそうなときはコピーの方法が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "breaksymlink" and "breakhardlink" values can be used in
	combination with any of "yes", "no" and "auto".  When included, they
	force Vim to always break either symbolic or hard links by doing
	exactly what the "no" option does, renaming the original file to
	become the backup and writing a new file in its place.  This can be
	useful for example in source trees where all the files are symbolic or
	hard links and any changes should stay in the local source tree, not
	be propagated back to the original source.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"breaksymlink" と "breakhardlink" の値は "yes", "no", "auto" のどれとも組み合わせることができる。これらが含まれていると、必ず "no" とまったく同じようにシンボリックリンクやハードリンクを切るようになり、元のファイルがそのままバックアップになり、新しいファイルが作成される。

これは例えば全てのファイルがシンボリックリンクやハードリンクになっているソースツリーで便利である。変更がローカルのソースツリーに対してだけ行われ、元のソースツリーには反映されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*crontab*
	One situation where "no" and "auto" will cause problems: A program
	that opens a file, invokes Vim to edit that file, and then tests if
	the open file was changed (through the file descriptor) will check the
	backup file instead of the newly created file.  "crontab -e" is an
	example.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{crontab}
@cindex crontab

"no" と "auto" では問題が起きる場合がある。プログラムによっては、ファイルを開き、Vimを呼び出してそのファイルを編集させ、(ファイル区別プログラムを使って) そのファイルが変更されたかどうかを調べるものがある。そうしたプログラムは新しく書き出されたファイルではなく、バックアップファイルの方を調べてしまう。例としては "crontab -e" が挙げられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When a copy is made, the original file is truncated and then filled
	with the new text.  This means that protection bits, owner and
	symbolic links of the original file are unmodified.  The backup file
	however, is a new file, owned by the user who edited the file.  The
	group of the backup is set to the group of the original file.  If this
	fails, the protection bits for the group are made the same as for
	others.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コピーの方法のときは、元のファイルの中身はいったん空になり、そこに新しいテキストが書き込まれる。つまり、元のファイルの保護ビット、ファイル所有者やシンボリックリンクは変更されない。しかし、新しく作られることになるバックアップファイルは、ファイルを編集したユーザーの所有となる。

またバックアップファイルの属するグループは、元のファイルと同じグループになる。これが失敗すると、他の属性と同様に、そのグループの保護ビットが設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When the file is renamed this is the other way around: The backup has
	the same attributes of the original file, and the newly written file
	is owned by the current user.  When the file was a (hard/symbolic)
	link, the new file will not!  That's why the "auto" value doesn't
	rename when the file is a link.  The owner and group of the newly
	written file will be set to the same ones as the original file, but
	the system may refuse to do this.  In that case the "auto" value will
	again not rename the file.

	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リネームの方法のときは別の結果になる。バックアップファイルは元のファイルと同じ属性を持ち、新しく書き出されたファイルは、ファイルを編集したユーザーの所有となる。

開いたファイルがハードリンクまたはシンボリックリンクだった場合でも、新しく書き出されたファイルはリンクにならない！だから値が"auto" のとき、ファイルがリンクならリネームを行わないのである。

新しく書き出されたファイルの所有者と属するグループは、元のファイルと同じとして設定される。しかしシステムがこうすることを許可しないかもしれない。その場合、値が "auto" ならもうファイルのリネームをしようとはしない。

@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'backupdir'* *'bdir'*
'backupdir' 'bdir'	string	(default for Amiga: ".,t:",
				 for MS-DOS and Win32: ".,$TEMP,c:/tmp,c:/temp"
				 for Unix: ".,~/tmp,~/")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backupdir'}
@anchor{'bdir'}
@cindex 'backupdir'
@cindex 'bdir'
@item 'backupdir' 'bdir'
文字列(
@multitable @columnfractions .5 .5
@item Amiga での既定値: @tab ".,t:",
@item MS-DOS と Win32 での既定値: @tab ".,$TEMP,c:/tmp,c:/temp"
@item Unix での既定値: @tab ".,~/tmp,~/")
@end multitable
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	List of directories for the backup file, separated with commas.
	- The backup file will be created in the first directory in the list
	  where this is possible.  The directory must exist, Vim will not
	  create it for you.
	- Empty means that no backup file will be created ('patchmode' is
	  impossible!).  Writing may fail because of this.
	- A directory "." means to put the backup file in the same directory
	  as the edited file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値は、バックアップファイル用ディレクトリの、コンマ区切りのリストである。
@itemize @minus
@item バックアップファイルは、リスト内の、使用可能な最初のディレクトリの中に作られる。Vim はそのディレクトリを作成しないので、存在していなければならない。
@item 値が空だと、バックアップファイルは作られない ('@option{patchmode}' は使えなくなる！)。そのため書き込みが失敗するかもしれない。
@item ディレクトリに "." を指定するのは、バックアップファイルを、編集されたファイルと同じディレクトリに作るということである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- A directory starting with "./" (or ".\" for MS-DOS et al.) means to
	  put the backup file relative to where the edited file is.  The
	  leading "." is replaced with the path name of the edited file.
	  ("." inside a directory name has no special meaning).
	- Spaces after the comma are ignored, other spaces are considered part
	  of the directory name.  To have a space at the start of a directory
	  name, precede it with a backslash.
	- To include a comma in a directory name precede it with a backslash.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ディレクトリが "./" (MS-DOS 等では ".\") で始まるのは、バックアップファイルを作るディレクトリを、編集されたファイルとの相対的な位置で決めるということである。最初の "." は編集されたファイルのパス名で置き換えられる (ディレクトリ名の内部の "." には特別な意味はない)。
@item コンマの後の空白は無視されるが、他の場所の空白はディレクトリ名の一部と見なされる。ディレクトリ名の先頭に空白を使いたいなら、その空白の前に '\' を置くこと。
@item ディレクトリ名にコンマを使いたいなら、そのコンマの前に '\' を置くこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- A directory name may end in an '/'.
	- Environment variables are expanded |:set_env|.
	- Careful with '\' characters, type one before a space, type two to
	  get one in the option (see |option-backslash|), for example: >
	    :set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
<	- For backwards compatibility with Vim version 3.0 a '>' at the start
	  of the option is removed.
	See also 'backup' and 'writebackup' options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ディレクトリ名は '/' で終わってもよい。
@item 環境変数は展開される |:set_env|。
@item 文字 '\' には注意。空白の前には 1 個置き、オプションの値に '\' 自身を含めるなら 2 個置く (|option-backslash| を参照)。例:
@example
:set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
@end example
@{訳注: 結果は backupdir=c:\tmp, dir\,with\,commas,\ dir with space@}
@item Vim version 3.0 との後方互換性のため、値の先頭の '>' は取り除かれる。
@end itemize
オプション '@option{backup}' および '@option{writebackup}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If you want to hide your backup files on Unix, consider this value: >
		:set backupdir=./.backup,~/.backup,.,/tmp
<	You must create a ".backup" directory in each directory and in your
	home directory for this to work properly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix でユーザーのバックアップファイルを隠したいなら、次のようにしてみること。
@example
:set backupdir=./.backup,~/.backup,.,/tmp
@end example
この方法を使うには、それぞれのディレクトリとあなたのホームディレクトリにディレクトリ ".backup" を作らなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストにディレクトリを追加するときにはコマンド |:set+=|、リストからディレクトリを除くときにはコマンド |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'backupext'* *'bex'* *E589*
'backupext' 'bex'	string	(default "~", for VMS: "_")
			global
			{not in Vi}
	String which is appended to a file name to make the name of the
	backup file.  The default is quite unusual, because this avoids
	accidentally overwriting existing files with a backup file.  You might
	prefer using ".bak", but make sure that you don't have files with
	".bak" that you want to keep.
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backupext'}
@anchor{'bex'}
@anchor{E589}
@cindex 'backupext'
@cindex 'bex'
@cindex E589
@item 'backupext' 'bex'
文字列 (既定では "~", VMSでは "_") @*
グローバル @*
@{Vi にはない@}

バックアップファイルの名前を作る際、元のファイル名の後ろに付け加える文字列。既定では普段使いそうもないものに定めてあるが、これは既存のファイルをバックアップファイルで上書きするのを避けるためである。".bak" を使いたいかもしれないが、大事なファイルに ".bak" で終わるものがないか確かめること。

通常のファイル名文字だけ使える。"/\*?[|<>" は不正である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If you like to keep a lot of backups, you could use a BufWritePre
	autocommand to change 'backupext' just before writing the file to
	include a timestamp. >
		:au BufWritePre * let &bex = '-' . strftime("%Y%b%d%X") . '~'
<	Use 'backupdir' to put the backup in a different directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
たくさんのバックアップを残しておきたいなら、自動コマンド @command{BufWritePre} を使ってファイルを書き込む直前に '@option{backupext}' にタイムスタンプを含めるように変更するとよい。
@example
:au BufWritePre * let &bex = '-' . strftime("%Y%b%d%X") . '~'
@end example
バックアップを別のディレクトリに保存させるには、オプション '@option{backupdir}' を設定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'backupskip'* *'bsk'*
'backupskip' 'bsk'	string	(default: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
			global
			{not in Vi}
			{not available when compiled without the |+wildignore|
			feature}
	A list of file patterns.  When one of the patterns matches with the
	name of the file which is written, no backup file is created.  Both
	the specified file name and the full path name of the file are used.
	The pattern is used like with |:autocmd|, see |autocmd-patterns|.
	Watch out for special characters, see |option-backslash|.
	When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the
	default value.  "/tmp/*" is only used for Unix.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'backupskip'}
@anchor{'bsk'}
@cindex 'backupskip'
@cindex 'bsk'
@item 'backupskip' 'bsk'
文字列 (既定では "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+wildignore| 機能付きでコンパイルされたときのみ有効@}

ファイル名のパターンのリスト。書き込みをするファイルの名前にマッチするパターンがこの中にあれば、そのファイルのバックアップは作られない。ファイル名を指定してもよいし、ファイルのフルパスを指定 @{訳注: C:/temp/* 等の方法。既定値ではこの方法で一時ファイル用のディレクトリを指定し、一時ファイルのバックアップを作らないようにしている@} してもよい。

パターンの指定方法は |:autocmd| と同じである。|autocmd-patterns| を参照。特別な文字に注意するために |option-backslash| を参照。

環境変数の @env{$TMPDIR}, @env{$TMP} または @env{$TEMP} が定義されていないとき、それらは既定値に使われない。"/tmp/*" は Unix でのみ使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	WARNING: Not having a backup file means that when Vim fails to write
	your buffer correctly and then, for whatever reason, Vim exits, you
	lose both the original file and what you were writing.  Only disable
	backups if you don't care about losing the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
バックアップファイルを作らないということは、すなわち、何らかの理由で Vim がバッファを正しく保存できなかったときに、そのまま Vim を終了してしまうと、あなたは元のファイルと新しく書いた内容の両方を失うということを意味する。ファイルを失っても問題ないという場合のみバックアップを無効化すること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note that environment variables are not expanded.  If you want to use
	$HOME you must expand it explicitly, e.g.: >
		:let &backupskip = escape(expand('$HOME'), '\') . '/tmp/*'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
環境変数は展開されない。@env{$HOME} を使いたい場合は、明示的に展開しなければならない。例:
@example
:let &backupskip = escape(expand('$HOME'), '\') . '/tmp/*'
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<	Note that the default also makes sure that "crontab -e" works (when a
	backup would be made by renaming the original file crontab won't see
	the newly created file).  Also see 'backupcopy' and |crontab|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
既定値は "crontab -e" が正常に機能するように定められている (元のファイルをリネームすることによってバックアップを作ると、crontab は新しく作られたファイルを参照しない)。'@option{backupcopy}' と|crontab|も参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'balloondelay'* *'bdlay'*
'balloondelay' 'bdlay'	number	(default: 600)
			global
			{not in Vi}
			{only available when compiled with the |+balloon_eval|
			feature}
	Delay in milliseconds before a balloon may pop up.  See |balloon-eval|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'balloondelay'}
@anchor{'bdlay'}
@cindex 'balloondelay'
@cindex 'bdlay'
@item 'balloondelay' 'bdlay'
数値 (既定では 600) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+balloon_eval| 機能付きでコンパイルされたときのみ有効@}

バルーン表示が出るまでの時間 (ミリ秒単位)。|balloon-eval| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		       *'ballooneval'* *'beval'* *'noballooneval'* *'nobeval'*
'ballooneval' 'beval'	boolean	(default off)
			global
			{not in Vi}
			{only available when compiled with the |+balloon_eval|
			feature}
	Switch on the |balloon-eval| functionality for the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ballooneval'}
@anchor{'beval'}
@anchor{'noballooneval'}
@anchor{'nobeval'}
@cindex 'ballooneval'
@cindex 'beval'
@cindex 'noballooneval'
@cindex 'nobeval'
@item 'ballooneval' 'beval'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+balloon_eval| 機能付きでコンパイルされたときのみ有効@}

GUI のために |balloon-eval| 機能を働かせる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		       *'balloonevalterm'* *'bevalterm'* *'noballoonevalterm'*
		       *'nobevalterm'*
'balloonevalterm' 'bevalterm'	boolean	(default off)
			global
			{not in Vi}
			{only available when compiled with the
			|+balloon_eval_term| feature}
	Switch on the |balloon-eval| functionality for the terminal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'balloonevalterm'}
@anchor{'bevalterm'}
@anchor{'noballoonevalterm'}
@anchor{'nobevalterm'}
@cindex 'balloonevalterm'
@cindex 'bevalterm'
@cindex 'noballoonevalterm'
@cindex 'nobevalterm'
@item 'balloonevalterm' 'bevalterm'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+balloon_eval_term| 機能付きでコンパイルされたときのみ有効@}

ターミナル のために |balloon-eval| 機能を働かせる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						     *'balloonexpr'* *'bexpr'*
'balloonexpr' 'bexpr'	string	(default "")
			global or local to buffer |global-local|
			{not in Vi}
			{only available when compiled with the |+balloon_eval|
			feature}
	Expression for text to show in evaluation balloon.  It is only used
	when 'ballooneval' is on.  These variables can be used:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'balloonexpr'}
@anchor{'bexpr'}
@cindex 'balloonexpr'
@cindex 'bexpr'
@item 'balloonexpr' 'bexpr'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@} @*
@{Vim が |+balloon_eval| 機能付きでコンパイルされたときのみ有効@}

バルーンウィンドウに表示するテキストの式。'@option{ballooneval}' がオンのときのみ使われる。以下の変数を使用できる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	v:beval_bufnr	number of the buffer in which balloon is going to show
	v:beval_winnr	number of the window
	v:beval_winid	ID of the window
	v:beval_lnum	line number
	v:beval_col	column number (byte index)
	v:beval_text	word under or after the mouse pointer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item v:beval_bufnr @tab バルーンを表示するバッファの番号
@item v:beval_winnr @tab ウィンドウの番号
@item v:beval_winid @tab ウィンドウの ID
@item v:beval_lnum @tab 行番号
@item v:beval_col @tab 桁番号 (バイトインデックス)
@item v:beval_text @tab マウスポインタの下、または後ろにある単語
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The evaluation of the expression must not have side effects!
	Example: >
    function! MyBalloonExpr()
	return 'Cursor is at line ' . v:beval_lnum .
		\', column ' . v:beval_col .
		\ ' of file ' .  bufname(v:beval_bufnr) .
		\ ' on word "' . v:beval_text . '"'
    endfunction
    set bexpr=MyBalloonExpr()
    set ballooneval
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この式の評価には副作用があってはならない！

例:
@verbatim
function! MyBalloonExpr()
return 'Cursor is at line ' . v:beval_lnum .
    \', column ' . v:beval_col .
    \ ' of file ' .  bufname(v:beval_bufnr) .
    \ ' on word "' . v:beval_text . '"'
endfunction
set bexpr=MyBalloonExpr()
set ballooneval
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Also see |balloon_show()|, can be used if the content of the balloon
	is to be fetched asynchronously.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|balloon_show()| も参照。バルーンの内容を非同期に取り込む場合に使うことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: The balloon is displayed only if the cursor is on a text
	character.  If the result of evaluating 'balloonexpr' is not empty,
	Vim does not try to send a message to an external debugger (Netbeans
	or Sun Workshop).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
バルーンはカーソルがテキスト文字の上にあるときだけ表示される。'@option{balloonexpr}' を評価した結果が空でないなら、Vim は外部デバッガ (Netbeans または Sun Workshop) にメッセージを送ろうとしない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| when set from a
	modeline, see |sandbox-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	It is not allowed to change text or jump to another window while
	evaluating 'balloonexpr' |textlock|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{balloonexpr}' を評価している間は、テキストの変更や他のウィンドウへのジャンプをすることは許されない |textlock|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To check whether line breaks in the balloon text work use this check: >
		if has("balloon_multiline")
<	When they are supported "\n" characters will start a new line.  If the
	expression evaluates to a |List| this is equal to using each List item
	as a string and putting "\n" in between them.
	NOTE: This option is set to "" when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バルーンのテキスト中の改行が機能するかを調べるにはこれを使う:
@verbatim
if has("balloon_multiline")
@end verbatim
これがサポートされているなら文字列 "\n" は新規行を開始する。この式を評価した結果がリスト |List| になる場合は、そのリストの各要素を文字列とし、それらの間に "\n" を置くのと同じことになる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると "" になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'belloff'* *'bo'*
'belloff' 'bo'		string	(default "")
			global
			{not in Vi}
	Specifies for which events the bell will not be rung. It is a comma
	separated list of items. For each item that is present, the bell
	will be silenced. This is most useful to specify specific events in
	insert mode to be silenced.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'belloff'}
@anchor{'bo'}
@cindex 'belloff'
@cindex 'bo'
@item 'belloff' 'bo'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

ベルを鳴らさないようにするイベントを指定する。これはコンマ区切りのアイテムのリストである。指定したアイテムにおいてベルは沈黙する。これは、挿入モードにおいて特定のイベントで沈黙するように指定できることが最も有用である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	item	    meaning when present	~
	all	    All events.
	backspace   When hitting <BS> or <Del> and deleting results in an
		    error.
	cursor	    Fail to move around using the cursor keys or
		    <PageUp>/<PageDown> in |Insert-mode|.
	complete    Error occurred when using |i_CTRL-X_CTRL-K| or
		    |i_CTRL-X_CTRL-T|.
	copy	    Cannot copy char from insert mode using |i_CTRL-Y| or
		    |i_CTRL-E|.
	ctrlg	    Unknown Char after <C-G> in Insert mode.
	error	    Other Error occurred (e.g. try to join last line)
		    (mostly used in |Normal-mode| or |Cmdline-mode|).
	esc	    hitting <Esc> in |Normal-mode|.
	ex	    In |Visual-mode|, hitting |Q| results in an error.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@headitem アイテム @tab 指定した時の意味
@item all @tab 全てのイベント。
@item backspace @tab @key{<BS>} か @key{<Del>} を打ち込んだ時、削除結果にエラーがある。
@item cursor @tab |Insert-mode| でカーソルキーか @key{<PageUp>}/@key{<PageDown>} を使用して移動することができない。
@item complete @tab |i_CTRL-X_CTRL-K| か |i_CTRL-X_CTRL-T| を使用した時にエラーが発生した。
@item copy @tab |i_CTRL-Y| か |i_CTRL-E| を使用して挿入モードから文字がコピーできない。
@item ctrlg @tab 挿入モードで <C-G> の後に不明な文字。
@item error @tab その他のエラーが発生した。(例えば、最終行で行連結を試みた) (主に |Normal-mode| か |Cmdline-mode| で使用される)
@item esc @tab |Normal-mode| で @key{<Esc>} を打ち込んだ。
@item ex @tab |Visual-mode| で |Q| を打ち込んだ結果エラーが発生した。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	hangul	    Error occurred when using hangul input.
	insertmode  Pressing <Esc> in 'insertmode'.
	lang	    Calling the beep module for Lua/Mzscheme/TCL.
	mess	    No output available for |g<|.
	showmatch   Error occurred for 'showmatch' function.
	operator    Empty region error |cpo-E|.
	register    Unknown register after <C-R> in |Insert-mode|.
	shell	    Bell from shell output |:!|.
	spell	    Error happened on spell suggest.
	wildmode    More matches in |cmdline-completion| available
		    (depends on the 'wildmode' setting).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item hangul @tab ハングル入力時にエラーが発生した。
@item insertmode @tab '@option{insertmode}' で @key{<Esc>} を押した。
@item lang @tab Lua/Mzscheme/TCL のためにビープモジュールを呼び出す。
@item mess @tab |g<| で利用可能な出力がない。
@item showmatch @tab '@option{showmatch}' 機能でエラーが発生した。
@item operator @tab 空の範囲エラー。|cpo-E|
@item register @tab |Insert-mode| で <C-R> の後に不明なレジスタ。
@item shell @tab シェルの出力からのベル。|:!|
@item spell @tab スペルの提案でエラーが起こった。
@item wildmode @tab |cmdline-completion| でより多くの一致が利用可能。('@option{wildmode}' の設定に依存する)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This is most useful to fine tune when in Insert mode the bell should
	be rung. For Normal mode and Ex commands, the bell is often rung to
	indicate that an error occurred. It can be silenced by adding the
	"error" keyword.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは挿入モードでベルを鳴らさなければならない場合に微調整するのに最も有用である。ノーマルモードおよび Ex コマンドについては、ベルは多くの場合エラーが発生したことを示すために鳴らされる。これは、"error" を追加することで消すことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				     *'binary'* *'bin'* *'nobinary'* *'nobin'*
'binary' 'bin'		boolean	(default off)
			local to buffer
			{not in Vi}
	This option should be set before editing a binary file.  You can also
	use the |-b| Vim argument.  When this option is switched on a few
	options will be changed (also when it already was on):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'binary'}
@anchor{'bin'}
@anchor{'nobinary'}
@anchor{'nobin'}
@cindex 'binary'
@cindex 'bin'
@cindex 'nobinary'
@cindex 'nobin'
@item 'binary' 'bin'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

バイナリファイルを編集する前には、このオプションをオンにすべきである。Vim の起動時に引数 |-b| を使ってもよい。オンのときは、いくつかのオプションの設定が変わる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		'textwidth'  will be set to 0
		'wrapmargin' will be set to 0
		'modeline'   will be off
		'expandtab'  will be off
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 'textwidth' @tab 0 になる
@item 'wrapmargin' @tab 0 になる
@item 'modeline' @tab オフ になる
@item 'expandtab' @tab オフ になる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Also, 'fileformat' and 'fileformats' options will not be used, the
	file is read and written like 'fileformat' was "unix" (a single <NL>
	separates lines).
	The 'fileencoding' and 'fileencodings' options will not be used, the
	file is read without conversion.
	NOTE: When you start editing a(nother) file while the 'bin' option is
	on, settings from autocommands may change the settings again (e.g.,
	'textwidth'), causing trouble when editing.  You might want to set
	'bin' again when the file has been loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
またオプション '@option{fileformat}' と '@option{fileformats}' は無視され、読み込みと書き込みは '@option{fileformat}' が "@var{unix}" のときのようになる (1 個の <NL> が改行になる)。

さらにオプション '@option{fileencoding}' と '@option{fileencodings}' も無視され、ファイルは変換なしに読み込まれるようになる。
@quotation
@strong{Note:} @*
オプション '@option{bin}' がオンのときに新しくファイルを読み込むと、autocommand によって設定が再び変えられ (例えば '@option{textwidth}')、編集時に問題を起こす ことがあるので注意。ファイルを読み込んだ後に再び '@option{bin}' をオンにするとよい。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The previous values of these options are remembered and restored when
	'bin' is switched from on to off.  Each buffer has its own set of
	saved option values.
	To edit a file with 'binary' set you can use the |++bin| argument.
	This avoids you have to do ":set bin", which would have effect for all
	files you edit.
	When writing a file the <EOL> for the last line is only written if
	there was one in the original file (normally Vim appends an <EOL> to
	the last line if there is none; this would make the file longer).  See
	the 'endofline' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
変更されるオプションの値は記憶されているので、オプション '@option{bin}' がオフに戻るとそれらの値も復元される。それらの値はバッファごと独自に記憶される。

引数 |++bin| を使うと、'@option{binary}' をオンにしてファイルを開くことができる。これを使うと "@command{:set bin}" としなくてすむ。"@command{:set bin}" は編集する全てのバッファに対して効果を持つ。

'@option{bin}' がオンならば、ファイルを書き込むときに最終行に <EOL> が付け加えられるのは、元のファイルにすでに <EOL> があるときだけである (普通は、最終行に <EOL> がないなら Vim はそれを付け加える。こうするとその分ファイルが長くなる)。オプション '@option{endofline}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'bioskey'* *'biosk'* *'nobioskey'* *'nobiosk'*
'bioskey' 'biosk'	boolean	(default on)
			global
			{not in Vi}  {only for MS-DOS}
	This was for MS-DOS and is no longer supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'bioskey'}
@anchor{'biosk'}
@anchor{'nobioskey'}
@anchor{'nobiosk'}
@cindex 'bioskey'
@cindex 'biosk'
@cindex 'nobioskey'
@cindex 'nobiosk'
@item 'bioskey' 'biosk'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはなく、MS-DOS 版のみ@}

これは MS-DOS のためのものであったが、もうサポートされていない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'bomb'* *'nobomb'*
'bomb'			boolean	(default off)
			local to buffer
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	When writing a file and the following conditions are met, a BOM (Byte
	Order Mark) is prepended to the file:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'bomb'}
@anchor{'nobomb'}
@cindex 'bomb'
@cindex 'nobomb'
@item 'bomb'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@}

ファイルを書き込むときに以下の条件が満たされれば、BOM (Byte Order Mark @{訳注: バイト順マーク。Unicode を適切に扱うために使われるマーク@}) がファイル先頭に付けられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- this option is on
	- the 'binary' option is off
	- 'fileencoding' is "utf-8", "ucs-2", "ucs-4" or one of the little/big
	  endian variants.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item このオプションがオンである
@item '@option{binary}' がオフである
@item '@option{fileencoding}' が "@var{utf-8}", "@var{ucs-2}" または "@var{ucs-4}" である (リトルエンディアンとビッグエンディアンの違いは無視)
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Some applications use the BOM to recognize the encoding of the file.
	Often used for UCS-2 files on MS-Windows.  For other applications it
	causes trouble, for example: "cat file1 file2" makes the BOM of file2
	appear halfway the resulting file.  Gcc doesn't accept a BOM.
	When Vim reads a file and 'fileencodings' starts with "ucs-bom", a
	check for the presence of the BOM is done and 'bomb' set accordingly.
	Unless 'binary' is set, it is removed from the first line, so that you
	don't see it when editing.  When you don't change the options, the BOM
	will be restored when writing the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アプリケーションの中には、ファイルのエンコーディングを認識するために BOM を使うものがある。MS-Windows で UCS-2 ファイルのためによく使われる。しかし、アプリケーションによってはこれが問題になることもある。例えば "cat file1 file2" とすると、file2の BOM がファイル途中に現れてしまう。gcc は BOM を受け付けない。

ファイルを読み込むときに '@option{fileencodings}' が "@var{ucs-bom}" で始まるならば、BOM が存在するかどうかが調べられ、その結果に従って '@option{bomb}' が設定される。'@option{binary}' がオンでなければ BOM は編集時には取り除かれ、ユーザーの目には触れない。'@option{bomb}' をオフにしたり '@option{binary}' をオンにしたり '@option{fileencodings}' を変えなければ、ファイルの書き込み時に再び BOM が復元される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'breakat'* *'brk'*
'breakat' 'brk'		string	(default " ^I!@*-+;:,./?")
			global
			{not in Vi}
			{not available when compiled without the |+linebreak|
			feature}
	This option lets you choose which characters might cause a line
	break if 'linebreak' is on.  Only works for ASCII and also for 8-bit
	characters when 'encoding' is an 8-bit encoding.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'breakat'}
@anchor{'brk'}
@cindex 'breakat'
@cindex 'brk'
@item 'breakat' 'brk'
文字列 (既定では " ^I!@@*-+;:,./?") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{linebreak}' がオンのとき、どの文字のところで行が折り返されて表示されるかを、このオプションで指定する。これが機能するのは ASCII と 8bit 文字 ('@option{encoding}' が 8bit エンコーディングのとき) だけである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'breakindent'* *'bri'* *'nobreakindent'* *'nobri'*
'breakindent' 'bri'	boolean (default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+linebreak|
			feature}
	Every wrapped line will continue visually indented (same amount of
	space as the beginning of that line), thus preserving horizontal blocks
	of text.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'breakindent'}
@anchor{'bri'}
@anchor{'nobreakindent'}
@anchor{'nobri'}
@cindex 'breakindent'
@cindex 'bri'
@cindex 'nobreakindent'
@cindex 'nobri'
@item 'breakindent' 'bri'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ有効@}

折り返された行を同じインデントで表示する (行の先頭にある空白の量と同じだけインデントされる)。つまりテキストブロックの水平位置が保持される。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'breakindentopt'* *'briopt'*
'breakindentopt' 'briopt' string (default empty)
			local to window
			{not in Vi}
			{not available when compiled without the |+linebreak|
			feature}
	Settings for 'breakindent'. It can consist of the following optional
	items and must be separated by a comma:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'breakindentopt'}
@anchor{'briopt'}
@cindex 'breakindentopt'
@cindex 'briopt'
@item 'breakindentopt' 'briopt'
文字列 (既定では空) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ有効@}

'@option{breakindent}' の設定。次の項目を設定できる。それぞれの項目はコンマで区切る:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		min:{n}	    Minimum text width that will be kept after
			    applying 'breakindent', even if the resulting
			    text should normally be narrower. This prevents
			    text indented almost to the right window border
			    occupying lot of vertical space when broken.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item min:@{n@} @tab
テキストの最小幅。'@option{breakindent}' が適用されたときにテキストがその幅よりも狭くならないようにする。これは、ウィンドウの右端近くまでインデントされたテキストが折り返されたときにたくさんの行に渡って表示されるのを防ぐ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		shift:{n}   After applying 'breakindent', the wrapped line's
			    beginning will be shifted by the given number of
			    characters.  It permits dynamic French paragraph
			    indentation (negative) or emphasizing the line
			    continuation (positive).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item shift:@{n@} @tab
'@option{breakindent}' が適用されたときに、折り返された最初の行を指定した量だけずらす。動的なフランス式の段落インデント (負の値) や行の継続を強調 (正の値) したりできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		sbr	    Display the 'showbreak' value before applying the 
			    additional indent.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item sbr @tab
追加インデントの前に '@option{showbreak}' を表示する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The default value for min is 20 and shift is 0.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
初期設定は、min が 20、shift が 0 である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'browsedir'* *'bsdir'*
'browsedir' 'bsdir'	string	(default: "last")
			global
			{not in Vi} {only for Motif, Athena, GTK, Mac and
			Win32 GUI}
	Which directory to use for the file browser:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'browsedir'}
@anchor{'bsdir'}
@cindex 'browsedir'
@cindex 'bsdir'
@item 'browsedir' 'bsdir'
文字列 (既定では "last") @*
グローバル @*
@{Vi にはなく、Motif, Athena, Mac, Win32 の GUI 版のみ@}

ファイルブラウザーの開始時、どのディレクトリを開くかを指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   last		Use same directory as with last file browser, where a
			file was opened or saved.
	   buffer	Use the directory of the related buffer.
	   current	Use the current directory.
	   {path}	Use the specified directory
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item last @tab 前回にファイルブラウザーでファイルを開く・または保存したディレクトリ
@item buffer @tab バッファで開いているファイルのディレクトリ
@item current @tab カレントディレクトリ
@item @{path@} @tab @{path@} で指定されたディレクトリ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'bufhidden'* *'bh'*
'bufhidden' 'bh'	string (default: "")
			local to buffer
			{not in Vi}
	This option specifies what happens when a buffer is no longer
	displayed in a window:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'bufhidden'}
@anchor{'bh'}
@cindex 'bufhidden'
@cindex 'bh'
@item 'bufhidden' 'bh'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@}

バッファがウィンドウ内に表示されなくなったときの動作を指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  <empty>	follow the global 'hidden' option
	  hide		hide the buffer (don't unload it), also when 'hidden'
			is not set
	  unload	unload the buffer, also when 'hidden' is set or using
			|:hide|
	  delete	delete the buffer from the buffer list, also when
			'hidden' is set or using |:hide|, like using
			|:bdelete|
	  wipe		wipe out the buffer from the buffer list, also when
			'hidden' is set or using |:hide|, like using
			|:bwipeout|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item <empty> @tab グローバルオプション '@option{hidden}' に従う
@item hide @tab バッファを隠す (解放しない)。'@option{hidden}' がオフでもそうする。
@item unload @tab バッファを解放する。'@option{hidden}' がオフのときも、コマンド |:hide| を使ったときもそうする。
@item delete @tab バッファをバッファリストから削除する。'@option{hidden}' がオンのときも、|:hide| を使ったときも、|:bdelete| を使ったときのように、リストから削除する。
@item wipe @tab バッファをバッファリストから完全に削除 (wipe out) する。'@option{hidden}' がオンのときも、|:hide| を使ったときも、|:bwipeout| を使ったときのように、リストから削除する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CAREFUL: when "unload", "delete" or "wipe" is used changes in a buffer
	are lost without a warning.  Also, these values may break autocommands
	that switch between buffers temporarily.
	This option is used together with 'buftype' and 'swapfile' to specify
	special kinds of buffers.   See |special-buffers|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{注意:} @*
"@var{unload}", "@var{delete}", "@var{wipe}" を設定すると、バッファの変更は警告無しに失われる。また、これらの値はバッファを一時的に切り替えるような自動コマンドを壊す可能性がある。

このオプションは '@option{buftype}' や '@option{swapfile}' と共に使われ、特殊な用途のバッファを指定する。|special-buffers| を参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'buflisted'* *'bl'* *'nobuflisted'* *'nobl'* *E85*
'buflisted' 'bl'	boolean (default: on)
			local to buffer
			{not in Vi}
	When this option is set, the buffer shows up in the buffer list.  If
	it is reset it is not used for ":bnext", "ls", the Buffers menu, etc.
	This option is reset by Vim for buffers that are only used to remember
	a file name or marks.  Vim sets it when starting to edit a buffer.
	But not when moving to a buffer with ":buffer".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'buflisted'}
@anchor{'bl'}
@anchor{'nobuflisted'}
@anchor{'nobl'}
@anchor{E85}
@cindex 'buflisted'
@cindex 'bl'
@cindex 'nobuflisted'
@cindex 'nobl'
@cindex E85
@item 'buflisted' 'bl'
切替 (既定ではオン) @*
バッファについてローカル @*
@{Vi にはない@}

オンのときは、バッファはバッファリストに表示される。オフのときは、そのバッファはコマンド "@command{:bnext}" や "@command{:ls}" およびバッファメニュー等の対象にならない。

ファイル名やマークを思い出したりするためだけのバッファでは、このオプションはオフになる。バッファの編集を始めたときは、このオプションはオンになる。しかし "@command{:buffer}" でバッファに移動したときはオンにはならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'buftype'* *'bt'* *E382*
'buftype' 'bt'		string (default: "")
			local to buffer
			{not in Vi}
	The value of this option specifies the type of a buffer:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'buftype'}
@anchor{'bt'}
@anchor{E382}
@cindex 'buftype'
@cindex 'bt'
@cindex E382
@item 'buftype' 'bt'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@}

このオプションはバッファの種類を指定する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  <empty>	normal buffer
	  nofile	buffer which is not related to a file and will not be
			written
	  nowrite	buffer which will not be written
	  acwrite	buffer which will always be written with BufWriteCmd
			autocommands. {not available when compiled without the
			|+autocmd| feature}
	  quickfix	quickfix buffer, contains list of errors |:cwindow|
			or list of locations |:lwindow|
	  help		help buffer (you are not supposed to set this
			manually)
	  terminal	buffer for a |terminal| (you are not supposed to set
			this manually)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item <empty> @tab 普通のバッファ
@item nofile @tab ファイルと関連がなく、書き込まれる予定のないバッファ
@item nowrite @tab 書き込まれる予定のないバッファ
@item acwrite @tab いつも自動コマンド BufWriteCmd で書き込まれる予定のバッファ。@{Vim が |+autocmd| 機能付きでコンパイルされたときのみ有効@}
@item quickfix @tab エラーリスト／ロケーションリスト用の quickfix バッファ (|:cwindow|, |:lwindow| を参照)
@item help @tab ヘルプバッファ (ユーザーが手動でこれに設定することはないはずである)
@item terminal @tab |terminal| のためのバッファ (ユーザーが手動でこれを設定することはないはずである)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option is used together with 'bufhidden' and 'swapfile' to
	specify special kinds of buffers.   See |special-buffers|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションはオプション '@option{bufhidden}' や '@option{swapfile}' と共に使われ、特殊な用途のバッファを指定する。|special-buffers| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Be careful with changing this option, it can have many side effects!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの変更には十分注意すること。多くの副作用が起こるかもしれない！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	A "quickfix" buffer is only used for the error list and the location
	list.  This value is set by the |:cwindow| and |:lwindow| commands and
	you are not supposed to change it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"quickfix" バッファはエラーリストとロケーションリストにのみ使われる。この値はコマンド |:cwindow| と |:lwindow| で設定され、ユーザーが変更することはないはずである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"nofile" and "nowrite" buffers are similar:
	both:		The buffer is not to be written to disk, ":w" doesn't
			work (":w filename" does work though).
	both:		The buffer is never considered to be |'modified'|.
			There is no warning when the changes will be lost, for
			example when you quit Vim.
	both:		A swap file is only created when using too much memory
			(when 'swapfile' has been reset there is never a swap
			file).
	nofile only:	The buffer name is fixed, it is not handled like a
			file name.  It is not modified in response to a |:cd|
			command.
	both:		When using ":e bufname" and already editing "bufname"
			the buffer is made empty and autocommands are
			triggered as usual for |:edit|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"nofile" バッファと "nowrite" バッファは似ている。
@multitable @columnfractions .2 .8
@item 両方 @tab バッファの内容はファイルに書き込まれない。":w" が使えない (":w 新ファイル名" は使える)。
@item 両方 @tab バッファの内容が変更された 'modified' と認識されることがない。Vimの終了時等、変更点が失われるときでも警告が現れない。
@item 両方 @tab スワップファイルはメモリを大量に消費したときのみ作られる ('@option{swapfile}' がオフだと、スワップファイルは作られない)。
@item nofile のみ @tab バッファ名は固定され、ファイル名のようには扱われない。|:cd| の結果としてバッファ名が変わることはない。
@item 両方 @tab ":e bufname" を使い、すでに "bufname" を編集していたとき、バッファは空になり |:edit| 用の自動コマンドは通常通り起動される。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E676*
	"acwrite" implies that the buffer name is not related to a file, like
	"nofile", but it will be written.  Thus, in contrast to "nofile" and
	"nowrite", ":w" does work and a modified buffer can't be abandoned
	without saving.  For writing there must be matching |BufWriteCmd|,
	|FileWriteCmd| or |FileAppendCmd| autocommands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E676}
@cindex E676
"acwrite" は "nofile" と同様にバッファ名がファイルと関係していないことを意味するが、"nofile" と違って保存される。すなわち、"nofile" と "nowrite" とは違って ":w" ができ、変更されたバッファを保存せずに破棄することはできない。これを保存するには、マッチする自動コマンド |BufWriteCmd|, |FileWriteCmd|, |FileAppendCmd| がなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'casemap'* *'cmp'*
'casemap' 'cmp'		string	(default: "internal,keepascii")
			global
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	Specifies details about changing the case of letters.  It may contain
	these words, separated by a comma:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'casemap'}
@anchor{'cmp'}
@cindex 'casemap'
@cindex 'cmp'
@item 'casemap' 'cmp'
文字列 (既定では "internal,keepascii") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@}

大文字・小文字の変更について詳細を指定する。このオプションはコンマ区切りで以下の単語を含む:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	internal	Use internal case mapping functions, the current
			locale does not change the case mapping.  This only
			matters when 'encoding' is a Unicode encoding,
			"latin1" or "iso-8859-15".  When "internal" is
			omitted, the towupper() and towlower() system library
			functions are used when available.
	keepascii	For the ASCII characters (0x00 to 0x7f) use the US
			case mapping, the current locale is not effective.
			This probably only matters for Turkish.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item internal @tab
内部の大文字・小文字対応関数を使う。現在のロケールによって対応が変更されない。これは '@option{encoding}' が Unicode エンコーディング, "@var{latin1}", "@var{iso-8859-15}" のときのみ問題になる。"@var{internal}" が除かれるとシステムライブラリ関数 towupper() と towlower() が利用可能ならば使われる。
@item keepascii @tab
ASCII 文字 (0x00 から 0x7f) については US 大文字小文字対応を使う。現在のロケールは効果を持たない。これはおそらくトルコ語でだけ問題になる。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cdpath'* *'cd'* *E344* *E346*
'cdpath' 'cd'		string	(default: equivalent to $CDPATH or ",,")
			global
			{not in Vi}
			{not available when compiled without the
			|+file_in_path| feature}
	This is a list of directories which will be searched when using the
	|:cd| and |:lcd| commands, provided that the directory being searched
	for has a relative path, not an absolute part starting with "/", "./"
	or "../", the 'cdpath' option is not used then.
	The 'cdpath' option's value has the same form and semantics as
	|'path'|.  Also see |file-searching|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cdpath'}
@anchor{'cd'}
@anchor{E344}
@anchor{E346}
@cindex 'cdpath'
@cindex 'cd'
@cindex E344
@cindex E346
@item 'cdpath' 'cd'
文字列 (既定では環境変数 $CDPATH または ",,") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+file_in_path| 機能付きでコンパイルされたときのみ有効@}

コマンド |:cd| や |:lcd| を使ったときに検索されるディレクトリのリスト。ただし検索されるディレクトリが "/", "./" や "../" で始まるときはこのオプションは使われない。オプション '@option{cdpath}' には、'@option{path}' と同様の指定方法を使う。|file-searching| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The default value is taken from $CDPATH, with a "," prepended to look
	in the current directory first.
	If the default value taken from $CDPATH is not what you want, include
	a modified version of the following command in your vimrc file to
	override it: >
	  :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
<	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
	(parts of 'cdpath' can be passed to the shell to expand file names).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既定値は環境変数 @env{$CDPATH} から取り込まれるが、カレントディレクトリを最初に探すために "," が先頭に挿入される。@env{$CDPATH} から取り込まれたものが望ましくないときは、値を上書きするために、次のコマンドを適当に修正し、ユーザーのファイル @file{vimrc} に加えること。
@example
:let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
@end example
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。('@option{cdpath}' の値の一部は、ファイル名を展開するためにシェルに渡すことができる)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cedit'*
'cedit'			string	(Vi default: "", Vim default: CTRL-F)
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
	The key used in Command-line Mode to open the command-line window.
	The default is CTRL-F when 'compatible' is off.
	Only non-printable keys are allowed.
	The key can be specified as a single character, but it is difficult to
	type.  The preferred way is to use the <> notation.  Examples: >
		:exe "set cedit=\<C-Y>"
		:exe "set cedit=\<Esc>"
<	|Nvi| also has this option, but it only uses the first character.
	See |cmdwin|.
	NOTE: This option is set to the Vim default value when 'compatible'
	is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cedit'}
@cindex 'cedit'
@item 'cedit'
文字列 (Vi の既定値: "", Vim の既定値: CTRL-F) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}

コマンドラインモードで、コマンドラインウィンドウを開くために使われるキー。オプション '@option{compatible}' がオフならば、既定では @kbd{CTRL-F} である。non-printable なキー @{訳注: 文書先頭を参照@} しか指定できない。キーは単一の文字として設定することもできるが、それでは入力しにくい。<> を使った表記を推奨する。例:
@example
:exe "set cedit=\<C-Y>"
:exe "set cedit=\<Esc>"
@end example
|Nvi| にもこのオプションがあるが、最初の 1 文字だけが使用される。|cmdwin| を参照。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'charconvert'* *'ccv'* *E202* *E214* *E513*
'charconvert' 'ccv'	string (default "")
			global
			{only available when compiled with the |+multi_byte|
			and |+eval| features}
			{not in Vi}
	An expression that is used for character encoding conversion.  It is
	evaluated when a file that is to be read or has been written has a
	different encoding from what is desired.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'charconvert'}
@anchor{'ccv'}
@anchor{E202}
@anchor{E214}
@anchor{E513}
@cindex 'charconvert'
@cindex 'ccv'
@cindex E202
@cindex E214
@cindex E513
@item 'charconvert' 'ccv'
文字列 (既定では "") @*
グローバル @*
@{Vim が |+multi_byte| 機能および |+eval| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

文字エンコーディングの変換に使われる expression を定める。これは読み込まれようとしているファイルや書き込みをしたファイルのエンコーディングが、望むものと違うときに評価される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'charconvert' is not used when the internal iconv() function is
	supported and is able to do the conversion.  Using iconv() is
	preferred, because it is much faster.
	'charconvert' is not used when reading stdin |--|, because there is no
	file to convert from.  You will have to save the text in a file first.
	The expression must return zero or an empty string for success,
	non-zero for failure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{charconvert}' の値は、内部関数 iconv() がサポートされ、それによる変換が可能ならば使われることはない。ずっと高速なため、iconv() の使用を推奨する。

'@option{charconvert}' は標準入力 (stdin |--|) から読み込むときには使われない。なぜなら変換元のファイルが存在しないからだ。まずテキストの内容をファイルに保存しなければいけない。

使われる expression は、変換成功時には空文字列または 0、失敗時には非 0 を返さなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The possible encoding names encountered are in 'encoding'.
	Additionally, names given in 'fileencodings' and 'fileencoding' are
	used.
	Conversion between "latin1", "unicode", "ucs-2", "ucs-4" and "utf-8"
	is done internally by Vim, 'charconvert' is not used for this.
	'charconvert' is also used to convert the viminfo file, if the 'c'
	flag is present in 'viminfo'.  Also used for Unicode conversion.
	Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
expression が遭遇する可能性のあるエンコーディング名は、'@option{encoding}' に加えて '@option{fileencodings}', '@option{fileencoding}' で使われているものに限られる。

"@var{latin1}", "@var{unicode}", "@var{ucs-2}", "@var{ucs-4}", "@var{utf-8}" の間の変換は Vim の内部で行われ、'@option{charconvert}' は使われない。'@option{viminfo}' の中にフラグ '@var{c}' が含まれるならば、'@option{charconvert}' はファイル @file{viminfo} の変換にも使われる。また Unicode の変換にも使われる。

例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		set charconvert=CharConvert()
		fun CharConvert()
		  system("recode "
			\ . v:charconvert_from . ".." . v:charconvert_to
			\ . " <" . v:fname_in . " >" v:fname_out)
		  return v:shell_error
		endfun
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
set charconvert=CharConvert()
fun CharConvert()
  system("recode "
    \ . v:charconvert_from . ".." . v:charconvert_to
    \ . " <" . v:fname_in . " >" v:fname_out)
  return v:shell_error
endfun
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	The related Vim variables are:
		v:charconvert_from	name of the current encoding
		v:charconvert_to	name of the desired encoding
		v:fname_in		name of the input file
		v:fname_out		name of the output file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
関連する Vim の変数は以下の通り。
@multitable @columnfractions .5 .5
@item v:charconvert_from @tab 現在のエンコーディング名
@item v:charconvert_to @tab 希望するエンコーディング名
@item v:fname_in @tab 入力ファイル名
@item v:fname_out @tab 出力ファイル名
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that v:fname_in and v:fname_out will never be the same.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
変数 v:fname_in と v:fname_out とは、決して同じになってはいけないので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that v:charconvert_from and v:charconvert_to may be different
	from 'encoding'.  Vim internally uses UTF-8 instead of UCS-2 or UCS-4.
	Encryption is not done by Vim when using 'charconvert'.  If you want
	to encrypt the file after conversion, 'charconvert' should take care
	of this.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.

@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
v:charconvert_from と v:charconvert_to の値は '@option{encoding}' と異なるかもしれないので注意。Vim 内部では UCS-2 または UCS-4 の代わりには UTF-8 を使っている。

Vim は '@option{charconvert}' を用いたエンコーディング変換では暗号化をしない。変換後に暗号化をしたいなら、'@option{charconvert}' にそうさせる必要がある。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				   *'cindent'* *'cin'* *'nocindent'* *'nocin'*
'cindent' 'cin'		boolean	(default off)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+cindent|
			feature}
	Enables automatic C program indenting.  See 'cinkeys' to set the keys
	that trigger reindenting in insert mode and 'cinoptions' to set your
	preferred indent style.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cindent'}
@anchor{'cin'}
@anchor{'nocindent'}
@anchor{'nocin'}
@cindex 'cindent'
@cindex 'cin'
@cindex 'nocindent'
@cindex 'nocin'
@item 'cindent' 'cin'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能付きでコンパイルされたときのみ有効@}

C プログラムファイルの自動インデントを行う。挿入モードで再インデントを引き起こす文字列を指定するにはオプション '@option{cinkeys}' を、好みのインデントスタイルを設定するには '@option{cinoptions}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If 'indentexpr' is not empty, it overrules 'cindent'.
	If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,
	the "=" operator indents using this algorithm rather than calling an
	external program.
	See |C-indenting|.
	When you don't like the way 'cindent' works, try the 'smartindent'
	option or 'indentexpr'.
	This option is not used when 'paste' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{indentexpr}' の値が空でないなら、それは '@option{cindent}' の設定を上書きする。'@option{lisp}' がオフで、'@option{indentexpr}' と '@option{equalprg}' の両方の値が空なら、"=" によるインデントはこのアルゴリズムを使い、外部プログラムを使わない。|C-indenting| を参照。

'@option{cindent}' の動作が気に入らないならば、'@option{smartindent}' か '@option{indentexpr}' を試してみること。

このオプションは '@option{paste}' がオンのときには使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'cinkeys'* *'cink'*
'cinkeys' 'cink'	string	(default "0{,0},0),:,0#,!^F,o,O,e")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+cindent|
			feature}
	A list of keys that, when typed in Insert mode, cause reindenting of
	the current line.  Only used if 'cindent' is on and 'indentexpr' is
	empty.
	For the format of this option see |cinkeys-format|.
	See |C-indenting|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cinkeys'}
@anchor{'cink'}
@cindex 'cinkeys'
@cindex 'cink'
@item 'cinkeys' 'cink'
文字列 (既定では "0@{,0@},0),:,0#,!^F,o,O,e") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能付きでコンパイルされたときのみ有効@}

挿入モードで入力されたときに、現在行の再インデントを引き起こす文字のリスト。オプション '@option{cindent}' がオンで、かつ '@option{indentexpr}' が空の時のみ使われる。

このオプションの設定方法については |cinkeys-format| を参照。また |C-indenting| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cinoptions'* *'cino'*
'cinoptions' 'cino'	string	(default "")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+cindent|
			feature}
	The 'cinoptions' affect the way 'cindent' reindents lines in a C
	program.  See |cinoptions-values| for the values of this option, and
	|C-indenting| for info on C indenting in general.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cinoptions'}
@anchor{'cino'}
@cindex 'cinoptions'
@cindex 'cino'
@item 'cinoptions' 'cino'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能付きでコンパイルされたときのみ有効@}

このオプションは、'@option{cindent}' での C 言語ソース内の行の再インデント方法に影響を与える。このオプションの値については |cinoptions-values| を、一般的な C 言語ソースのインデントの情報については |C-indenting| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'cinwords'* *'cinw'*
'cinwords' 'cinw'	string	(default "if,else,while,do,for,switch")
			local to buffer
			{not in Vi}
			{not available when compiled without both the
			|+cindent| and the |+smartindent| features}
	These keywords start an extra indent in the next line when
	'smartindent' or 'cindent' is set.  For 'cindent' this is only done at
	an appropriate place (inside {}).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cinwords'}
@anchor{'cinw'}
@cindex 'cinwords'
@cindex 'cinw'
@item 'cinwords' 'cinw'
文字列 (既定では "if,else,while,do,for,switch") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能と |+smartindent| 機能(両方)付きでコンパイルされたときのみ有効@}

オプション '@option{smartindent}' か '@option{cindent}' がオンのとき、ここに指定したキーワードの次の行は、さらにインデントされる。'@option{cindent}' がオンのときには、適切な場所 (@{@} の内側) でのみ機能する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't
	matter, include the keyword both the uppercase and lowercase:
	"if,If,IF".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{ignorecase}' は '@option{cinwords}' の値には適用されないので注意。大文字か小文字かを区別したくないなら、値に両方を指定すること。例: "if,If,IF"
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'clipboard'* *'cb'*
'clipboard' 'cb'	string	(default "autoselect,exclude:cons\|linux"
						  for X-windows, "" otherwise)
			global
			{not in Vi}
			{only in GUI versions or when the |+xterm_clipboard|
			feature is included}
	This option is a list of comma separated names.
	These names are recognized:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'clipboard'}
@anchor{'cb'}
@cindex 'clipboard'
@cindex 'cb'
@item 'clipboard' 'cb'
文字列 (既定値は X-windows では "autoselect,exclude:cons\|linux" それ以外では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI バージョンか |+xterm_clipboard| 機能付きでコンパイルされたもののみ有効@}

コンマ区切りのキーワードのリストを指定する。

認識されるのは、以下のキーワードである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-unnamed*
	unnamed		When included, Vim will use the clipboard register '*'
			for all yank, delete, change and put operations which
			would normally go to the unnamed register.  When a
			register is explicitly specified, it will always be
			used regardless of whether "unnamed" is in 'clipboard'
			or not.  The clipboard register can always be
			explicitly accessed using the "* notation.  Also see
			|gui-clipboard|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-unnamed}
@cindex clipboard-unnamed
@multitable @columnfractions .25 .75
@item unnamed @tab
これが含まれると、コピー、削除、変更、ペーストなどの操作で、普通なら無名レジスタが使われるところで、全てクリップボードレジスタ '*' が使われるようになる。

ただしレジスタ名を明示的に指定した場合は、オプション '@option{clipboard}' に "@var{unnamed}" が含まれているかいないかに関わらず、指定されたレジスタが使われる。

またクリップボードレジスタは、"* という記法を用いれば常にアクセスできる。|gui-clipboard| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-unnamedplus*
	unnamedplus	A variant of the "unnamed" flag which uses the
			clipboard register '+' (|quoteplus|) instead of
			register '*' for all yank, delete, change and put
			operations which would normally go to the unnamed
			register.  When "unnamed" is also included to the
			option, yank operations (but not delete, change or
			put) will additionally copy the text into register
			'*'.
			Only available with the |+X11| feature.
			Availability can be checked with: >
				if has('unnamedplus')
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-unnamedplus}
@cindex clipboard-unnamedplus
@item unnamedplus @tab
"unnamed" と似ているがコピー、削除、変更、ペーストなどの操作で、普通なら無名レジスタが使われるところで、クリップボードレジスタ '+' (|quoteplus|) が使われる。

"unnamed" も同時に指定した場合は、コピー操作 (削除、変更、ペースト以外の操作) で、レジスタ '*' にもテキストがコピーされる。

|+X11| 機能が有効な場合のみ利用可能。利用できるかどうかは次のコマンドで確認できる:
@verbatim
if has('unnamedplus')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*clipboard-autoselect*
	autoselect	Works like the 'a' flag in 'guioptions': If present,
			then whenever Visual mode is started, or the Visual
			area extended, Vim tries to become the owner of the
			windowing system's global selection or put the
			selected text on the clipboard used by the selection
			register "*.  See |guioptions_a| and |quotestar| for
			details.  When the GUI is active, the 'a' flag in
			'guioptions' is used, when the GUI is not active, this
			"autoselect" flag is used.
			Also applies to the modeless selection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-autoselect}
@cindex clipboard-autoselect
@item autoselect @tab
'@option{guioptions}' のフラグ '@var{a}' のように働く: これが含まれると、ビジュアルモードが開始されるたび、または ビジュアル選択範囲が変更されるたびに、Vim はウィンドウシステムのグローバルなクリップボードのオーナーになろうとするか、選択されたテキストをクリップボード用レジスタ "* を使ってクリップボードにコピーしようとする。

詳細は |guioptions_a| と |quotestar| を参照。GUI 機能が有効のときは '@option{guioptions}' のフラグ '@var{a}' が使用され、無効のときはこの "@var{autoselect}" フラグが使用される。また、モードレスなセレクションにも適用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-autoselectplus*
	autoselectplus  Like "autoselect" but using the + register instead of
			the * register.  Compare to the 'P' flag in
			'guioptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-autoselectplus}
@cindex clipboard-autoselectplus
@item autoselectplus @tab
"autoselect" と似ているが、* レジスタの代わりに + レジスタが使われる。'@option{guioptions}' の '@var{P}' フラグと比較してみること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-autoselectml*
	autoselectml	Like "autoselect", but for the modeless selection
			only.  Compare to the 'A' flag in 'guioptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-autoselectml}
@cindex clipboard-autoselectml
@item autoselectml @tab
"autoselect" と似ているが、モードレスセレクションのみに適用される。'@option{guioptions}' のフラグ '@var{A}' と比較してみること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-html*
	html		When the clipboard contains HTML, use this when
			pasting.  When putting text on the clipboard, mark it
			as HTML.  This works to copy rendered HTML from
			Firefox, paste it as raw HTML in Vim, select the HTML
			in Vim and paste it in a rich edit box in Firefox.
			You probably want to add this only temporarily,
			possibly use BufEnter autocommands.
			Only supported for GTK version 2 and later.
			Only available with the |+multi_byte| feature.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-html}
@cindex clipboard-html
@item html @tab
クリップボードの内容が HTML であるとき、貼り付け時に使われる。テキストをクリップボードにコピーするとき、HTML としてマークアップする。Firefox で描画された HTML をコピーして Vim で HTML ソースとして貼り付けるときや、Vim で HTML を選択して Firefox のリッチエディットボックスに貼り付けるときに使われる。

これを一時的にのみ使いたい場合は BufEnter 自動コマンドを使うといいかもしれない。

GTK 2 以降のみ対応している。

|+multi_byte| 機能が有効なときのみ利用可能。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*clipboard-exclude*
	exclude:{pattern}
			Defines a pattern that is matched against the name of
			the terminal 'term'.  If there is a match, no
			connection will be made to the X server.  This is
			useful in this situation:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{clipboard-exclude}
@cindex clipboard-exclude
@item exclude:@{pattern@} @tab
ターミナルの名前 '@option{term}' にマッチするパターンを定義する。パターンがマッチすると、X サーバーとの通信がなされなくなる。

このオプションは以下の場合に便利である:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- Running Vim in a console.
			- $DISPLAY is set to start applications on another
			  display.
			- You do not want to connect to the X server in the
			  console, but do want this in a terminal emulator.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item Vim をコンソールで使用しているとき。
@item アプリケーションを別のディスプレイで使うため、環境変数 @env{$DISPLAY} が設定されているとき。
@item コンソールではXサーバーと通信してほしくないが、ターミナルエミュレータ上では通信してほしいとき。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			To never connect to the X server use: >
				exclude:.*
<			This has the same effect as using the |-X| argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X サーバーと全く通信しないようにするには、次のようにする。
@example
exclude:.*
@end example
これは引数 |-X| を使用したのと同じ効果を持つ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Note that when there is no connection to the X server
			the window title won't be restored and the clipboard
			cannot be accessed.
			The value of 'magic' is ignored, {pattern} is
			interpreted as if 'magic' was on.
			The rest of the option value will be used for
			{pattern}, this must be the last entry.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
X サーバーと通信していないとき、ウィンドウタイトルは復元されず、クリップボードにはアクセスできない。

'@option{magic}' の値は無視され、@{pattern@} は '@option{magic}' がオンのときのように解釈される。オプション '@option{clipboard}' の値の残りは @{pattern@} として認識されるので、"@var{exclude}" は最後に指定しなければならない。
@end quotation
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cmdheight'* *'ch'*
'cmdheight' 'ch'	number	(default 1)
			global
			{not in Vi}
	Number of screen lines to use for the command-line.  Helps avoiding
	|hit-enter| prompts.
	The value of this option is stored with the tab page, so that each tab
	page can have a different value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cmdheight'}
@anchor{'ch'}
@cindex 'cmdheight'
@cindex 'ch'
@item 'cmdheight' 'ch'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@}

コマンドラインに使われる画面上の行数。|hit-enter| プロンプトの出現を避けるのに役立つ。各タブページが異なる値を持てるようにするために、このオプションの値はタブページに保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cmdwinheight'* *'cwh'*
'cmdwinheight' 'cwh'	number	(default 7)
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
	Number of screen lines to use for the command-line window. |cmdwin|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cmdwinheight'}
@anchor{'cwh'}
@cindex 'cmdwinheight'
@cindex 'cwh'
@item 'cmdwinheight' 'cwh'
数値 (既定では 7) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}

コマンドラインウィンドウに使われる画面上の行数。|cmdwin| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'colorcolumn'* *'cc'*
'colorcolumn' 'cc'	string	(default "")
			local to window
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	'colorcolumn' is a comma separated list of screen columns that are
	highlighted with ColorColumn |hl-ColorColumn|.  Useful to align
	text.  Will make screen redrawing slower.
	The screen column can be an absolute number, or a number preceded with
	'+' or '-', which is added to or subtracted from 'textwidth'. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'colorcolumn'}
@anchor{'cc'}
@cindex 'colorcolumn'
@cindex 'cc'
@item 'colorcolumn' 'cc'
文字列 (既定では "") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ有効@}

'@option{colorcolumn}' はスクリーンの列をコンマ区切りで指定する。指定された列は ColorColumn (|hl-ColorColumn|) で強調表示される。テキストを整列するときに便利である。スクリーンの表示は遅くなる。

列番号は絶対値で指定するか、番号に '+' か '-' を前置して '@option{textwidth}' からの相対値として指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		:set cc=+1  " highlight column after 'textwidth'
		:set cc=+1,+2,+3  " highlight three columns after 'textwidth'
		:hi ColorColumn ctermbg=lightgrey guibg=lightgrey
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set cc=+1  " 'textwidth' の後の列を強調表示する
:set cc=+1,+2,+3  " 'textwidth' の後の3列を強調表示する
:hi ColorColumn ctermbg=lightgrey guibg=lightgrey
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'textwidth' is zero then the items with '-' and '+' are not used.
	A maximum of 256 columns are highlighted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{textwidth}' がゼロのときは '-' と '+' で指定されたアイテムは使用されない。最大で 256 個の列を強調表示できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'columns'* *'co'* *E594*
'columns' 'co'		number	(default 80 or terminal width)
			global
			{not in Vi}
	Number of columns of the screen.  Normally this is set by the terminal
	initialization and does not have to be set by hand.  Also see
	|posix-screen-size|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'columns'}
@anchor{'co'}
@anchor{E594}
@cindex 'columns'
@cindex 'co'
@cindex E594
@item 'columns' 'co'
数値 (既定では 80 またはターミナルの幅) @*
グローバル @*
@{Vi にはない@}

画面上の列幅を設定する。普通このオプションはターミナルの初期化の時点で設定され、手動で設定する必要はない。|posix-screen-size| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When Vim is running in the GUI or in a resizable window, setting this
	option will cause the window size to be changed.  When you only want
	to use the size for the GUI, put the command in your |gvimrc| file.
	When you set this option and Vim is unable to change the physical
	number of columns of the display, the display may be messed up.  For
	the GUI it is always possible and Vim limits the number of columns to
	what fits on the screen.  You can use this command to get the widest
	window possible: >
		:set columns=9999
<	Minimum value is 12, maximum value is 10000.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が GUI 内やサイズ変更可能なウィンドウ内で実行されているときは、このオプションを変更するとウィンドウサイズも変更される。GUI でだけこのサイズを使用したい場合は、このコマンドを |gvimrc| に書くこと。

ユーザーがこのオプションを変更したのに、Vim がディスプレイの列幅の物理的な値を変更できなかったら、ディスプレイ表示がめちゃめちゃになるおそれがある。GUI では常にその可能性があるので、Vim は桁数を画面に収まる値に制限している。可能なウィンドウ幅の最大値を取得するには、次のコマンドを使う:
@example
:set columns=9999
@end example
最小値は 12、最大値は 10000。

@{訳注: オプション 'lines' も参照@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'comments'* *'com'* *E524* *E525*
'comments' 'com'	string	(default
				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+comments|
			feature}
	A comma separated list of strings that can start a comment line.  See
	|format-comments|.  See |option-backslash| about using backslashes to
	insert a space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'comments'}
@anchor{'com'}
@anchor{E524}
@anchor{E525}
@cindex 'comments'
@cindex 'com'
@cindex E524
@cindex E525
@item 'comments' 'com'
文字列 (既定では "s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+comments| 機能付きでコンパイルされたときのみ有効@}

コメント行の始まりとなる文字列の、コンマ区切りのリスト。|format-comments| を参照。'\' を使って値にスペースを含める方法については、|option-backslash| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'commentstring'* *'cms'* *E537*
'commentstring' 'cms'	string	(default "/*%s*/")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	A template for a comment.  The "%s" in the value is replaced with the
	comment text.  Currently only used to add markers for folding, see
	|fold-marker|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'commentstring'}
@anchor{'cms'}
@anchor{E537}
@cindex 'commentstring'
@cindex 'cms'
@cindex E537
@item 'commentstring' 'cms'
文字列 (既定では "/*%s*/") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

コメント用のテンプレート (雛形)。値の中の "%s" はコメントの内容と置き換えられる。現在のところ、折り畳み用のマーカーを追加するためにのみ使用されている。|fold-marker| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'compatible'* *'cp'* *'nocompatible'* *'nocp'*
'compatible' 'cp'	boolean	(default on, off when a |vimrc| or |gvimrc|
					file is found, reset in |defaults.vim|)
			global
			{not in Vi}
	This option has the effect of making Vim either more Vi-compatible, or
	make Vim behave in a more useful way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'compatible'}
@anchor{'cp'}
@anchor{'nocompatible'}
@anchor{'nocp'}
@cindex 'compatible'
@cindex 'cp'
@cindex 'nocompatible'
@cindex 'nocp'
@item 'compatible' 'cp'
切替 (既定では オン、ファイル |vimrc| または |gvimrc| が発見されたらオフ、|defaults.vim| 内でリセット) @*
グローバル @*
@{Vi にはない@} @*

Vim をなるべく Vi 互換にするか、便利な機能を使えるようにするかを決定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This is a special kind of option, because when it's set or reset,
	other options are also changed as a side effect.
	NOTE: Setting or resetting this option can have a lot of unexpected
	effects: Mappings are interpreted in another way, undo behaves
	differently, etc.  If you set this option in your vimrc file, you
	should probably put it at the very start.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは、特別な種類のオプションである。このオプションの値が変更されると、それに伴って他のオプションも変更されるからだ。
@quotation
@strong{Note:} @*
このオプションを変更すると、予期しない効果が数多く現れる。キーマップの解釈は変わり、アンドゥも違った方法で行われる、等々。このオプションをファイル @file{vimrc} 内で設定するなら、一番先頭に置くこと。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	By default this option is on and the Vi defaults are used for the
	options.  This default was chosen for those people who want to use Vim
	just like Vi, and don't even (want to) know about the 'compatible'
	option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既定ではオンなので、その他のオプションにはViの既定値が使われる。この既定値は、Vim を Vi と全く同じように使うことを望み、オプション '@option{compatible}' について知りもしない、または知りたいとさえ思わない人たちのためのものである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When a |vimrc| or |gvimrc| file is found while Vim is starting up,
	this option is switched off, and all options that have not been
	modified will be set to the Vim defaults.  Effectively, this means
	that when a |vimrc| or |gvimrc| file exists, Vim will use the Vim
	defaults, otherwise it will use the Vi defaults.  (Note: This doesn't
	happen for the system-wide vimrc or gvimrc file, nor for a file given
	with the |-u| argument).  Also see |compatible-default| and
	|posix-compliance|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が立ち上がる間にファイル |vimrc| または |gvimrc| が見つかると、このオプションはオフにされ、その他のオプションで変更されていないものは、みな Vim の既定値に設定される。要するに、Vim はファイル |vimrc| または |gvimrc| が存在するなら Vim の既定値を、存在しないなら Vi の既定値を使うのだ (@strong{Note:} システム全体用の vimrc や gvimrc、あるいは引数 |-u| で指定されるファイルは関係ないことに注意)。|compatible-default| と |posix-compliance| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	You can also set this option with the "-C" argument, and reset it with
	"-N".  See |-C| and |-N|.
	See 'cpoptions' for more fine tuning of Vi compatibility.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは引数 "-C" でオンに、引数 "-N" でオフにできる。|-C| と |-N| を参照。Vi との互換性をより細かく調整するには '@option{cpoptions}' を参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When this option is set, numerous other options are set to make Vim as
	Vi-compatible as possible.  When this option is unset, various options
	are set to make Vim more useful.  The table below lists all the
	options affected.
	The {?} column indicates when the options are affected:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがオンにされると、Vim ができる限りVi互換となるように数多くの他のオプションが設定される。このオプションがオフにされると、Vim がより使いやすくなるように多くのオプションが設定される。下の表は影響を受けるすべてのオプションを示す。

@{?@} 列は、いつそのオプションが影響を受けるかを示す:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	+  Means that the option is set to the value given in {set value} when
	   'compatible' is set.
	&  Means that the option is set to the value given in {set value} when
	   'compatible' is set AND is set to its Vim default value when
	   'compatible' is unset.
	-  Means the option is NOT changed when setting 'compatible' but IS
	   set to its Vim default when 'compatible' is unset.
	The {effect} column summarises the change when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .05 .95
@item + @tab '@option{compatible}' がオンになったときに、@{設定値@}に示した値が設定されることを意味する。
@item & @tab '@option{compatible}' がオンになったときに、@{設定値@}に示した値が設定され、かつ、'@option{compatible}' がオフになったときに Vim の既定値に設定されることを意味する。
@item - @tab '@option{compatible}' がオンになったときには値は変更されないが、'@option{compatible}' がオフになったときには Vim の既定値に設定されることを意味する。
@end multitable
@{効果@}列は、'@option{compatible}' がオンになったときの変更をまとめてある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	option		? set value	effect ~

	'allowrevins'	+ off		no CTRL-_ command
	'antialias'	+ off		don't use antialiased fonts
	'arabic'	+ off	 	reset arabic-related options
	'arabicshape'	+ on		correct character shapes
	'backspace'	+ ""		normal backspace
	'backup'	+ off		no backup file
	'backupcopy'	& Unix: "yes"	backup file is a copy
			  else: "auto"	copy or rename backup file
	'balloonexpr'	+ ""		text to show in evaluation balloon
	'breakindent'	+ off		don't indent when wrapping lines
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .2 .55
@headitem オプション @tab + 設定値 @tab 効果
@item '@option{allowrevins}' @tab + オフ @tab コマンド @kbd{CTRL-_} なし
@item '@option{antialias}' @tab + オフ @tab アンチエイリアスフォントを使用しない
@item '@option{arabic}' @tab + オフ @tab アラビア語関連オプションをリセット
@item '@option{arabicshape}' @tab + オン @tab 文字表示補正を行う
@item '@option{backspace}' @tab + "" @tab 普通のバックスペース
@item '@option{backup}' @tab + オフ @tab バックアップファイルなし
@item '@option{backupcopy}' @tab & Unix: "yes" @tab バックアップファイルがコピーになる
@item @tab 他: "auto" @tab バップアップはコピーまたはリネーム
@item '@option{balloonexpr}' @tab + "" @tab バルーンに表示するテキストの式
@item '@option{breakindent}' @tab + オフ @tab 折り返した行をインデントしない
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'cedit'		- {unchanged}	{set vim default only on resetting 'cp'}
	'cindent'	+ off		no C code indentation
	'compatible'	- {unchanged}	{set vim default only on resetting 'cp'}
	'copyindent'	+ off		don't copy indent structure
	'cpoptions'	& (all flags)	Vi-compatible flags
	'cscopepathcomp'+ 0		don't show directories in tags list
	'cscoperelative'+ off		
	'cscopetag'	+ off		don't use cscope for ":tag"
	'cscopetagorder'+ 0		see |cscopetagorder|
	'cscopeverbose'	+ off		see |cscopeverbose|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{cedit}' @tab - @{変更なし@} @tab @{'cp' リセット時に Vim の既定値に設定@}
@item '@option{cindent}' @tab + オフ @tab C 言語ファイルにインデントなし
@item '@option{compatible}' @tab - @{変更なし@} @tab @{'cp' リセット時に Vim の既定値に設定@}
@item '@option{copyindent}' @tab + オフ @tab インデント構造をコピーしない
@item '@option{cpoptions}' @tab & (全フラグ) @tab Vi 互換のフラグ
@item '@option{cscopepathcomp}' @tab + 0 @tab タグ一覧にディレクトリを表示しない
@item '@option{cscoperelative}' @tab + オフ @tab
@item '@option{cscopetag}' @tab + オフ @tab "@command{:tag}" に cscope を使わない
@item '@option{cscopetagorder}' @tab + 0 @tab |cscopetagorder| を参照
@item '@option{cscopeverbose}' @tab + オフ @tab |cscopeverbose| を参照
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'delcombine'	+ off		unicode: delete whole char combination
	'digraph'	+ off		no digraphs
	'esckeys'	& off		no <Esc>-keys in Insert mode
	'expandtab'	+ off		tabs not expanded to spaces
	'fileformats'	& ""		no automatic file format detection,
			  "dos,unix"	except for DOS, Windows and OS/2
	'formatexpr'	+ ""		use 'formatprg' for auto-formatting
	'formatoptions'	& "vt"		Vi compatible formatting
	'gdefault'	+ off		no default 'g' flag for ":s"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{delcombine}' @tab + オフ @tab unicode: すべての合成文字を削除
@item '@option{digraph}' @tab + オフ @tab ダイグラフなし
@item '@option{esckeys}' @tab & オフ @tab 挿入モードで <Esc> で始まるキーなし
@item '@option{expandtab}' @tab + オフ @tab タブはスペースに展開されない
@item '@option{fileformats}' @tab & "" @tab 自動ファイルタイプ決定なし
@item @tab "dos,unix" @tab (ただし DOS, Windows と OS/2 以外で)
@item '@option{formatexpr}' @tab + "" @tab '@option{formatprg}' を自動整形に使う
@item '@option{formatoptions}' @tab & "vt" @tab Vi 互換の文書整形
@item '@option{gdefault}' @tab + オフ @tab "@command{:s}" でフラグの既定値に '@var{g}' なし
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'history'	& 0		no commandline history
	'hkmap'		+ off		no Hebrew keyboard mapping
	'hkmapp'	+ off		no phonetic Hebrew keyboard mapping
	'hlsearch'	+ off		no highlighting of search matches
	'incsearch'	+ off		no incremental searching
	'indentexpr'	+ ""		no indenting by expression
	'insertmode'	+ off		do not start in Insert mode
	'iskeyword'	& "@,48-57,_"	keywords contain alphanumeric
						characters and '_'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{history}' @tab & 0 @tab コマンドラインの履歴なし
@item '@option{hkmap}' @tab + オフ @tab ヘブライ語用キーボードマップなし
@item '@option{hkmapp}' @tab + オフ @tab phonetic ヘブライ語用キーボードマップなし
@item '@option{hlsearch}' @tab + オフ @tab 検索でマッチした文字列に強調なし
@item '@option{incsearch}' @tab + オフ @tab インクリメンタルサーチなし
@item '@option{indentexpr}' @tab + "" @tab expression によるインデントなし
@item '@option{insertmode}' @tab + オフ @tab 挿入モードでの開始なし
@item '@option{iskeyword}' @tab & "@,48-57,_" @tab キーワードはアルファベットと数字と '_'
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'joinspaces'	+ on		insert 2 spaces after period
	'modeline'	& off		no modelines
	'more'		& off		no pauses in listings
	'mzquantum'	- {unchanged}	{set vim default only on resetting 'cp'}
	'numberwidth'	& 8		min number of columns for line number
	'preserveindent'+ off		don't preserve current indent structure
						when changing it
	'revins'	+ off		no reverse insert
	'ruler'		+ off		no ruler
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{joinspaces}' @tab + オン @tab ピリオドの後ろには空白を 2 個挿入
@item '@option{modeline}' @tab & オフ @tab モードラインなし
@item '@option{more}' @tab & オフ @tab リスト表示が止まらない
@item '@option{mzquantum}' @tab - @{変更なし@} @tab @{'cp' リセット時にVimの既定値に設定@}
@item '@option{numberwidth}' @tab & 8 @tab 行番号用の最小桁数
@item '@option{preserveindent}' @tab + オフ @tab インデント変更時に現在のインデント構造を保持しない
@item '@option{revins}' @tab + オフ @tab 右から左の挿入なし
@item '@option{ruler}' @tab + オフ @tab ルーラーなし
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'scrolljump'	+ 1		no jump scroll
	'scrolloff'	+ 0		no scroll offset
	'shelltemp'	- {unchanged}	{set vim default only on resetting 'cp'}
	'shiftround'	+ off		indent not rounded to shiftwidth
	'shortmess'	& ""		no shortening of messages
	'showcmd'	& off		command characters not shown
	'showmode'	& off		current mode not shown
	'sidescrolloff'	+ 0		cursor moves to edge of screen in scroll
	'smartcase'	+ off		no automatic ignore case switch
	'smartindent'	+ off		no smart indentation
	'smarttab'	+ off		no smart tab size
	'softtabstop'	+ 0		tabs are always 'tabstop' positions
	'startofline'	+ on		goto startofline with some commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{scrolljump}' @tab + 1 @tab ジャンプスクロールなし
@item '@option{scrolloff}' @tab + 0 @tab スクロールにオフセットなし
@item '@option{shelltemp}' @tab - @{変更なし@} @tab @{'cp' リセット時に Vim の既定値に設定@}
@item '@option{shiftround}' @tab + オフ @tab インデントは shiftwidth の整数倍でない
@item '@option{shortmess}' @tab & "" @tab メッセージの短縮なし
@item '@option{showcmd}' @tab & オフ @tab コマンドの文字は表示されない
@item '@option{showmode}' @tab & オフ @tab 現在のモードは表示されない
@item '@option{sidescrolloff}' @tab + 0 @tab スクロール時、カーソルは画面端に移動
@item '@option{smartcase}' @tab + オフ @tab 大文字小文字の無視は自動にならない
@item '@option{smartindent}' @tab + オフ @tab 高度なインデントなし
@item '@option{smarttab}' @tab + オフ @tab 高度なタブ挿入なし
@item '@option{softtabstop}' @tab + 0 @tab タブは常に '@option{tabstop}' を基準
@item '@option{startofline}' @tab + オン @tab いくつかのコマンドで行頭に移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'tagcase'	& "followic"	'ignorecase' when searching tags file
	'tagrelative'	& off		tag file names are not relative
	'termguicolors'	+ off		don't use highlight-(guifg|guibg)
	'textauto'	& off		no automatic textmode detection
	'textwidth'	+ 0		no automatic line wrap
	'tildeop'	+ off		tilde is not an operator
	'ttimeout'	+ off		no terminal timeout
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{tagcase}' @tab & "followic" @tab タグファイル検索時 '@option{ignorecase}' に従う
@item '@option{tagrelative}' @tab & オフ @tab タグファイル名は相対的でない
@item '@option{termguicolors}' @tab + オフ @tab highlight-(guifg|guibg) を使用しない
@item '@option{textauto}' @tab & オフ @tab 自動改行コード決定なし
@item '@option{textwidth}' @tab + 0 @tab 自動行分割なし
@item '@option{tildeop}' @tab + オフ @tab チルダはオペレータではない
@item '@option{ttimeout}' @tab + オフ @tab ターミナルの時間切れなし
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'undofile'	+ off		don't use an undo file
	'viminfo'       - {unchanged}	{set Vim default only on resetting 'cp'}
	'virtualedit'	+ ""		cursor can only be placed on characters
	'whichwrap'	& ""		left-right movements don't wrap
	'wildchar'	& CTRL-E	only when the current value is <Tab>
					use CTRL-E for cmdline completion
	'writebackup'	+ on or off	depends on the |+writebackup| feature
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{undofile}' @tab + オフ @tab アンドゥファイルを使用しない
@item '@option{viminfo}' @tab - @{変更なし@} @tab @{'cp' リセット時に Vim の既定値に設定@}
@item '@option{virtualedit}' @tab + "" @tab カーソルは文字の上にのみ置ける
@item '@option{whichwrap}' @tab & "" @tab 左から右への移動は行を超えない
@item '@option{wildchar}' @tab & @kbd{CTRL-E} @tab 現在の値が <Tab> のときのみ、コマンドライン補完に CTRL-E を使う
@item '@option{writebackup}' @tab + オンかオフ @tab |+writebackup| 機能に依る
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'complete'* *'cpt'* *E535*
'complete' 'cpt'	string	(default: ".,w,b,u,t,i")
			local to buffer
			{not in Vi}
	This option specifies how keyword completion |ins-completion| works
	when CTRL-P or CTRL-N are used.  It is also used for whole-line
	completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion
	and the places to scan.  It is a comma separated list of flags:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'complete'}
@anchor{'cpt'}
@anchor{E535}
@cindex 'complete'
@cindex 'cpt'
@cindex E535
@item 'complete' 'cpt'
文字列 (既定では: ".,w,b,u,t,i") @*
バッファについてローカル @*
@{Vi にはない@}

コマンド @kbd{CTRL-P} や @kbd{CTRL-N} によるキーワード補完 |ins-completion| の動作を指定する。このオプションは行全体の補完 |i_CTRL-X_CTRL-L| にも適用される。このオプションは補完の方法と、キーワード検索の対象となる場所を示す、コンマ区切りのフラグのリストである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	.	scan the current buffer ('wrapscan' is ignored)
	w	scan buffers from other windows
	b	scan other loaded buffers that are in the buffer list
	u	scan the unloaded buffers that are in the buffer list
	U	scan the buffers that are not in the buffer list
	k	scan the files given with the 'dictionary' option
	kspell  use the currently active spell checking |spell|
	k{dict}	scan the file {dict}.  Several "k" flags can be given,
		patterns are valid too.  For example: >
			:set cpt=k/usr/dict/*,k~/spanish
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .05 .95
@item . @tab カレントバッファから検索 ('@option{wrapscan}' の値は無視)
@item w @tab 別のウィンドウ内のバッファから検索
@item b @tab バッファリスト内の、現在読み込まれている別のバッファから検索
@item u @tab バッファリスト内の、現在読み込まれていない別のバッファから検索
@item U @tab バッファリストにないバッファから検索
@item k @tab '@option{dictionary}' で指定されたファイルから検索
@item kspell @tab 現在有効化されているスペルチェックを使う |spell|
@item k@{dict@} @tab @{dict@} で与えられたファイルから検索。"k" を複数指定してもよい。ファイル名はパターンでも指定できる。例:
@example
:set cpt=k/usr/dict/*,k~/spanish
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	s	scan the files given with the 'thesaurus' option
	s{tsr}	scan the file {tsr}.  Several "s" flags can be given, patterns
		are valid too.
	i	scan current and included files
	d	scan current and included files for defined name or macro
		|i_CTRL-X_CTRL-D|
	]	tag completion
	t	same as "]"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item s @tab '@option{thesaurus}' で指定されたファイルから検索
@item s@{tsr@} @tab @{tsr@} で与えられたファイルから検索。"s" を複数指定してもよい。ファイル名はパターンでも指定できる。
@item i @tab カレントファイルとインクルードされるファイルから検索
@item d @tab カレントファイルとインクルードされるファイルから、定義された名前またはマクロを検索 |i_CTRL-X_CTRL-D|
@item ] @tab タグ補完
@item t @tab "]" と同じ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Unloaded buffers are not loaded, thus their autocmds |:autocmd| are
	not executed, this may lead to unexpected completions from some files
	(gzipped files for example).  Unloaded buffers are not scanned for
	whole-line completion.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
読み込まれていないバッファでは、何しろ読み込まれていないのだから、|:autocmd| は実行されていない。そのため、ある種のファイルからは思いもしないキーワードを補完してしまうことがある (gzip 圧縮されたファイルなど)。読み込まれていないバッファは、行全体の補完には使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The default is ".,w,b,u,t,i", which means to scan:
	   1. the current buffer
	   2. buffers in other windows
	   3. other loaded buffers
	   4. unloaded buffers
	   5. tags
	   6. included files
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既定では ".,w,b,u,t,i" となっていて、これは検索対象を次のように指定している。
@enumerate
@item カレントバッファ
@item 別のウィンドウ内のバッファ
@item 他の読み込まれたバッファ
@item バッファリスト内の読み込まれていないバッファ
@item タグ
@item インクルードされるファイル
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	As you can see, CTRL-N and CTRL-P can be used to do any 'iskeyword'-
	based expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns
	|i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-N} と @kbd{CTRL-P} は '@option{iskeyword}' を利用した全てのファイル名展開で使用できる (つまり辞書 |i_CTRL-X_CTRL-K|、インクルードされるパターン |i_CTRL-X_CTRL-I|、タグ |i_CTRL-X_CTRL-]| および通常の展開)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'completefunc'* *'cfu'*
'completefunc' 'cfu'	string	(default: empty)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+eval|
			or |+insert_expand| features}
	This option specifies a function to be used for Insert mode completion
	with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|
	See |complete-functions| for an explanation of how the function is
	invoked and what it should return.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'completefunc'}
@anchor{'cfu'}
@cindex 'completefunc'
@cindex 'cfu'
@item 'completefunc' 'cfu'
文字列 (既定では空) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+eval| と |+insert_expand| 機能付きでコンパイルされたときのみ有効@}

このオプションは入力モードの CTRL-X CTRL-U |i_CTRL-X_CTRL-U| での補完に使われる関数を指定する。

その関数がどのように起動され、何を返すべきかについての説明は |complete-functions|を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'completeopt'* *'cot'*
'completeopt' 'cot'	string	(default: "menu,preview")
			global
			{not available when compiled without the
			|+insert_expand| feature}
			{not in Vi}
	A comma separated list of options for Insert mode completion
	|ins-completion|.  The supported values are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'completeopt'}
@anchor{'cot'}
@cindex 'completeopt'
@cindex 'cot'
@item 'completeopt' 'cot'
文字列 (既定では "menu,preview") @*
グローバル @*
@{Vim が |+insert_expand| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

入力モードでの補完 |ins-completion| についてのオプションのコンマ区切りのリスト。サポートされている値は次の通り:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   menu	    Use a popup menu to show the possible completions.  The
		    menu is only shown when there is more than one match and
		    sufficient colors are available.  |ins-completion-menu|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item menu @tab
ポップアップメニューで補完候補を表示する。ポップアップメニューは、候補が 2 個以上あり、十分な数の色が使用できるときだけ表示される。|ins-completion-menu| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   menuone  Use the popup menu also when there is only one match.
		    Useful when there is additional information about the
		    match, e.g., what file it comes from.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item menuone @tab
候補が 1 つしかないときもポップアップメニューを使う。候補について付加的な情報があるときに便利である。例えば、それがどのファイルに含まれているかなど。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   longest  Only insert the longest common text of the matches.  If
		    the menu is displayed you can use CTRL-L to add more
		    characters.  Whether case is ignored depends on the kind
		    of completion.  For buffer text the 'ignorecase' option is
		    used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item longest @tab
候補の文字列の最長の共通部分だけを挿入する。メニューが表示されているならば @kbd{CTRL-L} でさらに文字を挿入することができる。

大文字・小文字が同一視されるかどうかは補完の種類による。バッファのテキストについてはオプション '@option{ignorecase}' が適用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   preview  Show extra information about the currently selected
		    completion in the preview window.  Only works in
		    combination with "menu" or "menuone".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item preview @tab
現在選択されている候補についての付加的な情報をプレビューウィンドウに表示する。"menu" または "menuone" と組み合わせたときのみ有効。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   noinsert Do not insert any text for a match until the user selects
		    a match from the menu. Only works in combination with
		    "menu" or "menuone". No effect if "longest" is present.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item noinsert @tab
いかなるマッチしたテキストも、ユーザーがメニューから選択しない限り挿入しない。"menu" か "menuone" と組み合わせたときにだけ機能する。"longest" が指定された場合には、なんの影響も発生しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	   noselect Do not select a match in the menu, force the user to
		    select one from the menu. Only works in combination with
		    "menu" or "menuone".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item noselect @tab
メニューからマッチを @{訳注: 自動では@} 選択せず、ユーザーに自分で選ぶことを強制する。"menu" か "menuone" と組み合わせたときにだけ機能する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'concealcursor'* *'cocu'*
'concealcursor' 'cocu'	string (default: "")
			local to window
			{not in Vi}
			{not available when compiled without the |+conceal|
			feature}
	Sets the modes in which text in the cursor line can also be concealed.
	When the current mode is listed then concealing happens just like in
	other lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'concealcursor'}
@anchor{'cocu'}
@cindex 'concealcursor'
@cindex 'cocu'
@item 'concealcursor' 'cocu'
文字列 (既定では: "") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+conceal| 機能付きでコンパイルされたときのみ有効@}

カーソル行のテキストを Conceal 表示するモードを設定する。現在のモードがこのオプション値に含まれているなら他の行と同様に Conceal 表示される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  n		Normal mode
	  v		Visual mode
	  i		Insert mode
	  c		Command line editing, for 'incsearch'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item n @tab ノーマルモード
@item v @tab ビジュアルモード
@item i @tab 挿入モード
@item c @tab コマンドライン編集 ('@option{incsearch}' 用)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	'v' applies to all lines in the Visual area, not only the cursor.
	A useful value is "nc".  This is used in help files.  So long as you
	are moving around text is concealed, but when starting to insert text
	or selecting a Visual area the concealed text is displayed, so that
	you can see what you are doing.
	Keep in mind that the cursor position is not always where it's
	displayed.  E.g., when moving vertically it may change column.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'v' はカーソル行だけでなくビジュアル選択された行全体に適用される。便利な値は "nc" である。これはヘルプファイルで使われている。移動しているときはテキストは Conceal 表示されるが、テキストを入力したりビジュアル選択したりするときは実際のテキストが表示されるので、自分の操作を視覚できる。

カーソルの位置は実際の表示とは異なる場合があるので注意すること。例えば縦に移動することで列が変わることがある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
'conceallevel' 'cole'		*'conceallevel'* *'cole'*
			number (default 0)
			local to window
			{not in Vi}
			{not available when compiled without the |+conceal|
			feature}
	Determine how text with the "conceal" syntax attribute |:syn-conceal|
	is shown:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'conceallevel'}
@anchor{'cole'}
@cindex 'conceallevel'
@cindex 'cole'
@item 'conceallevel' 'cole'
数値 (既定では 0) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+conceal| 機能付きでコンパイルされたときのみ有効@}

"conceal" 構文属性 (|:syn-conceal|) のテキストをどのように表示するかを設定する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Value		Effect ~
	0		Text is shown normally
	1		Each block of concealed text is replaced with one
			character.  If the syntax item does not have a custom
			replacement character defined (see |:syn-cchar|) the
			character defined in 'listchars' is used (default is a
			space).
			It is highlighted with the "Conceal" highlight group.
	2		Concealed text is completely hidden unless it has a
			custom replacement character defined (see
			|:syn-cchar|).
	3		Concealed text is completely hidden.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .05 .95
@item 値 @tab 効果
@item 0 @tab テキストは通常通り表示される
@item 1 @tab 各ブロックの Conceal されたテキストは 1 つの文字に置換される。構文アイテムに代理文字 (|:syn-cchar| 参照) が指定されていないときは '@option{listchars}' の設定が使われる (初期設定はスペース)。文字は "Conceal" 強調グループを使って強調表示される。
@item 2 @tab Conceal されたテキストは構文アイテムに指定された代理文字 (|:syn-cchar|) として表示される。それが指定されていないときは完全に非表示になる。
@item 3 @tab Conceal されたテキストは完全に非表示になる。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: in the cursor line concealed text is not hidden, so that you can
	edit and copy the text.  This can be changed with the 'concealcursor'
	option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
テキストの編集やコピーの操作を妨げないようにするため、カーソル行の Conceal テキストは非表示にならない。これは '@option{concealcursor}' オプションで変更できる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'confirm'* *'cf'* *'noconfirm'* *'nocf'*
'confirm' 'cf'		boolean (default off)
			global
			{not in Vi}
	When 'confirm' is on, certain operations that would normally
	fail because of unsaved changes to a buffer, e.g. ":q" and ":e",
	instead raise a |dialog| asking if you wish to save the current
	file(s).  You can still use a ! to unconditionally |abandon| a buffer.
	If 'confirm' is off you can still activate confirmation for one
	command only (this is most useful in mappings) with the |:confirm|
	command.
	Also see the |confirm()| function and the 'v' flag in 'guioptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'confirm'}
@anchor{'cf'}
@anchor{'noconfirm'}
@anchor{'nocf'}
@cindex 'confirm'
@cindex 'cf'
@cindex 'noconfirm'
@cindex 'nocf'
@item 'confirm' 'cf'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オプション '@option{confirm}' がオンならば、バッファへの変更を保存していないと実行に失敗する操作 (例えばコマンド "@command{:q}" と "@command{:e}") の際、ダイアログ |dialog| を開いてファイルを保存するかどうか尋ねる。これがオンになっていても、意図的に変更を廃棄したいなら ! を使える。

'@option{confirm}' がオフでも、コマンド |:confirm| で個別に確認を求めることができる (これはキーマッピングで使うととても便利である)。関数 |confirm()| と '@option{guioptions}' のフラグ '@var{v}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'conskey'* *'consk'* *'noconskey'* *'noconsk'*
'conskey' 'consk'	boolean	(default off)
			global
			{not in Vi}  {only for MS-DOS}
	This was for MS-DOS and is no longer supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'conskey'}
@anchor{'consk'}
@anchor{'noconskey'}
@anchor{'noconsk'}
@cindex 'conskey'
@cindex 'consk'
@cindex 'noconskey'
@cindex 'noconsk'
@item 'conskey' 'consk'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の MS-DOS 版のみ@}

これは MS-DOS のためのものであったが、もうサポートされていない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'copyindent'* *'ci'* *'nocopyindent'* *'noci'*
'copyindent' 'ci'	boolean	(default off)
			local to buffer
			{not in Vi}
	Copy the structure of the existing lines indent when autoindenting a
	new line.  Normally the new indent is reconstructed by a series of
	tabs followed by spaces as required (unless |'expandtab'| is enabled,
	in which case only spaces are used).  Enabling this option makes the
	new line copy whatever characters were used for indenting on the
	existing line.  'expandtab' has no effect on these characters, a Tab
	remains a Tab.  If the new indent is greater than on the existing
	line, the remaining space is filled in the normal manner.
	NOTE: This option is reset when 'compatible' is set.
	Also see 'preserveindent'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'copyindent'}
@anchor{'ci'}
@anchor{'nocopyindent'}
@anchor{'noci'}
@cindex 'copyindent'
@cindex 'ci'
@cindex 'nocopyindent'
@cindex 'noci'
@item 'copyindent' 'ci'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

新規行を自動インデントするとき、既存の行のインデント構造をコピーする。普通、新しい行のインデントは |'expandtab'| が有効になっていないかぎり (この場合は全てスペースになる)、まずタブが使われ、足りない部分がスペースで埋められる。

このオプションを有効にすると、既存の行のインデントにどんな文字が使われていようとそれを新規行にコピーする。'@option{expandtab}' はこれらの文字には影響せず、タブはタブのままになる。新規行のインデントが既存の行よりも深いならば、その差の部分は通常の方法で埋められる。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになるとこのオプションはオフになる。'@option{preserveindent}' も参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cpoptions'* *'cpo'* *cpo*
'cpoptions' 'cpo'	string	(Vim default: "aABceFs",
				 Vi default:  all flags)
			global
			{not in Vi}
	A sequence of single character flags.  When a character is present
	this indicates Vi-compatible behavior.  This is used for things where
	not being Vi-compatible is mostly or sometimes preferred.
	'cpoptions' stands for "compatible-options".
	Commas can be added for readability.
	To avoid problems with flags that are added in the future, use the
	"+=" and "-=" feature of ":set" |add-option-flags|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cpoptions'}
@anchor{'cpo'}
@anchor{cpo}
@cindex 'cpoptions'
@cindex 'cpo'
@cindex cpo
@item 'cpoptions' 'cpo'
文字列 (Vim の既定値: "aABceFs", Vi の既定値: 全フラグ) @*
グローバル @*
@{Vi にはない@}

1 文字のフラグの列で設定する。フラグが設定されると、対応する動作が Vi 互換になる。大部分、またはある程度の Vi 互換が求められるときに使われる。

'@option{cpoptions}' は "compatible-options (互換オプション)" の意味である。読みやすくするためにコンマを入れてもよい。

将来追加されるフラグによる問題を避けるため、コマンド "@command{:set}" では "+=" と "-=" を使うこと |add-option-flags|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: This option is set to the POSIX default value at startup when
	the Vi default value would be used and the $VIM_POSIX environment
	variable exists |posix|.  This means Vim tries to behave like the
	POSIX specification.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Vi の既定値が使われるようになっており、さらに環境変数 @env{$VIM_POSIX} が存在するとき、Vim 起動時にこのオプションが POSIX の既定値にセットされる |posix|。これによって Vim が POSIX 仕様に近い挙動をするようになる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	    contains	behavior	~
								*cpo-a*
		a	When included, a ":read" command with a file name
			argument will set the alternate file name for the
			current window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@headitem フラグ @tab 動作
@anchor{cpo-a}
@cindex cpo-a
@item a @tab これが含まれると、"@command{:read}" にファイル名の引数を与えたとき、そのファイルをカレントウィンドウの代替ファイルに設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-A*
		A	When included, a ":write" command with a file name
			argument will set the alternate file name for the
			current window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-A}
@cindex cpo-A
@item A @tab これが含まれると、"@command{:write}" にファイル名の引数を与えたとき、そのファイルをカレントウィンドウの代替ファイルに設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-b*
		b	"\|" in a ":map" command is recognized as the end of
			the map command.  The '\' is included in the mapping,
			the text after the '|' is interpreted as the next
			command.  Use a CTRL-V instead of a backslash to
			include the '|' in the mapping.  Applies to all
			mapping, abbreviation, menu and autocmd commands.
			See also |map_bar|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-b}
@cindex cpo-b
@item b @tab "@command{:map}" 内の "\|" がコマンドの終端と見なされるようになる。'\' はキーマッピングの一部に、'|' の次のテキストは次のコマンドと見なされる。'|' をキーマッピングに含めるには、'\' でなく @kbd{CTRL-V} を使うこと。キーマッピングや略語やメニューや autocmd コマンドの全てに適用される。|map_bar| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-B*
		B	A backslash has no special meaning in mappings,
			abbreviations and the "to" part of the menu commands.
			Remove this flag to be able to use a backslash like a
			CTRL-V.  For example, the command ":map X \<Esc>"
			results in X being mapped to:
				'B' included:	"\^["	 (^[ is a real <Esc>)
				'B' excluded:	"<Esc>"  (5 characters)
				('<' excluded in both cases)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-B}
@cindex cpo-B
@item B @tab '\' が、":menu" のメニューから実行される部分やキーマッピングや略語において、特別な意味を持たなくなる。'\' を @kbd{CTRL-V} のように使いたいのならこのフラグを取り除くこと。

例えば、"@command{:map X \<Esc>}" で X がマップされるのは、
@multitable @columnfractions .5 .5
@item 'B' が含まれたとき: @tab "\^["  (^[ は本当の <Esc>)
@item 'B' が除かれたとき: @tab "<Esc>"  (5個の文字)
@end multitable
(どちらの場合も '<' が除かれているとする)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-c*
		c	Searching continues at the end of any match at the
			cursor position, but not further than the start of the
			next line.  When not present searching continues
			one character from the cursor position.  With 'c'
			"abababababab" only gets three matches when repeating
			"/abab", without 'c' there are five matches.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-c}
@cindex cpo-c
@item c @tab @{訳注: 検索でマッチする文字列があった後@} カーソル位置のマッチの終わり (ただし次行の開始位置を越えない) から次の検索を行う。

このフラグが含まれないと、次の検索はカーソル位置の 1 文字後から始まる。'c' が含まれると、"/abab" で検索したとき "abababababab" には 3 回しかマッチしないが、'c' が含まれないと5回マッチする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-C*
		C	Do not concatenate sourced lines that start with a
			backslash.  See |line-continuation|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-C}
@cindex cpo-C
@item C @tab "@command{:source}" で読み込まれたファイルのうち、'\' で始まる行を連結しない。|line-continuation| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-d*
		d	Using "./" in the 'tags' option doesn't mean to use
			the tags file relative to the current file, but the
			tags file in the current directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-d}
@cindex cpo-d
@item d @tab '@option{tags}' 内で "./" という記法を使ったとき、タグファイルはカレントファイルのディレクトリでなく、カレントディレクトリから探す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-D*
		D	Can't use CTRL-K to enter a digraph after Normal mode
			commands with a character argument, like |r|, |f| and
			|t|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-D}
@cindex cpo-D
@item D @tab |r|, |f| や |t| のような、文字を引数に取る ノーマルモードコマンドの後で、@kbd{CTRL-K} によるダイグラフの入力ができなくなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-e*
		e	When executing a register with ":@r", always add a
			<CR> to the last line, also when the register is not
			linewise.  If this flag is not present, the register
			is not linewise and the last line does not end in a
			<CR>, then the last line is put on the command-line
			and can be edited before hitting <CR>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-e}
@cindex cpo-e
@item e @tab "@command{:@@r}" でレジスタの内容を @{訳注: Ex コマンドとして@} 実行するとき、レジスタが行全体を保存したものでないときでも、常に最終行に <CR> を付け加える。このフラグが含まれないときは、レジスタの内容が行全体を保存したものでなく、かつ <CR> で終わらないならば、実行すると最終行はコマンドラインに表示され、<CR> を打ち込むまでは編集できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-E*
		E	It is an error when using "y", "d", "c", "g~", "gu" or
			"gU" on an Empty region.  The operators only work when
			at least one character is to be operate on.  Example:
			This makes "y0" fail in the first column.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-E}
@cindex cpo-E
@item E @tab 空の範囲に "y", "d", "c", "g~", "gu", "gU" などのコマンドを使うとエラーになる。オペレータは作用する対象が最低でも 1 文字ないと使えない。例: これが含まれると、最初の桁で "y0" を行うとエラーになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-f*
		f	When included, a ":read" command with a file name
			argument will set the file name for the current buffer,
			if the current buffer doesn't have a file name yet.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-f}
@cindex cpo-f
@item f @tab これが含まれると、カレントバッファにファイル名がまだ設定されていないなら、"@command{:read}" にファイル名の引数を与えたとき、そのファイル名をカレントバッファのファイル名に設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-F*
		F	When included, a ":write" command with a file name
			argument will set the file name for the current
			buffer, if the current buffer doesn't have a file name
			yet.  Also see |cpo-P|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-F}
@cindex cpo-F
@item F @tab これが含まれると、カレントバッファにファイル名がまだ設定されていないなら、"@command{:write}" にファイル名の引数を与えたとき、そのファイル名をカレントバッファのファイル名に設定する。|cpo-P|も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-g*
		g	Goto line 1 when using ":edit" without argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-g}
@cindex cpo-g
@item g @tab "@command{:edit}" を引数なしで使うと 1 行目に移動する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-H*
		H	When using "I" on a line with only blanks, insert
			before the last blank.  Without this flag insert after
			the last blank.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-H}
@cindex cpo-H
@item H @tab 空白のみを含む行の上で "I" を使ったとき、最後の空白の前から挿入する。このフラグが含まれていないと、最後の空白の後から挿入を開始する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-i*
		i	When included, interrupting the reading of a file will
			leave it modified.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-i}
@cindex cpo-i
@item i @tab これが含まれると、ファイルの読み込み中に中断が起きたとき、ファイルは変更されたままになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-I*
		I	When moving the cursor up or down just after inserting
			indent for 'autoindent', do not delete the indent.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-I}
@cindex cpo-I
@item I @tab '@option{autoindent}' によるインデントが挿入された直後にカーソルを上下に移動したときインデントを削除しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-j*
		j	When joining lines, only add two spaces after a '.',
			not after '!' or '?'.  Also see 'joinspaces'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-j}
@cindex cpo-j
@item j @tab 行の連結時に追加する空白が、'.' の後のみ2個になり、'!' や '?' の後は 1 個になる。'@option{joinspaces}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-J*
		J	A |sentence| has to be followed by two spaces after
			the '.', '!' or '?'.  A <Tab> is not recognized as
			white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-J}
@cindex cpo-J
@item J @tab 文 |sentence| は '.', '!' または '?' の後に2個の空白を伴わなければならない。<Tab> は空白とは見なされない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-k*
		k	Disable the recognition of raw key codes in
			mappings, abbreviations, and the "to" part of menu
			commands.  For example, if <Key> sends ^[OA (where ^[
			is <Esc>), the command ":map X ^[OA" results in X
			being mapped to:
				'k' included:	"^[OA"	 (3 characters)
				'k' excluded:	"<Key>"  (one key code)
			Also see the '<' flag below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-k}
@cindex cpo-k
@item k @tab "@command{:menu}" で実行される部分や、キーマッピングや略語において、直接入力されたキーコードを認識しない。例えば、<Key> が ^[OA を送るなら (ここで ^[ は <Esc> )、":map X ^[OA" で X がマップされるのは、
@multitable @columnfractions .5 .5
@item 'k' が含まれたとき: @tab "^[OA"  (3 個の文字)
@item 'k' が除かれたとき: @tab "<Key>"  (1 個のキーコード)
@end multitable
下の '<' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-K*
		K	Don't wait for a key code to complete when it is
			halfway a mapping.  This breaks mapping <F1><F1> when
			only part of the second <F1> has been read.  It
			enables cancelling the mapping by typing <F1><Esc>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-K}
@cindex cpo-K
@item K @tab キーマッピングの途中で、キーコードが完全に入力されるのを待たない。<F1><F1> のマッピングは、2 番目の <F1> の一部のみが読み込まれた場合、動作しなくなる。こうすると <F1><Esc> と打ち込めばマッピングをキャンセルできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-l*
		l	Backslash in a [] range in a search pattern is taken
			literally, only "\]", "\^", "\-" and "\\" are special.
			See |/[]|
			   'l' included: "/[ \t]"  finds <Space>, '\' and 't'
			   'l' excluded: "/[ \t]"  finds <Space> and <Tab>
			Also see |cpo-\|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-l}
@cindex cpo-l
@item l @tab 検索パターンの [] 範囲内で、'\' は文字通りに解釈され、"\]", "\^", "\\" だけが特別な意味を持つ。|/[]| を参照。
@multitable @columnfractions .3 .7
@item 'l' が含まれたとき: @tab "/[ \t]"  がマッチするのは <Space>, '\' と 't'
@item 'l' が除かれたとき: @tab "/[ \t]"  がマッチするのは <Space> と <Tab>
@end multitable
|cpo-\|も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-L*
		L	When the 'list' option is set, 'wrapmargin',
			'textwidth', 'softtabstop' and Virtual Replace mode
			(see |gR|) count a <Tab> as two characters, instead of
			the normal behavior of a <Tab>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-L}
@cindex cpo-L
@item L @tab '@option{list}' がオンのとき、'@option{wrapmargin}', '@option{textwidth}', '@option{softtabstop}' と仮想置換モード (|gR| を参照) で、<Tab> の普通の数え方をせず、必ず 2 文字に数える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-m*
		m	When included, a showmatch will always wait half a
			second.  When not included, a showmatch will wait half
			a second or until a character is typed.  |'showmatch'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-m}
@cindex cpo-m
@item m @tab これが含まれると、対応する括弧の表示を 0.5 秒待つ。含まれていないと、対応する括弧の表示を 0.5 秒または次の文字が打ち込まれるまで待つ。'@option{showmatch}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-M*
		M	When excluded, "%" matching will take backslashes into
			account.  Thus in "( \( )" and "\( ( \)" the outer
			parenthesis match.  When included "%" ignores
			backslashes, which is Vi compatible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-M}
@cindex cpo-M
@item M @tab これが含まれていない場合、"%" での括弧の対応にバックスラッシュを考慮に入れる。すなわち "( \( )" や "\( ( \)" で外側の括弧同士が対応するようになる。"%" が含まれている場合は Vi 互換になり、バックスラッシュは無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-n*
		n	When included, the column used for 'number' and
			'relativenumber' will also be used for text of wrapped
			lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-n}
@cindex cpo-n
@item n @tab これが含まれているときは折り返された行のテキストの表示に '@option{number}' と '@option{relativenumber}' によって行番号表示されている列も使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-o*
		o	Line offset to search command is not remembered for
			next search.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-o}
@cindex cpo-o
@item o @tab 検索コマンドの行オフセットは、次回の検索には使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-O*
		O	Don't complain if a file is being overwritten, even
			when it didn't exist when editing it.  This is a
			protection against a file unexpectedly created by
			someone else.  Vi didn't complain about this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-O}
@cindex cpo-O
@item O @tab ファイルが上書きされたとき、編集を始めたときにはそのファイルが存在しなかった場合でも警告しない。これは別人に突然作り出されたファイルに対する防御である。Vi はこれに警告を出さなかった。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-p*
		p	Vi compatible Lisp indenting.  When not present, a
			slightly better algorithm is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-p}
@cindex cpo-p
@item p @tab Vi 互換の Lisp 用インデント。これが含まれないと、いくらか良いアルゴリズムが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-P*
		P	When included, a ":write" command that appends to a
			file will set the file name for the current buffer, if
			the current buffer doesn't have a file name yet and
			the 'F' flag is also included |cpo-F|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-P}
@cindex cpo-P
@item P @tab これとフラグ '@var{F}' が同時に含まれていると、コマンド "@command{:write}" で既存のファイルに追加するとき、カレントバッファの名前がまだないならそのファイルの名前をカレントバッファの名前にする。|cpo-F|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-q*
		q	When joining multiple lines leave the cursor at the
			position where it would be when joining two lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-q}
@cindex cpo-q
@item q @tab 複数の行を連結するとき、2 行を連結するときと同じ位置にカーソルを置く。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-r*
		r	Redo ("." command) uses "/" to repeat a search
			command, instead of the actually used search string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-r}
@cindex cpo-r
@item r @tab リドゥ (コマンド ".") で検索を繰り返すとき、実際には "/" を使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-R*
		R	Remove marks from filtered lines.  Without this flag
			marks are kept like |:keepmarks| was used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-R}
@cindex cpo-R
@item R @tab フィルタされた行のマークを除去する。このフラグが入っていないと、|:keepmarks| を使ったときと同じようにフラグはそのまま保たれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-s*
		s	Set buffer options when entering the buffer for the
			first time.  This is like it is in Vim version 3.0.
			And it is the default.  If not present the options are
			set when the buffer is created.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-s}
@cindex cpo-s
@item s @tab バッファが初めてアクティブになる時点でバッファのオプションが設定される。これは Vim version 3.0 と同じ動作である。そして既定ではこの動作を行う。これが含まれないと、オプションはバッファが作られた時点で設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-S*
		S	Set buffer options always when entering a buffer
			(except 'readonly', 'fileformat', 'filetype' and
			'syntax').  This is the (most) Vi compatible setting.
			The options are set to the values in the current
			buffer.  When you change an option and go to another
			buffer, the value is copied.  Effectively makes the
			buffer options global to all buffers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-S}
@cindex cpo-S
@item S @tab バッファのオプションを常にバッファに移動する時点で設定する ('@option{readonly}', '@option{fileformat}', '@option{filetype}' と '@option{syntax}' 以外)。これは (ほとんど) Vi 互換の設定である。

オプションの値は元のカレントバッファでの値になる。ユーザーがオプションを変更し、その後で別のバッファに移ると、その値はコピーされる。事実上、バッファオプションを全てのバッファに対しグローバルにしている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			's'    'S'     copy buffer options
			no     no      when buffer created
			yes    no      when buffer first entered (default)
			 X     yes     each time when buffer entered (vi comp.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .1 .8
@headitem 's' @tab 'S' @tab バッファのオプションをコピーするタイミング
@item オフ @tab オフ @tab バッファが作られた時点
@item オン @tab オフ @tab バッファが初めてアクティブになった時点 (既定)
@item なし @tab オン @tab バッファに移動するたび (Vi 互換)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-t*
		t	Search pattern for the tag command is remembered for
			"n" command.  Otherwise Vim only puts the pattern in
			the history for search pattern, but doesn't change the
			last used search pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-t}
@cindex cpo-t
@item t @tab タグコマンドの検索パターンが "n" による検索の繰り返しにも使われる。これが含まれないと、検索パターンの履歴には加えられるが、最終検索パターンは変化しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-u*
		u	Undo is Vi compatible.  See |undo-two-ways|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-u}
@cindex cpo-u
@item u @tab アンドゥが Vi 互換になる。|undo-two-ways| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-v*
		v	Backspaced characters remain visible on the screen in
			Insert mode.  Without this flag the characters are
			erased from the screen right away.  With this flag the
			screen newly typed text overwrites backspaced
			characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-v}
@cindex cpo-v
@item v @tab 挿入モードにおいて、バックスペースで消した文字を画面上に表示したままにしておく。このフラグが入っていないと、消された文字はすぐに画面から消える。このフラグが入っていると、新しく入力された文字がバックスペースで消された文字を上書きする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-w*
		w	When using "cw" on a blank character, only change one
			character and not all blanks until the start of the
			next word.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-w}
@cindex cpo-w
@item w @tab 空白の上で "cw" を使ったとき、1 文字だけ変更して、次の単語の始まりまでの空白は変更しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-W*
		W	Don't overwrite a readonly file.  When omitted, ":w!"
			overwrites a readonly file, if possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-W}
@cindex cpo-W
@item W @tab 読み込み専用ファイルを上書きしない。これが含まれないと、可能であれば "@command{:w!}" で読み込み専用ファイルも上書きできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-x*
		x	<Esc> on the command-line executes the command-line.
			The default in Vim is to abandon the command-line,
			because <Esc> normally aborts a command.  |c_<Esc>|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-x}
@cindex cpo-x
@item x @tab コマンドラインで @key{<Esc>} を打ち込むとコマンドを実行する。Vim での既定ではコマンドライン入力を中止して元のモードに戻る。それは @key{<Esc>} は普通はコマンドの中止に使われるからである。|c_<Esc>| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-X*
		X	When using a count with "R" the replaced text is
			deleted only once.  Also when repeating "R" with "."
			and a count.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-X}
@cindex cpo-X
@item X @tab "R" でカウントを指定したとき、置換されるテキストが一度だけ削除される。カウントをつけた "." で "R" を繰り返したときも同じ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-y*
		y	A yank command can be redone with ".".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-y}
@cindex cpo-y
@item y @tab コピーコマンドを "." でリドゥできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-Z*
		Z	When using "w!" while the 'readonly' option is set,
			don't reset 'readonly'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-Z}
@cindex cpo-Z
@item Z @tab オプション '@option{readonly}' がオンになっているのに "w!" をしたとき '@option{readonly}' をオフにしない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-!*
		!	When redoing a filter command, use the last used
			external command, whatever it was.  Otherwise the last
			used -filter- command is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-!}
@cindex cpo-!
@item ! @tab フィルタコマンドをリドゥするとき、何であってもとにかく最後に実行された外部コマンドを使う。これが含まれないと、最後に実行された「フィルタ」コマンドが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-$*
		$	When making a change to one line, don't redisplay the
			line, but put a '$' at the end of the changed text.
			The changed text will be overwritten when you type the
			new text.  The line is redisplayed if you type any
			command that moves the cursor from the insertion
			point.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-$}
@cindex cpo-$
@item $ @tab 1 行に対して変更をするとき、行を再描画せず、代わりに変更されたテキストの最後に '$' を表示する。変更されたテキストはユーザーが新しいテキストを入力したときに上書きされる。その行はユーザーがカーソルを挿入点から動かすコマンドを入力したときに再描画される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-%*
		%	Vi-compatible matching is done for the "%" command.
			Does not recognize "#if", "#endif", etc.
			Does not recognize "/*" and "*/".
			Parens inside single and double quotes are also
			counted, causing a string that contains a paren to
			disturb the matching.  For example, in a line like
			"if (strcmp("foo(", s))" the first paren does not
			match the last one.  When this flag is not included,
			parens inside single and double quotes are treated
			specially.  When matching a paren outside of quotes,
			everything inside quotes is ignored.  When matching a
			paren inside quotes, it will find the matching one (if
			there is one).  This works very well for C programs.
			This flag is also used for other features, such as
			C-indenting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-%}
@cindex cpo-%
@item % @tab "%" で Vi 互換の対応検索が行われる。"#if", "#endif" などを認識しない。"/*" と "*/" も認識しない。

単引用符 ''' または二重引用符 '"' の内部の括弧も数えられる。すると括弧を含む文字列が対応を乱すことになる。例えば、"if (strcmp("foo(", s))" などでは最初の括弧と最後の括弧はマッチしない。これが含まれないと、単引用符または二重引用符の内部の括弧は特別な扱いを受ける。

引用符の外部の括弧の対応を調べるときは、引用符の内部は一切無視される。引用符の内部の括弧の対応を調べるときは、対応する括弧を探す (存在すれば)。これは C 言語プログラムではとても良く機能する。このフラグは C インデントなど他の機能にも使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo--*
		-	When included, a vertical movement command fails when
			it would go above the first line or below the last
			line.  Without it the cursor moves to the first or
			last line, unless it already was in that line.
			Applies to the commands "-", "k", CTRL-P, "+", "j",
			CTRL-N, CTRL-J and ":1234".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo--}
@cindex cpo--
@item - @tab これが含まれていると最初の行や最後の行を越えるような上下移動コマンドは失敗する。含まれているとカーソルが最初の行または最後の行に移動する (既にカーソルがその行にないかぎり)。

コマンド "-", "k", @kbd{CTRL-P}, "+", "j", @kbd{CTRL-N}, @kbd{CTRL-J}, ":1234" に適用される。

@{訳注: 2 行目で 3k したとき、これが含まれているならカーソルは移動しない。含まれていないなら 1 行目へ移動する@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-+*
		+	When included, a ":write file" command will reset the
			'modified' flag of the buffer, even though the buffer
			itself may still be different from its file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-+}
@cindex cpo-+
@item + @tab これが含まれていると、"@command{:write file}" をしたとき、まだそのバッファが対応するファイルと異なっていても、そのバッファのフラグ '@option{modified}' がオフになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-star*
		*	Use ":*" in the same way as ":@".  When not included,
			":*" is an alias for ":'<,'>", select the Visual area.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-star}
@cindex cpo-star
@item * @tab ":*" を ":@@" と同じように扱う。これが含まれないと、":*" は ":'<,'>" の別名となり、ビジュアルエリアを選択する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-<*
		<	Disable the recognition of special key codes in |<>|
			form in mappings, abbreviations, and the "to" part of
			menu commands.  For example, the command
			":map X <Tab>" results in X being mapped to:
				'<' included:	"<Tab>"  (5 characters)
				'<' excluded:	"^I"	 (^I is a real <Tab>)
			Also see the 'k' flag above.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-<}
@cindex cpo-<
@item < @tab "@command{:menu}" で実行される部分や、キーマッピングや略語において、|<>| 記法による特殊キーの認識を行わない。例えば、":map X <Tab>" で X がマップされるのは、
@multitable @columnfractions .5 .5
@item '<' が含まれたとき: @tab "<Tab>"  (5 個の文字)
@item '<' が除かれたとき: @tab "^I"  (^I は本当の <Tab>)
@end multitable
上の 'k' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo->*
		>	When appending to a register, put a line break before
			the appended text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo->}
@cindex cpo->
@item > @tab レジスタにテキスト追加するとき、そのテキストの前に改行文字をつける。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-;*
		;	When using |,| or |;| to repeat the last |t| search
			and the cursor is right in front of the searched
			character, the cursor won't move. When not included,
			the cursor would skip over it and jump to the
			following occurrence.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-;}
@cindex cpo-;
@item ; @tab |,| や |;| で最後の |t| 検索を繰り返すとき、カーソルの位置が検索文字の一つ手前であればカーソルを移動しない。フラグが含まれていない場合は、カーソルはその文字を飛び越えて次の場所にジャンプする。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	POSIX flags.  These are not included in the Vi default value, except
	when $VIM_POSIX was set on startup. |posix|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のものは POSIX フラグである。起動時に @env{$VIM_POSIX} がセットされていない限り、これらは Vi の既定値には含まれない。|posix|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	    contains	behavior	~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@headitem フラグ @tab 動作
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-#*
		#	A count before "D", "o" and "O" has no effect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-#}
@cindex cpo-#
@item # @tab "D", "o", "O" に対するカウントは効果がない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-&*
		&	When ":preserve" was used keep the swap file when
			exiting normally while this buffer is still loaded.
			This flag is tested when exiting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-&}
@cindex cpo-&
@item & @tab "@command{:preserve}" が使われたとき通常終了時にバッファはまだ読み込まれているが、スワップファイルを保存する。このフラグは Vim の終了時に判定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-\*
		\	Backslash in a [] range in a search pattern is taken
			literally, only "\]" is special  See |/[]|
			   '\' included: "/[ \-]"  finds <Space>, '\' and '-'
			   '\' excluded: "/[ \-]"  finds <Space> and '-'
			Also see |cpo-l|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-\}
@cindex cpo-\
@item \ @tab 検索パターンの範囲[]の中のバックスラッシュが文字どおりに解釈される。"\]" だけがエスケープになる。|/[]|を参照。'\' が含まれていると "/[ \-]" は<Space>, '\', '-' にマッチする。'\' が含まれていないと "/[ \-]" は<Space>, '-' にマッチする。|cpo-l|も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-/*
		/	When "%" is used as the replacement string in a |:s|
			command, use the previous replacement string. |:s%|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-/}
@cindex cpo-/
@item / @tab コマンド |:s| の置換後文字列に "%" を指定したとき、前回の置換後文字列を使う。|:s%|を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-{*
		{	The |{| and |}| commands also stop at a "{" character
			at the start of a line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-@{}
@cindex cpo-@{
@item @{ @tab コマンド |@{| と |@}| が行頭の文字 "@{" にも止まる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-.*
		.	The ":chdir" and ":cd" commands fail if the current
			buffer is modified, unless ! is used.  Vim doesn't
			need this, since it remembers the full path of an
			opened file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-.}
@cindex cpo-.
@item . @tab カレントバッファが変更されているとき、"!" をつけないかぎりコマンド "@command{:chdir}" と "@command{:cd}" が失敗する。Vim は開いたファイルのフルパスを覚えているため、これを必要としない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*cpo-bar*
		|	The value of the $LINES and $COLUMNS environment
			variables overrule the terminal size values obtained
			with system specific functions.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cpo-bar}
@cindex cpo-bar
@item | @tab 環境変数 @env{$LINES} と @env{$COLUMNS} の値をシステム固有の関数で得られたターミナルサイズより優先させる。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'cryptmethod'* *'cm'*
'cryptmethod' 'cm'	string	(default "zip")
			global or local to buffer |global-local|
			{not in Vi}
	Method used for encryption when the buffer is written to a file:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cryptmethod'}
@anchor{'cm'}
@cindex 'cryptmethod'
@cindex 'cm'
@item 'cryptmethod' 'cm'
文字列 (既定では "zip") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

バッファをファイルに保存するときに使用される暗号化メソッドを設定する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*pkzip*
	   zip		PkZip compatible method.  A weak kind of encryption.
			Backwards compatible with Vim 7.2 and older.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{pkzip}
@cindex pkzip
@multitable @columnfractions .2 .8
@item zip @tab PkZip 互換メソッド。弱い暗号化。Vim 7.2 以前との後方互換。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*blowfish*
	   blowfish	Blowfish method.  Medium strong encryption but it has
			an implementation flaw.  Requires Vim 7.3 or later,
			files can NOT be read by Vim 7.2 and older.  This adds
			a "seed" to the file, every time you write the file
			the encrypted bytes will be different.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{blowfish}
@cindex blowfish
@item blowfish @tab Blowfish メソッド。中強度の暗号化だが実装上の脆弱性がある。Vim 7.3 以降が必要。このメソッドで保存されたファイルは Vim 7.2 以前のバージョンでは開くことができない。ファイルには "seed" が付加されるのでファイルを書き込むたびに暗号化されたバイト列は異なる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*blowfish2*
	   blowfish2	Blowfish method.  Medium strong encryption.  Requires
			Vim 7.4.401 or later, files can NOT be read by Vim 7.3
			and older.  This adds a "seed" to the file, every time
			you write the file the encrypted bytes will be
			different.  The whole undo file is encrypted, not just
			the pieces of text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{blowfish2}
@cindex blowfish2
@item blowfish2	@tab Blowfish メソッド。中強度の暗号化。Vim 7.4.401 以降が必要。このメソッドで保存されたファイルは Vim 7.3 以前のバージョンでは開くことができない。ファイルには "seed" が付加されるのでファイルを書き込むたびに暗号化されたバイト列は異なる。undo ファイルは (テキスト部分だけではなく) 全体が暗号化される。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	You should use "blowfish2", also to re-encrypt older files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
古いファイルを再度暗号化する時も "blowfish2" を使うべきである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When reading an encrypted file 'cryptmethod' will be set automatically
	to the detected method of the file being read.  Thus if you write it
	without changing 'cryptmethod' the same method will be used.
	Changing 'cryptmethod' does not mark the file as modified, you have to
	explicitly write it, you don't get a warning unless there are other
	modifications.  Also see |:X|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
暗号化されたファイルを読み込んだとき、'@option{cryptmethod}' は自動的にそのファイルに使用されている暗号メソッドに設定される。つまり、そのまま '@option{cryptmethod}' を変更せずにファイルを保存すれば同じメソッドが使用される。

'@option{cryptmethod}' の設定を変更してもファイルは変更あり状態にはならない。設定変更を有効にするにはファイルを保存する必要がある。もし他に変更がなければ保存せずに終了したとしても警告は表示されない。|:X| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When setting the global value to an empty string, it will end up with
	the value "zip".  When setting the local value to an empty string the
	buffer will use the global value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
グローバル設定を空文字に設定すると "zip" が使用される。ローカル設定を空文字に設定するとグローバル設定が使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When a new encryption method is added in a later version of Vim, and
	the current version does not recognize it, you will get	*E821* .
	You need to edit this file with the later version of Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E821}
@cindex E821
Vim の将来のバージョンに新しい暗号化メソッドが追加され、現在の Vim がそれを認識できないときは E821 エラーが表示される。そのファイルは新しいバージョンの Vim で開く必要がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'cscopepathcomp'* *'cspc'*
'cscopepathcomp' 'cspc'	number	(default 0)
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	Determines how many components of the path to show in a list of tags.
	See |cscopepathcomp|.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopepathcomp'}
@anchor{'cspc'}
@cindex 'cscopepathcomp'
@cindex 'cspc'
@item 'cscopepathcomp' 'cspc'
数値 (既定では 0) @*
グローバル @*
@{Vim が |+cscope| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

タグのリストの中でパスを @{訳注: 上にさかのぼって@} どこまで表示するかを指定する。|cscopepathcomp| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cscopeprg'* *'csprg'*
'cscopeprg' 'csprg'	string	(default "cscope")
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	Specifies the command to execute cscope.  See |cscopeprg|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopeprg'}
@anchor{'csprg'}
@cindex 'cscopeprg'
@cindex 'csprg'
@item 'cscopeprg' 'csprg'
文字列 (既定では "cscope") @*
グローバル @*
@{Vim が |+cscope| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

Cscope を実行するコマンド名を指定する。|cscopeprg| を参照。安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cscopequickfix'* *'csqf'*
'cscopequickfix' 'csqf' string	(default "")
			global
			{not available when compiled without the |+cscope|
			or |+quickfix| features}
			{not in Vi}
	Specifies whether to use quickfix window to show cscope results.
	See |cscopequickfix|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopequickfix'}
@anchor{'csqf'}
@cindex 'cscopequickfix'
@cindex 'csqf'
@item 'cscopequickfix' 'csqf'
文字列 (既定では "") @*
グローバル @*
@{Vim が |+cscope| または |+quickfix| 機能つきでコンパイルされたときのみ利用可能@} @*
@{Vi にはない@}

cscope の結果を表示するのに QuickFix ウィンドウを使うかどうかを指定する。|cscopequickfix| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		*'cscoperelative'* *'csre'* *'nocscoperelative'* *'nocsre'*
'cscoperelative' 'csre' boolean (default off)
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	In the absence of a prefix (-P) for cscope. setting this option enables
	to use the basename of cscope.out path as the prefix.
	See |cscoperelative|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscoperelative'}
@anchor{'csre'}
@anchor{'nocscoperelative'}
@anchor{'nocsre'}
@cindex 'cscoperelative'
@cindex 'csre'
@cindex 'nocscoperelative'
@cindex 'nocsre'
@item 'cscoperelative' 'csre'
切替 (既定ではオフ) @*
グローバル @*
@{Vim が |+cscope| 機能つきでコンパイルされたときのみ利用可能@} @*
@{Vi にはない@}

cscope のプリフィックス (-P) がないとき、このオプションをオンに設定すると、cscope.out が保存されているディレクトリがプリフィックスとして使われる。|cscoperelative| 参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'cscopetag'* *'cst'* *'nocscopetag'* *'nocst'*
'cscopetag' 'cst'	boolean (default off)
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	Use cscope for tag commands.  See |cscope-options|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopetag'}
@anchor{'cst'}
@anchor{'nocscopetag'}
@anchor{'nocst'}
@cindex 'cscopetag'
@cindex 'cst'
@cindex 'nocscopetag'
@cindex 'nocst'
@item 'cscopetag' 'cst'
切替 (既定ではオフ) @*
グローバル @*
@{Vim が |+cscope| 機能つきでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

コマンド tag に cscope を使う。|cscope-options|を参照。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになるとオフになる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'cscopetagorder'* *'csto'*
'cscopetagorder' 'csto'	number	(default 0)
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	Determines the order in which ":cstag" performs a search.  See
	|cscopetagorder|.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopetagorder'}
@anchor{'csto'}
@cindex 'cscopetagorder'
@cindex 'csto'
@item 'cscopetagorder' 'csto'
数値 (既定では 0) @*
グローバル @*
@{Vim が |+cscope| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

コマンド "@command{:cstag}" が検索を行う順番を指定する。|cscopetagorder| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'cscopeverbose'* *'csverb'*
					*'nocscopeverbose'* *'nocsverb'*
'cscopeverbose' 'csverb' boolean (default off)
			global
			{not available when compiled without the |+cscope|
			feature}
			{not in Vi}
	Give messages when adding a cscope database.  See |cscopeverbose|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cscopeverbose'}
@anchor{'csverb'}
@anchor{'nocscopeverbose'}
@anchor{'nocsverb'}
@cindex 'cscopeverbose'
@cindex 'csverb'
@cindex 'nocscopeverbose'
@cindex 'nocsverb'
@item 'cscopeverbose' 'csverb'
切替 (既定ではオフ) @*
グローバル @*
@{Vim が |+cscope| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

Cscope のデータベースに情報を追加するときメッセージを表示する。|cscopeverbose| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@command{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'cursorbind'* *'crb'* *'nocursorbind'* *'nocrb'*
'cursorbind' 'crb'	boolean  (default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+cursorbind|
			feature}
	When this option is set, as the cursor in the current
	window moves other cursorbound windows (windows that also have
	this option set) move their cursors to the corresponding line and
	column.  This option is useful for viewing the
	differences between two versions of a file (see 'diff'); in diff mode,
	inserted and deleted lines (though not characters within a line) are
	taken into account.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cursorbind'}
@anchor{'crb'}
@anchor{'nocursorbind'}
@anchor{'nocrb'}
@cindex 'cursorbind'
@cindex 'crb'
@cindex 'nocursorbind'
@cindex 'nocrb'
@item 'cursorbind' 'crb'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cursorbind| 機能つきでコンパイルされたときのみ有効@}

このオプションをオンにすると、現在のウィンドウでカーソルを動かしたときに、他のウィンドウ ('@option{cursorbind}' オプションが設定されたウィンドウ) 内のカーソルも同じ行と列に移動する。このオプションはバージョン違いのファイルの差を見るときに便利である ('@option{diff}' 参照)。差分モードでは追加または削除された行 (行に文字がなくても) のみが考慮される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
			*'cursorcolumn'* *'cuc'* *'nocursorcolumn'* *'nocuc'*
'cursorcolumn' 'cuc'	boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Highlight the screen column of the cursor with CursorColumn
	|hl-CursorColumn|.  Useful to align text.  Will make screen redrawing
	slower.
	If you only want the highlighting in the current window you can use
	these autocommands: >
		au WinLeave * set nocursorline nocursorcolumn
		au WinEnter * set cursorline cursorcolumn
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cursorcolumn'}
@anchor{'cuc'}
@anchor{'nocursorcolumn'}
@anchor{'nocuc'}
@cindex 'cursorcolumn'
@cindex 'cuc'
@cindex 'nocursorcolumn'
@cindex 'nocuc'
@item 'cursorcolumn' 'cuc'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能つきでコンパイルされたときのみ有効@}

カーソルのある画面上の桁を CursorColumn で強調する |hl-CursorColumn|。テキストを桁揃えするのに便利。スクリーンの再描画が遅くなる。カレントウィンドウに対してだけこの強調をしたいなら次の自動コマンドを使う:
@verbatim
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'cursorline'* *'cul'* *'nocursorline'* *'nocul'*
'cursorline' 'cul'	boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Highlight the screen line of the cursor with CursorLine
	|hl-CursorLine|.  Useful to easily spot the cursor.  Will make screen
	redrawing slower.
	When Visual mode is active the highlighting isn't used to make it
	easier to see the selected text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'cursorline'}
@anchor{'cul'}
@anchor{'nocursorline'}
@anchor{'nocul'}
@cindex 'cursorline'
@cindex 'cul'
@cindex 'nocursorline'
@cindex 'nocul'
@item 'cursorline' 'cul'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能つきでコンパイルされたときのみ有効@}

カーソルがある画面上の行を CursorLine で強調する |hl-CursorLine|。カーソルを目立たせるのに便利。スクリーンの再描画が遅くなる。ビジュアルモードでは選択されたテキストをわかりやすくするためにこの強調は行われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'debug'*
'debug'			string	(default "")
			global
			{not in Vi}
	These values can be used:
	msg	Error messages that would otherwise be omitted will be given
		anyway.
	throw	Error messages that would otherwise be omitted will be given
		anyway and also throw an exception and set |v:errmsg|.
	beep	A message will be given when otherwise only a beep would be
		produced.
	The values can be combined, separated by a comma.
	"msg" and "throw" are useful for debugging 'foldexpr', 'formatexpr' or
	'indentexpr'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'debug'}
@cindex 'debug'
@item 'debug'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

以下の値を指定することができる:
@multitable @columnfractions .1 .9
@item msg @tab 省かれるはずのエラーメッセージも表示する。
@item throw @tab 省かれるはずのエラーメッセージも表示し、さらに例外を投げ、|v:errmsg| を設定する。
@item beep @tab ビープが鳴るだけのところでメッセージを表示する。
@end multitable
これらの値はコンマで区切って組み合わせることができる。"msg" と "throw" はオプション '@option{foldexpr}' や '@option{formatexpr}', '@option{indentexpr}' をデバッグするのに便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'define'* *'def'*
'define' 'def'		string	(default "^\s*#\s*define")
			global or local to buffer |global-local|
			{not in Vi}
	Pattern to be used to find a macro definition.  It is a search
	pattern, just like for the "/" command.  This option is used for the
	commands like "[i" and "[d" |include-search|.  The 'isident' option is
	used to recognize the defined name after the match:
		{match with 'define'}{non-ID chars}{defined name}{non-ID char}
	See |option-backslash| about inserting backslashes to include a space
	or backslash.
	The default value is for C programs.  For C++ this value would be
	useful, to include const type declarations: >
		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
<	When using the ":set" command, you need to double the backslashes!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'define'}
@anchor{'def'}
@cindex 'define'
@cindex 'def'
@item 'define' 'def'
文字列 (既定では "^\s*#\s*define") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

マクロ定義を発見するのに使われるパターンを指定する。値はコマンド "/" で使うのと同様の検索パターンである。このオプションは "[i" や "[d" 等に使われる |include-search|。オプション '@option{isident}' は、これがマッチした部分の後の定義された名前を認識するのに使われる。
@verbatim
{'define' のマッチ}{非識別子}{定義名}{非識別子}
@end verbatim
値に空白や '\' を含めるために '\' を挿入することに関しては、|option-backslash| を参照。

既定値は C プログラム用である。C++ プログラムには、定数定義を加えて次のようにすると便利だろう。
@verbatim
^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
@end verbatim
"@command{:set}" で設定するときは、'\' の数を 2 倍にする必要がある！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'delcombine'* *'deco'* *'nodelcombine'* *'nodeco'*
'delcombine' 'deco'	boolean (default off)
			global
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	If editing Unicode and this option is set, backspace and Normal mode
	"x" delete each combining character on its own.  When it is off (the
	default) the character along with its combining characters are
	deleted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'delcombine'}
@anchor{'deco'}
@anchor{'nodelcombine'}
@anchor{'nodeco'}
@cindex 'delcombine'
@cindex 'deco'
@cindex 'nodelcombine'
@cindex 'nodeco'
@item 'delcombine' 'deco'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@}

オンのときは、Unicode のファイルの編集時、バックスペースとノーマルモードのコマンド "x" はそれぞれの文字の上の combining character のみを削除する。オフのときは (これが既定である) combining character と文字は同時に削除される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note: When 'delcombine' is set "xx" may work different from "2x"!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{delcombine}' がオンになっていると "xx" の動作が "2x" と異なる場合がある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This is useful for Arabic, Hebrew and many other languages where one
	may have combining characters overtop of base characters, and want
	to remove only the combining ones.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは、アラビア語、ヘブライ語その他の言語で、ベースとなる文字の上に combining character が付いていて、combining character のみを削除したいときに便利である。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'dictionary'* *'dict'*
'dictionary' 'dict'	string	(default "")
			global or local to buffer |global-local|
			{not in Vi}
	List of file names, separated by commas, that are used to lookup words
	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
	contain a list of words.  This can be one word per line, or several
	words per line, separated by non-keyword characters (white space is
	preferred).  Maximum line length is 510 bytes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'dictionary'}
@anchor{'dict'}
@cindex 'dictionary'
@cindex 'dict'
@item 'dictionary' 'dict'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

ファイル名のコンマ区切りのリスト。キーワード補完コマンド |i_CTRL-X_CTRL-K| 用の単語を探すために使われる。単語のリストからなるファイルを指定する。

その中では 1 行ごとに 1 語が並べられていてもよいし、1 行にキーワードでない文字 (空白を推奨) で区切られた数語が並んでいてもよい。

1 行の文字数の最大値は 510 バイト分である @{訳注: 日本語のいわゆる全角文字では半分の 255 文字@}。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When this option is empty, or an entry "spell" is present, spell
	checking is enabled the currently active spelling is used. |spell|
	To include a comma in a file name precede it with a backslash.  Spaces
	after a comma are ignored, otherwise spaces are included in the file
	name.  See |option-backslash| about using backslashes.
	This has nothing to do with the |Dictionary| variable type.
	Where to find a list of words?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションが空のとき、または "spell" が含まれていてスペルチェックが有効になっているとき、現在アクティブなスペリングが使われる。|spell|

ファイル名にコンマを含めるには、コンマの前に '\' を置くこと。コンマの後ろの空白は無視されるが、それ以外の空白はファイル名の一部として扱われる。'\' の使い方については |option-backslash| を参照すること。

このオプションは変数の辞書型|Dictionary|とは関係ない。単語リストはどこで見つかるか？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- On FreeBSD, there is the file "/usr/share/dict/words".
	- In the Simtel archive, look in the "msdos/linguist" directory.
	- In "miscfiles" of the GNU collection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item FreeBSD では、"/usr/share/dict/words" というファイルがある。
@item Simtel アーカイブでは、ディレクトリ "msdos/linguist" を探すこと。
@item GNU コレクションでは、"miscfiles" の中にある。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.
	Backticks cannot be used in this option for security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストにディレクトリを追加するときには |:set+=| コマンド、リストからディレクトリを除くときには |:set-=| コマンドを使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。

安全上の理由から、バッククォート (`) をこのオプションの値に使うことはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'diff'* *'nodiff'*
'diff'			boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+diff|
			feature}
	Join the current window in the group of windows that shows differences
	between files.  See |vimdiff|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'diff'}
@anchor{'nodiff'}
@cindex 'diff'
@cindex 'nodiff'
@item 'diff'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+diff| 機能付きでコンパイルされたときのみ有効@}

カレントウィンドウをファイル間の差異を示すウィンドウのグループに組み入れる。|vimdiff| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'dex'* *'diffexpr'*
'diffexpr' 'dex'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+diff|
			feature}
	Expression which is evaluated to obtain an ed-style diff file from two
	versions of a file.  See |diff-diffexpr|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'dex'}
@anchor{'diffexpr'}
@cindex 'dex'
@cindex 'diffexpr'
@item 'diffexpr' 'dex'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+diff| 機能付きでコンパイルされたときのみ有効@}

2 個のファイル間の差異を求めるとき、ed 形式の diff ファイルを求めるために評価される expression。|diff-diffexpr| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'dip'* *'diffopt'*
'diffopt' 'dip'		string	(default "filler")
			global
			{not in Vi}
			{not available when compiled without the |+diff|
			feature}
	Option settings for diff mode.  It can consist of the following items.
	All are optional.  Items must be separated by a comma.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'dip'}
@anchor{'diffopt'}
@cindex 'dip'
@cindex 'diffopt'
@item 'diffopt' 'dip'
文字列 (既定では "filler") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+diff| 機能付きでコンパイルされたときのみ有効@}

差分モード用のオプション設定。値は、以下のキーワードのコンマ区切りのリストである。指定しないものがあってもよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		filler		Show filler lines, to keep the text
				synchronized with a window that has inserted
				lines at the same position.  Mostly useful
				when windows are side-by-side and 'scrollbind'
				is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item filler @tab 片方のウィンドウ内のテキストのある位置に行が挿入されていたときに、ウィンドウのスクロールを同調させるために、埋め立て用の行を表示する。ウィンドウが隣り合っていて、オプション '@option{scrollbind}' がオンのときには大抵便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		context:{n}	Use a context of {n} lines between a change
				and a fold that contains unchanged lines.
				When omitted a context of six lines is used.
				See |fold-diff|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item context:@{n@} @tab 変更のあった行の上下を @{n@} 行だけ折り畳まずに表示 (コンテキストの表示) する。指定されないと、コンテキストは 6 行になる。|fold-diff| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		icase		Ignore changes in case of text.  "a" and "A"
				are considered the same.  Adds the "-i" flag
				to the "diff" command if 'diffexpr' is empty.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item icase @tab テキストの大文字と小文字の違いを無視する。"a" と "A" は同じものと見なされる。オプション '@option{diffexpr}' が空なら、コマンド "@command{diff}" にフラグ "-i" を追加する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		iwhite		Ignore changes in amount of white space.  Adds
				the "-b" flag to the "diff" command if
				'diffexpr' is empty.  Check the documentation
				of the "diff" command for what this does
				exactly.  It should ignore adding trailing
				white space, but not leading white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item iwhite @tab 空白の数の違いを無視する。オプション '@option{diffexpr}' が空なら、コマンド "@command{diff}" にフラグ "-b" を追加する。これが正確には何を指定しているのかについては、コマンド "@command{diff}" のドキュメントを参照すること。これは後ろに追加された空白は無視するが、前に追加された空白は無視しないはずである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		horizontal	Start diff mode with horizontal splits (unless
				explicitly specified otherwise).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item horizontal @tab (他に明示的に指定されない限り) ウィンドウを水平分割して差分モードを開始する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		vertical	Start diff mode with vertical splits (unless
				explicitly specified otherwise).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item vertical @tab (他に明示的に指定されない限り) ウィンドウを垂直分割して差分モードを開始する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		hiddenoff	Do not use diff mode for a buffer when it
				becomes hidden.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item hiddenoff @tab バッファが隠れた状態になる時は diff モードを使用しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		foldcolumn:{n}	Set the 'foldcolumn' option to {n} when
				starting diff mode.  Without this 2 is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item foldcolumn:@{n@} @tab 差分モードの開始時にオプション '@option{foldcolumn}' を @{n@} に設定する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Examples: >

		:set diffopt=filler,context:4
		:set diffopt=
		:set diffopt=filler,foldcolumn:3
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set diffopt=filler,context:4
:set diffopt=
:set diffopt=filler,foldcolumn:3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				     *'digraph'* *'dg'* *'nodigraph'* *'nodg'*
'digraph' 'dg'		boolean	(default off)
			global
			{not in Vi}
			{not available when compiled without the |+digraphs|
			feature}
	Enable the entering of digraphs in Insert mode with {char1} <BS>
	{char2}.  See |digraphs|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'digraph'}
@anchor{'dg'}
@anchor{'nodigraph'}
@anchor{'nodg'}
@cindex 'digraph'
@cindex 'dg'
@cindex 'nodigraph'
@cindex 'nodg'
@item 'digraph' 'dg'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+digraphs| 機能付きでコンパイルされたときのみ有効@}

挿入モードで @{char1@} <BS> @{char2@} でダイグラフを入力できるようにする。|digraphs| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'directory'* *'dir'*
'directory' 'dir'	string	(default for Amiga: ".,t:",
				 for MS-DOS and Win32: ".,$TEMP,c:\tmp,c:\temp"
				 for Unix: ".,~/tmp,/var/tmp,/tmp")
			global
	List of directory names for the swap file, separated with commas.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'directory'}
@anchor{'dir'}
@cindex 'directory'
@cindex 'dir'
@item 'directory' 'dir'
文字列	(
@multitable @columnfractions .5 .5
@item Amiga での既定値: @tab ".,t:",
@item MS-DOS と Win32 での既定値: @tab ".,$TEMP,c:\tmp,c:\temp"
@item Unix での既定値: @tab ".,~/tmp,/var/tmp,/tmp")
@end multitable
グローバル

スワップファイル用ディレクトリの、コンマ区切りのリスト。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- The swap file will be created in the first directory where this is
	  possible.
	- Empty means that no swap file will be used (recovery is
	  impossible!).
	- A directory "." means to put the swap file in the same directory as
	  the edited file.  On Unix, a dot is prepended to the file name, so
	  it doesn't show in a directory listing.  On MS-Windows the "hidden"
	  attribute is set and a dot prepended if possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item
スワップファイルは、リスト内の利用できるディレクトリのうち、最初のディレクトリの中に作られる。
@item
値が空だとスワップファイルは作られない (回復は不可能になる！)。
@item
ディレクトリに "." を指定すると、編集されているファイルと同じディレクトリにスワップファイルが作られる。Unixではファイル名の先頭にドットが追加されるので、ディレクトリ内のファイル一覧には表示されない。

MS-Windows では属性 "hidden" が設定され、可能ならばファイル名の先頭にドットが追加される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- A directory starting with "./" (or ".\" for MS-DOS et al.) means to
	  put the swap file relative to where the edited file is.  The leading
	  "." is replaced with the path name of the edited file.
	- For Unix and Win32, if a directory ends in two path separators "//"
	  or "\\", the swap file name will be built from the complete path to
	  the file with all path separators substituted to percent '%' signs.
	  This will ensure file name uniqueness in the preserve directory.
	  On Win32, when a separating comma is following, you must use "//",
	  since "\\" will include the comma in the file name.
	- Spaces after the comma are ignored, other spaces are considered part
	  of the directory name.  To have a space at the start of a directory
	  name, precede it with a backslash.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
"./" で始まるディレクトリ (MS-DOSなどでは ".\") を指定すると、編集されているファイルからの相対的な位置にスワップファイルが作られる。先頭の "." は編集されているファイルのパス名に置換される。
@item
Unix と Win32 では、指定されたディレクトリ名の末尾がディレクトリの区切り記号 2 個("//" または "\\")で終わっていたら、スワップファイルの名前はフルパスに従って付けられる。スワップファイルのファイル名をフルパス形式で表し、ディレクトリの区切り文字をパーセント記号 '%' で置き換えたものが使われる。こうするとスワップファイル格納用ディレクトリの中でも @{訳注: 別のディレクトリ内の同名ファイルのスワップファイルが集まるかもしれない@}、ファイル名の一意性が保証される。

Win32 では、区切り文字のコンマの前では "\\" でなく "//" と書かなければならない。"\\" と書くと、コンマがファイル名の一部と解釈されてしまうためである。
@item
コンマの後の空白は無視されるが、その他の場所の空白はディレクトリ名の一部と見なされる。ディレクトリ名の先頭に空白を指定したいなら、'\' を前に付けること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- To include a comma in a directory name precede it with a backslash.
	- A directory name may end in an ':' or '/'.
	- Environment variables are expanded |:set_env|.
	- Careful with '\' characters, type one before a space, type two to
	  get one in the option (see |option-backslash|), for example: >
	    :set dir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
<	- For backwards compatibility with Vim version 3.0 a '>' at the start
	  of the option is removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
コンマをディレクトリ名の一部に使いたいなら、コンマの前に '\' を付けること。
@item
ディレクトリ名は ':' や '/' で終わっていてもよい。
@item
環境変数は展開される |:set_env|。
@item
'\' の扱いには注意。空白の前には 1 個置く。値の中に指定するには 2 個置く (|option-backslash| を参照)。例:
@example
:set dir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
@end example
@item
Vim version 3.0 との後方互換性のため、値の先頭に '>' を置いてもそれは無視される。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Using "." first in the list is recommended.  This means that editing
	the same file twice will result in a warning.  Using "/tmp" on Unix is
	discouraged: When the system crashes you lose the swap file.
	"/var/tmp" is often not cleared when rebooting, thus is a better
	choice than "/tmp".  But it can contain a lot of files, your swap
	files get lost in the crowd.  That is why a "tmp" directory in your
	home directory is tried first.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストの先頭には "." を指定することを推奨する。こうすると、同じファイルを 2 重に編集しようとすると警告が出る。

Unix でディレクトリ "/tmp" を使うのはお勧めできない。システムがクラッシュすると、スワップファイルも失われてしまう。ディレクトリ "/var/tmp" の中はリブート時にも大抵クリアされないので、ディレクトリ "/tmp" よりもよい選択である。

しかしその中には多くのファイルが入っているかもしれないので、ユーザーのスワップファイルは他のファイルに紛れて分からなくなるかもしれない。ユーザーのホームディレクトリ内のディレクトリ "tmp" が最初に試されるのはそのためだ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
	{Vi: directory to put temp file in, defaults to "/tmp"}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストにディレクトリを追加するときにはコマンド |:set+=|、リストからディレクトリを除くときにはコマンド |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。

@{Vi: 一時ファイルを作るディレクトリを指定する。既定では "/tmp"@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'display'* *'dy'*
'display' 'dy'		string	(default "", set to "truncate" in
							       |defaults.vim|)
			global
			{not in Vi}
	Change the way text is displayed.  This is comma separated list of
	flags:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'display'}
@anchor{'dy'}
@cindex 'display'
@cindex 'dy'
@item 'display' 'dy'
文字列 (既定では ""、|defaults.vim| 内で "truncate" にセットされる) @*
グローバル @*
@{Vi にはない@}

テキスト表示の方法を変える。値は以下のフラグのコンマ区切りのリストである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	lastline	When included, as much as possible of the last line
			in a window will be displayed.  "@@@" is put in the
			last columns of the last screen line to indicate the
			rest of the line is not displayed.
	truncate	Like "lastline", but "@@@" is displayed in the first
			column of the last screen line.  Overrules "lastline".
	uhex		Show unprintable characters hexadecimal as <xx>
			instead of using ^C and ~C.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item lastline @tab これが含まれると、ウィンドウの最後の行ができる限りまで表示される。その行に表示されていない箇所があることを示すために、画面の最後の行の最後の桁に "@verb{|@@@|}" が表示される。
@item truncate @tab "lastline" に似ているが、"@verb{|@@@|}" は画面の最後の行の最初の桁に表示される。"lastline" を上書きする。
@item uhex @tab unprintable な文字を @{訳注: 文書先頭を参照@} <xx> という形式で16進数表示し、^C や ~C の形式を使わない。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When neither "lastline" nor "truncate" is included, a last line that
	doesn't fit is replaced with "@" lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"lastline" も "truncate" も含まれていない時、収まらない最後の行は "@verb{|@|}" に置き換えられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'eadirection'* *'ead'*
'eadirection' 'ead'	string	(default "both")
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
	Tells when the 'equalalways' option applies:
		ver	vertically, width of windows is not affected
		hor	horizontally, height of windows is not affected
		both	width and height of windows is affected
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'eadirection'}
@anchor{'ead'}
@cindex 'eadirection'
@cindex 'ead'
@item 'eadirection' 'ead'
文字列 (既定では "both") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{equalalways}' が適用されるときに、
@multitable @columnfractions .15 .85
@item ver @tab ウィンドウの高さにのみ効果がある
@item hor @tab ウィンドウの幅にのみ効果がある
@item both @tab ウィンドウの高さと幅、両方に効果がある
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			   *'ed'* *'edcompatible'* *'noed'* *'noedcompatible'*
'edcompatible' 'ed'	boolean	(default off)
			global
	Makes the 'g' and 'c' flags of the ":substitute" command to be
	toggled each time the flag is given.  See |complex-change|.  See
	also 'gdefault' option.
	Switching this option on may break plugins!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ed'}
@anchor{'edcompatible'}
@anchor{'noed'}
@anchor{'noedcompatible'}
@cindex 'ed'
@cindex 'edcompatible'
@cindex 'noed'
@cindex 'noedcompatible'
@item 'edcompatible' 'ed'
切替 (既定ではオフ) @*
グローバル

コマンド "@command{:substitute}" のフラグ '@var{g}' と '@var{c}' を、次に別の方を指定するまでずっと効力を持つようにする。|complex-change| を参照。オプション '@option{gdefault}' も参照。

このオプションをオンに設定するとプラグインを壊すかもしれない！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'emoji'* *'emo'* *'noemoji'* *'noemo'*
'emoji' 'emo'	boolean (default: on)
			global
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	When on all Unicode emoji characters are considered to be full width.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'emoji'}
@anchor{'emo'}
@anchor{'noemoji'}
@anchor{'noemo'}
@cindex 'emoji'
@cindex 'emo'
@cindex 'noemoji'
@cindex 'noemo'
@item 'emoji' 'emo'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@}

オンにすると全ての Unicode 絵文字は全角とみなされる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
					*'encoding'* *'enc'* *E543*
'encoding' 'enc'	string (default: "latin1" or value from $LANG)
			global
			{only available when compiled with the |+multi_byte|
			feature}
			{not in Vi}
	Sets the character encoding used inside Vim.  It applies to text in
	the buffers, registers, Strings in expressions, text stored in the
	viminfo file, etc.  It sets the kind of characters which Vim can work
	with.  See |encoding-names| for the possible values.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'encoding'}
@anchor{'enc'}
@anchor{E543}
@cindex 'encoding'
@cindex 'enc'
@cindex E543
@item 'encoding' 'enc'
文字列 (既定では "@var{latin1}" または @env{$LANG}) @*
グローバル @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

Vim 内部で使われる文字エンコーディングを設定する。そのエンコーディングはバッファやレジスタ内のテキスト、expression 内の文字列、ファイル @file{viminfo} 内のテキスト等に適用される。つまり、このオプションは Vim の通常扱う文字の種類を設定する。指定できる値については |encoding-names| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: Changing this option will not change the encoding of the
	existing text in Vim.  It may cause non-ASCII text to become invalid.
	It should normally be kept at its default value, or set when Vim
	starts up.  See |multibyte|.  To reload the menus see |:menutrans|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションの値を変更しても、Vim 内部の既存のテキストのエンコーディングは変化しないので注意。非 ASCII 文字がおかしくなる恐れもある。既定の値から変更しないか、Vim の起動時に限って設定すること。|multibyte| を参照。メニューを再読み込みするには |:menutrans| を参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option cannot be set from a |modeline|.  It would most likely
	corrupt the text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションはモードライン (|modeline|) では設定できない。テキストが壊れてしまうため。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: For GTK+ 2 or later, it is highly recommended to set 'encoding'
	to "utf-8".  Although care has been taken to allow different values of
	'encoding', "utf-8" is the natural choice for the environment and
	avoids unnecessary conversion overhead.  "utf-8" has not been made
	the default to prevent different behavior of the GUI and terminal
	versions, and to avoid changing the encoding of newly created files
	without your knowledge (in case 'fileencodings' is empty).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
GTK+2 またはそれ以降では 'encoding' を "utf-8" に設定することが強く推奨される。他の値であってもよいが、この環境では "utf-8" が自然な選択であり、不必要な変換のオーバーヘッドを避けることができる。

GUI やターミナルのバージョンによって挙動が異なってしまうのを避けるためと、新しく作られたファイルのエンコーディングが知らないうちに変わってしまうのを避けるため ('@option{fileencodings}' が空の場合)、"utf-8" は既定にはなっていない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The character encoding of files can be different from 'encoding'.
	This is specified with 'fileencoding'.  The conversion is done with
	iconv() or as specified with 'charconvert'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
編集するファイルの文字エンコーディングはオプション '@option{encoding}' と異なってもよい。そちらは '@option{fileencoding}' で設定される。エンコーディングの変換は関数 iconv() または '@option{charconvert}' で指定された式による。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If you need to know whether 'encoding' is a multi-byte encoding, you
	can use: >
		if has("multi_byte_encoding")
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' がマルチバイトエンコーディングであるかを知るには、以下のコマンドが使える:
@verbatim
if has("multi_byte_encoding")
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Normally 'encoding' will be equal to your current locale.  This will
	be the default if Vim recognizes your environment settings.  If
	'encoding' is not set to the current locale, 'termencoding' must be
	set to convert typed and displayed text.  See |encoding-table|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
普通、'@option{encoding}' はユーザーのカレントロケールと同じである。Vim がユーザーの環境設定を認識したならば、それが既定値になる。'@option{encoding}' の値がカレントロケールに設定されていなければ、入力されたテキストと表示されるテキストを変換するために、'@option{termencoding}' が設定されていなければならない。|encoding-table| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When you set this option, it fires the |EncodingChanged| autocommand
	event so that you can set up fonts if necessary.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションを設定すると、必要に応じてフォントを設定できるように、autocommand のイベント |EncodingChanged| が発生する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When the option is set, the value is converted to lowercase.  Thus
	you can set it with uppercase values too.  Underscores are translated
	to '-' signs.
	When the encoding is recognized, it is changed to the standard name.
	For example "Latin-1" becomes "latin1", "ISO_88592" becomes
	"iso-8859-2" and "utf8" becomes "utf-8".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションが設定されると、値は小文字に変換される。そのため、値を大文字で設定してもよい。アンダースコア (下線) '_' はハイフン '-' に変換される。エンコーディングが認識されると、値は標準の名前に変換される。例えば "Latin-1" は "latin1" に、"ISO_88592" は "iso-8859-2" に、"utf8" は "utf-8" になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: "latin1" is also used when the encoding could not be detected.
	This only works when editing files in the same encoding!  When the
	actual character set is not latin1, make sure 'fileencoding' and
	'fileencodings' are empty.  When conversion is needed, switch to using
	utf-8.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"latin1" という値は、エンコーディングを判別できなかったときにも使われるので注意。これが正しいのは、編集するファイルが実際に latin1 エンコーディングのときのみである！実際の文字セットが latin1 でないときは、'@option{fileencoding}' と '@option{fileencodings}' が空であるのを確認すること。変換が必要なときは、utf-8 を使うようにすること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When "unicode", "ucs-2" or "ucs-4" is used, Vim internally uses utf-8.
	You don't notice this while editing, but it does matter for the
	|viminfo-file|.  And Vim expects the terminal to use utf-8 too.  Thus
	setting 'encoding' to one of these values instead of utf-8 only has
	effect for encoding used for files when 'fileencoding' is empty.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値が "unicode", "ucs-2" または "ucs-4" であるとき、Vim 内部では utf-8 が使われている。このことはユーザーが編集中に注意を払うことはないが、|viminfo-file| については問題になる。また Vim はターミナルも utf-8 を使うことを想定する。そのため、'@option{encoding}' を utf-8 でなく上記のいずれかの値に設定しても、'@option{fileencoding}' が空のときに編集するファイルのエンコーディングにしか影響がない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When 'encoding' is set to a Unicode encoding, and 'fileencodings' was
	not set yet, the default for 'fileencodings' is changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' が Unicode の一種に設定され、'@option{fileencodings}' がまだ設定されていなければ、'@option{fileencodings}' の既定値は変更される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'endofline'* *'eol'* *'noendofline'* *'noeol'*
'endofline' 'eol'	boolean	(default on)
			local to buffer
			{not in Vi}
	When writing a file and this option is off and the 'binary' option
	is on, or 'fixeol' option is off, no <EOL> will be written for the
	last line in the file.  This option is automatically set or reset when
	starting to edit a new file, depending on whether file has an <EOL>
	for the last line in the file.  Normally you don't have to set or
	reset this option.
	When 'binary' is off and 'fixeol' is on the value is not used when
	writing the file.  When 'binary' is on or 'fixeol' is off it is used
	to remember the presence of a <EOL> for the last line in the file, so
	that when you write the file the situation from the original file can
	be kept.  But you can change it if you want to.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'endofline'}
@anchor{'eol'}
@anchor{'noendofline'}
@anchor{'noeol'}
@cindex 'endofline'
@cindex 'eol'
@cindex 'noendofline'
@cindex 'noeol'
@item 'endofline' 'eol'
切替 (既定ではオン) @*
バッファについてローカル @*
@{Vi にはない@}

ファイルを書き込むときに、このオプションがオフでオプション '@option{binary}' がオンあるいはオプション '@option{fixeol}' がオフに設定されている場合は、ファイルの最終行に <EOL> が書き込まれない。このオプションはファイルの編集を始める時に、ファイルが <EOL> を持っているかどうかによって自動的にオンまたはリセットされる。普通はユーザーがこのオプションを設定する必要はない。

'@option{binary}' がオフで '@option{fixeol}' がオンのとき、このオプションの値はファイル書き込み時に使用されない。@{訳注: 必ず最終行に <EOL> が書き込まれる。@}

'@option{binary}' がオンもしくは '@option{fixeol}' がオフの時は最終行の <EOL> の状態を維持する為にこのオプションが使用される。これはファイルが書き込まれる際に、<EOL> の有無を元のファイルのままにするといったシチュエーションを想定している。しかし <EOL> の有無を現状から変えたい場合には、このオプションを変更することで実現できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			     *'equalalways'* *'ea'* *'noequalalways'* *'noea'*
'equalalways' 'ea'	boolean	(default on)
			global
			{not in Vi}
	When on, all the windows are automatically made the same size after
	splitting or closing a window.  This also happens the moment the
	option is switched on.  When off, splitting a window will reduce the
	size of the current window and leave the other windows the same.  When
	closing a window the extra lines are given to the window next to it
	(depending on 'splitbelow' and 'splitright').
	When mixing vertically and horizontally split windows, a minimal size
	is computed and some windows may be larger if there is room.  The
	'eadirection' option tells in which direction the size is affected.
	Changing the height and width of a window can be avoided by setting
	'winfixheight' and 'winfixwidth', respectively.
	If a window size is specified when creating a new window sizes are
	currently not equalized (it's complicated, but may be implemented in
	the future).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'equalalways'}
@anchor{'ea'}
@anchor{'noequalalways'}
@anchor{'noea'}
@cindex 'equalalways'
@cindex 'ea'
@cindex 'noequalalways'
@cindex 'noea'
@item 'equalalways' 'ea'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

オンのときは、ウィンドウを分割したり閉じたりした後、全てのウィンドウが自動的に同じサイズになる。これはこのオプションがオフになった瞬間にも起こる。オフのときは、ウィンドウを分割するとカレントウィンドウのサイズだけが減り、他のウィンドウに変化はない。ウィンドウを閉じると、('@option{splitbelow}' と '@option{splitright}' に従って) 閉じたウィンドウの隣のウィンドウの行数が増す。

水平に分割されたウィンドウと垂直に分割されたウィンドウが混在しているときは、サイズの最小値が計算され、いくつかのウィンドウは (余裕があれば) 大きくなる。'@option{eadirection}' はサイズの変化する方向を指定する。'@option{winfixheight}', '@option{winfixwidth}' を設定するとウィンドウの高さ・幅が変わるのを防ぐことができる。

新規ウィンドウ作成時にウィンドウサイズが指定された場合、ウィンドウサイズは等しくならない(これは複雑だが、将来は実装されるかもしれない)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'equalprg'* *'ep'*
'equalprg' 'ep'		string	(default "")
			global or local to buffer |global-local|
			{not in Vi}
	External program to use for "=" command.  When this option is empty
	the internal formatting functions are used; either 'lisp', 'cindent'
	or 'indentexpr'.  When Vim was compiled without internal formatting,
	the "indent" program is used.
	Environment variables are expanded |:set_env|.  See |option-backslash|
	about including spaces and backslashes.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'equalprg'}
@anchor{'ep'}
@cindex 'equalprg'
@cindex 'ep'
@item 'equalprg' 'ep'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

コマンド "=" に使う外部プログラムを指定する。値が空のときは内部関数が整形に使われる (オプション '@option{lisp}', '@option{cindent}' または '@option{indentexpr}')。

Vim が内部フォーマットなしでコンパイルされているときは indent コマンドが使われる。

環境変数は展開される |:set_env|。値に空白や '\' を含める方法については |option-backslash| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'errorbells'* *'eb'* *'noerrorbells'* *'noeb'*
'errorbells' 'eb'	boolean	(default off)
			global
	Ring the bell (beep or screen flash) for error messages.  This only
	makes a difference for error messages, the bell will be used always
	for a lot of errors without a message (e.g., hitting <Esc> in Normal
	mode).  See 'visualbell' on how to make the bell behave like a beep,
	screen flash or do nothing. See 'belloff' to finetune when to ring the
	bell.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'errorbells'}
@anchor{'eb'}
@anchor{'noerrorbells'}
@anchor{'noeb'}
@cindex 'errorbells'
@cindex 'eb'
@cindex 'noerrorbells'
@cindex 'noeb'
@item 'errorbells' 'eb'
切替 (既定ではオフ) @*
グローバル

エラーメッセージに伴ってベル (ビープ音または画面フラッシュ) を発生させる。このオプションはエラーメッセージにのみ適用され、メッセージのない多くのエラー (例えばノーマルモードで @key{<ESC>} を打ち込んだとき) についてはベルは常に使用される。ベルをビープ音にしたり、画面フラッシュにしたり、無効にしたりするためには、オプション '@option{visualbell}' を参照。ベルを鳴らす条件を微調整するには '@option{belloff}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'errorfile'* *'ef'*
'errorfile' 'ef'	string	(Amiga default: "AztecC.Err",
					others: "errors.err")
			global
			{not in Vi}
			{not available when compiled without the |+quickfix|
			feature}
	Name of the errorfile for the QuickFix mode (see |:cf|).
	When the "-q" command-line argument is used, 'errorfile' is set to the
	following argument.  See |-q|.
	NOT used for the ":make" command.  See 'makeef' for that.
	Environment variables are expanded |:set_env|.
	See |option-backslash| about including spaces and backslashes.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'errorfile'}
@anchor{'ef'}
@cindex 'errorfile'
@cindex 'ef'
@item 'errorfile' 'ef'
文字列 (Amiga での既定値: "AztecC.Err", 他の既定値: "errors.err") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+quickfix| 機能付きでコンパイルされたときのみ有効@}

QuickFix モードで使われるエラーファイルの名前 (|:cf| を参照)。

コマンドライン引数 "-q" が指定されたときは、オプション '@option{errorfile}' はそれに続く値に設定される。|-q| を参照。

コマンド "@command{:make}" には「使われない」。それについては 'makeef' を参照。

環境変数は展開される |:set_env|。値に空白や '\' を含める方法については |option-backslash| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'errorformat'* *'efm'*
'errorformat' 'efm'	string	(default is very long)
			global or local to buffer |global-local|
			{not in Vi}
			{not available when compiled without the |+quickfix|
			feature}
	Scanf-like description of the format for the lines in the error file
	(see |errorformat|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'errorformat'}
@anchor{'efm'}
@cindex 'errorformat'
@cindex 'efm'
@item 'errorformat' 'efm'
文字列 (既定値はとても長い) @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@} @*
@{Vim が |+quickfix| 機能付きでコンパイルされたときのみ有効@}

エラーファイルの内容の書式を、関数 scanf 風に指定する (|errorformat| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				     *'esckeys'* *'ek'* *'noesckeys'* *'noek'*
'esckeys' 'ek'		boolean	(Vim default: on, Vi default: off)
			global
			{not in Vi}
	Function keys that start with an <Esc> are recognized in Insert
	mode.  When this option is off, the cursor and function keys cannot be
	used in Insert mode if they start with an <Esc>.  The advantage of
	this is that the single <Esc> is recognized immediately, instead of
	after one second.  Instead of resetting this option, you might want to
	try changing the values for 'timeoutlen' and 'ttimeoutlen'.  Note that
	when 'esckeys' is off, you can still map anything, but the cursor keys
	won't work by default.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'esckeys'}
@anchor{'ek'}
@anchor{'noesckeys'}
@anchor{'noek'}
@cindex 'esckeys'
@cindex 'ek'
@cindex 'noesckeys'
@cindex 'noek'
@item 'esckeys' 'ek'
切替 (Vim の既定値: オン, Vi の既定値: オフ) @*
グローバル @*
@{Vi にはない@}

オンのときは、<Esc> で始まるファンクションキーも挿入モードで認識されるようになる。オフのときは、<Esc> で始まるカーソルキーとファンクションキーは、挿入モードで使うことができない。こうすることの利点は、@key{<Esc>} を 1 回打ち込むだけですぐに認識され、1 秒ほど待つ必要がないことだ。このオプションをオフにしなくても、オプション '@option{timeoutlen}' と '@option{ttimeoutlen}' を変更してみるとよい。
@quotation
@strong{Note:} @*
'@option{esckeys}' がオフのときでも、どのキーをマッピングすることもできるが、そのままではカーソルキーは使用できないことに注意。
@end quotation
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に、オフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'eventignore'* *'ei'*
'eventignore' 'ei'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+autocmd|
			feature}
	A list of autocommand event names, which are to be ignored.
	When set to "all" or when "all" is one of the items, all autocommand
	events are ignored, autocommands will not be executed.
	Otherwise this is a comma separated list of event names.  Example: >
	    :set ei=WinEnter,WinLeave
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'eventignore'}
@anchor{'ei'}
@cindex 'eventignore'
@cindex 'ei'
@item 'eventignore' 'ei'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+autocmd| 機能付きでコンパイルされたときのみ有効@}

Autocommand のイベント名のうち、無視したいもののリスト。"all" が含まれていると全ての autocommand のイベントが無視され、autocommand は実行されなくなる。それ以外では、値はイベント名のコンマ区切りのリストである。例:
@example
:set ei=WinEnter,WinLeave
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				 *'expandtab'* *'et'* *'noexpandtab'* *'noet'*
'expandtab' 'et'	boolean	(default off)
			local to buffer
			{not in Vi}
	In Insert mode: Use the appropriate number of spaces to insert a
	<Tab>.  Spaces are used in indents with the '>' and '<' commands and
	when 'autoindent' is on.  To insert a real tab when 'expandtab' is
	on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.
	This option is reset when the 'paste' option is set and restored when
	the 'paste' option is reset.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'expandtab'}
@anchor{'et'}
@anchor{'noexpandtab'}
@anchor{'noet'}
@cindex 'expandtab'
@cindex 'et'
@cindex 'noexpandtab'
@cindex 'noet'
@item 'expandtab' 'et'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

挿入モードで @key{<Tab>} を挿入するとき、代わりに適切な数の空白を使う。また、コマンド '>' や '<' によるインデントや、オプション '@option{autoindent}' がオンのときのインデントでも空白を使う。'@option{expandtab}' がオンのときに本当のタブを挿入するには、@kbd{CTRL-V}@key{<Tab>} を使うこと。|:retab| と |ins-expandtab| も参照。

このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、'@option{paste}' オプションがリセットされた際には復元される。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'exrc'* *'ex'* *'noexrc'* *'noex'*
'exrc' 'ex'		boolean (default off)
			global
			{not in Vi}
	Enables the reading of .vimrc, .exrc and .gvimrc in the current
	directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'exrc'}
@anchor{'ex'}
@anchor{'noexrc'}
@anchor{'noex'}
@cindex 'exrc'
@cindex 'ex'
@cindex 'noexrc'
@cindex 'noex'
@item 'exrc' 'ex'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

カレントディレクトリ内のファイル @file{.vimrc}, @file{.exrc} や @file{.gvimrc} 等の読み込みを有効にする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Setting this option is a potential security leak.  E.g., consider
	unpacking a package or fetching files from github, a .vimrc in there
	might be a trojan horse.  BETTER NOT SET THIS OPTION!
	Instead, define an autocommand in your .vimrc to set options for a
	matching directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションを設定することは潜在的な機密漏洩を意味する。例えば、パッケージを解凍することや github からファイルを取得することを考えると、その中に含まれる .vimrc はトロイの木馬になりえる。

このオプションは設定しないほうが良い！ @{訳注:太字で強調@} その代わりに自分の @file{.vimrc} で、ディレクトリ毎のオプションを設定する autocommand を定義するべきである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If you do switch this option on you should also consider setting the
	'secure' option (see |initialization|).
	Also see |.vimrc| and |gui-init|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションをオンにするなら、オプション '@option{secure}' もオンにするよう検討すること (|initialization| を参照)。|.vimrc| と |gui-init| も参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'fileencoding'* *'fenc'* *E213*
'fileencoding' 'fenc'	string (default: "")
			local to buffer
			{only available when compiled with the |+multi_byte|
			feature}
			{not in Vi}
	Sets the character encoding for the file of this buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fileencoding'}
@anchor{'fenc'}
@anchor{E213}
@cindex 'fileencoding'
@cindex 'fenc'
@cindex E213
@item 'fileencoding' 'fenc'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

カレントバッファのファイルの文字エンコーディングを設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When 'fileencoding' is different from 'encoding', conversion will be
	done when writing the file.  For reading see below.
	When 'fileencoding' is empty, the same value as 'encoding' will be
	used (no conversion when reading or writing a file).
	No error will be given when the value is set, only when it is used,
	only when writing a file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{fileencoding}' と '@option{encoding}' が異なるとき、ファイルの書き出しの際に文字エンコーディングの変換が行われる。読み込みについては後述。

'@option{fileencoding}' が空の場合、'@option{encoding}' と同じ値が使われる (ファイルの読み書きの際に変換をしない)。

値が設定されたときにはエラーは発生しない。使われるとき、つまりファイルに書き込むときのみ発生する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Conversion will also be done when 'encoding' and 'fileencoding' are
	both a Unicode encoding and 'fileencoding' is not utf-8.  That's
	because internally Unicode is always stored as utf-8.
		WARNING: Conversion can cause loss of information!  When
		'encoding' is "utf-8" or another Unicode encoding, conversion
		is most likely done in a way that the reverse conversion
		results in the same text.  When 'encoding' is not "utf-8" some
		characters may be lost!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' と '@option{fileencoding}' がともに Unicode エンコーディングであり、'@option{fileencoding}' が utf-8 でない場合にも変換が行われる。内部では Unicode は常に utf-8 で保持されているためである。
@quotation
@strong{警告:} @*
文字エンコーディングを変換すると、情報が失われるおそれがある！'@option{encoding}' が "@var{utf-8}" など Unicode エンコーディングだと、変換は大抵成功するし、逆変換をしても同じテキストになる。'@option{encoding}' が "@var{utf-8}" でないときは、失われる文字があるかもしれない！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	See 'encoding' for the possible values.  Additionally, values may be
	specified that can be handled by the converter, see
	|mbyte-conversion|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定可能な値については '@option{encoding}' を参照。それらに加え、変換ツールで変換可能なエンコーディングの値も設定できる。|mbyte-conversion| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When reading a file 'fileencoding' will be set from 'fileencodings'.
	To read a file in a certain encoding it won't work by setting
	'fileencoding', use the |++enc| argument.  One exception: when
	'fileencodings' is empty the value of 'fileencoding' is used.
	For a new file the global value of 'fileencoding' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを読み込むときは、'@option{fileencoding}' は '@option{fileencodings}' の値の中から設定される。あるエンコーディングのファイルを読み込むには '@option{fileencoding}' を設定してもだめで、引数 |++enc| を使う。

1 つの例外:	'@option{fileencodings}' が空のときは '@option{fileencoding}' の値が使われる。新規ファイルに対しては '@option{fileencoding}' のグローバルな値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Prepending "8bit-" and "2byte-" has no meaning here, they are ignored.
	When the option is set, the value is converted to lowercase.  Thus
	you can set it with uppercase values too.  '_' characters are
	replaced with '-'.  If a name is recognized from the list for
	'encoding', it is replaced by the standard name.  For example
	"ISO8859-2" becomes "iso-8859-2".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"8bit-" や "2byte-" を頭に付けてもここでは意味がなく、無視される。オプションが設定されると、値は小文字に変換される。そのため、値を大文字で設定してもよい。アンダースコア (下線) '_' はハイフン '-' に変換される。値が '@option{encoding}' の値に含まれることが認識されると、値は標準の名前に変換される。例えば "ISO_88592" は "iso-8859-2" になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When this option is set, after starting to edit a file, the 'modified'
	option is set, because the file would be different when written.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの編集を始めた後にこのオプションを設定すると、'@option{modified}' がオンになる。なぜならそのファイルの中身は、書き込まれるときには違うものになるからである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Keep in mind that changing 'fenc' from a modeline happens
	AFTER the text has been read, thus it applies to when the file will be
	written.  If you do set 'fenc' in a modeline, you might want to set
	'nomodified' to avoid not being able to ":q".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{fenc}' をモードラインで設定した場合、設定はファイルが読み込まれた後で変更されるので注意すること。つまり設定された値はそのファイルを保存するときになってから効果を発揮する。もし '@option{fenc}' をモードラインで設定するなら '@option{nomodified}' も同時に設定すると "@command{:q}" での終了を妨げないのでいいかもしれない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option can not be changed when 'modifiable' is off.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは 'modifiable' がオフのときには変更することができない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'fe'*
	NOTE: Before version 6.0 this option specified the encoding for the
	whole of Vim, this was a mistake.  Now use 'encoding' instead.  The
	old short name was 'fe', which is no longer used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fe'}
@cindex 'fe'
@quotation
@strong{Note:} @*
Vim version 6.0 以前では、このオプションは Vim 全体の文字エンコーディングを指定していたことに注意。これは誤りだった。そのためには代わりに '@option{encoding}' を使うこと。古い省略形式の名前は 'fe' だが、これはもう使われていない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'fileencodings'* *'fencs'*
'fileencodings' 'fencs'	string (default: "ucs-bom",
				    "ucs-bom,utf-8,default,latin1" when
				    'encoding' is set to a Unicode value)
			global
			{only available when compiled with the |+multi_byte|
			feature}
			{not in Vi}
	This is a list of character encodings considered when starting to edit
	an existing file.  When a file is read, Vim tries to use the first
	mentioned character encoding.  If an error is detected, the next one
	in the list is tried.  When an encoding is found that works,
	'fileencoding' is set to it.  If all fail, 'fileencoding' is set to
	an empty string, which means the value of 'encoding' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fileencodings'}
@anchor{'fencs'}
@cindex 'fileencodings'
@cindex 'fencs'
@item 'fileencodings' 'fencs'
文字列 (既定値: "@var{ucs-bom}", '@option{encoding}' の値が Unicode に設定されたときは "@var{ucs-bom,utf-8,default,latin1}") @*
グローバル @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

値は、既存のファイルの編集を開始するときに考慮される文字エンコーディングのリストである。ファイルが読み込まれると、Vim は指定されたうちの先頭の文字エンコーディングを使おうとする。そのときエラーが発見されると、値のリスト内で次に並んでいるエンコーディングが試される。

あるエンコーディングでうまくいくとわかると、'@option{fileencoding}' がそれに設定される。すべてのエンコーディングが失敗すると '@option{fileencoding}' は空文字列に設定され、'@option{encoding}' の値が使われることになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		WARNING: Conversion can cause loss of information!  When
		'encoding' is "utf-8" (or one of the other Unicode variants)
		conversion is most likely done in a way that the reverse
		conversion results in the same text.  When 'encoding' is not
		"utf-8" some non-ASCII characters may be lost!  You can use
		the |++bad| argument to specify what is done with characters
		that can't be converted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
文字エンコーディングを変換すると、情報が失われるおそれがある！'@option{encoding}' が "@var{utf-8}" だと、変換は大抵成功するし、逆変換をしても同じテキストになる。'@option{encoding}' が "@var{utf-8}" でないときは、非 ASCII 文字が失われるかもしれない！変換できない文字をどう扱うかは引数 |++bad| で指定することができる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	For an empty file or a file with only ASCII characters most encodings
	will work and the first entry of 'fileencodings' will be used (except
	"ucs-bom", which requires the BOM to be present).  If you prefer
	another encoding use an BufReadPost autocommand event to test if your
	preferred encoding is to be used.  Example: >
		au BufReadPost * if search('\S', 'w') == 0 |
			\ set fenc=iso-2022-jp | endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
空ファイルや ASCII 文字のみのファイルではほとんどのエンコーディングでうまくいくので、'@option{fileencodings}' の最初の値が使われる ("@var{ucs-bom}" を除く。これは BOM がなければいけない)。他のエンコーディングがよければ自動コマンドイベント BufReadPost を使って、そのエンコーディングが使われるかどうかを判定すること。例:
@verbatim
au BufReadPost * if search('\S', 'w') == 0 |
  \ set fenc=iso-2022-jp | endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	This sets 'fileencoding' to "iso-2022-jp" if the file does not contain
	non-blank characters.
	When the |++enc| argument is used then the value of 'fileencodings' is
	not used.
	Note that 'fileencodings' is not used for a new file, the global value
	of 'fileencoding' is used instead.  You can set it with: >
		:setglobal fenc=iso-8859-2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは、ファイルが空白文字しか含まないとき '@option{fileencoding}' を "@var{iso-2022-jp}" に設定する。引数 |++enc| を使ったときは '@option{fileencodings}' の値は考慮されない。新規ファイルには '@option{fileencodings}' は適用されないことに注意。代わりに '@option{fileencoding}' のグローバルな値が適用される。これを設定するには:
@example
:setglobal fenc=iso-8859-2
@end example
とする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	This means that a non-existing file may get a different encoding than
	an empty file.
	The special value "ucs-bom" can be used to check for a Unicode BOM
	(Byte Order Mark) at the start of the file.  It must not be preceded
	by "utf-8" or another Unicode encoding for this to work properly.
	An entry for an 8-bit encoding (e.g., "latin1") should be the last,
	because Vim cannot detect an error, thus the encoding is always
	accepted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは存在しないファイルが空のファイルとは異なるエンコーディングになることを意味する。

ファイル先頭に Unicode の BOM (Byte Order Mark: バイト順マーク) があるかどうか調べるには、"@var{ucs-bom}" という特別な値が使える。この値を "@var{utf-8}" 等の Unicode 系の値よりも後に指定すると正しく機能しない。

8 ビットエンコーディング ("latin1" など) の項目はリストの最後に書かなければならない。そうしないと Vim がエラーを検出できず、常にそのエンコーディングが適用されてしまうためである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The special value "default" can be used for the encoding from the
	environment.  This is the default value for 'encoding'.  It is useful
	when 'encoding' is set to "utf-8" and your environment uses a
	non-latin1 encoding, such as Russian.
	When 'encoding' is "utf-8" and a file contains an illegal byte
	sequence it won't be recognized as UTF-8.  You can use the |8g8|
	command to find the illegal byte sequence.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特別な値 "@var{default}" を使うと環境からのエンコーディングが適用される。これが '@option{encoding}' の既定の値である。これは '@option{encoding}' が "@var{utf-8}" に設定され、環境がロシア語など latin1 でないエンコーディングを使っているときに便利である。

'@option{encoding}' が "@var{utf-8}" のとき、ファイルが不正なバイト列を含んでいるとそのファイルは UTF-8 と認識されない。コマンド |8g8| を使うと不正なバイト列を見つけることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	WRONG VALUES:			WHAT'S WRONG:
		latin1,utf-8		"latin1" will always be used
		utf-8,ucs-bom,latin1	BOM won't be recognized in an utf-8
					file
		cp1250,latin1		"cp1250" will always be used
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item 間違った値: @tab どこが間違っているか:
@item latin1,utf-8 @tab 常に "latin1" が使われてしまう
@item utf-8,ucs-bom,latin1 @tab utf-8 のファイルで BOM が認識されない
@item cp1250,latin1 @tab 常に "cp1250" が使われてしまう
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If 'fileencodings' is empty, 'fileencoding' is not modified.
	See 'fileencoding' for the possible values.
	Setting this option does not have an effect until the next time a file
	is read.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{fileencodings}' が空のときには '@option{fileencoding}' は変更されない。設定可能な値については '@option{encoding}' を参照すること。このオプションを設定しても次にファイルを読み込むときまでは効果がない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'fileformat'* *'ff'*
'fileformat' 'ff'	string (MS-DOS, MS-Windows, OS/2 default: "dos",
				Unix default: "unix",
				Macintosh default: "mac")
			local to buffer
			{not in Vi}
	This gives the <EOL> of the current buffer, which is used for
	reading/writing the buffer from/to a file:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fileformat'}
@anchor{'ff'}
@cindex 'fileformat'
@cindex 'ff'
@item 'fileformat' 'ff'
文字列 (
@multitable @columnfractions .7 .3
@item MS-DOS, MS-Windows, OS/2 での既定値: @tab "dos",
@item Unix での既定値: @tab "unix",
@item Macintosh での既定値: @tab "mac")
@end multitable
バッファについてローカル @*
@{Vi にはない@}

バッファにファイルを読み込んだり、バッファからファイルに書き込んだりするときに使われる <EOL> を、カレントバッファについて設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	    dos	    <CR> <NL>
	    unix    <NL>
	    mac	    <CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item dos @tab <CR> <NL>
@item unix @tab <NL>
@item mac @tab <CR>
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When "dos" is used, CTRL-Z at the end of a file is ignored.
	See |file-formats| and |file-read|.
	For the character encoding of the file see 'fileencoding'.
	When 'binary' is set, the value of 'fileformat' is ignored, file I/O
	works like it was set to "unix".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@var{dos}" が使われたとき、ファイル末尾の CTRL-Z は無視される。|file-formats| と |file-read| を参照。

ファイルの文字エンコーディングについてはオプション '@option{fileencoding}' を参照。

'@option{binary}' がオンのときは、'@option{fileformat}' の実際の値は無視され、ファイルの読み書きは値が "@var{unix}" に設定されたときのように行われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This option is set automatically when starting to edit a file and
	'fileformats' is not empty and 'binary' is off.
	When this option is set, after starting to edit a file, the 'modified'
	option is set, because the file would be different when written.
	This option can not be changed when 'modifiable' is off.
	For backwards compatibility: When this option is set to "dos",
	'textmode' is set, otherwise 'textmode' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの編集を始めたときに '@option{fileformats}' が空でなく、'@option{binary}' がオフならば、'@option{fileformat}' は自動的に設定される。

ファイルの編集を始めた後にこのオプションを設定すると、'@option{modified}' がオンになる。なぜならそのファイルの中身は、書き込まれるときには違うものになるからである。このオプションは、'@option{modifiable}' がオフのときは変更できない。

後方互換性のために: このオプションが "@var{dos}" になると '@option{textmode}' がオンになり、それ以外では '@option{textmode}' はオフになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'fileformats'* *'ffs'*
'fileformats' 'ffs'	string (default:
				Vim+Vi	MS-DOS, MS-Windows OS/2: "dos,unix",
				Vim	Unix: "unix,dos",
				Vim	Mac: "mac,unix,dos",
				Vi	Cygwin: "unix,dos",
				Vi	others: "")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fileformats'}
@anchor{'ffs'}
@cindex 'fileformats'
@cindex 'ffs'
@item 'fileformats' 'ffs'
文字列 (既定値:
@multitable @columnfractions .7 .3
@item Vim+Vi MS-DOS, MS-Windows OS/2: @tab "dos,unix",
@item Vim Unix: @tab "unix,dos",
@item Vim Mac: @tab "mac,unix,dos",
@item Vi Cygwin: @tab "unix,dos",
@item Vi その他: @tab "")
@end multitable
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This gives the end-of-line (<EOL>) formats that will be tried when
	starting to edit a new buffer and when reading a file into an existing
	buffer:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
想定される改行 (<EOL>) の種類を指定する。これは新しいバッファの編集を始めたときと、ファイルを既存のバッファに読み込んだときに使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- When empty, the format defined with 'fileformat' will be used
	  always.  It is not set automatically.
	- When set to one name, that format will be used whenever a new buffer
	  is opened.  'fileformat' is set accordingly for that buffer.  The
	  'fileformats' name will be used when a file is read into an existing
	  buffer, no matter what 'fileformat' for that buffer is set to.
	- When more than one name is present, separated by commas, automatic
	  <EOL> detection will be done when reading a file.  When starting to
	  edit a file, a check is done for the <EOL>:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item 値が空のときは、オプション '@option{fileformat}' で指定された種類の改行が常に使われる。自動的な設定は行われない。
@item 1 種類の名前が設定されているときは、新しいバッファが開かれるときには常にその種類の改行が使われる。そのバッファでは、'@option{fileformat}' はこのオプションに従って設定される。'@option{fileformats}' は、ファイルを既存のバッファに読み込むときに使われる。その際、そのバッファで '@option{fileformat}' が何に設定されていても関係ない。
@item 複数の名前がコンマで区切られて設定されているときは、ファイルを読み込むときに <EOL> の判別が自動的に行われる。Vim はファイルの編集を始めるときに、<EOL> を以下のように調べる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  1. If all lines end in <CR><NL>, and 'fileformats' includes "dos",
	     'fileformat' is set to "dos".
	  2. If a <NL> is found and 'fileformats' includes "unix", 'fileformat'
	     is set to "unix".  Note that when a <NL> is found without a
	     preceding <CR>, "unix" is preferred over "dos".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
全ての行が <CR><NL> で終わっており、かつ '@option{fileformats}' が "@var{dos}" を含むなら、'@option{fileformat}' は "@var{dos}" になる。
@item
改行に <NL> が使われていて、かつ '@option{fileformats}' が "@var{unix}" を含むなら、'@option{fileformat}' は "@var{unix}" になる。
@quotation
@strong{Note:} @*
<NL> があって、その前に <CR> がないと、"@var{dos}" より "@var{unix}" が優先的に使われることに注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  3. If 'fileformat' has not yet been set, and if a <CR> is found, and
	     if 'fileformats' includes "mac", 'fileformat' is set to "mac".
	     This means that "mac" is only chosen when:
	      "unix" is not present or no <NL> is found in the file, and
	      "dos" is not present or no <CR><NL> is found in the file.
	     Except: if "unix" was chosen, but there is a <CR> before
	     the first <NL>, and there appear to be more <CR>s than <NL>s in
	     the first few lines, "mac" is used.
	  4. If 'fileformat' is still not set, the first name from
	     'fileformats' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{fileformat}' がまだ設定されておらず、ファイル内に 1 つ <CR> が見つかり @{訳注: 後ろに <NL> が続かない@} 、'@option{fileformats}' に "@var{mac}" が含まれているときは、'@option{fileformat}' は "@var{mac}" に設定される。

つまり "@var{mac}" が選択されるのは: "@var{unix}" が含まれていないか <NL> がファイルに無い、そして "@var{dos}" が含まれていないか <CR><NL> がファイルに無いときである。

ただし: "@var{unix}" が選択され、最初の <NL> よりも前に <CR> があり、最初の数行において <CR> の数が <NL> の数よりも多いときは、"@var{mac}" に設定される。
@item
それでも '@option{fileformat}' を決定できないときは、'@option{fileformats}' の中で最初に指定されている値が使われる。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  When reading a file into an existing buffer, the same is done, but
	  this happens like 'fileformat' has been set appropriately for that
	  file only, the option is not changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既存のバッファにファイルを読み込むときにも同じ経過をたどる。しかし '@option{fileformat}' は読み込まれるファイルについては適切に設定されるが、そのバッファでの値は変更されない。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'binary' is set, the value of 'fileformats' is not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{binary}' がオンのときは、'@option{fileformats}' は使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When Vim starts up with an empty buffer the first item is used.  You
	can overrule this by setting 'fileformat' in your .vimrc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が空のバッファで起動されたときは最初の項目が使われる。@file{.vimrc} 内で '@option{fileformat}' を設定することでこれを変更することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For systems with a Dos-like <EOL> (<CR><NL>), when reading files that
	are ":source"ed and for vimrc files, automatic <EOL> detection may be
	done:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
DOS 形式の <EOL> (<CR><NL>) のシステムでは、コマンド "@command{:source}" で読み込まれるファイルと、ファイル @file{vimrc} については、<EOL> の判別が自動的に行われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- When 'fileformats' is empty, there is no automatic detection.  Dos
	  format will be used.
	- When 'fileformats' is set to one or more names, automatic detection
	  is done.  This is based on the first <NL> in the file: If there is a
	  <CR> in front of it, Dos format is used, otherwise Unix format is
	  used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item '@option{fileformats}' が空のときは、自動設定は行われない。常に DOS 形式の改行が使われる。
@item '@option{fileformats}' の値に 1 種類以上の名前が設定されているときは、自動設定が行われる。これはファイル内の 1 個目の <NL> に関して行われる。その前に <CR> があるときは DOS 形式が使われ、そうでなければ Unix 形式が使われる。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Also see |file-formats|.
	For backwards compatibility: When this option is set to an empty
	string or one format (no comma is included), 'textauto' is reset,
	otherwise 'textauto' is set.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
また |file-formats| も参照。

後方互換性のために: このオプションに、空の文字列か 1 種類だけの名前が設定されたとき (コンマが含まれていないとき) には、'@option{textauto}' はオフになる。そうでなければ '@option{textauto}' はオンになる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		*'fileignorecase'* *'fic'* *'nofileignorecase'* *'nofic'*
'fileignorecase' 'fic'	boolean	(default on for systems where case in file
				 names is normally ignored)
			global
			{not in Vi}
	When set case is ignored when using file names and directories.
	See 'wildignorecase' for only ignoring case when doing completion.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fileignorecase'}
@anchor{'fic'}
@anchor{'nofileignorecase'}
@anchor{'nofic'}
@cindex 'fileignorecase'
@cindex 'fic'
@cindex 'nofileignorecase'
@cindex 'nofic'
@item 'fileignorecase' 'fic'
切替 (既定値: ファイル名の大文字と小文字の違いを無視するシステムではオン) @*
グローバル @*
@{Vi にはない@}

このオプションが設定すると、ファイル名とディレクトリ名の大文字と小文字の違いが無視される。補完で大文字と小文字の違いを無視したい場合は '@option{wildignorecase}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'filetype'* *'ft'*
'filetype' 'ft'		string (default: "")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+autocmd|
			feature}
	When this option is set, the FileType autocommand event is triggered.
	All autocommands that match with the value of this option will be
	executed.  Thus the value of 'filetype' is used in place of the file
	name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'filetype'}
@anchor{'ft'}
@cindex 'filetype'
@cindex 'ft'
@item 'filetype' 'ft'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+autocmd| 機能付きでコンパイルされたときのみ有効@}

このオプションが変更されると autocommand のイベント FileType が発生し、このオプションの値にマッチする全ての autocommand が実行される。つまり、@{訳注: 普通 autocommand が実行されるのはファイル名がマッチしたときだが@} '@option{filetype}' の値がファイル名の代わりに使われる。

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Otherwise this option does not always reflect the current file type.
	This option is normally set when the file type is detected.  To enable
	this use the ":filetype on" command. |:filetype|
	Setting this option to a different value is most useful in a modeline,
	for a file for which the file type is not automatically recognized.
	Example, for in an IDL file:
		/* vim: set filetype=idl : */ ~
	|FileType| |filetypes|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしこのオプションはカレントファイルのファイルタイプを常に反映しているわけではない。普通このオプションは、ファイルタイプが判別されたときに設定される。判別を有効にするにはコマンド "@command{:filetype on}" を使うこと |:filetype|。

ファイルタイプが自動的に認識されないファイルのモードラインで、このオプションを異なった値に設定すると非常に便利である。例えば、IDL ファイルの中でこうする。
@verbatim
/* vim: set filetype=idl : */
@end verbatim
|FileType| |filetypes|

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When a dot appears in the value then this separates two filetype
	names.  Example:
		/* vim: set filetype=c.doxygen : */ ~
	This will use the "c" filetype first, then the "doxygen" filetype.
	This works both for filetype plugins and for syntax files.  More than
	one dot may appear.
	This option is not copied to another buffer, independent of the 's' or
	'S' flag in 'cpoptions'.
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値の中にドットが現れると、それが2つのファイルタイプ名の区切りとなる。例:
@verbatim
/* vim: set filetype=c.doxygen : */
@end verbatim
こうすると最初にファイルタイプ "c" を使い、次にファイルタイプ "doxygen" を使う。これはファイルタイププラグインと構文ファイル両方に適用される。2 個以上のドットが現れてもよい。

このオプションは '@option{cpoptions}' のフラグ '@var{s}' や '@var{S}' に関わらず、別のバッファにはコピーされない。通常のファイル名文字だけが使える。"/\*?[|<>" は不正である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'fillchars'* *'fcs'*
'fillchars' 'fcs'	string	(default "vert:|,fold:-")
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			and |+folding| features}
	Characters to fill the statuslines and vertical separators.
	It is a comma separated list of items:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fillchars'}
@anchor{'fcs'}
@cindex 'fillchars'
@cindex 'fcs'
@item 'fillchars' 'fcs'
文字列 (既定では "vert:|,fold:-") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能と |+folding| 機能付きでコンパイルされたときのみ有効@}

ステータス行と垂直分割の区切りを埋める文字を設定する。値にはキーワードをコンマで区切って指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	  item		default		Used for ~
	  stl:c		' ' or '^'	statusline of the current window
	  stlnc:c	' ' or '='	statusline of the non-current windows
	  vert:c	'|'		vertical separators |:vsplit|
	  fold:c	'-'		filling 'foldtext'
	  diff:c	'-'		deleted lines of the 'diff' option
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .20 .55
@item キーワード @tab 既定値 @tab 変更の対象
@item stl:文字 @tab ' ' か '^' @tab カレントウィンドウのステータス行
@item stlnc:文字 @tab ' ' か '=' @tab 非カレントウィンドウのステータス行
@item vert:文字 @tab '|' @tab 垂直分割の区切り |:vsplit|
@item fold:文字 @tab '-' @tab '@option{foldtext}' での空白部分
@item diff:文字 @tab '-' @tab '@option{diff}' での削除された行
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Any one that is omitted will fall back to the default.  For "stl" and
	"stlnc" the space will be used when there is highlighting, '^' or '='
	otherwise.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定されなかったキーワードについては、既定値が使われる。"stl" と "stlnc" には、強調表示が行われているときは空白が、行われていないときは '^' と '=' がそれぞれ使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
	    :set fillchars=stl:^,stlnc:=,vert:\|,fold:-,diff:-
<	This is similar to the default, except that these characters will also
	be used when there is highlighting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set fillchars=stl:^,stlnc:=,vert:\|,fold:-,diff:-
@end example
これは既定値と似ているが、強調表示が行われていてもこれらの文字が使われる点が異なっている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	for "stl" and "stlnc" only single-byte values are supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"stl" と "stlnc" に対しては 1 バイトの値しか使用できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The highlighting used for these items:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
強調表示が行われるものおよびその属するグループ:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  item		highlight group ~
	  stl:c		StatusLine		|hl-StatusLine|
	  stlnc:c	StatusLineNC		|hl-StatusLineNC|
	  vert:c	VertSplit		|hl-VertSplit|
	  fold:c	Folded			|hl-Folded|
	  diff:c	DiffDelete		|hl-DiffDelete|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item キーワード @tab 強調表示グループ
@item stl:文字 @tab StatusLine  |hl-StatusLine|
@item stlnc:文字 @tab StatusLineNC  |hl-StatusLineNC|
@item vert:文字 @tab VertSplit  |hl-VertSplit|
@item fold:文字 @tab Folded  |hl-Folded|
@item diff:文字 @tab DiffDelete  |hl-DiffDelete|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		*'fixendofline'* *'fixeol'* *'nofixendofline'* *'nofixeol'*
'fixendofline' 'fixeol'	boolean	(default on)
			local to buffer
			{not in Vi}
	When writing a file and this option is on, <EOL> at the end of file
	will be restored if missing. Turn this option off if you want to
	preserve the situation from the original file.
	When the 'binary' option is set the value of this option doesn't
	matter.
	See the 'endofline' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fixendofline'}
@anchor{'fixeol'}
@anchor{'nofixendofline'}
@anchor{'nofixeol'}
@cindex 'fixendofline'
@cindex 'fixeol'
@cindex 'nofixendofline'
@cindex 'nofixeol'
@item 'fixendofline' 'fixeol'
切替 (既定ではオン) @*
バッファについてローカル @*
@{Vi にはない@}

このオプションがオンの時にファイルを書き込むとファイル末尾に <EOL> が無い場合に復元される。もしオリジナルのファイルのまま維持したいのであればこのオプションをオフに切り替える。

'@option{binary}' オプションが設定されているときはこのオプションは意味を成さない。オプション '@option{endofline}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'fkmap'* *'fk'* *'nofkmap'* *'nofk'*
'fkmap' 'fk'		boolean (default off)			*E198*
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	When on, the keyboard is mapped for the Farsi character set.
	Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
	toggle this option |i_CTRL-_|.  See |farsi.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fkmap'}
@anchor{'fk'}
@anchor{'nofkmap'}
@anchor{'nofk'}
@cindex 'fkmap'
@cindex 'fk'
@cindex 'nofkmap'
@cindex 'nofk'
@anchor{E198}
@cindex E198
@item 'fkmap' 'fk'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

オンのとき、キーボードはペルシア文字セットにマップされる。普通、オプション '@option{allowrevins}' をオンにしておき、挿入モードでこのオプションをコマンド @kbd{CTRL-_} で切り替えられるようにする |i_CTRL-_|。|farsi.txt| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldclose'* *'fcl'*
'foldclose' 'fcl'	string (default "")
			global
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	When set to "all", a fold is closed when the cursor isn't in it and
	its level is higher than 'foldlevel'.  Useful if you want folds to
	automatically close when moving out of them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldclose'}
@anchor{'fcl'}
@cindex 'foldclose'
@cindex 'fcl'
@item 'foldclose' 'fcl'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

"@var{all}" に設定すると、カーソルが折り畳み区間の外に出たとき、その区間の折り畳みの深さがオプション '@option{foldlevel}' より大きければ折り畳みを行う。折り畳み区間の外に出るとき、自動的に折り畳みを行いたいときに便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldcolumn'* *'fdc'*
'foldcolumn' 'fdc'	number (default 0)
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	When non-zero, a column with the specified width is shown at the side
	of the window which indicates open and closed folds.  The maximum
	value is 12.
	See |folding|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldcolumn'}
@anchor{'fdc'}
@cindex 'foldcolumn'
@cindex 'fdc'
@item 'foldcolumn' 'fdc'
数値 (既定では 0) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

非 0 に設定されると、ウィンドウの端の指定された幅の列が折り畳みを (開いていても閉じていても) 表示する。最大値は 12 である。|folding| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'foldenable'* *'fen'* *'nofoldenable'* *'nofen'*
'foldenable' 'fen'	boolean (default on)
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	When off, all folds are open.  This option can be used to quickly
	switch between showing all text unfolded and viewing the text with
	folds (including manually opened or closed folds).  It can be toggled
	with the |zi| command.  The 'foldcolumn' will remain blank when
	'foldenable' is off.
	This option is set by commands that create a new fold or close a fold.
	See |folding|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldenable'}
@anchor{'fen'}
@anchor{'nofoldenable'}
@anchor{'nofen'}
@cindex 'foldenable'
@cindex 'fen'
@cindex 'nofoldenable'
@cindex 'nofen'
@item 'foldenable' 'fen'
切替 (既定ではオン) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

オフのときは、全ての折り畳みが開かれる。このオプションは、全てのテキストを折り畳みなしで見る状態とテキストの一部を折り畳んで見る (手動で開かれたり閉じられた折り畳みも含む) 状態を素早く切り替えるために使われる。

このオプションはコマンド |zi| で切り替えることができる。オプション '@option{foldenable}' がオフのときは、'@option{foldcolumn}' は空白のままである。このオプションは、新しい折り畳みを作ったり、折り畳みを閉じたりするコマンドによってオンにされる。|folding| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldexpr'* *'fde'*
'foldexpr' 'fde'	string (default: "0")
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			or |+eval| features}
	The expression used for when 'foldmethod' is "expr".  It is evaluated
	for each line to obtain its fold level.  See |fold-expr|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldexpr'}
@anchor{'fde'}
@cindex 'foldexpr'
@cindex 'fde'
@item 'foldexpr' 'fde'
文字列 (既定では "0") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能と |+eval| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{foldmethod}' が "@var{expr}" のときに使われる expression。これは折り畳みの深さを求めるために各行について評価される。|fold-expr| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| if set from a
	modeline, see |sandbox-option|.
	This option can't be set from a |modeline| when the 'diff' option is
	on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。'@option{diff}' がオンのとき、このオプションをモードライン |modeline| で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	It is not allowed to change text or jump to another window while
	evaluating 'foldexpr' |textlock|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{foldexpr}' を評価している最中にテキストを変更したり他のウィンドウへジャンプすることは許されていない。|textlock|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldignore'* *'fdi'*
'foldignore' 'fdi'	string (default: "#")
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Used only when 'foldmethod' is "indent".  Lines starting with
	characters in 'foldignore' will get their fold level from surrounding
	lines.  White space is skipped before checking for this character.
	The default "#" works well for C programs.  See |fold-indent|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldignore'}
@anchor{'fdi'}
@cindex 'foldignore'
@cindex 'fdi'
@item'foldignore' 'fdi'
文字列 (既定では "#") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{foldmethod}' が "@var{indent}" のときのみ使われる。'@option{foldignore}' で指定した文字で始まる行の折り畳みの深さは、上下の行から決められる @{訳注: その行のインデントが上下と違っていても、一緒に折り畳めるようにするため@}。空白を無視した上で指定された文字の存在を調べる。既定値の "#" は C 言語プログラムについてはうまく動作する。|fold-indent|を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldlevel'* *'fdl'*
'foldlevel' 'fdl'	number (default: 0)
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Sets the fold level: Folds with a higher level will be closed.
	Setting this option to zero will close all folds.  Higher numbers will
	close fewer folds.
	This option is set by commands like |zm|, |zM| and |zR|.
	See |fold-foldlevel|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldlevel'}
@anchor{'fdl'}
@cindex 'foldlevel'
@cindex 'fdl'
@item 'foldlevel' 'fdl'
数値 (既定では 0) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

折り畳みの深さを設定する。指定した数値よりレベルの深い折り畳み区間は閉じられる。このオプションを 0 に設定すると、全ての折り畳みが閉じられる。

大きな数値を設定すると、それだけ閉じられる折り畳みの数は減る。

このオプションはコマンド |zm|, |zM| や |zR| によって設定される。|fold-foldlevel| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldlevelstart'* *'fdls'*
'foldlevelstart' 'fdls'	number (default: -1)
			global
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Sets 'foldlevel' when starting to edit another buffer in a window.
	Useful to always start editing with all folds closed (value zero),
	some folds closed (one) or no folds closed (99).
	This is done before reading any modeline, thus a setting in a modeline
	overrules this option.  Starting to edit a file for |diff-mode| also
	ignores this option and closes all folds.
	It is also done before BufReadPre autocommands, to allow an autocmd to
	overrule the 'foldlevel' value for specific files.
	When the value is negative, it is not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldlevelstart'}
@anchor{'fdls'}
@cindex 'foldlevelstart'
@cindex 'fdls'
@item 'foldlevelstart' 'fdls'
数値 (既定では -1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

ウィンドウで新しいバッファの編集を始めるときのオプション '@option{foldlevel}' を設定する。編集開始時に常に全ての折り畳みを閉じておいたり (そのためには 0 にする)、いくつかを閉じておいたり (1 にする)、全て開いておいたり (99 にする) するときに便利である。

これによる設定はモードラインの読み込み前に行われるので、モードライン内での設定はこのオプションによる設定より優先される。ファイルの編集を |diff-mode| で開始してもやはりこのオプションは無視され、全ての折り畳みが閉じられる。

またこれによる設定はイベント BufReadPre による autocommand よりも前に行われるので、特定のファイルについて autocommand で '@option{foldlevel}' を上書きできる。値が負のときには、このオプションは使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldmarker'* *'fmr'* *E536*
'foldmarker' 'fmr'	string (default: "{{{,}}}")
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	The start and end marker used when 'foldmethod' is "marker".  There
	must be one comma, which separates the start and end marker.  The
	marker is a literal string (a regular expression would be too slow).
	See |fold-marker|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldmarker'}
@anchor{'fmr'}
@anchor{E536}
@cindex 'foldmarker'
@cindex 'fmr'
@cindex E536
@item 'foldmarker' 'fmr'
文字列 (既定では "@{@{@{,@}@}@}") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{foldmethod}' が "@var{marker}" のときに使われる、折り畳み開始／終了を示すマーカー。開始マーカーと終了マーカーを分けるために、間に 1 個のコンマがなければいけない。マーカーはただの文字列である (正規表現では動作が遅すぎるだろう)。|fold-marker| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldmethod'* *'fdm'*
'foldmethod' 'fdm'	string (default: "manual")
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	The kind of folding used for the current window.  Possible values:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldmethod'}
@anchor{'fdm'}
@cindex 'foldmethod'
@cindex 'fdm'
@item 'foldmethod' 'fdm'
文字列 (既定では "manual") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

カレントウィンドウに適用される折り畳みの種類を設定する。指定可能な値は以下の通り:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|fold-manual|	manual	    Folds are created manually.
	|fold-indent|	indent	    Lines with equal indent form a fold.
	|fold-expr|	expr	    'foldexpr' gives the fold level of a line.
	|fold-marker|	marker	    Markers are used to specify folds.
	|fold-syntax|	syntax	    Syntax highlighting items specify folds.
	|fold-diff|	diff	    Fold text that is not changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .15 .6
@item |fold-manual| @tab manual @tab 折り畳みは手動で設定する。
@item |fold-indent| @tab indent @tab 等しいインデントの行で折り畳みを作る。
@item |fold-expr| @tab expr @tab オプション '@option{foldexpr}' で深さを設定する。
@item |fold-marker| @tab marker @tab マーカーで折り畳みを指定する。
@item |fold-syntax| @tab syntax @tab 構文強調表示のキーワードを使って指定する。
@item |fold-diff| @tab diff @tab 変更されていないテキストを折り畳む。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldminlines'* *'fml'*
'foldminlines' 'fml'	number (default: 1)
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Sets the number of screen lines above which a fold can be displayed
	closed.  Also for manually closed folds.  With the default value of
	one a fold can only be closed if it takes up two or more screen lines.
	Set to zero to be able to close folds of just one screen line.
	Note that this only has an effect on what is displayed.  After using
	"zc" to close a fold, which is displayed open because it's smaller
	than 'foldminlines', a following "zc" may close a containing fold.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldminlines'}
@anchor{'fml'}
@cindex 'foldminlines'
@cindex 'fml'
@item 'foldminlines' 'fml'
数値 (既定では 1) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

画面上の行数を設定する。設定された行数より大きな折り畳みだけが閉じた折り畳みとして表示される。手動で閉じられた折り畳みにも適用される。初期設定の 1 では、折り畳みが 2 行以上の場合のみ閉じることができる。ゼロに設定することで 1 行だけの折り畳みを閉じることができる。
@quotation
@strong{Note:} @*
このオプションは折り畳みの表示方法に関してのみ効果を持つ。例えば "zc" で折り畳みを閉じて、その折り畳みが '@option{foldminlines}' より小さいために開いた状態で表示されているとき、続けて "zc" を入力するとその外側の折り畳みを閉じることになる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldnestmax'* *'fdn'*
'foldnestmax' 'fdn'	number (default: 20)
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Sets the maximum nesting of folds for the "indent" and "syntax"
	methods.  This avoids that too many folds will be created.  Using more
	than 20 doesn't work, because the internal limit is 20.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldnestmax'}
@anchor{'fdn'}
@cindex 'foldnestmax'
@cindex 'fdn'
@item 'foldnestmax' 'fdn'
数値 (既定では 20) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

折り畳みの方法に "indent" や "syntax" が選ばれたときの、折り畳みの入れ子の深さの最大値を設定する。これにより折り畳みが膨大に作られるのを防ぐことができる。Vim 内部の制限が 20 になっているので、20 以上を設定しても無効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldopen'* *'fdo'*
'foldopen' 'fdo'	string (default: "block,hor,mark,percent,quickfix,
							     search,tag,undo")
			global
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	Specifies for which type of commands folds will be opened, if the
	command moves the cursor into a closed fold.  It is a comma separated
	list of items.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldopen'}
@anchor{'fdo'}
@cindex 'foldopen'
@cindex 'fdo'
@item 'foldopen' 'fdo'
文字列 (既定では "block,hor,mark,percent,quickfix,search,tag,undo") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

カーソルがコマンドによって、閉じている折り畳みの中に移動したとき、どの種類のコマンドだったら折り畳みが開かれるかを指定する。値はコンマ区切りのキーワードである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: When the command is part of a mapping this option is not used.
	Add the |zv| command to the mapping to get the same effect.
	(rationale: the mapping may want to control opening folds itself)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
コマンドがマッピングの一部として実行されたときは、このオプションは使われない。同じ効果を得るには、マッピングにコマンド |zv| を加えること。

(理由: 折り畳みを開くかどうかはマッピング自身でコントロールできたほうがいい)
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		item		commands ~
		all		any
		block		"(", "{", "[[", "[{", etc.
		hor		horizontal movements: "l", "w", "fx", etc.
		insert		any command in Insert mode
		jump		far jumps: "G", "gg", etc.
		mark		jumping to a mark: "'m", CTRL-O, etc.
		percent		"%"
		quickfix	":cn", ":crew", ":make", etc.
		search		search for a pattern: "/", "n", "*", "gd", etc.
				(not for a search pattern in a ":" command)
				Also for |[s| and |]s|.
		tag		jumping to a tag: ":ta", CTRL-T, etc.
		undo		undo or redo: "u" and CTRL-R
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item キーワード @tab 適用されるコマンド
@item all @tab 全て
@item block @tab "(", "@{", "[[", "[@{" 等
@item hor @tab 水平移動: "l", "w", "fx" 等
@item insert @tab 挿入モードのコマンド全て
@item jump @tab 長いジャンプ: "G", "gg" 等
@item mark @tab マークへのジャンプ: "'m", CTRL-O 等
@item percent @tab "%"
@item quickfix @tab ":cn", ":crew", ":make" 等
@item search @tab パターン検索: "/", "n", "*", "gd" 等 (":" コマンドでの検索パターンには適用されない) |[s| と |]s| にも適用される。
@item tag @tab タグへのジャンプ: ":ta", CTRL-T 等
@item undo @tab アンドゥ／リドゥ: "u" と CTRL-R
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When a movement command is used for an operator (e.g., "dl" or "y%")
	this option is not used.  This means the operator will include the
	whole closed fold.
	Note that vertical movements are not here, because it would make it
	very difficult to move onto a closed fold.
	In insert mode the folds containing the cursor will always be open
	when text is inserted.
	To close folds you can re-apply 'foldlevel' with the |zx| command or
	set the 'foldclose' option to "all".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
移動コマンドがオペレータとして使われたときは (例えば "dl" や "y%")、このオプションは使われない。つまりオペレータは閉じられている折り畳み全体を含む効果を持つということだ。
@quotation
@strong{Note:} @*
垂直方向の移動がここに含まれていないことに注意。それは垂直移動を含めると、閉じられた折り畳みの上への移動が困難になるからだ。挿入モードでテキストが挿入されるときには、カーソルが中に入っていった折り畳みは必ず開かれる。
@end quotation
折り畳みを閉じるには、|zx| でオプション 'foldlevel' を再適用するか、'@option{foldclose}' を "@var{all}" にすればよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'foldtext'* *'fdt'*
'foldtext' 'fdt'	string (default: "foldtext()")
			local to window
			{not in Vi}
			{not available when compiled without the |+folding|
			feature}
	An expression which is used to specify the text displayed for a closed
	fold.  See |fold-foldtext|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'foldtext'}
@anchor{'fdt'}
@cindex 'foldtext'
@cindex 'fdt'
@item 'foldtext' 'fdt'
文字列 (既定では "foldtext()") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+folding| 機能付きでコンパイルされたときのみ有効@}

閉じられた折り畳みのところに表示されるテキストを生成する expression を指定する。|fold-foldtext| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| if set from a
	modeline, see |sandbox-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	It is not allowed to change text or jump to another window while
	evaluating 'foldtext' |textlock|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{foldexpr}' を評価している最中にテキストを変更したり他のウィンドウへジャンプすることは許されていない。|textlock|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'formatexpr'* *'fex'*
'formatexpr' 'fex'	string (default "")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+eval|
			feature}
	Expression which is evaluated to format a range of lines for the |gq|
	operator or automatic formatting (see 'formatoptions').  When this
	option is empty 'formatprg' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'formatexpr'}
@anchor{'fex'}
@cindex 'formatexpr'
@cindex 'fex'
@item 'formatexpr' 'fex'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+eval| 機能つきでコンパイルされたときのみ有効@}

オペレータ |gq| や自動整形 ('@option{formatoptions}' 参照) で行の範囲を整形するために評価される式。このオプションが空だと '@option{formatprg}' が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The |v:lnum|  variable holds the first line to be formatted.
	The |v:count| variable holds the number of lines to be formatted.
	The |v:char|  variable holds the character that is going to be
		      inserted if the expression is being evaluated due to
		      automatic formatting.  This can be empty.  Don't insert
		      it yet!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item |v:lnum| @tab 変数は整形される最初の行を保持する。
@item |v:count| @tab 変数は整形される行数を保持する。
@item |v:char| @tab 変数は挿入されようとしている文字を保持する (式が自動整形のために評価されたときに使用される)。空文字の場合もある。この文字をバッファに挿入しないでください。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
		:set formatexpr=mylang#Format()
<	This will invoke the mylang#Format() function in the
	autoload/mylang.vim file in 'runtimepath'. |autoload|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set formatexpr=mylang#Format()
@end example
これは '@option{runtimepath}' にある autoload/mylang.vim 中の mylang#Format() 関数を呼ぶ。|autoload|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression is also evaluated when 'textwidth' is set and adding
	text beyond that limit.  This happens under the same conditions as
	when internal formatting is used.  Make sure the cursor is kept in the
	same spot relative to the text then!  The |mode()| function will
	return "i" or "R" in this situation.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
また、'@option{textwidth}' がオンになっていて、テキストを追加しているときにその値を超えたときにもこの式が評価される。これは内部整形が使われるときと同じ条件で起こる。この式を評価した後のカーソル位置がテキストに対して元の位置と同じになるようにすること。この式を評価中は、関数 |mode()| は "i" または "R" を返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
	
@ifset EN
	When the expression evaluates to non-zero Vim will fall back to using
	the internal format mechanism.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
	この関数が非ゼロを返すと Vim 内部の文章整形処理が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| when set from a
	modeline, see |sandbox-option|.  That stops the option from working,
	since changing the buffer text is not allowed.
	NOTE: This option is set to "" when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。その場合、サンドボックスの中ではバッファテキストの変更は許可されていないので、このオプションは機能しない。
@quotation
@strong{Note:} @*
This option is set to "" when 'compatible' is set.
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'formatoptions'* *'fo'*
'formatoptions' 'fo'	string (Vim default: "tcq", Vi default: "vt")
			local to buffer
			{not in Vi}
	This is a sequence of letters which describes how automatic
	formatting is to be done.  See |fo-table|.  When the 'paste' option is
	on, no formatting is done (like 'formatoptions' is empty).  Commas can
	be inserted for readability.
	To avoid problems with flags that are added in the future, use the
	"+=" and "-=" feature of ":set" |add-option-flags|.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'formatoptions'}
@anchor{'fo'}
@cindex 'formatoptions'
@cindex 'fo'
@item 'formatoptions' 'fo'
文字列 (Vim の既定値: "tcq", Vi の既定値: "vt") @*
バッファについてローカル @*
@{Vi にはない@}

自動整形の実行方法を決めるフラグの列である。|fo-table| を参照。オプション '@option{paste}' がオンのときは、('@option{formatoptions}' が空のときのように) 整形は行われない。読みやすくするために、フラグの間にコンマを挟んでもよい。

将来追加されるフラグによる問題を避けるため、コマンド "@command{:set}" では "+=" と "-=" を使うこと |add-option-flags|。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'formatlistpat'* *'flp'*
'formatlistpat' 'flp'	string (default: "^\s*\d\+[\]:.)}\t ]\s*")
			local to buffer
			{not in Vi}
	A pattern that is used to recognize a list header.  This is used for
	the "n" flag in 'formatoptions'.
	The pattern must match exactly the text that will be the indent for
	the line below it.  You can use |/\ze| to mark the end of the match
	while still checking more characters.  There must be a character
	following the pattern, when it matches the whole line it is handled
	like there is no match.
	The default recognizes a number, followed by an optional punctuation
	character and white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'formatlistpat'}
@anchor{'flp'}
@cindex 'formatlistpat'
@cindex 'flp'
@item 'formatlistpat' 'flp'
文字列 (既定では "^\s*\d\+[\]:.)@}\t ]\s*") @*
バッファについてローカル @*
@{Vi にはない@}

リストのヘッダーを認識するのに使われるパターン。'@option{formatoptions}' のフラグ "n" に適用される。

このパターンにマッチする部分が、それ以下の行のインデントとなる。|/\ze| を使うとマッチの終わりをマークしつつ、さらに文字のチェックを続けることができる。

@{
@strong{訳注:} 例えば、このオプションが既定の "^\s*\d\+[\]:.)@}\t ]\s*" のとき、マッチする部分は
@verbatim
    1.    the first item
          wraps
^^^^^^^^^^
@end verbatim
の部分である。既定の値に \ze をはさんで "^\s*\d\+[\]:.)@}\t ]\ze\s*" とすると、リストのヘッダーと認識されるパターンはまったく変わらないが、次行のインデントが \ze 以前の部分に等しくなる:
@verbatim
    1.    the first item
      wraps
^^^^^^
@end verbatim
@}

パターンの後ろに文字がなければならない。行全体がマッチすると、その行はマッチがないのと同様に扱われてしまう。

既定では数字 (後ろに句読点や空白があってもよい) を認識する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'formatprg'* *'fp'*
'formatprg' 'fp'	string (default "")
			global or local to buffer |global-local|
			{not in Vi}
	The name of an external program that will be used to format the lines
	selected with the |gq| operator.  The program must take the input on
	stdin and produce the output on stdout.  The Unix program "fmt" is
	such a program.
	If the 'formatexpr' option is not empty it will be used instead.
	Otherwise, if 'formatprg' option is an empty string, the internal
	format function will be used |C-indenting|.
	Environment variables are expanded |:set_env|.  See |option-backslash|
	about including spaces and backslashes.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'formatprg'}
@anchor{'fp'}
@cindex 'formatprg'
@cindex 'fp'
@item 'formatprg' 'fp'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

選択された行をコマンド |gq| で整形するのに使われる外部プログラムの名前を指定する。使われるプログラムは標準入力からテキストを読み込み、整形されたテキストを標準出力に出力しなければいけない。Unix のプログラム "fmt" が代表である。

オプション '@option{formatexpr}' が空でないならば、代わりにその値が使われる。このオプションが空ならば、内部の整形関数が使われる |C-indenting|。

環境変数は展開される |:set_env|。値に空白や '\' を含める方法については、|option-backslash| を参照。

このオプションは |modeline| や |sandbox| の中ではセキュリティ上の理由により設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'fsync'* *'fs'* *'nofsync'* *'nofs'*
'fsync' 'fs'		boolean	(default on)
			global
			{not in Vi}
	When on, the library function fsync() will be called after writing a
	file.  This will flush a file to disk, ensuring that it is safely
	written even on filesystems which do metadata-only journaling.  This
	will force the harddrive to spin up on Linux systems running in laptop
	mode, so it may be undesirable in some situations.  Be warned that
	turning this off increases the chances of data loss after a crash.  On
	systems without an fsync() implementation, this variable is always
	off.
	Also see 'swapsync' for controlling fsync() on swap files.
	'fsync' also applies to |writefile()|, unless a flag is used to
	overrule it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'fsync'}
@anchor{'fs'}
@anchor{'nofsync'}
@anchor{'nofs'}
@cindex 'fsync'
@cindex 'fs'
@cindex 'nofsync'
@cindex 'nofs'
@item 'fsync' 'fs'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

これがオンになっていると、ファイル書き込みの後にライブラリ関数 fsync() が呼ばれる。するとファイルがディスクにフラッシュされ、メタデータのみをジャーナルするファイルシステム上でも安全に書き込みが行われるようになる。

ラップトップモードで動作する Linux システム上で強制的にハードドライブを回転させることになるが、これはある種の状況では望ましくない。これをオフにするとクラッシュ時にデータを失う可能性を高めることに注意。fsync() の実装がないシステム上ではこの変数は常にオフである。

スワップファイルに対して fsync() をコントロールするには '@option{swapsync}' を参照。'@option{fsync}' オプションはまた、フラグがそれを無効にするために使われるまでは |writefile()| に適用する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
'gdefault' 'gd'		boolean	(default off)
			global
			{not in Vi}
	When on, the ":substitute" flag 'g' is default on.  This means that
	all matches in a line are substituted instead of one.  When a 'g' flag
	is given to a ":substitute" command, this will toggle the substitution
	of all or one match.  See |complex-change|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'gdefault'}
@anchor{'gd'}
@anchor{'nogdefault'}
@anchor{'nogd'}
@cindex 'gdefault'
@cindex 'gd'
@cindex 'nogdefault'
@cindex 'nogd'
@item 'gdefault' 'gd'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンのときは、コマンド "@command{:substitute}" のフラグ '@var{g}' がオンであることが既定になる。つまり行内のマッチする文字列が、1 番目のものだけでなく、全て置換される。"@command{:substitute}" に '@var{g}' が指定されると、逆に 1 番目のみを置換するようになる。|complex-change| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		command		'gdefault' on	'gdefault' off	~
		:s///		  subst. all	  subst. one
		:s///g		  subst. one	  subst. all
		:s///gg		  subst. all	  subst. one
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .4 .4
@headitem コマンド @tab 'gdefault' がオン @tab 'gdefault' がオフ
@item :s/// @tab 全て置換 @tab 最初だけ置換
@item :s///g @tab 最初だけ置換 @tab 全て置換
@item :s///gg @tab 全て置換 @tab 最初だけ置換
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: This option is reset when 'compatible' is set.
	DEPRECATED: Setting this option may break plugins that are not aware
	of this option.  Also, many users get confused that adding the /g flag
	has the opposite effect of that it normally does.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@quotation
@strong{DEPRECATED:} @*
このオプションを設定すると、このオプションを知らないプラグインを壊すかもしれない。また、多くのユーザーが、標準の /g とは正反対の効果を持っている /g フラグを付けることについて混乱する。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'grepformat'* *'gfm'*
'grepformat' 'gfm'	string	(default "%f:%l:%m,%f:%l%m,%f  %l%m")
			global
			{not in Vi}
	Format to recognize for the ":grep" command output.
	This is a scanf-like string that uses the same format as the
	'errorformat' option: see |errorformat|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'grepformat'}
@anchor{'gfm'}
@cindex 'grepformat'
@cindex 'gfm'
@item 'grepformat' 'gfm'
文字列 (既定では "%f:%l:%m,%f:%l%m,%f  %l%m") @*
グローバル @*
@{Vi にはない@}

コマンド "@command{:grep}" の出力を認識するための書式。オプション '@option{errorformat}' と同じく、関数 scanf 風の書式指定を使う。|errorformat| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'grepprg'* *'gp'*
'grepprg' 'gp'		string	(default "grep -n ",
					Unix: "grep -n $* /dev/null",
					Win32: "findstr /n" or "grep -n",
						      VMS: "SEARCH/NUMBERS ")
			global or local to buffer |global-local|
			{not in Vi}
	Program to use for the |:grep| command.  This option may contain '%'
	and '#' characters, which are expanded like when used in a command-
	line.  The placeholder "$*" is allowed to specify where the arguments
	will be included.  Environment variables are expanded |:set_env|.  See
	|option-backslash| about including spaces and backslashes.
	When your "grep" accepts the "-H" argument, use this to make ":grep"
	also work well with a single file: >
		:set grepprg=grep\ -nH
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'grepprg'}
@anchor{'gp'}
@cindex 'grepprg'
@cindex 'gp'
@item 'grepprg' 'gp'
文字列 (既定では "grep -n ",
@multitable @columnfractions .3 .7
@item Unix では: @tab "grep -n $* /dev/null",
@item Win32 では: @tab "findstr /n" か "grep -n",
@item VMS では: @tab "SEARCH/NUMBERS ")
@end multitable
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

コマンド "@command{:grep}" で使われるプログラム。このオプションは文字 '%' や '#' を含んでもよい。これらはコマンドラインで使われるときのように展開される。引数の挿入される場所を指定するには "$*" が使える。環境変数は展開される |:set_env|。値に空白や '\' を含める方法については、|option-backslash| を参照。

ユーザーの "grep" が引数 "-H" を認識するなら、"@command{:grep}" が 1 個のファイルに対しても適切に働くように、次のようにすること。
@example
:set grepprg=grep\ -nH
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Special value: When 'grepprg' is set to "internal" the |:grep| command
	works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
	|:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
	See also the section |:make_makeprg|, since most of the comments there
	apply equally to 'grepprg'.
	For Win32, the default is "findstr /n" if "findstr.exe" can be found,
	otherwise it's "grep -n".
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特別な値: '@option{grepprg}' が "@var{internal}" に設定されていると、|:grep| は |:vimgrep| と同様に、|:lgrep| は |:lvimgrep| と同様に、|:grepadd| は |:vimgrepadd|と同様に、|:lgrepadd| は |:lvimgrepadd| と同様に働くようになる。|:make_makeprg| も参照。そこの記述のほとんどが '@option{grepprg}' にも適用できるからだ。

Win32 では、"findstr.exe" が見つかるならば既定値は "findstr /n" である。見つからなければ "grep -n" である。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'guicursor'* *'gcr'* *E545* *E546* *E548* *E549*
'guicursor' 'gcr'	string	(default "n-v-c:block-Cursor/lCursor,
					ve:ver35-Cursor,
					o:hor50-Cursor,
					i-ci:ver25-Cursor/lCursor,
					r-cr:hor20-Cursor/lCursor,
					sm:block-Cursor
					-blinkwait175-blinkoff150-blinkon175",
				for MS-DOS and Win32 console:
					"n-v-c:block,o:hor50,i-ci:hor15,
					r-cr:hor30,sm:block")
			global
			{not in Vi}
			{only available when compiled with GUI enabled, and
			for MS-DOS and Win32 console}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guicursor'}
@anchor{'gcr'}
@anchor{E545}
@anchor{E546}
@anchor{E548}
@anchor{E549}
@cindex 'guicursor'
@cindex 'gcr'
@cindex E545
@cindex E546
@cindex E548
@cindex E549
@item 'guicursor' 'gcr'
文字列 (
@multitable @columnfractions .5 .5
@item 既定では @tab
"n-v-c:block-Cursor/lCursor,
ve:ver35-Cursor,
o:hor50-Cursor,
i-ci:ver25-Cursor/lCursor,
r-cr:hor20-Cursor/lCursor,
sm:block-Cursor
-blinkwait175-blinkoff150-blinkon175",
@item MS-DOS と Win32 コンソールでは: @tab
"n-v-c:block,o:hor50,i-ci:hor15,
r-cr:hor30,sm:block") 
@end multitable
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版か、MS-DOS または Win32 のコンソール版でのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This option tells Vim what the cursor should look like in different
	modes.  It fully works in the GUI.  In an MSDOS or Win32 console, only
	the height of the cursor can be changed.  This can be done by
	specifying a block cursor, or a percentage for a vertical or
	horizontal cursor.
	For a console the 't_SI', 't_SR', and 't_EI' escape sequences are
	used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のそれぞれのモード内でのカーソルの外観を指定する。GUI 上では完全に機能する。MSDOS や Win32 コンソールではカーソルの高さだけを変更する。これはブロックカーソルを指定する、または垂直・水平方向のパーセンテージを指定することで行う。

コンソール上ではエスケープシーケンス 't_SI', 't_SR' 及び 't_EI' が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The option is a comma separated list of parts.  Each part consist of a
	mode-list and an argument-list:
		mode-list:argument-list,mode-list:argument-list,..
	The mode-list is a dash separated list of these modes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値はコンマ区切りのキーワードのリストである。リストは部門別に分かれており、各部門はモードリストと引数リストからなる。
@verbatim
モードリスト:引数リスト,モードリスト:引数リスト,..
@end verbatim
モードリストは、モードを表す以下の記号のダッシュ区切りのリストである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		n	Normal mode
		v	Visual mode
		ve	Visual mode with 'selection' "exclusive" (same as 'v',
			if not specified)
		o	Operator-pending mode
		i	Insert mode
		r	Replace mode
		c	Command-line Normal (append) mode
		ci	Command-line Insert mode
		cr	Command-line Replace mode
		sm	showmatch in Insert mode
		a	all modes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item n @tab ノーマルモード
@item v @tab ビジュアルモード
@item ve @tab '@option{selection}' が "@var{exclusive}" のときの ビジュアルモード (指定されなければ 'v' と同じ設定)
@item o @tab Operator-pending モード
@item i @tab 挿入モード
@item r @tab 置換モード
@item c @tab コマンドラインノーマル (追加) モード
@item ci @tab コマンドライン挿入モード
@item cr @tab コマンドライン置換モード
@item sm @tab 挿入モードでの対応括弧表示時
@item a @tab 全てのモード
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The argument-list is a dash separated list of these arguments:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
引数リストは、以下の引数のダッシュ区切りのリストである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		hor{N}	horizontal bar, {N} percent of the character height
		ver{N}	vertical bar, {N} percent of the character width
		block	block cursor, fills the whole character
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item hor@{N@} @tab 文字高の @{N@}% の高さの水平バーカーソル
@item ver@{N@} @tab 文字幅の @{N@}% の幅の垂直バーカーソル
@item block @tab 文字全体を覆う大きさのブロックカーソル
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			[only one of the above three should be present]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
[上の 3 個のうちの 1 個だけを指定できる]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		blinkwait{N}				*cursor-blinking*
		blinkon{N}
		blinkoff{N}
			blink times for cursor: blinkwait is the delay before
			the cursor starts blinking, blinkon is the time that
			the cursor is shown and blinkoff is the time that the
			cursor is not shown.  The times are in msec.  When one
			of the numbers is zero, there is no blinking.  The
			default is: "blinkwait700-blinkon400-blinkoff250".
			These numbers are used for a missing entry.  This
			means that blinking is enabled by default.  To switch
			blinking off you can use "blinkon0".  The cursor only
			blinks when Vim is waiting for input, not while
			executing a command.
			To make the cursor blink in an xterm, see
			|xterm-blink|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cursor-blinking}
@cindex cursor-blinking
@table @asis
@item blinkwait@{N@} or blinkon@{N@} or blinkoff@{N@}
カーソルの点滅について指定する。blinkwait にはカーソルが点滅を始めるまでの遅延時間を、blinkon にはカーソルが表示される時間を、blinkoff にはカーソルが消えている時間を指定する。時間の単位はミリ秒である。

どれかに 0 を指定すると、カーソルは点滅しない。既定では "blinkwait700-blinkon400-blinkoff250" となっている。これらは指定されなかった項目に適用される。つまり、既定では点滅するように設定されているということだ。

点滅しないようにするには "blinkon0" を指定すればよい。カーソルが点滅するのはVimが入力を待っている間で、コマンドを実行している間は点滅しない。

カーソルを xterm の中で点滅させるには、|xterm-blink| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		{group-name}
			a highlight group name, that sets the color and font
			for the cursor
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{group-name@}
カーソルの色とフォントを設定する、強調表示のグループ名を指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		{group-name}/{group-name}
			Two highlight group names, the first is used when
			no language mappings are used, the other when they
			are. |language-mapping|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{group-name@}/@{group-name@}
強調表示グループ名を 2 個指定する。1 個目は言語マッピングがないときに使われ、2 個目は言語マッピングがあるときに使われる。|language-mapping|
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Examples of parts:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値の一部の例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   n-c-v:block-nCursor	in Normal, Command-line and Visual mode, use a
				block cursor with colors from the "nCursor"
				highlight group
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item n-c-v:block-nCursor
ノーマルモード、コマンドラインモードとビジュアルモードで、強調表示グループ "nCursor" で指定された色のブロックカーソルを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150
				In Insert and Command-line Insert mode, use a
				30% vertical bar cursor with colors from the
				"iCursor" highlight group.  Blink a bit
				faster.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150
挿入モードとコマンドライン挿入モードで、強調表示グループ "iCursor" で指定された色の、文字高の 30% の高さの垂直バーカーソルを使う。点滅は少し速くする。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The 'a' mode is different.  It will set the given argument-list for
	all modes.  It does not reset anything to defaults.  This can be used
	to do a common setting for all modes.  For example, to switch off
	blinking: "a:blinkon0"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
モード 'a' は他とは異なっていて、与えられた引数リストを全てのモードに対して設定し、指定されなかった引数は変更しない。これは全てのモードに共通の設定をするためにある。例えば、点滅を止めるには "a:blinkon0" とする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Examples of cursor highlighting: >
	    :highlight Cursor gui=reverse guifg=NONE guibg=NONE
	    :highlight Cursor gui=NONE guifg=bg guibg=fg
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソル強調表示の例:
@verbatim
:highlight Cursor gui=reverse guifg=NONE guibg=NONE
:highlight Cursor gui=NONE guifg=bg guibg=fg
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
					*'guifont'* *'gfn'*
						   *E235* *E596*
'guifont' 'gfn'		string	(default "")
			global
			{not in Vi}
			{only available when compiled with GUI enabled}
	This is a list of fonts which will be used for the GUI version of Vim.
	In its simplest form the value is just one font name.  When
	the font cannot be found you will get an error message.  To try other
	font names a list can be specified, font names separated with commas.
	The first valid font is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guifont'}
@anchor{'gfn'}
@cindex 'guifont'
@cindex 'gfn'
@anchor{E235}
@anchor{E596}
@cindex E235
@cindex E596
@item 'guifont' 'gfn'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

Vim の GUI 版で使われるフォントのリストである。値の最も単純なものは、ただ 1 個のフォント名である。フォントが見つからないとき、エラーメッセージが表示される。別のフォント名を試すには、フォント名のコンマ区切りのリストを指定できる。その中の最初の使用可能なフォントが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	On systems where 'guifontset' is supported (X11) and 'guifontset' is
	not empty, then 'guifont' is not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{guifontset}' がサポートされているシステム上 (X11) で、'@option{guifontset}' が空でないならば '@option{guifont}' は使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: As to the GTK GUIs, no error is given against any invalid names,
	and the first element of the list is always picked up and made use of.
	This is because, instead of identifying a given name with a font, the
	GTK GUIs use it to construct a pattern and try to look up a font which
	best matches the pattern among available fonts, and this way, the
	matching never fails.  An invalid name doesn't matter because a number
	of font properties other than name will do to get the matching done.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
GTK GUI については、不正な名前に対してエラーは発生せず、常にリストの最初の要素が選ばれ、利用される。これは、GTK GUI が与えられた名前からフォントを特定するのではなく、パターンを構成するのに用い、利用可能なフォントからそのパターンを用いて最もよくマッチするフォントを探そうとするからである。これによりマッチングは決して失敗しない。不正な名前を与えたとしても、名前以外のフォント属性によりマッチングが行われるため、問題とはならない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Spaces after a comma are ignored.  To include a comma in a font name
	precede it with a backslash.  Setting an option requires an extra
	backslash before a space and a backslash.  See also
	|option-backslash|.  For example: >
	    :set guifont=Screen15,\ 7x13,font\\,with\\,commas
<	will make Vim try to use the font "Screen15" first, and if it fails it
	will try to use "7x13" and then "font,with,commas" instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンマの後の空白は無視される。フォント名の中にコンマを指定するには、コンマの前に '\' を置くこと。さらにオプションの値の中で空白や '\' を使うには、それらの前に余分に '\' を置かなければならない。

|option-backslash| も参照。例えば
@example
:set guifont=Screen15,\ 7x13,font\\,with\\,commas
@{訳注: 結果は "Screen15, 7x13,font\,with\,commas"@}
@end example
とすると、まず Vim はフォント "Screen15" を使おうとし、だめなら代わりに "7x13" を、そして "font,with,commas" を使おうとする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If none of the fonts can be loaded, Vim will keep the current setting.
	If an empty font list is given, Vim will try using other resource
	settings (for X, it will use the Vim.font resource), and finally it
	will try some builtin default which should always be there ("7x13" in
	the case of X).  The font names given should be "normal" fonts.  Vim
	will try to find the related bold and italic fonts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フォントをどれも読み込めなかったら現在の設定のままになる。空のフォントリストが与えられると、他のリソース設定を試してみて (X では Vim.font リソースが使われる)、それがだめなら、必ず存在するはずの組み込みの既定フォントを試す (X の場合は "7x13")。指定されるフォント名は "normal" な @{訳注: 太字や斜字体でない@} フォントでなければならない。Vim は関連する太字体や斜字体を見つけようとする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For Win32, GTK, Motif, Mac OS and Photon: >
	    :set guifont=*
<	will bring up a font requester, where you can pick the font you want.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32, GTK, Motif, Mac OS, Photon では:
@example
:set guifont=*
@end example
これはフォント選択ダイアログを開く。そこで望みのフォントを選択することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The font name depends on the GUI used.  See |setting-guifont| for a
	way to set 'guifont' for various systems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フォント名は使っている GUI に依存する。様々なシステムに対して '@option{guifont}' を設定する方法については |setting-guifont| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For the GTK+ 2 and 3 GUIs, the font name looks like this: >
	    :set guifont=Andale\ Mono\ 11
<	That's all.  XLFDs are not used.  For Chinese this is reported to work
	well: >
	    if has("gui_gtk2")
	      set guifont=Bitstream\ Vera\ Sans\ Mono\ 12,Fixed\ 12
	      set guifontwide=Microsoft\ Yahei\ 12,WenQuanYi\ Zen\ Hei\ 12
	    endif
<
        (Replace gui_gtk2 with gui_gtk3 for the GTK+ 3 GUI)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 2 と 3 ではフォント名は次のようになる:
@example
:set guifont=Andale\ Mono\ 11
@end example
これだけである。もう XLFD は受け付けない。中国語の場合は以下の記述でうまくいくと報告されている:
@verbatim
if has("gui_gtk2")
  set guifont=Bitstream\ Vera\ Sans\ Mono\ 12,Fixed\ 12
  set guifontwide=Microsoft\ Yahei\ 12,WenQuanYi\ Zen\ Hei\ 12
endif
@end verbatim
(GTK+ 3 の場合は、gui_gtk2 を gui_gtk3 に置き換えること)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For Mac OSX you can use something like this: >
	    :set guifont=Monaco:h10
<	Also see 'macatsui', it can help fix display problems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Mac OSX では次のようにする:
@example
:set guifont=Monaco:h10
@end example
'@option{macatsui}' も参照。表示上の問題を解決する助けになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*E236*
	Note that the fonts must be mono-spaced (all characters have the same
	width).  An exception is GTK: all fonts are accepted, but mono-spaced
	fonts look best.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E236}
@cindex E236
@quotation
@strong{Note:} @*
フォントは等幅でなければならない (全ての文字が同じ幅でなければならない)。例外は GTK である。どんなフォントでも受け付けるが、等幅フォントがもっともきれいに見える。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	To preview a font on X11, you might be able to use the "xfontsel"
	program.  The "xlsfonts" program gives a list of all available fonts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X11 でフォントのプレビューをするには、プログラム "xfontsel" が使えるかもしれない。"xlsfonts" は、使用可能な全てのフォントのリストを与える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For the Win32 GUI					*E244* *E245*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E244}
@anchor{E245}
@cindex E244
@cindex E245
Win32 の GUI について
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- takes these options in the font name:
		hXX - height is XX (points, can be floating-point)
		wXX - width is XX (points, can be floating-point)
		b   - bold
		i   - italic
		u   - underline
		s   - strikeout
		cXX - character set XX.  Valid charsets are: ANSI, ARABIC,
		      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,
		      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,
		      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.
		      Normally you would use "cDEFAULT".
		qXX - quality XX.  Valid quality names are: PROOF, DRAFT,
		      ANTIALIASED, NONANTIALIASED, CLEARTYPE, DEFAULT.
		      Normally you would use "qDEFAULT".
		      Some quality values are not supported in legacy OSs.

	  Use a ':' to separate the options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item フォント名には以下のオプションを指定できる。
@multitable @columnfractions .15 .85
@item hXX - @tab 文字高が XX (単位はポイント。浮動小数点数でもよい)
@item wXX - @tab 文字幅が XX (単位はポイント。浮動小数点数でもよい)
@item b - @tab ボールド (太字体)
@item i - @tab イタリック (斜字体)
@item u - @tab 下線付き
@item s - @tab 打ち消し (文字を横切る線付き)
@item cXX - @tab 文字セットが XX。使用可能なものは以下の通り: ANSI,
ARABIC, BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE,
GB2312, GREEK, HANGEUL, HEBREW, JOHAB, MAC, OEM,
RUSSIAN, SHIFTJIS, SYMBOL, THAI, TURKISH,
VIETNAMESE ANSI, BALTIC

通常は "cDEFAULT" を使うとよいだろう。
@item qXX - @tab 品質が XX。使用可能な名前は以下の通り: PROOF, DRAFT,
ANTIALIASED, NONANTIALIASED, CLEARTYPE, DEFAULT.

通常は "qDEFAULT" を使うとよいだろう。レガシーな OS ではいくつかの値がサポートされていない。
@end multitable
オプションの区切りには ':' を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	- A '_' can be used in the place of a space, so you don't need to use
	  backslashes to escape the spaces.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 空白の代わりに '_' が使えるので、空白を '\' でエスケープする必要はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- Examples: >
	    :set guifont=courier_new:h12:w5:b:cRUSSIAN
	    :set guifont=Andale_Mono:h7.5:w4.5
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 例:
@example
:set guifont=courier_new:h12:w5:b:cRUSSIAN
:set guifont=Andale_Mono:h7.5:w4.5
@end example
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	See also |font-sizes|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|font-sizes| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'guifontset'* *'gfs'*
					*E250* *E252* *E234* *E597* *E598*
'guifontset' 'gfs'	string	(default "")
			global
			{not in Vi}
			{only available when compiled with GUI enabled and
			with the |+xfontset| feature}
			{not available in the GTK+ GUI}
	When not empty, specifies two (or more) fonts to be used.  The first
	one for normal English, the second one for your special language.  See
	|xfontset|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guifontset'}
@anchor{'gfs'}
@cindex 'guifontset'
@cindex 'gfs'
@anchor{E250}
@anchor{E252}
@anchor{E234}
@anchor{E597}
@anchor{E598}
@cindex E250
@cindex E252
@cindex E234
@cindex E597
@cindex E598
@item 'guifontset' 'gfs'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版で、|+xfontset| 機能付きでコンパイルされたときのみ有効@} @*
@{GTK+ GUI では利用できない@}

このオプションには2種類 (またはそれ以上) のフォントを指定する。値が空のときは無視される。1種類目は普通の英語に使われるもので、2種類目はユーザーの使う特別な言語用である。 |xfontset| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Setting this option also means that all font names will be handled as
	a fontset name.  Also the ones used for the "font" argument of the
	|:highlight| command.
	The fonts must match with the current locale.  If fonts for the
	character sets that the current locale uses are not included, setting
	'guifontset' will fail.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションを設定すると、全てのフォント名はフォントセット名として扱われるようになる。またコマンド |:highlight| の引数 "font" に使われるものも同様である。

フォントはカレントロケールに適合していなければならない。カレントロケールの使用している文字セット用のフォントが値に含まれていないと、'@option{guifontset}' の設定は失敗する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note the difference between 'guifont' and 'guifontset': In 'guifont'
	the comma-separated names are alternative names, one of which will be
	used.  In 'guifontset' the whole string is one fontset name,
	including the commas.  It is not possible to specify alternative
	fontset names.
	This example works on many X11 systems: >
		:set guifontset=-*-*-medium-r-normal--16-*-*-*-c-*-*-*
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note':} @*
'@option{guifont}' と '@option{guifontset}' の違いに注意。'@option{guifont}' では、コンマで区切られたフォント名は代替用で、そのうちのどれか 1 つが使われる。

'@option{guifontset}' では、コンマも含めて値の文字列全体がフォントセット名を表す。代替フォントセットを指定することはできない。

次の例は多くの X11 システムで正しく機能する。
@example
:set guifontset=-*-*-medium-r-normal--16-*-*-*-c-*-*-*
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				*'guifontwide'* *'gfw'* *E231* *E533* *E534*
'guifontwide' 'gfw'	string	(default "")
			global
			{not in Vi}
			{only available when compiled with GUI enabled}
	When not empty, specifies a comma-separated list of fonts to be used
	for double-width characters.  The first font that can be loaded is
	used.
	Note: The size of these fonts must be exactly twice as wide as the one
	specified with 'guifont' and the same height.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guifontwide'}
@anchor{'gfw'}
@anchor{E231}
@anchor{E533}
@anchor{E534}
@cindex 'guifontwide'
@cindex 'gfw'
@cindex E231
@cindex E533
@cindex E534
@item 'guifontwide' 'gfw'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

2 倍幅の文字に使われるフォントをコンマ区切りのリストで指定する。値が空のときは無視される。読み込み可能なフォントのうち先頭のものが使われる。
@quotation
@strong{Note:} @*
指定したフォントの幅は、オプション '@option{guifont}' で指定したフォントのちょうど2倍の幅で、同じ高さのものでなければならない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	All GUI versions but GTK+:

	'guifontwide' is only used when 'encoding' is set to "utf-8" and
	'guifontset' is empty or invalid.
	When 'guifont' is set and a valid font is found in it and
	'guifontwide' is empty Vim will attempt to find a matching
	double-width font and set 'guifontwide' to it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ を除くすべてのバージョン:

'@option{guifontwide}' は、'@option{encoding}' が "@var{utf-8}" で、かつ '@option{guifontset}' が空であるか不適切なものであるときにのみ使われる。

'@option{guifont}' が設定されていて、その中に適切なフォントが含まれており、かつ '@option{guifontwide}' が空のとき、Vim は適合する 2 倍幅のフォントを探し、'@option{guifontwide}' をそれに設定しようとする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	GTK+ GUI only:  		    	*guifontwide_gtk*

	If set and valid, 'guifontwide' is always used for double width
	characters, even if 'encoding' is not set to "utf-8".
	Vim does not attempt to find an appropriate value for 'guifontwide'
	automatically.  If 'guifontwide' is empty Pango/Xft will choose the
	font for characters not available in 'guifont'.  Thus you do not need
	to set 'guifontwide' at all unless you want to override the choice
	made by Pango/Xft.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{guifontwide_gtk}
@cindex guifontwide_gtk
GTK+ GUI のみ:

このオプションが設定されており、それが適切な値であるとき、'@option{encoding}' が "@var{utf-8}" でなくても常に 2 倍幅文字に対して '@option{guifontwide}' が使われる。

Vim は自動的に '@option{guifontwide}' に適合する値を探そうとはしない。'@option{guifontwide}' が空ならば Pango/Xft が '@option{guifont}' で利用できない文字に対するフォントを選ぶ。そのため、Pango/Xft が選んだ値を上書きしたいのでない限り、'@option{guifontwide}' を設定する必要はまったくない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Windows +multibyte only:		*guifontwide_win_mbyte*

	If set and valid, 'guifontwide' is used for IME instead of 'guifont'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{guifontwide_win_mbyte}
@cindex guifontwide_win_mbyte
Windows +multibyte のみ:

有効な値が設定されている場合、'@option{guifont}' の代わりに '@option{guifontwide}' が IME の表示に使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'guiheadroom'* *'ghr'*
'guiheadroom' 'ghr'	number	(default 50)
			global
			{not in Vi} {only for GTK and X11 GUI}
	The number of pixels subtracted from the screen height when fitting
	the GUI window on the screen.  Set this before the GUI is started,
	e.g., in your |gvimrc| file.  When zero, the whole screen height will
	be used by the window.  When positive, the specified number of pixel
	lines will be left for window decorations and other items on the
	screen.  Set it to a negative value to allow windows taller than the
	screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guiheadroom'}
@anchor{'ghr'}
@cindex 'guiheadroom'
@cindex 'ghr'
@item 'guiheadroom' 'ghr'
数値 (既定では 50) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GTK と X11 の GUI 版でのみ有効@}

GUI ウィンドウを画面に合わせるときに、画面の高さから差し引かれるピクセル数。このオプションは GUI を開始する前に、例えばファイル |gvimrc| 内で設定すること。値を 0 にすると、画面の高さ全体がウィンドウに使われる。

正の値を指定すると、それだけのピクセル数がウィンドウの装飾や画面上の他のもののために残される。ウィンドウを画面よりも高くするには、負の値を指定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'guioptions'* *'go'*
'guioptions' 'go'	string	(default "egmrLtT"   (MS-Windows, "t" is
						   removed in |defaults.vim|),
					 "aegimrLtT" (GTK, Motif and Athena),
					 )
			global
			{not in Vi}
			{only available when compiled with GUI enabled}
	This option only has an effect in the GUI version of Vim.  It is a
	sequence of letters which describes what components and options of the
	GUI should be used.
	To avoid problems with flags that are added in the future, use the
	"+=" and "-=" feature of ":set" |add-option-flags|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guioptions'}
@anchor{'go'}
@cindex 'guioptions'
@cindex 'go'
@item 'guioptions' 'go'
文字列 (
@multitable @columnfractions .15 .85
@item 既定では @tab "egmrLtT" (MS-Windows、"t" は |defaults.vim| 内で削除される),
@item @tab "aegimrLtT" (GTK, MotifとAthena),)
@end multitable
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

このオプションは Vim の GUI 版でのみ有効である。値は、GUI のどのコンポーネントとオプションを使用するかを決定する、フラグの列である。

将来追加されるフラグによる問題を避けるため、コマンド "@command{:set}" では "+=" と "-=" を使うこと |add-option-flags|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Valid letters are as follows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使用できるフラグは以下の通りである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*guioptions_a* *'go-a'*
	  'a'	Autoselect:  If present, then whenever VISUAL mode is started,
		or the Visual area extended, Vim tries to become the owner of
		the windowing system's global selection.  This means that the
		Visually highlighted text is available for pasting into other
		applications as well as into Vim itself.  When the Visual mode
		ends, possibly due to an operation on the text, or when an
		application wants to paste the selection, the highlighted text
		is automatically yanked into the "* selection register.
		Thus the selection is still available for pasting into other
		applications after the VISUAL mode has ended.
		    If not present, then Vim won't become the owner of the
		windowing system's global selection unless explicitly told to
		by a yank or delete operation for the "* register.
		The same applies to the modeless selection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{guioptions_a}
@anchor{'go-a'}
@cindex guioptions_a
@cindex 'go-a'
@multitable @columnfractions .1 .9
@item 'a' @tab
自動選択 (autoselect): 値に含まれると、ビジュアルモードが開始されるたび、またはビジュアル選択範囲が変更されるたびに、Vim はウィンドウシステム共通のクリップボードを使おうとする。

つまりビジュアル選択で選択されたテキストは、Vim 自身はもとより他のアプリケーションでも貼り付けに使えるということだ。(おそらくテキストに操作を実行したせいで) ビジュアルモードが終了したり、アプリケーションが選択領域を貼り付けようとしたときには、強調されたテキストは自動的にクリップボードレジスタ "* にコピーされる。そのためビジュアルモードが終了した後でも、選択領域を他のアプリケーションに貼り付けることができる。

含まれないと、レジスタ "* に対するコピーや貼り付けによって明示的に指定されない限り、Vim はウィンドウシステム共通のクリップボードを使おうとはしない。モードレスセレクションについても同様である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-P'*
	  'P'	Like autoselect but using the "+ register instead of the "*
		register.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-P'}
@cindex 'go-P'
@item 'P' @tab
自動選択 (autoselect) と似ているが、"* レジスタの代わりに "+ レジスタを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-A'*
	  'A'	Autoselect for the modeless selection.  Like 'a', but only
		applies to the modeless selection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-A'}
@cindex 'go-A'
@item 'A' @tab
モードレスセレクションに対する自動選択。フラグ 'a' と似ているが、モードレスセレクションにのみ適用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		    'guioptions'   autoselect Visual  autoselect modeless ~
			 ""		 -			 -
			 "a"		yes			yes
			 "A"		 -			yes
			 "aA"		yes			yes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .35 .40
@item '@option{guioptions}' @tab ビジュアルモード @tab モードレスセレクション
@item "" @tab X @tab X
@item "a" @tab O @tab O
@item "A" @tab X @tab O
@item "aA" @tab O @tab O
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*'go-c'*
	  'c'	Use console dialogs instead of popup dialogs for simple
		choices.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-c'}
@cindex 'go-c'
@item 'c' @tab
単純な選択にはポップアップダイアログでなくコンソールダイアログを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-e'*
	  'e'	Add tab pages when indicated with 'showtabline'.
		'guitablabel' can be used to change the text in the labels.
		When 'e' is missing a non-GUI tab pages line may be used.
		The GUI tabs are only supported on some systems, currently
		GTK, Motif, Mac OS/X and MS-Windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-e'}
@cindex 'go-e'
@item 'e' @tab
'@option{showtabline}' で指定されたタイミングでタブを追加する。'@option{guitablabel}' を使うとタブのラベルのテキストを変更することができる。'e' がないと非 GUI のタブページラインが使われる。GUI のタブはいくつかのシステム上 (現在は GTK, Motif, Mac OS/X, MS-Windows) でのみサポートされている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-f'*
	  'f'	Foreground: Don't use fork() to detach the GUI from the shell
		where it was started.  Use this for programs that wait for the
		editor to finish (e.g., an e-mail program).  Alternatively you
		can use "gvim -f" or ":gui -f" to start the GUI in the
		foreground.  |gui-fork|
		Note: Set this option in the vimrc file.  The forking may have
		happened already when the |gvimrc| file is read.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-f'}
@cindex 'go-f'
@item 'f' @tab
フォアグラウンド (foreground): シェルから GUI を開始し、そのシェルから gVim を独立させる際に関数 fork() を使わない。これはエディタが終了するのを待つプログラム (例えばメールプログラム等) に対して使う。フォアグラウンドで GUI を開始するには、これの代わりに "gvim -f" や ":gui -f" も使える |gui-fork|。
@quotation
@strong{Note:} @*
このオプションはファイル vimrc 内で設定するよう注意。ファイル |gvimrc| が読み込まれたときはフォーキングがすでに実行されているかもしれない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-i'*
	  'i'	Use a Vim icon.  For GTK with KDE it is used in the left-upper
		corner of the window.  It's black&white on non-GTK, because of
		limitations of X11.  For a color icon, see |X11-icon|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-i'}
@cindex 'go-i'
@item 'i' @tab
Vim のアイコンを使う。KDEのGTKではウィンドウの左上に表示される。GTK でない X11 では、制限のため白黒のアイコンが使われる。色つきのアイコンについては |X11-icon| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-m'*
	  'm'	Menu bar is present.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-m'}
@cindex 'go-m'
@item 'm' @tab
メニューバーを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-M'*
	  'M'	The system menu "$VIMRUNTIME/menu.vim" is not sourced.  Note
		that this flag must be added in the .vimrc file, before
		switching on syntax or filetype recognition (when the |gvimrc|
		file is sourced the system menu has already been loaded; the
		`:syntax on` and `:filetype on` commands load the menu too).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-M'}
@cindex 'go-M'
@item 'M' @tab
システムメニューの実体 "$VIMRUNTIME/menu.vim" が読み込まれない。
@quotation
@strong{Note:} @*
このフラグは、構文認識やファイルタイプ認識を起動する前に、ファイル .vimrc 内で追加されていなければならない (ファイル .gvimrc が読み込まれたときには、システムメニューはすでに読み込まれた後である。コマンド `:syntax on` と `:filetype on` でもメニューは読み込まれる)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-g'*
	  'g'	Grey menu items: Make menu items that are not active grey.  If
		'g' is not included inactive menu items are not shown at all.
		Exception: Athena will always use grey menu items.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-g'}
@cindex 'go-g'
@item 'g' @tab
メニュー項目の灰色表示: 無効のメニュー項目を灰色で表示する。含まれていないと、無効のメニュー項目は全く表示されない。例外: Athena では常にグレー表示を使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-t'*
	  't'	Include tearoff menu items.  Currently only works for Win32,
		GTK+, and Motif 1.2 GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-t'}
@cindex 'go-t'
@item 't' @tab
メニュー項目の切り離しを有効にする。現在のところ Win32, GTK+ と Motif 1.2 GUI でのみ有効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-T'*
	  'T'	Include Toolbar.  Currently only in Win32, GTK+, Motif, Photon
		and Athena GUIs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-T'}
@cindex 'go-T'
@item 'T' @tab
ツールバーを表示する。現在のところ Win32, GTK+ と Motif, Photon, Athena GUI でのみ有効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-r'*
	  'r'	Right-hand scrollbar is always present.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-r'}
@cindex 'go-r'
@item 'r' @tab
右スクロールバーを常に表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-R'*
	  'R'	Right-hand scrollbar is present when there is a vertically
		split window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-R'}
@cindex 'go-R'
@item 'R' @tab
垂直分割されたウィンドウがあるときのみ、右スクロールバーを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-l'*
	  'l'	Left-hand scrollbar is always present.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-l'}
@cindex 'go-l'
@item 'l' @tab
左スクロールバーを常に表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-L'*
	  'L'	Left-hand scrollbar is present when there is a vertically
		split window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-L'}
@cindex 'go-L'
@item 'L' @tab
垂直分割されたウィンドウがあるときのみ、左スクロールバーを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-b'*
	  'b'	Bottom (horizontal) scrollbar is present.  Its size depends on
		the longest visible line, or on the cursor line if the 'h'
		flag is included. |gui-horiz-scroll|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-b'}
@cindex 'go-b'
@item 'b' @tab
下 (水平) スクロールバーを表示する。サイズは表示されている行の中で一番長い行によって決まる。またはフラグ 'h' が含まれているときはカーソル行によって決まる。|gui-horiz-scroll|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-h'*
	  'h'	Limit horizontal scrollbar size to the length of the cursor
		line.  Reduces computations. |gui-horiz-scroll|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-h'}
@cindex 'go-h'
@item 'h' @tab
水平スクロールバーのサイズをカーソル行の長さに制限する。計算量を軽減させる。|gui-horiz-scroll|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	And yes, you may even have scrollbars on the left AND the right if
	you really want to :-).  See |gui-scrollbars| for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そう、もちろん、本当に望むのなら、左スクロールバーと右スクロールバーを「両方」使うことだってできる :-) 詳しい情報については |gui-scrollbars| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*'go-v'*
	  'v'	Use a vertical button layout for dialogs.  When not included,
		a horizontal layout is preferred, but when it doesn't fit a
		vertical layout is used anyway.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-v'}
@cindex 'go-v'
@multitable @columnfractions .1 .9
@item 'v' @tab
ダイアログのボタン配置を垂直方向にする。含まれていないとなるべく水平方向の配置を使うが、収まらないときには結局、垂直配置が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-p'*
	  'p'	Use Pointer callbacks for X11 GUI.  This is required for some
		window managers.  If the cursor is not blinking or hollow at
		the right moment, try adding this flag.  This must be done
		before starting the GUI.  Set it in your |gvimrc|.  Adding or
		removing it after the GUI has started has no effect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-p'}
@cindex 'go-p'
@item 'p' @tab
X11 の GUI において、ポインタ・コールバックを使う。ウィンドウマネージャーの中にはこれが必要なものもある。カーソルが正しいタイミングで点滅したり変形したりしないときは、これを追加してみること。これは GUI を開始する前に設定しなければならない。ユーザーのファイル |gvimrc| 内で設定すること。GUI が開始した後にこのフラグを追加したり取り除いたりしても、効果はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-F'*
	  'F'	Add a footer.  Only for Motif.  See |gui-footer|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-F'}
@cindex 'go-F'
@item 'F' @tab
フッターを追加する。Motif でのみ有効である。|gui-footer| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*'go-k'*
	  'k'	Keep the GUI window size when adding/removing a scrollbar, or
		toolbar, tabline, etc.  Instead, the behavior is similar to
		when the window is maximized and will adjust 'lines' and
		'columns' to fit to the window.  Without the 'k' flag Vim will
		try to keep 'lines' and 'columns' the same when adding and
		removing GUI components.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'go-k'}
@cindex 'go-k'
@item 'k' @tab
スクロールバー、ツールバー、タブ行などを表示/非表示した際に、GUI ウィンドウサイズを保つ。むしろ、挙動はウィンドウを最大化したときと似ていて、'lines' と 'columns' をウィンドウに合わせて調節するだろう。'k' フラグを設定しないと、GUI コンポーネントを追加/削除したときに、Vim は 'lines' と 'column' を同じように保ち続けようとするだろう。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'guipty'* *'noguipty'*
'guipty'		boolean	(default on)
			global
			{not in Vi}
			{only available when compiled with GUI enabled}
	Only in the GUI: If on, an attempt is made to open a pseudo-tty for
	I/O to/from shell commands.  See |gui-pty|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guipty'}
@anchor{'noguipty'}
@cindex 'guipty'
@cindex 'noguipty'
@item 'guipty'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

GUI 版でのみ有効である。オンのときは、シェルコマンドからの入力用およびシェルコマンドへの出力用の仮想端末 pseudo-tty を開こうとする。|gui-pty| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'guitablabel'* *'gtl'*
'guitablabel' 'gtl'	string	(default empty)
			global
			{not in Vi}
			{only available when compiled with GUI enabled and
			with the |+windows| feature}
	When nonempty describes the text to use in a label of the GUI tab
	pages line.  When empty and when the result is empty Vim will use a
	default label.  See |setting-guitablabel| for more info.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guitablabel'}
@anchor{'gtl'}
@cindex 'guitablabel'
@cindex 'gtl'
@item 'guitablabel' 'gtl'
文字列 (既定では空文字列) @*
グローバル @*
@{Vi にはない@} @*
@{GUI と |+windows| 機能を有効にしてコンパイルされたときのみ利用可能@}

空文字列でない場合は、GUI のタブページ行のラベルを設定する。空文字列であるか、または評価結果が空文字列である場合は、既定のラベルが使われる。より詳しくは |setting-guitablabel| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The format of this option is like that of 'statusline'.
	'guitabtooltip' is used for the tooltip, see below.
	The expression will be evaluated in the |sandbox| when set from a
	modeline, see |sandbox-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションのフォーマットは '@option{statusline}' のフォーマットに似ている。ツールチップには '@option{guitabtooltip}' が使われる。下記参照。

このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Only used when the GUI tab pages line is displayed.  'e' must be
	present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is
	used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI のタブページが表示されるときのみ使われる。'@option{guioptions}' に '@var{e}' が含まれていなければならない。GUI でないタブページ行については '@option{tabline}' が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'guitabtooltip'* *'gtt'*
'guitabtooltip' 'gtt'	string	(default empty)
			global
			{not in Vi}
			{only available when compiled with GUI enabled and
			with the |+windows| feature}
	When nonempty describes the text to use in a tooltip for the GUI tab
	pages line.  When empty Vim will use a default tooltip.
	This option is otherwise just like 'guitablabel' above.
	You can include a line break.  Simplest method is to use |:let|: >
		:let &guitabtooltip = "line one\nline two"
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'guitabtooltip'}
@anchor{'gtt'}
@cindex 'guitabtooltip'
@cindex 'gtt'
@item 'guitabtooltip' 'gtt'
文字列 (既定では空文字列) @*
グローバル @*
@{Vi にはない@} @*
@{GUI と |+windows| 機能を有効にしてコンパイルしたときのみ利用可能@}

空文字列でない場合は、GUI のタブページ行のツールチップを設定する。空文字列である場合は、既定のツールチップが使われる。それ以外は上記の '@option{guitablabel}' と同様。改行を含めることもできる。そのもっとも簡単な方法は |:let| を使うことである:
@example
:let &guitabtooltip = "line one\nline two"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'helpfile'* *'hf'*
'helpfile' 'hf'		string	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
					 (others) "$VIMRUNTIME/doc/help.txt")
			global
			{not in Vi}
	Name of the main help file.  All distributed help files should be
	placed together in one directory.  Additionally, all "doc" directories
	in 'runtimepath' will be used.
	Environment variables are expanded |:set_env|.  For example:
	"$VIMRUNTIME/doc/help.txt".  If $VIMRUNTIME is not set, $VIM is also
	tried.  Also see |$VIMRUNTIME| and |option-backslash| about including
	spaces and backslashes.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'helpfile'}
@anchor{'hf'}
@cindex 'helpfile'
@cindex 'hf'
@item 'helpfile' 'hf'
文字列 (既定では
@multitable @columnfractions .3 .7
@item MS-DOS: @tab "$VIMRUNTIME\doc\help.txt"
@item その他: @tab "$VIMRUNTIME/doc/help.txt")
@end multitable
グローバル @*
@{Vi にはない@}

ヘルプファイルの名前。Vim に付属のヘルプファイルは全て単一のディレクトリ内に一緒に置かれるべきである。そのディレクトリの他に、'@option{runtimepath}' 中の全ての "doc" ディレクトリも対象になる。

環境変数は展開される |:set_env|。例: "$VIMRUNTIME/doc/help.txt"。

環境変数 $VIMRUNTIME が設定されてないときは、$VIM も試される。|$VIMRUNTIME| を参照。値に空白や '\' を含めることについては |option-backslash| も参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'helpheight'* *'hh'*
'helpheight' 'hh'	number	(default 20)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
	Minimal initial height of the help window when it is opened with the
	":help" command.  The initial height of the help window is half of the
	current window, or (when the 'ea' option is on) the same as other
	windows.  When the height is less than 'helpheight', the height is
	set to 'helpheight'.  Set to zero to disable.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'helpheight'}
@anchor{'hh'}
@cindex 'helpheight'
@cindex 'hh'
@item 'helpheight' 'hh'
数値 (既定では 20) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}

コマンド "@command{:help}" で開かれたヘルプウィンドウの、開始時のウィンドウ高の最小値を設定する。ヘルプウィンドウの開始時の高さはカレントウィンドウの半分であるか、(オプション 'ea' がオンのときには) 他のウィンドウと同じである。ウィンドウ高が '@option{helpheight}' より小さくなってしまうとき、実際の高さは '@option{helpheight}' になる。こうしないようにするには 0 に設定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'helplang'* *'hlg'*
'helplang' 'hlg'	string	(default: messages language or empty)
			global
			{only available when compiled with the |+multi_lang|
			feature}
			{not in Vi}
	Comma separated list of languages.  Vim will use the first language
	for which the desired help can be found.  The English help will always
	be used as a last resort.  You can add "en" to prefer English over
	another language, but that will only find tags that exist in that
	language and not in the English help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'helplang'}
@anchor{'hlg'}
@cindex 'helplang'
@cindex 'hlg'
@item 'helplang' 'hlg'
文字列 (既定では: メッセージ言語または空) @*
グローバル @*
@{Vi が |+multi_lang| 機能つきでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

コンマ区切りの言語のリスト。これらの言語の中から、探しているヘルプが見つかった最初の言語を使う。英語のヘルプは常に優先度が最後になる。英語の優先度を上げるために "en" を追加することはできるが、そうしても、その言語に存在し、英語のヘルプに存在しないタグを見つけるだけである。
@{訳注: 上の文よくわからない。@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Example: >
		:set helplang=de,it
<	This will first search German, then Italian and finally English help
	files.
	When using |CTRL-]| and ":help!" in a non-English help file Vim will
	try to find the tag in the current language before using this option.
	See |help-translated|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set helplang=de,it
@end example
こうすると最初にドイツ語を検索し、次にイタリア語、そして最後に英語のヘルプファイルを検索する。

|CTRL-]| や英語でないヘルプファイル中で "@command{:help!}" を使ったときは、このオプションより先に現在の言語からタグを検索する。|help-translated| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				     *'hidden'* *'hid'* *'nohidden'* *'nohid'*
'hidden' 'hid'		boolean	(default off)
			global
			{not in Vi}
	When off a buffer is unloaded when it is |abandon|ed.  When on a
	buffer becomes hidden when it is |abandon|ed.  If the buffer is still
	displayed in another window, it does not become hidden, of course.
	The commands that move through the buffer list sometimes make a buffer
	hidden although the 'hidden' option is off: When the buffer is
	modified, 'autowrite' is off or writing is not possible, and the '!'
	flag was used.  See also |windows.txt|.
	To only make one buffer hidden use the 'bufhidden' option.
	This option is set for one command with ":hide {command}" |:hide|.
	WARNING: It's easy to forget that you have changes in hidden buffers.
	Think twice when using ":q!" or ":qa!".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'hidden'}
@anchor{'hid'}
@anchor{'nohidden'}
@anchor{'nohid'}
@cindex 'hidden'
@cindex 'hid'
@cindex 'nohidden'
@cindex 'nohid'
@item 'hidden' 'hid'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オフのときは、バッファは放棄 |abandon| されるときに解放される。オンのときは、バッファは放棄 |abandon| されるときに隠れ (hidden) 状態になる。そのバッファが別のウィンドウでまだ表示されているなら、もちろん隠れ状態にはならない。

バッファリストをわたって動くコマンドは '@option{hidden}' がオフでもバッファを隠れ状態にすることがある。バッファの内容が変更されていて、'@option{autowrite}' がオフであるか書き込みが不可能な状態であり、フラグ '!' が使われたようなときだ。|windows.txt| も参照。

1 つのバッファだけを隠れ状態にするにはオプション '@option{bufhidden}' を使う。このオプションは、1 つ 1 つのコマンドに対して "@command{:hide @{command@}}" とすることでオンにできる |:hide|。
@quotation
@strong{警告:} @*
隠れバッファに対する変更は忘れがちである。コマンド ":q!" や ":qa!" を使う前にはもう一度よく考えること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'highlight'* *'hl'*
'highlight' 'hl'	string	(default (as a single string):
				     "8:SpecialKey,~:EndOfBuffer,@:NonText,
				     d:Directory,e:ErrorMsg,i:IncSearch,
				     l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
				     N:CursorLineNr,r:Question,s:StatusLine,
				     S:StatusLineNC,c:VertSplit,t:Title,
				     v:Visual,w:WarningMsg,W:WildMenu,f:Folded,
				     F:FoldColumn,A:DiffAdd,C:DiffChange,
				     D:DiffDelete,T:DiffText,>:SignColumn,
				     B:SpellBad,P:SpellCap,R:SpellRare,
				     L:SpellLocal,-:Conceal,+:Pmenu,=:PmenuSel,
				     x:PmenuSbar,X:PmenuThumb,*:TabLine,
				     #:TabLineSel,_:TabLineFill,!:CursorColumn,
				     .:CursorLine,o:ColorColumn,q:QuickFixLine,
				     z:StatusLineTerm,Z:StatusLineTermNC")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'highlight'}
@anchor{'hl'}
@cindex 'highlight'
@cindex 'hl'
@item 'highlight' 'hl'
文字列 (既定では (単一の文字列として):
@multitable @columnfractions .1 .9
@item @tab "8:SpecialKey,~:EndOfBuffer,@@:NonText,
@item @tab d:Directory,e:ErrorMsg,i:IncSearch,
@item @tab l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
@item @tab N:CursorLineNr,r:Question,s:StatusLine,
@item @tab S:StatusLineNC,c:VertSplit,t:Title,
@item @tab v:Visual,w:WarningMsg,W:WildMenu,f:Folded,
@item @tab F:FoldColumn,A:DiffAdd,C:DiffChange,
@item @tab D:DiffDelete,T:DiffText,>:SignColumn,
@item @tab B:SpellBad,P:SpellCap,R:SpellRare,
@item @tab L:SpellLocal,-:Conceal,+:Pmenu,=:PmenuSel,
@item @tab x:PmenuSbar,X:PmenuThumb,*:TabLine,
@item @tab #:TabLineSel,_:TabLineFill,!:CursorColumn,
@item @tab .:CursorLine,o:ColorColumn,q:QuickFixLine,
@item @tab z:StatusLineTerm,Z:StatusLineTermNC")
@end multitable
グローバル @*
@{Vi にはない@}

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This option can be used to set highlighting mode for various
	occasions.  It is a comma separated list of character pairs.  The
	first character in a pair gives the occasion, the second the mode to
	use for that occasion.  The occasions are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは、様々な対象に対する強調表示モードを設定する。文字の組をコンマ区切りのリストとして指定する。1 番目の文字は適用される対象を指定し、2 番目の文字はその対象に適用するモードを指定する。対象は以下の通りである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-SpecialKey|	 8  Meta and special keys listed with ":map"
	|hl-EndOfBuffer|   ~  lines after the last line in the buffer
	|hl-NonText|	 @  '@' at the end of the window and
			    characters from 'showbreak'
	|hl-Directory|	 d  directories in CTRL-D listing and other special
			    things in listings
	|hl-ErrorMsg|	 e  error messages
			 h  (obsolete, ignored)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .05 .65
@item |hl-SpecialKey| @tab 8 @tab "@command{:map}" でリスト表示されるメタキーと特殊キー
@item |hl-EndOfBuffer| @tab ~ @tab バッファの最後の行以降の行
@item |hl-NonText| @tab @@ @tab ウィンドウ末尾の '@@' と '@option{showbreak}' によって表示される文字
@item |hl-Directory| @tab d @tab @kbd{CTRL-D} によるリスト表示内のディレクトリや、その他の特別な項目
@item |hl-ErrorMsg| @tab e @tab エラーメッセージ
@item @tab h @tab (古くて使われておらず、無視される)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-IncSearch|	 i  'incsearch' highlighting
	|hl-Search|	 l  last search pattern highlighting (see 'hlsearch')
	|hl-MoreMsg|	 m  |more-prompt|
	|hl-ModeMsg|	 M  Mode (e.g., "-- INSERT --")
	|hl-LineNr|	 n  line number for ":number" and ":#" commands, and
			    when 'number' or 'relativenumber' option is set.
	|hl-CursorLineNr|  N like n for when 'cursorline' or 'relativenumber' is
			    set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |hl-IncSearch| @tab i @tab '@option{incsearch}' の強調表示
@item |hl-Search| @tab l @tab 最終検索パターン強調表示 ('@option{hlsearch}' を参照)
@item |hl-MoreMsg| @tab m @tab 「継続」プロンプト |more-prompt|
@item |hl-ModeMsg| @tab M @tab モード表示 (例えば "@samp{-- INSERT --}")
@item |hl-LineNr| @tab n @tab "@command{:number}" と "@command{:#}" コマンドでの行番号と、'@option{number}' か '@option{relativenumber}' がオンに設定されているときの行番号。
@item |hl-CursorLineNr| @tab N @tab '@option{cursorline}' または '@option{relativenumber}' 設定時、n の代わりに使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-Question|	 r  |hit-enter| prompt and yes/no questions
	|hl-StatusLine|	 s  status line of current window |status-line|
	|hl-StatusLineNC|  S  status lines of not-current windows
	|hl-Title|	 t  Titles for output from ":set all", ":autocmd" etc.
	|hl-VertSplit|	 c  column used to separate vertically split windows
	|hl-Visual|	 v  Visual mode
	|hl-VisualNOS|	 V  Visual mode when Vim does is "Not Owning the
			    Selection" Only X11 Gui's |gui-x11| and
			    |xterm-clipboard|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |hl-Question| @tab r @tab 「続けるには」プロンプト |hit-enter| と yes/no 質問
@item |hl-StatusLine| @tab s @tab カレントウィンドウのステータス行 |status-line|
@item |hl-StatusLineNC| @tab S @tab 非カレントウィンドウのステータス行 |status-line|
@item |hl-Title| @tab t @tab "@command{:set all}", "@command{:autocmd}" 等の出力のタイトル
@item |hl-VertSplit| @tab c @tab ウィンドウの垂直分割に使われる区切り
@item |hl-Visual| @tab v @tab ビジュアルモード
@item |hl-VisualNOS| @tab V @tab X11 GUI |gui-x11| と |xterm-clipboard| でのみ有効な、選択領域をクリップボードに送らないビジュアルモード @{訳注: "Not Owning the Selection" をこういう意味に取りましたが、勘違いかもしれません。どなたかご教授ください@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-WarningMsg|	 w  warning messages
	|hl-WildMenu|	 W  wildcard matches displayed for 'wildmenu'
	|hl-Folded|	 f  line used for closed folds
	|hl-FoldColumn|	 F  'foldcolumn'
	|hl-DiffAdd|	 A  added line in diff mode
	|hl-DiffChange|	 C  changed line in diff mode
	|hl-DiffDelete|	 D  deleted line in diff mode
	|hl-DiffText|	 T  inserted text in diff mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |hl-WarningMsg| @tab w @tab 警告メッセージ
@item |hl-WildMenu| @tab W @tab '@option{wildmenu}' によって表示されるワイルドカードマッチ
@item |hl-Folded| @tab f @tab 閉じられた折り畳みを表す行
@item |hl-FoldColumn| @tab F @tab '@option{foldcolumn}'
@item |hl-DiffAdd| @tab A @tab 差分モードで追加された行
@item |hl-DiffChange| @tab C @tab 差分モードで変更された行
@item |hl-DiffDelete| @tab D @tab 差分モードで削除された行
@item |hl-DiffText| @tab T @tab 差分モードで挿入されたテキスト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-SignColumn|	 >  column used for |signs|
	|hl-SpellBad|	 B  misspelled word |spell|
	|hl-SpellCap|	 P  word that should start with capital |spell|
	|hl-SpellRare|	 R  rare word |spell|
	|hl-SpellLocal|	 L  word from other region |spell|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |hl-SignColumn| @tab > @tab |signs| に使われる桁
@item |hl-SpellBad| @tab B @tab スペルミスの単語 |spell|
@item |hl-SpellCap| @tab P @tab 大文字で始まるべきの単語 |spell|
@item |hl-SpellRare| @tab R @tab 滅多に現れない単語 |spell|
@item |hl-SpellLocal| @tab L @tab 他の地域の単語 |spell|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|hl-Conceal|	 -  the placeholders used for concealed characters
			    (see 'conceallevel')
	|hl-Pmenu|       +  popup menu normal line
	|hl-PmenuSel|    =  popup menu normal line
	|hl-PmenuSbar|   x  popup menu scrollbar
	|hl-PmenuThumb|  X  popup menu scrollbar thumb
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |hl-Conceal| @tab - @tab Conceal テキストの代替表示 ('@option{conceallevel}' 参照)
@item |hl-Pmenu| @tab + @tab ポップアップメニューの通常の行
@item |hl-PmenuSel| @tab = @tab ポップアップメニューの通常の行
@item |hl-PmenuSbar| @tab x @tab ポップアップメニューのスクロールバー
@item |hl-PmenuThumb| @tab X @tab ポップアップメニューのスクロールバーのつまみ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The display modes are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
表示モードは以下の通りである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		r	reverse		(termcap entry "mr" and "me")
		i	italic		(termcap entry "ZH" and "ZR")
		b	bold		(termcap entry "md" and "me")
		s	standout	(termcap entry "so" and "se")
		u	underline	(termcap entry "us" and "ue")
		c	undercurl	(termcap entry "Cs" and "Ce")
		t	strikethrough	(termcap entry "Ts" and "Te")
		n	no highlighting
		-	no highlighting
		:	use a highlight group
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item r @tab 反転 (termcap の項目 "mr" と "me")
@item i @tab 斜字体 (termcap の項目 "ZH" と "ZR")
@item b @tab 太字体 (termcap の項目 "md" と "me")
@item s @tab 強調 (termcap の項目 "so" と "se")
@item u @tab 下線 (termcap の項目 "us" と "ue")
@item c @tab 下波線 (termcap の項目 "Cs" と "Ce")
@item t @tab 打ち消し線 (termcap の項目 "Ts" と "Te")
@item n @tab 強調表示なし
@item - @tab 強調表示なし
@item : @tab 強調表示グループを使って設定
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{@strong{訳注:}「文字の組」と書きながら、既定値はどれも 2 文字でないのは、この ":" が使われているからである。これだけは例外で、グループ名を使って指定できる@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The default is used for occasions that are not included.
	If you want to change what the display modes do, see |dos-colors|
	for an example.
	When using the ':' display mode, this must be followed by the name of
	a highlight group.  A highlight group can be used to define any type
	of highlighting, including using color.  See |:highlight| on how to
	define one.  The default uses a different group for each occasion.
	See |highlight-default| for the default highlight groups.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーに指定されなかった項目については、既定値が使われる。表示モードの効果を変更したいなら、例として |dos-colors| を参照。表示モードに ':' を使うときは、その後に強調表示グループの名前を続けなければならない。強調表示グループは、色も含めて強調表示のあらゆるタイプを指定することができる。グループの定義方法については |:highlight| を参照。既定値では対象それぞれに異なったグループを使っている。既定の強調表示グループについては |highlight-default| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'history'* *'hi'*
'history' 'hi'		number	(Vim default: 50, Vi default: 0,
						 set to 200 in |defaults.vim|)
			global
			{not in Vi}
	A history of ":" commands, and a history of previous search patterns
	is remembered.  This option decides how many entries may be stored in
	each of these histories (see |cmdline-editing|).
	The maximum value is 10000.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'history'}
@anchor{'hi'}
@cindex 'history'
@cindex 'hi'
@item 'history' 'hi'
数値 (Vim の既定値: 50, Vi の既定値: 0, |defaults.vim| で 200 に設定される) @*
グローバル @*
@{Vi にはない@}

":" によるコマンドと以前に使った検索パターンの履歴は保存されるわけだが、このオプションはそれぞれの履歴に何個の項目が保存されるかを指定する (|cmdline-editing| を参照)。最大値は10000。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					 *'hkmap'* *'hk'* *'nohkmap'* *'nohk'*
'hkmap' 'hk'		boolean (default off)
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	When on, the keyboard is mapped for the Hebrew character set.
	Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
	toggle this option.  See |rileft.txt|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'hkmap'}
@anchor{'hk'}
@anchor{'nohkmap'}
@anchor{'nohk'}
@cindex 'hkmap'
@cindex 'hk'
@cindex 'nohkmap'
@cindex 'nohk'
@item 'hkmap' 'hk'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

オンのときは、キーボードはヘブライ文字セットにマップされる。普通、オプション '@option{allowrevins}' をオンにしておき、挿入モードでこのオプションをコマンド @kbd{CTRL-_} で切り替えられるようにすることになる |i_CTRL-_|。|rileft.txt| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'hkmapp'* *'hkp'* *'nohkmapp'* *'nohkp'*
'hkmapp' 'hkp'		boolean (default off)
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
	This is useful if you have a non-Hebrew keyboard.
	See |rileft.txt|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'hkmapp'}
@anchor{'hkp'}
@anchor{'nohkmapp'}
@anchor{'nohkp'}
@cindex 'hkmapp'
@cindex 'hkp'
@cindex 'nohkmapp'
@cindex 'nohkp'
@item 'hkmapp' 'hkp'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

オンのときは、キーボードは音声ヘブライ文字セットにマップされる。またオプション '@option{hkmap}' もオンでなければならない。これはユーザーがヘブライ語キーボードを持っていないときに便利である。|rileft.txt| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
'hlsearch' 'hls'	boolean	(default off)
			global
			{not in Vi}
			{not available when compiled without the
			|+extra_search| feature}
	When there is a previous search pattern, highlight all its matches.
	The type of highlighting used can be set with the 'l' occasion in the
	'highlight' option.  This uses the "Search" highlight group by
	default.  Note that only the matching text is highlighted, any offsets
	are not applied.
	See also: 'incsearch' and |:match|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'hlsearch'}
@anchor{'hls'}
@anchor{'nohlsearch'}
@anchor{'nohls'}
@cindex 'hlsearch'
@cindex 'hls'
@cindex 'nohlsearch'
@cindex 'nohls'
@item 'hlsearch' 'hls'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+extra_search| 機能付きでコンパイルされたときのみ有効@}

前回の検索パターンが存在するとき、それにマッチするテキストを全て強調表示する。強調表示のタイプは、オプション '@option{highlight}' のフラグ '@var{l}' によって設定できる。既定では強調表示グループ "Search" が使われる。
@quotation
@strong{Note:} @*
マッチするテキストのみが強調表示されるので注意。オフセットは適用されない。
@end quotation
'@option{incsearch}' とコマンド |:match| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When you get bored looking at the highlighted matches, you can turn it
	off with |:nohlsearch|.  This does not change the option value, as
	soon as you use a search command, the highlighting comes back.
	'redrawtime' specifies the maximum time spent on finding matches.
	When the search pattern can match an end-of-line, Vim will try to
	highlight all of the matched text.  However, this depends on where the
	search starts.  This will be the first line in the window or the first
	line below a closed fold.  A match in a previous line which is not
	drawn may not continue in a newly drawn line.
	You can specify whether the highlight status is restored on startup
	with the 'h' flag in 'viminfo' |viminfo-h|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッチするテキストが強調表示されるを見飽きたら、|:nohlsearch| で無効に切り替えることができる。このコマンドはオプションの設定値を変更しないので、再び検索コマンドを使えば、強調表示も再び行われる。

検索する時間の上限は '@option{redrawtime}' で設定できる。検索パターンが行の終わり end-of-line にマッチするときは、Vim はマッチしたテキスト全体を強調表示しようとする。しかし、検索を開始した場所によって結果は異なる。ウィンドウの 1 番上の行または閉じられた折り畳みの次の行では、表示されない行内のマッチの強調表示は、表示されている行に継続しない。

起動時に強調表示の状態を復元するかどうかは '@option{viminfo}' の '@var{h}' フラグで設定できる |viminfo-h|。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'icon'* *'noicon'*
'icon'			boolean	(default off, on when title can be restored)
			global
			{not in Vi}
			{not available when compiled without the |+title|
			feature}
	When on, the icon text of the window will be set to the value of
	'iconstring' (if it is not empty), or to the name of the file
	currently being edited.  Only the last part of the name is used.
	Overridden by the 'iconstring' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'icon'}
@anchor{'noicon'}
@cindex 'icon'
@cindex 'noicon'
@item 'icon'
切替 (既定ではオフ、タイトルが復元できるならばオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}

オンのときは、ウィンドウのアイコンテキストが '@option{iconstring}' に (値が空でなければ) 設定される。空ならば現在編集されているファイル名に設定される。ファイル名の末尾部分のみが使われる。この設定は '@option{iconstring}' によって上書きできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Only works if the terminal supports setting window icons (currently
	only X11 GUI and terminals with a non-empty 't_IS' option - these are
	Unix xterm and iris-ansi by default, where 't_IS' is taken from the
	builtin termcap).
	When Vim was compiled with HAVE_X11 defined, the original icon will be
	restored if possible |X11|.  See |X11-icon| for changing the icon on
	X11.
	For MS-Windows the icon can be changed, see |windows-icon|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ターミナルがウィンドウアイコンの設定をサポートしているときのみ有効である (現在のところ X11 GUI とターミナルオプション 't_IS' の値が空でないターミナルのみ --- これらは既定では Unix xterm と iris-ansi であり、このとき 't_IS' の値は組み込み termcap から取られる)。

Vim が HAVE_X11 が定義された状態でコンパイルされたなら、可能であれば元のアイコンが復元される |X11|。X11 でアイコンを変更するには |X11-icon| を参照。

MS-Windows でアイコンを変更するには、|windows-icon| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'iconstring'*
'iconstring'		string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+title|
			feature}
	When this option is not empty, it will be used for the icon text of
	the window.  This happens only when the 'icon' option is on.
	Only works if the terminal supports setting window icon text
	(currently only X11 GUI and terminals with a non-empty 't_IS' option).
	Does not work for MS Windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'iconstring'}
@cindex 'iconstring'
@item 'iconstring'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}

このオプションが空でないなら、ウィンドウのアイコンテキストに設定される。これは '@option{icon}' がオンのときのみ使われる。

ターミナルがウィンドウのアイコンテキストの設定をサポートしているときのみ有効である (現在のところ X11 GUI とターミナルオプション 't_IS' の値が空でないターミナルのみ)。

MS-Windows では無効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When Vim was compiled with HAVE_X11 defined, the original icon will be
	restored if possible |X11|.
	When this option contains printf-style '%' items, they will be
	expanded according to the rules used for 'statusline'.  See
	'titlestring' for example settings.
	{not available when compiled without the |+statusline| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が HAVE_X11 が定義された状態でコンパイルされたなら、可能であれば元のアイコンが復元される |X11|。

値に関数 printf 形式の '%' を使った項目が含まれていると、それらは '@option{statusline}' と同じように展開される。設定例は '@option{titlestring}' を参照。

@{Vim が |+statusline| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'ignorecase'* *'ic'* *'noignorecase'* *'noic'*
'ignorecase' 'ic'	boolean	(default off)
			global
	Ignore case in search patterns.  Also used when searching in the tags
	file.
	Also see 'smartcase' and 'tagcase'.
	Can be overruled by using "\c" or "\C" in the pattern, see
	|/ignorecase|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ignorecase'}
@anchor{'ic'}
@anchor{'noignorecase'}
@anchor{'noic'}
@cindex 'ignorecase'
@cindex 'ic'
@cindex 'noignorecase'
@cindex 'noic'
@item 'ignorecase' 'ic'
切替 (既定ではオフ) @*
グローバル

検索パターンにおいて大文字と小文字を区別しない。タグファイル内の検索にも適用される。

オプション '@option{smartcase}' と '@option{tagcase}' も参照。パターン内で "\c" や "\C" を使うことで、この設定を上書きできる。|/ignorecase| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'imactivatefunc'* *'imaf'*
'imactivatefunc' 'imaf'	string (default "")
			global
			{not in Vi}
			{only available when compiled with |+mbyte|}
	This option specifies a function that will be called to
	activate or deactivate the Input Method.
	It is not used in the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imactivatefunc'}
@anchor{'imaf'}
@cindex 'imactivatefunc'
@cindex 'imaf'
@item 'imactivatefunc' 'imaf'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mbyte| 機能付きでコンパイルされたときのみ有効@}

このオプションはインプットメソッド (IM) をオン/オフにするのに呼ばれる関数を指定する。

GUI 版では使用されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
		function ImActivateFunc(active)
		  if a:active
		    ... do something
		  else
		    ... do something
		  endif
		  " return value is not used
		endfunction
		set imactivatefunc=ImActivateFunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

例:
@quotation
function ImActivateFunc(active)
  if a:active
    ... 何らかの処理
  else
    ... 何らかの処理
  endif
  " 戻り値は使われない
endfunction
set imactivatefunc=ImActivateFunc
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'imactivatekey'* *'imak'*
'imactivatekey' 'imak'	string (default "")
			global
			{not in Vi}
			{only available when compiled with |+xim| and
			|+GUI_GTK|}				*E599*
	Specifies the key that your Input Method in X-Windows uses for
	activation.  When this is specified correctly, vim can fully control
	IM with 'imcmdline', 'iminsert' and 'imsearch'.
	You can't use this option to change the activation key, the option
	tells Vim what the key is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imactivatekey'}
@anchor{'imak'}
@cindex 'imactivatekey'
@cindex 'imak'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+xim| 機能と |+GUI_GTK| 機能付きでコンパイルされたときのみ有効@}

@anchor{E599}
@cindex E599
X-Windows でのインプットメソッド (IM) を起動するのに使われるキーを指定する。これが正しく設定されていれば、Vim は IM をオプション '@option{imcmdline}', '@option{iminsert}' や '@option{imsearch}' によって完全に制御できる。

このオプションで起動キーを変えることはできない。これはただ Vim にそのキーが何であるのか伝えるだけである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Format:
		[MODIFIER_FLAG-]KEY_STRING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
書式は以下の通り:
@verbatim
[MODIFIER_FLAG-]KEY_STRING
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	These characters can be used for MODIFIER_FLAG (case is ignored):
		S	    Shift key
		L	    Lock key
		C	    Control key
		1	    Mod1 key
		2	    Mod2 key
		3	    Mod3 key
		4	    Mod4 key
		5	    Mod5 key
	Combinations are allowed, for example "S-C-space" or "SC-space" are
	both shift+ctrl+space.
	See <X11/keysymdef.h> and XStringToKeysym for KEY_STRING.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下の文字が MODIFIER_FLAG として使える (大文字でも小文字でもよい)。
@multitable @columnfractions .15 .85
@item S @tab シフトキー
@item L @tab ロックキー
@item C @tab コントロールキー
@item 1 @tab 修飾キー1
@item 2 @tab 修飾キー2
@item 3 @tab 修飾キー3
@item 4 @tab 修飾キー4
@item 5 @tab 修飾キー5
@end multitable
これらを組み合わせることができる。例えば "S-C-space" や "SC-space" はみな shift+ctrl+space を表す。

KEY_STRING については <X11/keysymdef.h> と XStringToKeysym を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
		:set imactivatekey=S-space
<	"S-space" means shift+space.  This is the activation key for kinput2 +
	canna (Japanese), and ami (Korean).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set imactivatekey=S-space
@end example
"S-space" は shift+space である。これは kinput2 + canna (日本語) および ami (韓国語) の起動キーである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'imcmdline'* *'imc'* *'noimcmdline'* *'noimc'*
'imcmdline' 'imc'	boolean (default off)
			global
			{not in Vi}
			{only available when compiled with |+mbyte|}
	When set the Input Method is always on when starting to edit a command
	line, unless entering a search pattern (see 'imsearch' for that).
	Setting this option is useful when your input method allows entering
	English characters directly, e.g., when it's used to type accented
	characters with dead keys.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imcmdline'}
@anchor{'imc'}
@anchor{'noimcmdline'}
@anchor{'noimc'}
@cindex 'imcmdline'
@cindex 'imc'
@cindex 'noimcmdline'
@cindex 'noimc'
@item 'imcmdline' 'imc'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mbyte| 機能付きでコンパイルされたときのみ有効@}

オンのときは、コマンドラインの編集を始めるときには常にインプットメソッド (IM) がオンになる。ただし検索パターンの入力には適用されない (それにはオプション '@option{imsearch}' を参照)。

ユーザーの IM が英語の文字を直接入力できるならば (例えば IM が、普段使われないキーからアクセント記号を入力する程度のものならば)、このオプションをオンにすると便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'imdisable'* *'imd'* *'noimdisable'* *'noimd'*
'imdisable' 'imd'	boolean (default off, on for some systems (SGI))
			global
			{not in Vi}
			{only available when compiled with |+mbyte|}
	When set the Input Method is never used.  This is useful to disable
	the IM when it doesn't work properly.
	Currently this option is on by default for SGI/IRIX machines.  This
	may change in later releases.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imdisable'}
@anchor{'imd'}
@anchor{'noimdisable'}
@anchor{'noimd'}
@cindex 'imdisable'
@cindex 'imd'
@cindex 'noimdisable'
@cindex 'noimd'
@item 'imdisable' 'imd'
切替 (既定ではオフ、いくつかのシステム (SGI) ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mbyte| 機能付きでコンパイルされたときのみ有効@}

オンのときは、インプットメソッド (IM) が全く使われなくなる。これは IM がうまく働かないとき、それを無効にしてしまうのに便利である。

現在のところ、SGI/IRIX のマシンではオンになっているのが既定である。これは将来変更されるかもしれない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'iminsert'* *'imi'*
'iminsert' 'imi'	number (default 0)
			local to buffer
			{not in Vi}
	Specifies whether :lmap or an Input Method (IM) is to be used in
	Insert mode.  Valid values:
		0	:lmap is off and IM is off
		1	:lmap is ON and IM is off
		2	:lmap is off and IM is ON
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'iminsert'}
@anchor{'imi'}
@cindex 'iminsert'
@cindex 'imi'
@item 'iminsert' 'imi'
数値 (既定では 0) @*
バッファについてローカル @*
@{Vi にはない@}

@{訳注: iminsert=2 の場合、挿入モードを抜けると IM がオフにされます。再度挿入モードに入ると、前回抜けたときの IM 状態が復元されます。この機能をオフにするには iminsert=0 にしてください。@}

:lmap かインプットメソッド (IM) が挿入モードで使われるかどうかを指定する。指定できる値は以下の通り:
@multitable @columnfractions .15 .85
@item 0 @tab :lmap はオフ、IM もオフ
@item 1 @tab :lmap はオン、IM はオフ
@item 2 @tab :lmap はオフ、IM はオン
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	To always reset the option to zero when leaving Insert mode with <Esc>
	this can be used: >
		:inoremap <ESC> <ESC>:set iminsert=0<CR>
<	This makes :lmap and IM turn off automatically when leaving Insert
	mode.
	Note that this option changes when using CTRL-^ in Insert mode
	|i_CTRL-^|.
	The value is set to 1 when setting 'keymap' to a valid keymap name.
	It is also used for the argument of commands like "r" and "f".
	The value 0 may not work correctly with Athena and Motif with some XIM
	methods.  Use 'imdisable' to disable XIM then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド <Esc> で挿入モードを終える度に値を 0 に戻すには、次のようにすればよい:
@example
:inoremap <ESC> <ESC>:set iminsert=0<CR>
@end example
これは挿入モードを終えるとき :lmap と IM を自動的にオフに切り替える。
@quotation
@strong{Note:} @*
挿入モードでコマンド CTRL-^ を使うと、このオプションの値が変わるので注意 |i_CTRL-^|。
@end quotation
オプション '@option{keymap}' に正しいキーマップ名が設定されると、このオプションは 1 になる。これはコマンド "r", "f" 等の引数にも適用される。

Athena と Motif では、値を 0 に設定すると正しく働かないようなXIMがある。そのときは XIM を無効にするために '@option{imdisable}' を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	You can set 'imactivatefunc' and 'imstatusfunc' to handle IME/XIM
	via external command if vim is not compiled with the |+xim|,
	|+multi_byte_ime| or |global-ime|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
vim が |+xim|, |+multi_byte_ime| または |global-ime| 機能つきでコンパイルされていない場合、外部コマンドを通して IME/XIM を処理するために '@option{imactivatefunc}' と '@option{imstatusfunc}' オプションを設定することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'imsearch'* *'ims'*
'imsearch' 'ims'	number (default -1)
			local to buffer
			{not in Vi}
	Specifies whether :lmap or an Input Method (IM) is to be used when
	entering a search pattern.  Valid values:
		-1	the value of 'iminsert' is used, makes it look like
			'iminsert' is also used when typing a search pattern
		0	:lmap is off and IM is off
		1	:lmap is ON and IM is off
		2	:lmap is off and IM is ON
	Note that this option changes when using CTRL-^ in Command-line mode
	|c_CTRL-^|.
	The value is set to 1 when it is not -1 and setting the 'keymap'
	option to a valid keymap name.
	The value 0 may not work correctly with Athena and Motif with some XIM
	methods.  Use 'imdisable' to disable XIM then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imsearch'}
@anchor{'ims'}
@cindex 'imsearch'
@cindex 'ims'
@item 'imsearch' 'ims'
数値 (既定では -1) @*
バッファについてローカル @*
@{Vi にはない@}

:lmap かインプットメソッド (IM) が、検索パターンを入力するときに使われるかどうかを指定する。指定できる値は以下の通り:
@multitable @columnfractions .1 .9
@item -1 @tab '@option{iminsert}' の値が使われ、それが検索パターンの入力にも適用されているかのように動作する
@item 0 @tab :lmap はオフ、IM もオフ
@item 1 @tab :lmap がオン、IM はオフ
@item 2 @tab :lmap はオフ、IM がオン
@end multitable
@quotation
@strong{Note:} @*
コマンドラインモードでコマンド @kbd{CTRL-^} を使うと、このオプションが変わることに注意 |c_CTRL-^|。
@end quotation
値が -1 でないなら、'@option{keymap}' に正しいキーマップ名が設定されると、このオプションは 1 になる。

Athena と Motif では、値を 0 に設定すると正しく働かないような XIM がある。そのときは XIM を無効にするために '@option{imdisable}' を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'imstatusfunc'* *'imsf'*
'imstatusfunc' 'imsf'	string (default "")
			global
			{not in Vi}
			{only available when compiled with |+mbyte|}
	This option specifies a function that is called to obtain the status
	of Input Method.  It must return a positive number when IME is active.
	It is not used in the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imstatusfunc'}
@anchor{'imsf'}
@cindex 'imstatusfunc'
@cindex 'imsf'
@item 'imstatusfunc' 'imsf'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mbyte| 機能付きでコンパイルされたときのみ有効@}

このオプションはインプットメソッド (IM) の状態を得るのに呼ばれる関数を指定する。IME がオンのとき、関数は正の数を返さなければならない。

GUI 版では使用されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
		function ImStatusFunc()
		  let is_active = ...do something
		  return is_active ? 1 : 0
		endfunction
		set imstatusfunc=ImStatusFunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
function ImStatusFunc()
  let is_active = ...何らかの処理
  return is_active ? 1 : 0
endfunction
set imstatusfunc=ImStatusFunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: This function is invoked very often.  Keep it fast.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
この関数は頻繁に呼び出されるため、速くなければならない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'imstyle'* *'imst'*
'imstyle' 'imst'	number (default 1)
			global
			{not in Vi}
			{only available when compiled with |+xim| and
			|+GUI_GTK|}
	This option specifies the input style of Input Method:
	0   use on-the-spot style
	1   over-the-spot style
	See: |xim-input-style|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'imstyle'}
@anchor{'imst'}
@cindex 'imstyle'
@cindex 'imst'
@item 'imstyle' または
@itemx 'imst'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+xim| と |+GUI_GTK| 機能付きでコンパイルされたときのみ有効@}

このオプションはインプットメソッドの入力スタイルを指定する:
@multitable @columnfractions .1 .9
@item 0 @tab on-the-spot スタイルを使う
@item 1 @tab over-the-spot スタイルを使う
@end multitable
参照: |xim-input-style|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For a long time on-the-spot style had been used in the GTK version of
	vim, however, it is known that it causes troubles when using mappings,
	|single-repeat|, etc.  Therefore over-the-spot style becomes the
	default now.  This should work fine for most people, however if you
	have any problem with it, try using on-the-spot style.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の GTK 版では長い間、on-the-spot スタイルが使われてきた。しかしこれは |single-repeat| やマッピングなどを使う際に問題を引き起すことが知られている。そのようなわけで、over-the-spot スタイルをデフォルトとすることになった。ほとんどの人にとってうまく動作するべきだが、これによって問題が生じるようであれば、on-the-spot スタイルを使ってみよ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'include'* *'inc'*
'include' 'inc'		string	(default "^\s*#\s*include")
			global or local to buffer |global-local|
			{not in Vi}
			{not available when compiled without the
			|+find_in_path| feature}
	Pattern to be used to find an include command.  It is a search
	pattern, just like for the "/" command (See |pattern|).  The default
	value is for C programs.  This option is used for the commands "[i",
	"]I", "[d", etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'include'}
@anchor{'inc'}
@cindex 'include'
@cindex 'inc'
@item 'include' 'inc'
文字列 (既定では "^\s*#\s*include") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@} @*
@{Vim が |+find_in_path| 機能付きでコンパイルされたときのみ有効@}

@{訳注: プログラミング言語の@} インクルード命令を探すのに使われるパターンを設定する。値はコマンド "/" と同様の検索パターンである (|pattern| を参照)。既定値はC言語プログラム用に設定されている。このオプションはコマンド "[i", "]I", "[d" 等に使われる。

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Normally the 'isfname' option is used to recognize the file name that
	comes after the matched pattern.  But if "\zs" appears in the pattern
	then the text matched from "\zs" to the end, or until "\ze" if it
	appears, is used as the file name.  Use this to include characters
	that are not in 'isfname', such as a space.  You can then use
	'includeexpr' to process the matched text.
	See |option-backslash| about including spaces and backslashes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、マッチしたパターンの後に続くファイル名を認識するためにオプション '@option{isfname}' が使われる。しかしパターン中に "\zs" が入っている場合、"\zs" にマッチしたテキストから最後まで、または "\ze" が入っている場合はそこまでがファイル名として認識される。スペースなど、'@option{isfname}' に入っていない文字を含めるにはこれを使う。そして '@option{includeexpr}' を使ってマッチしたテキストを処理することができる。

スペースとバックスラッシュを含める方法については |option-backslash| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'includeexpr'* *'inex'*
'includeexpr' 'inex'	string	(default "")
			local to buffer
			{not in Vi}
			{not available when compiled without the
			|+find_in_path| or |+eval| features}
	Expression to be used to transform the string found with the 'include'
	option to a file name.  Mostly useful to change "." to "/" for Java: >
		:set includeexpr=substitute(v:fname,'\\.','/','g')
<	The "v:fname" variable will be set to the file name that was detected.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'includeexpr'}
@anchor{'inex'}
@cindex 'includeexpr'
@cindex 'inex'
@item 'includeexpr' 'inex'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+find_in_path| 機能と |+eval| 機能付きでコンパイルされたときのみ有効@}

オプション '@option{include}' が判別した文字列を、ファイル名に変換するために使われる expression を指定する。以下のようにして、Java言語で "." を "/" に変換するようなときに便利である。
@example
:set includeexpr=substitute(v:fname,'\\.','/','g')
@end example
変数 "v:fname" は、判別されたファイル名に設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Also used for the |gf| command if an unmodified file name can't be
	found.  Allows doing "gf" on the name after an 'include' statement.
	Also used for |<cfile>|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド |gf| でも、ファイルの実際の名前が見つからないときは、これが使われる。プログラミング言語の '@option{include}' 文の後で "gf" を使えるようになる。また |<cfile>| にも使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| when set from a
	modeline, see |sandbox-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	It is not allowed to change text or jump to another window while
	evaluating 'includeexpr' |textlock|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{includeexpr}' を評価している間に、テキストを変更したり他のウィンドウに移ることは許されない。|textlock|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'incsearch'* *'is'* *'noincsearch'* *'nois'*
'incsearch' 'is'	boolean	(default off, set in |defaults.vim| if the
						+reltime feature is supported)
			global
			{not in Vi}
			{not available when compiled without the
			|+extra_search| features}
	While typing a search command, show where the pattern, as it was typed
	so far, matches.  The matched string is highlighted.  If the pattern
	is invalid or not found, nothing is shown.  The screen will be updated
	often, this is only useful on fast terminals.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'incsearch'}
@anchor{'is'}
@anchor{'noincsearch'}
@anchor{'nois'}
@cindex 'incsearch'
@cindex 'is'
@cindex 'noincsearch'
@cindex 'nois'
@item 'incsearch' 'is'
切替 (既定ではオフ、+reltime 機能付きでコンパイルされたときは |defaults.vim| 内で設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+extra_search| 機能付きでコンパイルされたときのみ有効@}

検索コマンドを打ち込んでいる間にも、打ち込んだところまでのパターンがマッチするテキストを、すぐに表示する。マッチした文字列は強調表示される。パターンが不適切であったり見つからなければ、何も表示されない。画面は次々更新されることになるので、このオプションは表示の速いターミナルでのみ有用である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that the match will be shown, but the cursor will return to its
	original position when no match is found and when pressing <Esc>.  You
	still need to finish the search command with <Enter> to move the
	cursor to the match.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
マッチが表示されても、カーソルは実際にはマッチした場所に移動していないので注意。カーソルを移動させるには、やはり @key{<Enter>} を打ち込んで検索コマンドを完了させる必要がある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	You can use the CTRL-G and CTRL-T keys to move to the next and
	previous match. |c_CTRL-G| |c_CTRL-T|
	When compiled with the |+reltime| feature Vim only searches for about
	half a second.  With a complicated pattern and/or a lot of text the
	match may not be found.  This is to avoid that Vim hangs while you
	are typing the pattern.
	The highlighting can be set with the 'i' flag in 'highlight'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッチを表示中は、次や前のマッチへ移動するのに @kbd{CTRL-G} と @kbd{CTRL-T} キーを使える。|c_CTRL-G| |c_CTRL-T|

|+reltime| 機能つきでコンパイルされているときは約 0.5 秒だけ検索する。複雑なパターンであったり、大量のテキストはマッチしない場合がある。これは文字をタイプしている途中で Vim が応答しなくなってしまうのを避けるためである。

強調表示は、オプション '@option{highlight}' のフラグ '@var{i}' によって設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'hlsearch' is on, all matched strings are highlighted too while
	typing a search command. See also: 'hlsearch'.
	If you don't want turn 'hlsearch' on, but want to highlight all matches
	while searching, you can turn on and off 'hlsearch' with autocmd.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'hlsearch' がオンの時、検索コマンドを入力している間にも、マッチした文字列全てがハイライトされる。'@option{hlsearch}' も参照。

'@option{hlsearch}' をオンにしたくはないけれども、検索中にマッチしたもの全てをハイライトしたい場合には、自動コマンドで '@option{hlsearch}' をオンオフすることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Example: >
		augroup vimrc-incsearch-highlight
		  autocmd!
		  autocmd CmdlineEnter /,\? :set hlsearch
		  autocmd CmdlineLeave /,\? :set nohlsearch
		augroup END
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

例:
@example
augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	CTRL-L can be used to add one character from after the current match
	to the command line.  If 'ignorecase' and 'smartcase' are set and the
	command line has no uppercase characters, the added character is
	converted to lowercase.
	CTRL-R CTRL-W can be used to add the word at the end of the current
	match, excluding the characters that were already typed.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-L} を押すと、現在マッチしているテキストの後からコマンドラインへ 1 文字を追加することができる。その際、'@option{ignorecase}' と '@option{smartcase}' が設定されていてコマンドラインに大文字が含まれていなければ、追加された文字は小文字に変換される。

@kbd{CTRL-R} @kbd{CTRL-W} を押すと、現在マッチしているテキストの末尾から単語を追加することができる。そのとき、既にタイプされている文字は除かれる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'indentexpr'* *'inde'*
'indentexpr' 'inde'	string	(default "")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+cindent|
			or |+eval| features}
	Expression which is evaluated to obtain the proper indent for a line.
	It is used when a new line is created, for the |=| operator and
	in Insert mode as specified with the 'indentkeys' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'indentexpr'}
@anchor{'inde'}
@cindex 'indentexpr'
@cindex 'inde'
@item 'indentexpr' 'inde'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能と |+eval| 機能付きでコンパイルされたときのみ有効@}

ある行の適切なインデントを得るために評価される expression。これは新しい行が作られるとき、オペレータ |=| が使われたとき、挿入モードでオプション '@option{indentkeys}' で指定したキーを打ち込んだときに使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When this option is not empty, it overrules the 'cindent' and
	'smartindent' indenting.  When 'lisp' is set, this option is
	overridden by the Lisp indentation algorithm.
	When 'paste' is set this option is not used for indenting.
	The expression is evaluated with |v:lnum| set to the line number for
	which the indent is to be computed.  The cursor is also in this line
	when the expression is evaluated (but it may be moved around).
	The expression must return the number of spaces worth of indent.  It
	can return "-1" to keep the current indent (this means 'autoindent' is
	used for the indent).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値が空でないとき、この設定が '@option{cindent}' と '@option{smartindent}' によるインデントの設定を上書きする。'@option{lisp}' がオンのとき、このオプションは Lisp のインデントアルゴリズムによって上書きされる。

'@option{paste}' がオンのとき、このオプションはインデントに使われない。指定された expression が評価されるとき、変数 |v:lnum| はインデント計算の対象となっている行の行番号に設定される。また、この式を評価するとき、カーソルもこの行に置かれる(移動してしまうかもしれないが)。

指定された expression は、インデントすべき空白の数を返さなければならない。そのままのインデントを保たせるには "-1" を返させればよい (つまり、こうするとインデントには '@option{autoindent}' が使われる)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Functions useful for computing the indent are |indent()|, |cindent()|
	and |lispindent()|.
	The evaluation of the expression must not have side effects!  It must
	not change the text, jump to another window, etc.  Afterwards the
	cursor position is always restored, thus the cursor may be moved.
	Normally this option would be set to call a function: >
		:set indentexpr=GetMyIndent()
<	Error messages will be suppressed, unless the 'debug' option contains
	"msg".
	See |indent-expression|.
	NOTE: This option is set to "" when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
インデント深さを計算するのに便利な関数は、|indent()|, |cindent()| と |lispindent()| である。

この expression の評価には副作用があってはならない！つまり、テキストを変更したり、別のウィンドウに移動してはいけない。評価後にはカーソル位置は常に復元されるので、カーソルは移動してもよい。

普通、このオプションは関数を呼び出すように設定される:
@example
:set indentexpr=GetMyIndent()
@end example
'@option{debug}' が "@var{msg}" を含まないない限り、エラーメッセージの表示は抑制される。|indent-expression| を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると "" になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The expression will be evaluated in the |sandbox| when set from a
	modeline, see |sandbox-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	It is not allowed to change text or jump to another window while
	evaluating 'indentexpr' |textlock|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{indentexpr}' を評価している間に、テキストを変更したり他のウィンドウに移ることは許されない。|textlock| 
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'indentkeys'* *'indk'*
'indentkeys' 'indk'	string	(default "0{,0},:,0#,!^F,o,O,e")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+cindent|
			feature}
	A list of keys that, when typed in Insert mode, cause reindenting of
	the current line.  Only happens if 'indentexpr' isn't empty.
	The format is identical to 'cinkeys', see |indentkeys-format|.
	See |C-indenting| and |indent-expression|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'indentkeys'}
@anchor{'indk'}
@cindex 'indentkeys'
@cindex 'indk'
@item 'indentkeys' 'indk'
文字列 (既定では "0@{,0@},:,0#,!^F,o,O,e") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cindent| 機能付きでコンパイルされたときのみ有効@}

挿入モードで打ち込まれたときに、現在行の再インデントを引き起こすキーのリスト。これはオプション '@option{indentexpr}' が空でないときのみ起きる。書式は '@option{cinkeys}' と同様である。|indentkeys-format| を参照。|C-indenting| と |indent-expression| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'infercase'* *'inf'* *'noinfercase'* *'noinf'*
'infercase' 'inf'	boolean	(default off)
			local to buffer
			{not in Vi}
	When doing keyword completion in insert mode |ins-completion|, and
	'ignorecase' is also on, the case of the match is adjusted depending
	on the typed text.  If the typed text contains a lowercase letter
	where the match has an upper case letter, the completed part is made
	lowercase.  If the typed text has no lowercase letters and the match
	has a lowercase letter where the typed text has an uppercase letter,
	and there is a letter before it, the completed part is made uppercase.
	With 'noinfercase' the match is used as-is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'infercase'}
@anchor{'inf'}
@anchor{'noinfercase'}
@anchor{'noinf'}
@cindex 'infercase'
@cindex 'inf'
@cindex 'noinfercase'
@cindex 'noinf'
@item 'infercase' 'inf'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

挿入モードで単語補完 |ins-completion| をしているとき、このオプションと '@option{ignorecase}' がオンならば、マッチした単語の大文字／小文字の区別は打ち込んだテキストに応じて修正される。

打ち込んだテキストでは小文字だがマッチした単語では大文字であるような所があれば、補完される部分もみな小文字になる。打ち込んだテキストには小文字が 1 個もなく、打ち込んだテキストでは大文字だがマッチした単語では小文字であるような所があり、かつその前に文字があるならば、補完される部分もみな大文字になる。

'@option{noinfercase}' にすると、マッチした単語がそのまま挿入される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'insertmode'* *'im'* *'noinsertmode'* *'noim'*
'insertmode' 'im'	boolean	(default off)
			global
			{not in Vi}
	Makes Vim work in a way that Insert mode is the default mode.  Useful
	if you want to use Vim as a modeless editor.  Used for |evim|.
	These Insert mode commands will be useful:
	- Use the cursor keys to move around.
	- Use CTRL-O to execute one Normal mode command |i_CTRL-O|.  When
	  this is a mapping, it is executed as if 'insertmode' was off.
	  Normal mode remains active until the mapping is finished.
	- Use CTRL-L to execute a number of Normal mode commands, then use
	  <Esc> to get back to Insert mode.  Note that CTRL-L moves the cursor
	  left, like <Esc> does when 'insertmode' isn't set.  |i_CTRL-L|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'insertmode'}
@anchor{'im'}
@anchor{'noinsertmode'}
@anchor{'noim'}
@cindex 'insertmode'
@cindex 'im'
@cindex 'noinsertmode'
@cindex 'noim'
@item 'insertmode' 'im'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

Vim が挿入モードを中心として動作するようになる。Vim をモードを持たないエディタとして使いたいときに便利である。|evim| で使われている。

以下の挿入モードのコマンドが便利だろう:
@itemize @minus
@item カーソル移動に矢印キーを使う
@item 1 個のノーマルモードコマンドを実行するためにはコマンド @kbd{CTRL-O} を使う |i_CTRL-O|。コマンドが別のキー列にマッピングされていたときは、オプション '@option{insertmode}' がオフであるときのように実行される。つまりマッピングの内容が終了するまでノーマルモードが続く。
@item 数個のノーマルモードコマンドを使うためには先に @kbd{CTRL-L} を使い、その後挿入モードに戻るために @key{<Esc>} を使う。
@quotation
@strong{Note:} @kbd{CTRL-L} を使うと、'@option{insertmode}' をオフにして @kbd{<Esc>} を押したときと同様にカーソルが左へ移動する。|i_CTRL-L|
@end quotation
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	These items change when 'insertmode' is set:
	- when starting to edit of a file, Vim goes to Insert mode.
	- <Esc> in Insert mode is a no-op and beeps.
	- <Esc> in Normal mode makes Vim go to Insert mode.
	- CTRL-L in Insert mode is a command, it is not inserted.
	- CTRL-Z in Insert mode suspends Vim, see |CTRL-Z|.	*i_CTRL-Z*
	However, when <Esc> is used inside a mapping, it behaves like
	'insertmode' was not set.  This was done to be able to use the same
	mappings with 'insertmode' set or not set.
	When executing commands with |:normal| 'insertmode' is not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{insertmode}' がオンになると、以下の項目に変化がある:
@itemize @minus
@item ファイルの編集を始めたとき、Vim は挿入モードになっている。
@item 挿入モードで @key{<Esc>} を入力しても動作はなく (no-op)、ビープ音が鳴る。
@item ノーマルモードで @key{<Esc>} を入力すると挿入モードに移る。
@item 挿入モードでの @key{CTRL-L} の入力はコマンドであり、挿入されない。
@anchor{i_CTRL-Z}
@cindex i_CTRL-Z
@item 挿入モードで @key{CTRL-Z} を入力するとサスペンドする。|CTRL-Z| を参照。
@end itemize
しかしマッピング内で @key{<Esc>} が使われたときは、'@option{insertmode}' がオフのときのように動作する。これは '@option{insertmode}' がオンでもオフでも、同じマッピングが使えるようにするためである。

|:normal| でノーマルモードコマンドを実行するときは、'@option{insertmode}' は使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'isfname'* *'isf'*
'isfname' 'isf'		string	(default for MS-DOS, Win32 and OS/2:
			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
			    for AMIGA: "@,48-57,/,.,-,_,+,,,$,:"
			    for VMS: "@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
			    for OS/390: "@,240-249,/,.,-,_,+,,,#,$,%,~,="
			    otherwise: "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'isfname'}
@anchor{'isf'}
@cindex 'isfname'
@cindex 'isf'
@item 'isfname' 'isf'
文字列 (
@multitable @columnfractions .4 .6
@item MS-DOS, Win32と OS/2 での既定値は: @tab "@@,48-57,/,\,.,-,_,+,,,#,$,%,@{,@},[,],:,@@-@@,!,~,="
@item AMIGAでは: @tab "@@,48-57,/,.,-,_,+,,,$,:"
@item VMSでは: @tab "@@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
@item OS/390では: @tab "@@,240-249,/,.,-,_,+,,,#,$,%,~,="
@item それ以外では: @tab "@@,48-57,/,.,-,_,+,,,#,$,%,~,=")
@end multitable
グローバル @*
@{Vi にはない@}

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The characters specified by this option are included in file names and
	path names.  Filenames are used for commands like "gf", "[i" and in
	the tags file.  It is also used for "\f" in a |pattern|.
	Multi-byte characters 256 and above are always included, only the
	characters up to 255 are specified with this option.
	For UTF-8 the characters 0xa0 to 0xff are included as well.
	Think twice before adding white space to this option.  Although a
	space may appear inside a file name, the effect will be that Vim
	doesn't know where a file name starts or ends when doing completion.
	It most likely works better without a space in 'isfname'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル名やパス名に使われる文字を指定する。ファイル名はコマンド "gf", "[i" 等やタグファイル内で使われる。またパターン |pattern| 内の "\f" にも使われる。

文字コードが 256 以上のマルチバイト文字は常に含まれることになっているので、文字コードが 255 以下の文字のみをこのオプションで指定する。

UTF-8では、文字コードが 0xa0 から 0xff の文字は、同様に常に含まれる。

このオプションに空白文字を加える場合はよく考えること！ファイル名にスペースが含まれることはあるが、スペースを含めると、ファイル名補完の際に、どこからどこまでがファイル名であるか判定できなくなってしまうだろう。おそらくスペースは含めない方がよいだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note that on systems using a backslash as path separator, Vim tries to
	do its best to make it work as you would expect.  That is a bit
	tricky, since Vi originally used the backslash to escape special
	characters.  Vim will not remove a backslash in front of a normal file
	name character on these systems, but it will on Unix and alikes.  The
	'&' and '^' are not included by default, because these are special for
	cmd.exe.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'\' をパスの区切りに使うシステムでは、Vim は '\' がユーザーの想定通りに働くよう最善を尽くす。これには少し巧妙なことをしている。なぜなら Vi は元々、'\' を特殊文字をエスケープするために使っていたからだ。

そういったシステムでは、普通のファイル名の文字の前にある '\' を取り除かない。しかし Unix 系列のシステムでは取り除く。既定では '&' と '^' は含まれない。それはこれらの文字が cmd.exe @{訳注: Windows NT のシェル@} にとって特別な意味を持つからである。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The format of this option is a list of parts, separated with commas.
	Each part can be a single character number or a range.  A range is two
	character numbers with '-' in between.  A character number can be a
	decimal number between 0 and 255 or the ASCII character itself (does
	not work for digits).  Example:
		"_,-,128-140,#-43"	(include '_' and '-' and the range
					128 to 140 and '#' to 43)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの値の書式は、コンマ区切りの指定部のリストである。それぞれの指定部は単一の文字または範囲指定からなる。範囲指定は 2 個の文字コードが '-' で区切られたものである。文字コードは 0 から 255 の 10 進整数だが、代わりに ASCII キャラクタ自身を使ってもよい (ただし数字には使えない)。

例:
@multitable @columnfractions .3 .7
@item "_,-,128-140,#-43" @tab
('_' と、'-' と、コードが 128 から 140 までの文字と、'#' からコードが 43 までの文字を含む)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If a part starts with '^', the following character number or range
	will be excluded from the option.  The option is interpreted from left
	to right.  Put the excluded character after the range where it is
	included.  To include '^' itself use it as the last character of the
	option or the end of a range.  Example:
		"^a-z,#,^"	(exclude 'a' to 'z', include '#' and '^')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定部が '^' で始まるとき、それに続く文字コードまたは範囲は指定から除外される。オプションは左から右に解釈されるので、指定したある範囲に除外したい文字があったら、それをその範囲の後に除外指定すること。文字 '^' 自体を値に含みたいときは、値または指定部の最後に指定すること。

例:
@multitable @columnfractions .3 .7
@item "^a-z,#,^" @tab
('a' から 'z' までの文字を除き、'#' と '^' を含む)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If the character is '@', all characters where isalpha() returns TRUE
	are included.  Normally these are the characters a to z and A to Z,
	plus accented characters.  To include '@' itself use "@-@".  Examples:
		"@,^a-z"	All alphabetic characters, excluding lower
				case ASCII letters.
		"a-z,A-Z,@-@"	All letters plus the '@' character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字として '@@' を指定すると、関数 isalpha() で TRUE が返るような文字全てが含まれる。普通、それは a から z と A から Z の文字と、それらにアクセントのついたものである。文字 '@@' 自身を値に含みたいときは、"@@-@@" とすること。

例:
@multitable @columnfractions .3 .7
@item "@@,^a-z" @tab
アルファベットの仲間全て、ただしアルファベットの小文字は除く
@item "a-z,A-Z,@@-@@" @tab 
アルファベット全てと、文字 '@@'
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A comma can be included by using it where a character number is
	expected.  Example:
		"48-57,,,_"	Digits, comma and underscore.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンマを含めるには、文字コードが来るはずのところにコンマをおけばよい。

例:
@multitable @columnfractions .3 .7
@item "48-57,,,_" @tab
数字と、コンマと、下線 (アンダースコア)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A comma can be excluded by prepending a '^'.  Example:
		" -~,^,,9"	All characters from space to '~', excluding
				comma, plus <Tab>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンマを除外するには、前に '^' をおく。

例:
@multitable @columnfractions .3 .7
@item " -~,^,,9" @tab
空白から '~' までのコンマを除いた全ての文字と <Tab>
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	See |option-backslash| about including spaces and backslashes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値に空白や '\' を含める方法については、|option-backslash| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'isident'* *'isi'*
'isident' 'isi'		string	(default for MS-DOS, Win32 and OS/2:
					   "@,48-57,_,128-167,224-235"
				otherwise: "@,48-57,_,192-255")
			global
			{not in Vi}
	The characters given by this option are included in identifiers.
	Identifiers are used in recognizing environment variables and after a
	match of the 'define' option.  It is also used for "\i" in a
	|pattern|.  See 'isfname' for a description of the format of this
	option.
	Careful: If you change this option, it might break expanding
	environment variables.  E.g., when '/' is included and Vim tries to
	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'isident'}
@anchor{'isi'}
@cindex 'isident'
@cindex 'isi'
@item 'isident' 'isi'
文字列	(
@multitable @columnfractions .4 .6
@item MS-DOS, Win32 と OS/2 での既定値は: @tab "@@,48-57,_,128-167,224-235"
@item それ以外では: @tab "@@,48-57,_,192-255")
@end multitable
グローバル @*
@{Vi にはない@}

Identifier に使われる文字を指定する。Identifier は、環境変数の認識とオプション '@option{define}' のマッチしたところの後に使われる。またパターン |pattern| 内の "\i" にも使われる。このオプションの書式の説明は、'@option{isfname}' を参考にすること。
@quotation
@strong{注意:} @*
このオプションを変更すると、環境変数の展開に失敗するかもしれない。例えば値に '/' が含まれているときに "$HOME/.viminfo" を展開しようとするとき等である。おそらく代わりに '@option{iskeyword}' を変更するべきだろう。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'iskeyword'* *'isk'*
'iskeyword' 'isk'	string (Vim default for MS-DOS and Win32:
					    "@,48-57,_,128-167,224-235"
				   otherwise:  "@,48-57,_,192-255"
				Vi default: "@,48-57,_")
			local to buffer
			{not in Vi}
	Keywords are used in searching and recognizing with many commands:
	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
	'isfname' for a description of the format of this option.  For C
	programs you could use "a-z,A-Z,48-57,_,.,-,>".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'iskeyword'}
@anchor{'isk'}
@cindex 'iskeyword'
@cindex 'isk'
@item 'iskeyword' 'isk'
文字列 (
@multitable @columnfractions .4 .6
@item MS-DOS と Win32 での Vim の既定値: @tab "@@,48-57,_,128-167,224-235"
@item それ以外のシステムでのVimの既定値: @tab "@@,48-57,_,192-255"
@item Vi の既定値: @tab "@@,48-57,_")
@end multitable
バッファについてローカル @*
@{Vi にはない@}

Keyword は、"w", "*", "[i" 等の多くのコマンドで検索と認識に使われる。またパターン |pattern| 内の "\k" にも使われる。このオプションの値の書式の説明については、オプション '@option{isfname}' を参考にすること。C 言語プログラムには "a-z,A-Z,48-57,_,.,-,>" が使えるだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	For a help file it is set to all non-blank printable characters except
	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
	command).
	When the 'lisp' option is on the '-' character is always included.
	This option also influences syntax highlighting, unless the syntax
	uses |:syn-iskeyword|.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプファイルでは、このオプションは '*', '"', '|' と空白の仲間を除いた全ての printable な文字 @{訳注: 文書先頭を参照@} に設定される (コマンド上で @kbd{CTRL-]} を入力したときにそのコマンドについてのヘルプにジャンプできるようにするため)。

'@option{lisp}' がオンのときは、文字 '-' は常に含まれる。このオプションは、シンタックスが |:syn-iskeyword| を使っていない場合には、シンタックスハイライトにも影響を与える。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'isprint'* *'isp'*
'isprint' 'isp'	string	(default for MS-DOS, Win32, OS/2 and Macintosh:
				"@,~-255"; otherwise: "@,161-255")
			global
			{not in Vi}
	The characters given by this option are displayed directly on the
	screen.  It is also used for "\p" in a |pattern|.  The characters from
	space (ASCII 32) to '~' (ASCII 126) are always displayed directly,
	even when they are not included in 'isprint' or excluded.  See
	'isfname' for a description of the format of this option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'isprint'}
@anchor{'isp'}
@cindex 'isprint'
@cindex 'isp'
@item 'isprint' 'isp'
文字列 (
@multitable @columnfractions .4 .6
@item MS-DOS, Win32, OS/2 と Macintosh での既定値: @tab "@@,~-255"
@item それ以外では: @tab "@@,161-255")
@end multitable
グローバル @*
@{Vi にはない@}

このオプションで指定された文字は、画面に直接表示される。またパターン |pattern| 内の "\p" にも使われる。空白 (ASCII コード 32) から '~' (ASCII コード 126) までの文字は、'@option{isprint}' に指定されていなくても、または除外指定されていても、常に直接表示される。このオプションの書式の説明は、'@option{isfname}' を参考にすること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Non-printable characters are displayed with two characters:
		  0 -  31	"^@" - "^_"
		 32 - 126	always single characters
		   127		"^?"
		128 - 159	"~@" - "~_"
		160 - 254	"| " - "|~"
		   255		"~?"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
unprintable な文字 @{訳注: 文書先頭を参照@} は、2 文字で表示される。
@multitable @columnfractions .4 .6
@item 0 - 31 @tab "^@@" - "^_"
@item 32 - 126 @tab 常に 1 文字で表示される
@item 127 @tab "^?"
@item 128 - 159 @tab "~@@" - "~_"
@item 160 - 254 @tab "| " - "|~"
@item 255 @tab "~?"
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'encoding' is a Unicode one, illegal bytes from 128 to 255 are
	displayed as <xx>, with the hexadecimal value of the byte.
	When 'display' contains "uhex" all unprintable characters are
	displayed as <xx>.
	The SpecialKey highlighting will be used for unprintable characters.
	|hl-SpecialKey|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' が Unicode の一種だったときは、文字コードが 128 から 255 までの不正な文字は、<xx> という形式で 16 進表示される。

'@option{display}' に "@var{uhex}" が含まれているときは、全ての unprintable な文字が <xx> の形式で表示される。

unprintable な文字には、強調表示グループ SpecialKey が使われる |hl-NonText|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Multi-byte characters 256 and above are always included, only the
	characters up to 255 are specified with this option.  When a character
	is printable but it is not available in the current font, a
	replacement character will be shown.
	Unprintable and zero-width Unicode characters are displayed as <xxxx>.
	There is no option to specify these characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字コードが 256 以上のマルチバイト文字は常に含まれることになっているので、文字コードが 255 以下の文字のみをこのオプションに指定する。文字が本来は printable だが現在のフォントでは表示できないときは、代替文字が表示される。

Unprintable またはゼロ幅の Unicode 文字は <xxxx> という形式で表示される。そういった文字を指定するオプションはない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'joinspaces'* *'js'* *'nojoinspaces'* *'nojs'*
'joinspaces' 'js'	boolean	(default on)
			global
			{not in Vi}
	Insert two spaces after a '.', '?' and '!' with a join command.
	When 'cpoptions' includes the 'j' flag, only do this after a '.'.
	Otherwise only one space is inserted.
	NOTE: This option is set when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'joinspaces'}
@anchor{'js'}
@anchor{'nojoinspaces'}
@anchor{'nojs'}
@cindex 'joinspaces'
@cindex 'js'
@cindex 'nojoinspaces'
@cindex 'nojs'
@item 'joinspaces' 'js'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

行連結コマンドにおいて、'.', '?' や '!' の後に空白を 2 個挿入する。オプション '@option{cpoptions}' にフラグ '@var{j}' が含まれるときは、'.' の後にのみ空白を 2 個挿入する。それ以外では空白は 1 個だけ挿入される。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンのときにはオンになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'key'*
'key'			string	(default "")
			local to buffer
			{not in Vi}
			{only available when compiled with the |+cryptv|
			feature}
	The key that is used for encrypting and decrypting the current buffer.
	See |encryption| and 'cryptmethod'.
	Careful: Do not set the key value by hand, someone might see the typed
	key.  Use the |:X| command.  But you can make 'key' empty: >
		:set key=
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'key'}
@cindex 'key'
@item 'key'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+cryptv| 機能付きでコンパイルされたときのみ有効@}

カレントバッファを暗号化したり復号したりするのに使われるキー。|encryption| と 'cryptmethod' を参照。
@quotation
@strong{注意:} @*
このキーの値を手動で @{訳注: コマンド "@command{:set}" を使って、ということ@} 設定しないこと。誰かが入力された文字を盗み見るかもしれない。代わりにコマンド |:X| を使うこと。しかし次のようにして、'@option{key}' を空にするのはよい。
@example
:set key=
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	It is not possible to get the value of this option with ":set key" or
	"echo &key".  This is to avoid showing it to someone who shouldn't
	know.  It also means you cannot see it yourself once you have set it,
	be careful not to make a typing error!
	You can use "&key" in an expression to detect whether encryption is
	enabled.  When 'key' is set it returns "*****" (five stars).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの値は、"@command{:set key}" や "echo &key" 等で得ることはできない。これは、値を知るべきでない人に知られないようにするためである。このことはまた、設定してしまうとユーザー自身も値を知ることができないということである。タイプミスをしないよう注意！

スクリプトで "&key" を使うことで暗号化が有効になっているか確認できる。'@option{key}' がセットされている場合は "*****" (5 個のスター) が返る。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'keymap'* *'kmp'* *E544*
'keymap' 'kmp'		string	(default "")
			local to buffer
			{not in Vi}
			{only available when compiled with the |+keymap|
			feature}
	Name of a keyboard mapping.  See |mbyte-keymap|.
	Setting this option to a valid keymap name has the side effect of
	setting 'iminsert' to one, so that the keymap becomes effective.
	'imsearch' is also set to one, unless it was -1
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'keymap'}
@anchor{'kmp'}
@anchor{E544}
@cindex 'keymap'
@cindex 'kmp'
@cindex E544
@item 'keymap' 'kmp'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+keymap| 機能付きでコンパイルされたときのみ有効@}

キーマッピングの名前を指定する。|mbyte-keymap| を参照。このオプションを適正なキーマップ名に設定すると、キーマッピングが有効になるようにオプション '@option{iminsert}' が 1 になるという影響がある。また '@option{imsearch}' も、元が -1 でない限り 1 になる。

通常のファイル名文字だけが使用できる。"/\*?[|<>" は不正である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'keymodel'* *'km'*
'keymodel' 'km'		string	(default "")
			global
			{not in Vi}
	List of comma separated words, which enable special things that keys
	can do.  These values can be used:
	   startsel	Using a shifted special key starts selection (either
			Select mode or Visual mode, depending on "key" being
			present in 'selectmode').
	   stopsel	Using a not-shifted special key stops selection.
	Special keys in this context are the cursor keys, <End>, <Home>,
	<PageUp> and <PageDown>.
	The 'keymodel' option is set by the |:behave| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'keymodel'}
@anchor{'km'}
@cindex 'keymodel'
@cindex 'km'
@item 'keymodel' 'km'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

キーで可能なことを指定するためのキーワードの、コンマ区切りのリスト。指定可能なキーワードは以下の通りである:
@multitable @columnfractions .2 .8
@item startsel @tab シフトキーと特別なキーを同時に押して選択を開始する (選択モードとビジュアルモードのどちらでも、オプション '@option{selectmode}' で指定された "キー" によって)。
@item stopsel @tab シフトキーを押さないままの特別なキーで選択を止める。
@end multitable
ここでいう「特別なキー」とはカーソルキー、@key{<End>}, @key{<Home>}, @key{<PageUp>} や @key{<PageDown>} である。

'@option{keymodel}' は、コマンド |:behave| によって設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'keywordprg'* *'kp'*
'keywordprg' 'kp'	string	(default "man" or "man -s",  DOS: ":help",
								  VMS: "help")
			global or local to buffer |global-local|
			{not in Vi}
	Program to use for the |K| command.  Environment variables are
	expanded |:set_env|.  ":help" may be used to access the Vim internal
	help.  (Note that previously setting the global option to the empty
	value did this, which is now deprecated.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'keywordprg'}
@anchor{'kp'}
@cindex 'keywordprg'
@cindex 'kp'
@item 'keywordprg' 'kp'
文字列 (
@multitable @columnfractions .4 .6
@item 既定では @tab "man" または "man -s",
@item DOS では: @tab ":help"
@item VMS では: @tab "help")
@end multitable
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

コマンド |K| に使われるプログラム。環境変数は展開される |:set_env|。Vim の内部ヘルプを開くコマンドは "@command{:help}" である(以前はこのオプションのグローバル値を空にすると Vim の内部ヘルプが使われたが、今は推奨されていない)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the first character is ":", the command is invoked as a Vim
	Ex command prefixed with [count].
	When "man", "man -s" or an Ex command is used, Vim will automatically
	translate a count for the "K" command and pass it as the first
	argument.  For "man -s" the "-s" is removed when there is no count.
	See |option-backslash| about including spaces and backslashes.
	Example: >
		:set keywordprg=man\ -s
<	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初の文字が ":" のときは、[count] を頭に付けて Vim の Ex コマンドとして実行される。

"man", "man -s" または1つのExコマンドが使われた場合、Vim は "K" に指定されたカウントを自動的に変換し最初の引数として渡す。"man -s" が指定されカウントが指定されなかったときは "-s" が削除される。値に空白や '\' を含める方法については、|option-backslash| を参照。

例:
@example
:set keywordprg=man\ -s
@end example
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'langmap'* *'lmap'* *E357* *E358*
'langmap' 'lmap'	string	(default "")
			global
			{not in Vi}
			{only available when compiled with the |+langmap|
			feature}
	This option allows switching your keyboard into a special language
	mode.  When you are typing text in Insert mode the characters are
	inserted directly.  When in Normal mode the 'langmap' option takes
	care of translating these special characters to the original meaning
	of the key.  This means you don't have to change the keyboard mode to
	be able to execute Normal mode commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'langmap'}
@anchor{'lmap'}
@anchor{E357}
@anchor{E358}
@cindex 'langmap'
@cindex 'lmap'
@cindex E357
@cindex E358
@item 'langmap' 'lmap'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+langmap| 機能付きでコンパイルされたときのみ有効@}

このオプションでは、ユーザーのキーボードを特別な言語モードに切り替えられるようにする。挿入モードで文字を入力しているときは、文字は直接入力される。しかしノーマルモードではオプション '@option{langmap}' により、入力された特別な文字をキー本来の文字に変換する。つまりノーマルモードコマンドを実行するためにキーボードモードを変更しなくともよいということである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This is the opposite of the 'keymap' option, where characters are
	mapped in Insert mode.
	Also consider resetting 'langremap' to avoid 'langmap' applies to
	characters resulting from a mapping.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは '@option{keymap}' と正反対のものである。'@option{keymap}' は挿入モードでマッピングを行う。

また '@option{langmap}' の文字がマッピングの結果として適用されない様に '@option{langremap}' をリセットすることも考慮する。

このオプションはセキュリティ上の理由で、|modeline| からや |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example (for Greek, in UTF-8):				*greek*  >
	    :set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{greek}
@cindex greek
例 (ギリシャ語に対して、UTF-8で):
@example
:set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Example (exchanges meaning of z and y for commands): >
	    :set langmap=zy,yz,ZY,YZ
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例 (コマンドの z と y の意味の交換):
@example
:set langmap=zy,yz,ZY,YZ
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The 'langmap' option is a list of parts, separated with commas.  Each
	part can be in one of two forms:
	1.  A list of pairs.  Each pair is a "from" character immediately
	    followed by the "to" character.  Examples: "aA", "aAbBcC".
	2.  A list of "from" characters, a semi-colon and a list of "to"
	    characters.  Example: "abc;ABC"
	Example: "aA,fgh;FGH,cCdDeE"
	Special characters need to be preceded with a backslash.  These are
	";", ',' and backslash itself.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{langmap}' は、コンマ区切りの指定部のリストである。それぞれの指定部は次の 2 種類のうちどちらかの形式に従う:
@enumerate
@item
2 文字の組のリスト。変換「元」の文字の直後に変換「先」の文字を置いて組を作る。

例: "aA", "aAbBcC"
@item
変換「元」の文字のリスト、セミコロン、変換「先」の文字のリスト。

例: "abc;ABC"
@end enumerate
例: "aA,fgh;FGH,cCdDeE"

特別な文字は '\' を前に置く必要がある。そのような文字は ";", ',' と '\' 自身である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This will allow you to activate vim actions without having to switch
	back and forth between the languages.  Your language characters will
	be understood as normal vim English characters (according to the
	langmap mappings) in the following cases:
	 o Normal/Visual mode (commands, buffer/register names, user mappings)
	 o Insert/Replace Mode: Register names after CTRL-R
	 o Insert/Replace Mode: Mappings
	Characters entered in Command-line mode will NOT be affected by
	this option.   Note that this option can be changed at any time
	allowing to switch between mappings for different languages/encodings.
	Use a mapping to avoid having to type it each time!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Langmap を使えば言語間の切り替えなしにVimの機能を有効化することができる。以下のような場合では、ユーザーの言語の文字でも、Vimは (langmap のマッピングに従って) 通常の英語の文字として理解できる:
@itemize @bullet
@item ノーマル/ビジュアルモード (コマンド、バッファ／レジスタ名、ユーザーのマッピング)
@item 挿入/置換モード: @kbd{CTRL-R} 入力後のレジスタ名
@item 挿入/置換モード: マッピング
@end itemize
コマンドラインモードで入力された文字には、このオプションは効力を「持たない」。
@quotation
@strong{Note:} @*
このオプションは、異なった言語／エンコーディング用のマッピングを切り替えられるときにはいつでも設定を変更できることに注意。毎回マッピング設定を打ち込まずに済むようにするには、マッピングを使うこと！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'langmenu'* *'lm'*
'langmenu' 'lm'		string	(default "")
			global
			{not in Vi}
			{only available when compiled with the |+menu| and
			|+multi_lang| features}
	Language to use for menu translation.  Tells which file is loaded
	from the "lang" directory in 'runtimepath': >
		"lang/menu_" . &langmenu . ".vim"
<	(without the spaces).  For example, to always use the Dutch menus, no
	matter what $LANG is set to: >
		:set langmenu=nl_NL.ISO_8859-1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'langmenu'}
@anchor{'lm'}
@cindex 'langmenu'
@cindex 'lm'
@item 'langmenu' 'lm'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+menu| 機能と |+multi_lang| 機能付きでコンパイルされたときのみ有効@}

メニュー翻訳に使われる言語。つまり '@option{runtimepath}' 内のディレクトリ "lang" からどのファイルを読み込むのか指定する。指定方法は次の通り (空白はなし)。
@verbatim
"lang/menu_" . &langmenu . ".vim"
@end verbatim
例えば、環境変数 $LANG が何に設定されていても、常にオランダ語メニューを使うには、次のようにする。
@example
:set langmenu=nl_NL.ISO_8859-1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	When 'langmenu' is empty, |v:lang| is used.
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
	If your $LANG is set to a non-English language but you do want to use
	the English menus: >
		:set langmenu=none
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{langmenu}' が空のときは、変数 |v:lang| が使われる。通常のファイル名文字だけが使用できる。"/\*?[|<>" は不正である。ユーザーの環境変数 @env{$LANG} は英語以外の言語だが、必ず英語のメニューを使いたいならば、次のようにする。
@example
:set langmenu=none
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	This option must be set before loading menus, switching on filetype
	detection or syntax highlighting.  Once the menus are defined setting
	this option has no effect.  But you could do this: >
		:source $VIMRUNTIME/delmenu.vim
		:set langmenu=de_DE.ISO_8859-1
		:source $VIMRUNTIME/menu.vim
<	Warning: This deletes all menus that you defined yourself!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは、メニューの読み込み、ファイルタイプ判定の起動、構文強調表示の起動のいずれよりも先に設定しなければならない。メニューが定義されてしまうと、このオプションを設定しても何の効果もない。しかしこうすることはできる。
@example
:source $VIMRUNTIME/delmenu.vim
:set langmenu=de_DE.ISO_8859-1
:source $VIMRUNTIME/menu.vim
@end example
@quotation
@strong{警告:} @*
こうすると、ユーザー自身の定義したメニューも含む、全てのメニューがいったん削除される！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'langnoremap'* *'lnr'* *'nolangnoremap'* *'nolnr'*
'langnoremap' 'lnr'	boolean (default off, set in |defaults.vim|)
			global
			{not in Vi}
			{only available when compiled with the |+langmap|
			feature}
	This is just like 'langremap' but with the value inverted.  It only
	exists for backwards compatibility.  When setting 'langremap' then
	'langnoremap' is set to the inverted value, and the other way around.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'langnoremap'}
@anchor{'lnr'}
@anchor{'nolangnoremap'}
@anchor{'nolnr'}
@cindex 'langnoremap'
@cindex 'lnr'
@cindex 'nolangnoremap'
@cindex 'nolnr'
@item 'langnoremap' 'lnr'
切替 (既定ではオフ、|defaults.vim| でオンに設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+langmap| 機能付きでコンパイルされたときのみ有効@}

これは '@option{langremap}' に似ているが、値が逆になっている。また後方互換性のためだけに残されている。'@option{langremap}' を設定した時は、逆の値が '@option{langnoremap}' に設定され、反対もまた同様である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'langremap'* *'lrm'* *'nolangremap'* *'nolrm'*
'langremap' 'lrm'	boolean (default on, reset in |defaults.vim|)
			global
			{not in Vi}
			{only available when compiled with the |+langmap|
			feature}
	When off, setting 'langmap' does not apply to characters resulting from
	a mapping.  This basically means, if you noticed that setting
	'langmap' disables some of your mappings, try resetting this option.
	This option defaults to on for backwards compatibility.  Set it off if
	that works for you to avoid mappings to break.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'langremap'}
@anchor{'lrm'}
@anchor{'nolangremap'}
@anchor{'nolrm'}
@cindex 'langremap'
@cindex 'lrm'
@cindex 'nolangremap'
@cindex 'nolrm'
@item 'langremap' 'lrm'
切替 (既定ではオン、|defaults.vim| 内でオフに設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+langmap| 機能付きでコンパイルされたときのみ有効@}

オフの場合、'@option{langmap}' の文字がマッピングの結果として適用されない様になる。基本的には、もし '@option{langmap}' の設定により幾らかのマッピングが無効になっていると気づいた場合には、このオプションの設定を試みると良い。このオプションは後方互換性の為にデフォルトでオンである。マッピングが壊れないようにするにはオフを設定すると良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'laststatus'* *'ls'*
'laststatus' 'ls'	number	(default 1)
			global
			{not in Vi}
	The value of this option influences when the last window will have a
	status line:
		0: never
		1: only if there are at least two windows
		2: always
	The screen looks nicer with a status line if you have several
	windows, but it takes another screen line. |status-line|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'laststatus'}
@anchor{'ls'}
@cindex 'laststatus'
@cindex 'ls'
@item 'laststatus' 'ls'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@}

最下ウィンドウにいつステータス行が表示されるかを設定する。
@multitable @columnfractions .1 .9
@item 0: @tab 全く表示しない
@item 1: @tab ウィンドウの数が 2 以上のときのみ表示
@item 2: @tab 常に表示
@end multitable
ウィンドウをいくつか表示しているときには、ステータス行があると見栄えがよくなる。しかし画面上の行をさらに必要とする。|status-line|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'lazyredraw'* *'lz'* *'nolazyredraw'* *'nolz'*
'lazyredraw' 'lz'	boolean	(default off)
			global
			{not in Vi}
	When this option is set, the screen will not be redrawn while
	executing macros, registers and other commands that have not been
	typed.  Also, updating the window title is postponed.  To force an
	update use |:redraw|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'lazyredraw'}
@anchor{'lz'}
@anchor{'nolazyredraw'}
@anchor{'nolz'}
@cindex 'lazyredraw'
@cindex 'lz'
@cindex 'nolazyredraw'
@cindex 'nolz'
@item 'lazyredraw' 'lz'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンのときは、マクロやレジスタの内容およびその他のキーボードから打ち込まれないコマンドを実行する間、画面は再描画されなくなる。また、ウィンドウタイトルの更新も後回しになる。画面の再描画を強制的に行うには、コマンド |:redraw| を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
'linebreak' 'lbr'	boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+linebreak|
			feature}
	If on, Vim will wrap long lines at a character in 'breakat' rather
	than at the last character that fits on the screen.  Unlike
	'wrapmargin' and 'textwidth', this does not insert <EOL>s in the file,
	it only affects the way the file is displayed, not its contents.
	If 'breakindent' is set, line is visually indented. Then, the value
	of 'showbreak' is used to put in front of wrapped lines. This option
	is not used when the 'wrap' option is off.
	Note that <Tab> characters after an <EOL> are mostly not displayed
	with the right amount of white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'linebreak'}
@anchor{'lbr'}
@anchor{'nolinebreak'}
@anchor{'nolbr'}
@cindex 'linebreak'
@cindex 'lbr'
@cindex 'nolinebreak'
@cindex 'nolbr'
@item 'linebreak' 'lbr'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ有効@}

オンのときは、画面に収まりきる最後の文字ではなく、オプション '@option{breakat}' に指定された文字のところで、長い行を折り返す。'@option{wrapmargin}' や '@option{textwidth}' と違い、これはファイルに実際の <EOL> を挿入しない。このオプションが影響するのはファイルの表示方法であり、内容ではない。

'@option{breakindent}' がオンのときは行はインデントされて表示される。そして、'@option{showbreak}' に設定された文字が折り返された行の先頭に置かれる。このオプションは、'@option{wrap}' がオフのときには使われない。
@quotation
@strong{Note:} @*
大抵、<EOL> の後の <Tab> は正しい数の空白として表示されないので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'lines'* *E593*
'lines'			number	(default 24 or terminal height)
			global
	Number of lines of the Vim window.
	Normally you don't need to set this.  It is done automatically by the
	terminal initialization code.  Also see |posix-screen-size|.
	When Vim is running in the GUI or in a resizable window, setting this
	option will cause the window size to be changed.  When you only want
	to use the size for the GUI, put the command in your |gvimrc| file.
	Vim limits the number of lines to what fits on the screen.  You can
	use this command to get the tallest window possible: >
		:set lines=999
<	Minimum value is 2, maximum value is 1000.
	If you get fewer lines than expected, check the 'guiheadroom' option.
	When you set this option and Vim is unable to change the physical
	number of lines of the display, the display may be messed up.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'lines'}
@anchor{E593}
@cindex 'lines'
@cindex E593
@item 'lines'
数値 (既定では 24 またはターミナルの高さ) @*
グローバル

画面上の行数。普通このオプションはターミナルの初期化の時点で設定され、手動で設定する必要はない。|posix-screen-size| も参照。

Vim が GUI 環境内やサイズ変更可能なウィンドウ内で実行されているときは、このオプションを変更するとウィンドウサイズも変更される。このサイズ設定を GUI でだけ使用したいなら、このコマンドを |gvimrc| ファイルに書くこと。行数の最大値は、画面に収まる行数に制限される。可能な限りウィンドウの高さを大きくするには次のコマンドを使う:
@example
:set lines=999
@end example
最小値は 2、最大値は 1000。

行数が期待したのより少なかったら、オプション '@option{guiheadroom}' を確認すること。あなたがこのオプションを変更したのに、Vim がディスプレイの行数の物理的な値を変更できなかったら、ディスプレイ表示がめちゃめちゃになるおそれがある。

@{訳注: オプション '@option{columns}' も参照@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'linespace'* *'lsp'*
'linespace' 'lsp'	number	(default 0, 1 for Win32 GUI)
			global
			{not in Vi}
			{only in the GUI}
	Number of pixel lines inserted between characters.  Useful if the font
	uses the full character cell height, making lines touch each other.
	When non-zero there is room for underlining.
	With some fonts there can be too much room between lines (to have
	space for ascents and descents).  Then it makes sense to set
	'linespace' to a negative value.  This may cause display problems
	though!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'linespace'}
@anchor{'lsp'}
@cindex 'linespace'
@cindex 'lsp'
@item 'linespace' 'lsp'
数値 (既定では 0, Win32 の GUI 版では 1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

行間の幅のピクセル数。フォントが文字セルの高さを一杯に使っていて、行同士が接触してしまうときに便利である。1 以上のときには下線を引く余裕ができる。

フォントによっては行間が広すぎることがある。その場合は '@option{linespace}' を負の値にすると調整することができる。しかしそうすると表示に問題が出る場合がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'lisp'* *'nolisp'*
'lisp'			boolean	(default off)
			local to buffer
			{not available when compiled without the |+lispindent|
			feature}
	Lisp mode: When <Enter> is typed in insert mode set the indent for
	the next line to Lisp standards (well, sort of).  Also happens with
	"cc" or "S".  'autoindent' must also be on for this to work.  The 'p'
	flag in 'cpoptions' changes the method of indenting: Vi compatible or
	better.  Also see 'lispwords'.
	The '-' character is included in keyword characters.  Redefines the
	"=" operator to use this same indentation algorithm rather than
	calling an external program if 'equalprg' is empty.
	This option is not used when 'paste' is set.
	{Vi: Does it a little bit differently}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'lisp'}
@anchor{'nolisp'}
@cindex 'lisp'
@cindex 'nolisp'
@item 'lisp'
切替 (既定ではオフ) @*
バッファについてローカル

@{Vim が |+lispindent| 機能付きでコンパイルされたときのみ有効@}
Lisp モード: 挿入モードで @key{<Enter>} が入力されると、次の行のインデントを Lisp の標準 (というかまあ、その一種) にする。また "cc" や "S" でも同様である。これが機能するにはオプション '@option{autoindent}' もオンでなければならない。'@option{cpoptions}' のフラグ '@var{p}' はインデントの方法 (Vi 互換か、より良い方法か) を変更する。'@option{lispwords}' も参照。

キーワードを構成する文字に '-' も含まれるようになる。'@option{equalprg}' が空のときには、外部プログラムを呼び出さず、Lisp 用のインデント用アルゴリズムを使うように、オペレータ "=" を再定義する。

このオプションは、'@option{paste}' がオンのときには使われない。

@{Vi では微妙に動作が違う@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'lispwords'* *'lw'*
'lispwords' 'lw'	string	(default is very long)
			global or local to buffer |global-local|
			{not in Vi}
			{not available when compiled without the |+lispindent|
			feature}
	Comma separated list of words that influence the Lisp indenting.
	|'lisp'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'lispwords'}
@anchor{'lw'}
@cindex 'lispwords'
@cindex 'lw'
@item 'lispwords' 'lw'
文字列 (既定値はとても長い) @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@} @*
@{Vim が |+lispindent| 機能付きでコンパイルされたときのみ有効@}

Lisp 用のインデント方法を設定するキーワードの、コンマ区切りのリスト。|'lisp'|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'list'* *'nolist'*
'list'			boolean	(default off)
			local to window
	List mode: Show tabs as CTRL-I is displayed, display $ after end of
	line.  Useful to see the difference between tabs and spaces and for
	trailing blanks.  Further changed by the 'listchars' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'list'}
@anchor{'nolist'}
@cindex 'list'
@cindex 'nolist'
@item 'list'
切替 (既定ではオフ) @*
ウィンドウについてローカル

list モード: タブ文字を @kbd{CTRL-I} で表示し、行末に $ を表示する。タブ文字と空白文字との差異や、行末に続く空白の差異を見るのに便利である。オプション '@option{listchars}' でより詳しく表示方法を設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The cursor is displayed at the start of the space a Tab character
	occupies, not at the end as usual in Normal mode.  To get this cursor
	position while displaying Tabs with spaces, use: >
		:set list lcs=tab:\ \ 
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルはタブが占める桁の最初の位置に表示される。nolist の場合はノーマルモードでカーソルをタブの上に移動させると、タブが占める桁の最後の位置にカーソルが表示されるが、それと異なる。タブをスペースで表示しつつ、カーソル位置をそのように変えたいなら、次のようにする:
@example
:set list lcs=tab:\ \ 
@end example
@{訳注: 最後、バックスラッシュの後にスペースがあることに注意@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that list mode will also affect formatting (set with 'textwidth'
	or 'wrapmargin') when 'cpoptions' includes 'L'.  See 'listchars' for
	changing the way tabs are displayed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
オプション '@option{cpoptions}' がフラグ '@var{L}' を含むならば、このオプションは整形コマンドにも影響することに注意 ('@option{textwidth}' や '@option{wrapmargin}' と共に設定されたとき)。タブの表示方法の変更については、'@option{listchars}' を参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'listchars'* *'lcs'*
'listchars' 'lcs'	string	(default "eol:$")
			global
			{not in Vi}
	Strings to use in 'list' mode and for the |:list| command.  It is a
	comma separated list of string settings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'listchars'}
@anchor{'lcs'}
@cindex 'listchars'
@cindex 'lcs'
@item 'listchars' 'lcs'
文字列 (既定では "eol:$") @*
グローバル @*
@{Vi にはない@}

'list' モードと |:list| コマンドでの表示に使われる文字を設定する。値は指定文字列のコンマ区切りのリストである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-eol*
	  eol:c		Character to show at the end of each line.  When
			omitted, there is no extra character at the end of the
			line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-eol}
@cindex lcs-eol
@table @asis
@item eol:文字
行末の表示に使われる文字。指定されないと、行末には何も表示されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-tab*
	  tab:xy	Two characters to be used to show a tab.  The first
			char is used once.  The second char is repeated to
			fill the space that the tab normally occupies.
			"tab:>-" will show a tab that takes four spaces as
			">---".  When omitted, a tab is show as ^I.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-tab}
@cindex lcs-tab
@item tab:2 文字
タブ文字の表示に使われる文字。1 文字目は 1 回だけ使われる。2 文字目はタブが通常占めるだけの空白を埋めるまで繰り返し表示される。"tab:>-" とすると、タブが 4 文字の設定では "@samp{>---}" となる。指定されないと、タブは ^I と表示される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-space*
	  space:c	Character to show for a space.  When omitted, spaces
			are left blank.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-space}
@cindex lcs-space
@item space:文字
スペースの表示に使われる文字。指定されないと、スペースは空白のまま。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-trail*
	  trail:c	Character to show for trailing spaces.  When omitted,
			trailing spaces are blank.  Overrides the "space"
			setting for trailing spaces.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-trail}
@cindex lcs-trail
@item trail:文字
行末のスペースの表示に使われる文字。指定されないと、行末のスペースは空白のまま。行末のスペースでは "space" の設定を上書きする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-extends*
	  extends:c	Character to show in the last column, when 'wrap' is
			off and the line continues beyond the right of the
			screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-extends}
@cindex lcs-extends
@item extends:文字
'@option{wrap}' がオフで、行が画面の右端よりも伸びているときに、最終列に表示される文字。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-precedes*
	  precedes:c	Character to show in the first column, when 'wrap'
			is off and there is text preceding the character
			visible in the first column.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-precedes}
@cindex lcs-precedes
@item precedes:文字
'@option{wrap}' がオフで、最前列で表示されている最初の文字より前にテキストが存在するとき @{訳注: 上の行の末尾が画面の右端より伸びているとき@} に、最前列に表示される文字。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-conceal*
	  conceal:c	Character to show in place of concealed text, when
			'conceallevel' is set to 1.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-conceal}
@cindex lcs-conceal
@item conceal:文字
'@option{conceallevel}' が 1 のときに Conceal されたテキストの代わりに表示される文字。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*lcs-nbsp*
	  nbsp:c	Character to show for a non-breakable space character
			(0xA0 (160 decimal) and U+202F).  Left blank when
			omitted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{lcs-nbsp}
@cindex lcs-nbsp
@item nbsp:文字
ノーブレークスペース文字 (0xA0 (10 進数では 160) や U+202F) の表示に使われる文字。指定されない場合は空白のまま。@{訳注: 0xA0 は Latin1 で改行なしスペースを表す@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The characters ':' and ',' should not be used.  UTF-8 characters can
	be used when 'encoding' is "utf-8", otherwise only printable
	characters are allowed.  All characters must be single width.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字 ':' と ',' は使えない。'@option{encoding}' が "@var{utf-8}" のときは UTF-8 の文字が使える。そうでないときは printable な文字 @{訳注: 文書先頭を参照@} だけが使える。全ての文字は幅が 1 でなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Examples: >
	    :set lcs=tab:>-,trail:-
	    :set lcs=tab:>-,eol:<,nbsp:%
	    :set lcs=extends:>,precedes:<
<	The "NonText" highlighting will be used for "eol", "extends" and
	"precedes".  "SpecialKey" for "nbsp", "space", "tab" and "trail".
	|hl-NonText| |hl-SpecialKey|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set lcs=tab:>-,trail:-
:set lcs=tab:>-,eol:<,nbsp:%
:set lcs=extends:>,precedes:<
@end example
"eol", "extends", "precedes" には強調表示グループ "NonText" が、"nbsp", "space", "tab" , "trail" には "SpecialKey" が適用される。|hl-NonText| |hl-SpecialKey|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'lpl'* *'nolpl'* *'loadplugins'* *'noloadplugins'*
'loadplugins' 'lpl'	boolean	(default on)
			global
			{not in Vi}
	When on the plugin scripts are loaded when starting up |load-plugins|.
	This option can be reset in your |vimrc| file to disable the loading
	of plugins.
	Note that using the "-u NONE", "-u DEFAULTS" and "--noplugin" command
	line arguments reset this option.  See |-u| and |--noplugin|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'lpl'}
@anchor{'nolpl'}
@anchor{'loadplugins'}
@anchor{'noloadplugins'}
@cindex 'lpl'
@cindex 'nolpl'
@cindex 'loadplugins'
@cindex 'noloadplugins'
@item 'loadplugins' 'lpl'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

オンのときは、Vim が立ち上がるときにプラグインスクリプトが読み込まれる |load-plugins|。このオプションをユーザーのファイル |vimrc| 内でオフにすることで、プラグインの読み込みを無効化できる。
@quotation
@strong{Note:} @*
コマンドライン引数 "-u NONE", "-u DEFAULTS" または "--noplugin" によってこのオプションをオフにできることに注意。|-u| |--noplugin|。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'luadll'*
'luadll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+lua/dyn|
			feature}
	Specifies the name of the Lua shared library. The default is
	DYNAMIC_LUA_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'luadll'}
@cindex 'luadll'
@item 'luadll'
文字列 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+lua/dyn| 機能付きでコンパイルされたときのみ有効@}

Lua 共有ライブラリの名前を指定。既定値はコンパイル時に指定された DYNAMIC_LUA_DLL の値。環境変数は展開される |:set_env|。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'macatsui'* *'nomacatsui'*
'macatsui'		boolean	(default on)
			global
			{only available in Mac GUI version}
	This is a workaround for when drawing doesn't work properly.  When set
	and compiled with multi-byte support ATSUI text drawing is used.  When
	not set ATSUI text drawing is not used.  Switch this option off when
	you experience drawing problems.  In a future version the problems may
	be solved and this option becomes obsolete.  Therefore use this method
	to unset it: >
		if exists('&macatsui')
		   set nomacatsui
		endif
<	Another option to check if you have drawing problems is
	'termencoding'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'macatsui'}
@anchor{'nomacatsui'}
@cindex 'macatsui'
@cindex 'nomacatsui'
@item 'macatsui'
切替 (既定ではオン) @*
グローバル @*
@{Mac GUI 版でのみ利用可能@}

これは描画が正しく行われないときのための回避策である。マルチバイト機能付きでコンパイルされ、このオプションがオンになっていると ATSUI テキスト描画が使われる。オフのときは ATSUI テキスト描画は使われない。描画に問題が出るならこのオプションをオフにすること。将来のバージョンではこの問題は解決し、このオプションは非推奨になるかもしれない。そのため、このオプションをオフにするには次のような方法を使うこと:
@verbatim
if exists('&macatsui')
  set nomacatsui
endif
@end verbatim
描画の問題があるかをチェックするもう 1 つのオプションは、'@option{termencoding}' である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'magic'* *'nomagic'*
'magic'			boolean	(default on)
			global
	Changes the special characters that can be used in search patterns.
	See |pattern|.
	WARNING: Switching this option off most likely breaks plugins!  That
	is because many patterns assume it's on and will fail when it's off.
	Only switch it off when working with old Vi scripts.  In any other
	situation write patterns that work when 'magic' is on.  Include "\M"
	when you want to |/\M|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'magic'}
@anchor{'nomagic'}
@cindex 'magic'
@cindex 'nomagic'
@item 'magic'
切替 (既定ではオン) @*
グローバル

検索パターン内で使用可能な特別な文字を変更する。|pattern| を参照。
@quotation
@strong{警告:} @*
このオプションをオフにするとプラグインの多くの動作を壊す可能性が高い！多くのパターンがこのオプションがオンであると仮定しており、オフになっているとそれらが失敗するからである。

古い Vi 用のスクリプトを使うときにだけオフにするべきだろう。それ以外の状況では '@option{magic}' がオンである時に動作するパターンを書けば良い。また |/\M| が必要ならば "\M" を含めると良い。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'makeef'* *'mef'*
'makeef' 'mef'		string	(default: "")
			global
			{not in Vi}
			{not available when compiled without the |+quickfix|
			feature}
	Name of the errorfile for the |:make| command (see |:make_makeprg|)
	and the |:grep| command.
	When it is empty, an internally generated temp file will be used.
	When "##" is included, it is replaced by a number to make the name
	unique.  This makes sure that the ":make" command doesn't overwrite an
	existing file.
	NOT used for the ":cf" command.  See 'errorfile' for that.
	Environment variables are expanded |:set_env|.
	See |option-backslash| about including spaces and backslashes.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'makeef'}
@anchor{'mef'}
@cindex 'makeef'
@cindex 'mef'
@item 'makeef' 'mef'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+quickfix| 機能付きでコンパイルされたときのみ有効@}

コマンド |:make| (|:make_makeprg| を参照) と |:grep| に使われるエラーファイルの名前。値が空のときは、内部で生成された一時ファイルが使われる。

"##" が含まれているときは、その部分はファイル名の一意性を保つための数字に置き換えられる。こうすれば "@command{:make}" で既存のファイルを上書きしてしまうことがなくなる。

"@command{:cf}" には使われ「ない」。それについてはオプション '@option{errorfile}' を参照。環境変数は展開される |:set_env|。値に空白や '\' を含める方法については、|option-backslash| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'makeencoding'* *'menc'*
'makeencoding' 'menc'	string	(default "")
			global or local to buffer |global-local|
			{only available when compiled with the |+multi_byte|
			feature}
			{not in Vi}
	Encoding used for reading the output of external commands.  When empty,
	encoding is not converted.
	This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
	`:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile`,
	and `:laddfile`.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'makeencoding'}
@anchor{'menc'}
@cindex 'makeencoding'
@cindex 'menc'
@item 'makeencoding' 'menc'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ利用可能@} @*
@{Vi にはない@}

外部コマンドの出力を読むときに使用されるエンコーディング。空の時はエンコーディングは変換されない。これは以下のコマンドに使用される: `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`, `:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile` および `:laddfile`
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This would be mostly useful when you use MS-Windows and set 'encoding'
	to "utf-8".  If |+iconv| is enabled and GNU libiconv is used, setting
	'makeencoding' to "char" has the same effect as setting to the system
	locale encoding.  Example: >
		:set encoding=utf-8
		:set makeencoding=char	" system locale is used
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは主に MS-Windows で '@option{encoding}' を "@var{utf-8}" に設定している場合に有用である。もし |+iconv| が有効化されており GNU libiconv が使われている際には、'@option{makeencoding}' を "@var{char}" に設定することはシステムロケールのエンコーディングに設定するのと同じ効果がある。例:
@example
:set encoding=utf-8
:set makeencoding=char	" システムロケールが使用される
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'makeprg'* *'mp'*
'makeprg' 'mp'		string	(default "make", VMS: "MMS")
			global or local to buffer |global-local|
			{not in Vi}
	Program to use for the ":make" command.  See |:make_makeprg|.
	This option may contain '%' and '#' characters (see  |:_%| and |:_#|), 
	which are expanded to the current and alternate file name.  Use |::S| 
	to escape file names in case they contain special characters.
	Environment variables are expanded |:set_env|.  See |option-backslash|
	about including spaces and backslashes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'makeprg'}
@anchor{'mp'}
@cindex 'makeprg'
@cindex 'mp'
@item 'makeprg' 'mp'
文字列 (既定では "make", VMS では "MMS") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

コマンド "@command{:make}" で使われるプログラム。|:make_makeprg| を参照。値には文字 '%' と '#' を使える (|:_%| と |:_#| 参照)。これらはそれぞれ現在のファイル名と代替ファイル名に展開される。ファイル名に特殊文字が含まれるときは |::S| を使う。

環境変数は展開される |:set_env|。値に空白や '\' を含める方法については、|option-backslash| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that a '|' must be escaped twice: once for ":set" and once for
	the interpretation of a command.  When you use a filter called
	"myfilter" do it like this: >
	    :set makeprg=gmake\ \\\|\ myfilter
<	The placeholder "$*" can be given (even multiple times) to specify
	where the arguments will be included, for example: >
	    :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
<	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
文字 '|' は 2 回エスケープすることに注意: 1 回目はコマンド "@command{:set}" に対して、2 回目はコマンドの解釈に対してである。ユーザーのフィルタが "マイフィルタ" であるときは、次のようにする。
@example
:set makeprg=gmake\ \\\|\ マイフィルタ
@end example
引数が挿入される場所を指定するには、"$*" を (複数回でも) 使える。例:
@example
:set makeprg=latex\ \\\\nonstopmode\ \\\\input\\@{$*@}
@end example
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'matchpairs'* *'mps'*
'matchpairs' 'mps'	string	(default "(:),{:},[:]")
			local to buffer
			{not in Vi}
	Characters that form pairs.  The |%| command jumps from one to the
	other.
	Only character pairs are allowed that are different, thus you cannot
	jump between two double quotes.
	The characters must be separated by a colon.
	The pairs must be separated by a comma.  Example for including '<' and
	'>' (HTML): >
		:set mps+=<:>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'matchpairs'}
@anchor{'mps'}
@cindex 'matchpairs'
@cindex 'mps'
@item 'matchpairs' 'mps'
文字列 (既定では "(:),@{:@},[:]") @*
バッファについてローカル @*
@{Vi にはない@}

括弧などの組を構成する文字。コマンド |%| で片方からもう片方にジャンプする。設定できるのは違う文字の組だけである。つまりダブルクォートで囲まれた区間をジャンプすることはできない。文字はコロンで区切る。

組はコンマで区切って指定する。値に '<' と '>' を設定する例 (HTML 用):
@example
:set mps+=<:>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<	A more exotic example, to jump between the '=' and ';' in an
	assignment, useful for languages like C and Java: >
		:au FileType c,cpp,java set mps+==:;
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さらに興味深い例は、代入文の '=' と ';' の間でジャンプするもので、C や Java 等の言語で便利である。
@example
:au FileType c,cpp,java set mps+==:;
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<	For a more advanced way of using "%", see the matchit.vim plugin in
	the $VIMRUNTIME/pack/dist/opt/matchit directory. |add-local-help|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド "%" のさらに発展的な使用法については、ディレクトリ $VIMRUNTIME/pack/dist/opt/matchit 内のプラグイン matchit.vim を参照。|add-local-help|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'matchtime'* *'mat'*
'matchtime' 'mat'	number	(default 5)
			global
			{not in Vi}{in Nvi}
	Tenths of a second to show the matching paren, when 'showmatch' is
	set.  Note that this is not in milliseconds, like other options that
	set a time.  This is to be compatible with Nvi.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'matchtime'}
@anchor{'mat'}
@cindex 'matchtime'
@cindex 'mat'
@item 'matchtime' 'mat'
数値 (既定では 5) @*
グローバル @*
@{Vi にはない@}@{Nvi で使われる@}

オプション '@option{showmatch}' がオンのとき、マッチしている括弧を表示するための時間を 0.1 秒単位で指定する。
@quotation
@strong{Note:} @*
このオプションでは、他の時間関係のオプションと違い、単位がミリ秒でないので注意。これは Nvi との互換性を保つためである。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxcombine'* *'mco'*
'maxcombine' 'mco'	number (default 2)
			global
			{not in Vi}
			{only available when compiled with the |+multi_byte|
			feature}
	The maximum number of combining characters supported for displaying.
	Only used when 'encoding' is "utf-8".
	The default is OK for most languages.  Hebrew may require 4.
	Maximum value is 6.
	Even when this option is set to 2 you can still edit text with more
	combining characters, you just can't see them.  Use |g8| or |ga|.
	See |mbyte-combining|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxcombine'}
@anchor{'mco'}
@cindex 'maxcombine'
@cindex 'mco'
@item 'maxcombine' 'mco'
数値 (既定では 2) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ利用可能@}

表示の際にサポートされている文字の組み合わせ数の最大値。'@option{encoding}' が "@var{utf-8}" のときだけ適用される。

ほとんどの言語に対しては既定値で十分である。ヘブライ語は 4 以上が必要である。最大値は 6。

このオプションの値が2のときでも、それ以上の組み合わせのテキストを編集することは可能である。ただしそれを表示することはできない。|g8| や|ga| を使う。|mbyte-combining| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxfuncdepth'* *'mfd'*
'maxfuncdepth' 'mfd'	number	(default 100)
			global
			{not in Vi}
			{not available when compiled without the |+eval|
			feature}
	Maximum depth of function calls for user functions.  This normally
	catches endless recursion.  When using a recursive function with
	more depth, set 'maxfuncdepth' to a bigger number.  But this will use
	more memory, there is the danger of failing when memory is exhausted.
	Increasing this limit above 200 also changes the maximum for Ex
	command resursion, see |E169|.
	See also |:function|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxfuncdepth'}
@anchor{'mfd'}
@cindex 'maxfuncdepth'
@cindex 'mfd'
@item 'maxfuncdepth' 'mfd'
数値 (既定では 100) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+eval| 機能付きでコンパイルされたときのみ有効@}

ユーザー定義関数の関数呼び出しの深さの最大値。これは普通、終わらない再帰呼び出しを捉えるために使われる。関数のさらに深い再帰呼び出しを使うときは、オプション '@option{maxfuncdepth}' に、さらに大きい値を設定すること。しかしこうするとメモリを余計に消費するので、メモリを使い果たしたときに落ちる危険がある。

この制限を 200 より大きな値に増やした場合、Ex コマンドの再帰の最大値も変更される。|E169| 参照。|:function| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxmapdepth'* *'mmd'* *E223*
'maxmapdepth' 'mmd'	number	(default 1000)
			global
			{not in Vi}
	Maximum number of times a mapping is done without resulting in a
	character to be used.  This normally catches endless mappings, like
	":map x y" with ":map y x".  It still does not catch ":map g wg",
	because the 'w' is used before the next mapping is done.  See also
	|key-mapping|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxmapdepth'}
@anchor{'mmd'}
@anchor{E223}
@cindex 'maxmapdepth'
@cindex 'mmd'
@cindex E223
@item 'maxmapdepth' 'mmd'
数値 (既定では 1000) @*
グローバル @*
@{Vi にはない@}

マッピングに対するマッピングを、文字が使われるまでに繰り返す回数の最大値。これは普通、":map x y" と ":map y x" のような堂々巡りで終わらないマッピングを捉えるために使われる。しかしこれは ":map g wg" 等は捉えない。それは次のマッピングが行われる前に 'w' が使われているからである。|key-mapping| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxmem'* *'mm'*
'maxmem' 'mm'		number	(default between 256 to 5120 (system
				 dependent) or half the amount of memory
				 available)
			global
			{not in Vi}
	Maximum amount of memory (in Kbyte) to use for one buffer.  When this
	limit is reached allocating extra memory for a buffer will cause
	other memory to be freed.  The maximum usable value is about 2000000.
	Use this to work without a limit.  Also see 'maxmemtot'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxmem'}
@anchor{'mm'}
@cindex 'maxmem'
@cindex 'mm'
@item 'maxmem' 'mm'
数値 (既定では 256 から 5120 の間 (システムによって異なる) または利用できるメモリの半分) @*
グローバル @*
@{Vi にはない@}

1 つのバッファに使用できるメモリの最大値 (キロバイト単位)。この限界に達すると、バッファにさらにメモリを割り当てるときには、他のメモリを解放する。このオプションの最大値は約 2000000 である。限界を設けないときにはこの値に設定すること。'@option{maxmemtot}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxmempattern'* *'mmp'*
'maxmempattern' 'mmp'	number	(default 1000)
			global
			{not in Vi}
	Maximum amount of memory (in Kbyte) to use for pattern matching.
	The maximum value is about 2000000.  Use this to work without a limit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxmempattern'}
@anchor{'mmp'}
@cindex 'maxmempattern'
@cindex 'mmp'
@item 'maxmempattern' 'mmp'
数値 (既定では 1000) @*
グローバル @*
@{Vi にはない@}

パターンマッチングに使うメモリ量の最大値 (キロバイト単位)。設定可能な最大値は約 2000000。限界を設けないときにはこの値に設定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E363*
	When Vim runs into the limit it gives an error message and mostly
	behaves like CTRL-C was typed.
	Running into the limit often means that the pattern is very
	inefficient or too complex.  This may already happen with the pattern
	"\(.\)*" on a very long line.  ".*" works much better.
	Vim may run out of memory before hitting the 'maxmempattern' limit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E363}
@cindex E363
この制限に達したときは、エラーメッセージを表示し、たいていの場合 @kbd{CTRL-C} が押されたのと同じように振る舞う。

制限に達するのはたいてい、検索パターンが極めて非効率であるか複雑過ぎるときである。これは非常に長い行の上で "\(.\)*" を検索するとすぐになる。".*" の方がはるかによい。

'@option{maxmempattern}' の制限に達する前に Vim がメモリ不足になるかもしれない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'maxmemtot'* *'mmt'*
'maxmemtot' 'mmt'	number	(default between 2048 and 10240 (system
				 dependent) or half the amount of memory
				 available)
			global
			{not in Vi}
	Maximum amount of memory in Kbyte to use for all buffers together.
	The maximum usable value is about 2000000 (2 Gbyte).  Use this to work
	without a limit.
	On 64 bit machines higher values might work.  But hey, do you really
	need more than 2 Gbyte for text editing?  Keep in mind that text is
	stored in the swap file, one can edit files > 2 Gbyte anyway.  We do
	need the memory to store undo info.
	Also see 'maxmem'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'maxmemtot'}
@anchor{'mmt'}
@cindex 'maxmemtot'
@cindex 'mmt'
@item 'maxmemtot' 'mmt'
数値 (既定では 2048 から 10240 の間 (システムによって異なる) または利用できるメモリの半分) @*
グローバル @*
@{Vi にはない@}

全てのバッファで使用するメモリの合計の最大値 (キロバイト単位)。このオプションの最大値は約 2000000 (2 ギガバイト)である。限界を設けないときにはこの値に設定すること。

64 ビットマシンではもっと高くしても動作するかもしれない。けれど、本当にテキストの編集に 2 ギガバイト以上も必要ですか? テキスト自体はスワップファイルに保存されるので、この設定でも 2 ギガバイト以上のファイルは編集できることを、忘れないこと。メモリはアンドゥ情報を記憶するのに必要なのだ。

'@option{maxmem}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'menuitems'* *'mis'*
'menuitems' 'mis'	number	(default 25)
			global
			{not in Vi}
			{not available when compiled without the |+menu|
			feature}
	Maximum number of items to use in a menu.  Used for menus that are
	generated from a list of items, e.g., the Buffers menu.  Changing this
	option has no direct effect, the menu must be refreshed first.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'menuitems'}
@anchor{'mis'}
@cindex 'menuitems'
@cindex 'mis'
@item 'menuitems' 'mis'
数値 (既定では 25) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+menu| 機能付きでコンパイルされたときのみ有効@}

メニューの項目数の最大値。自動生成されるメニュー、例えばバッファメニューに対して使われる。このオプションを変更しても直接の効果はなく、メニューを更新しなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mkspellmem'* *'msm'*
'mkspellmem' 'msm'	string	(default "460000,2000,500")
			global
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Parameters for |:mkspell|.  This tunes when to start compressing the
	word tree.  Compression can be slow when there are many words, but
	it's needed to avoid running out of memory.  The amount of memory used
	per word depends very much on how similar the words are, that's why
	this tuning is complicated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mkspellmem'}
@anchor{'msm'}
@cindex 'mkspellmem'
@cindex 'msm'
@item 'mkspellmem' 'msm'
文字列 (既定では "460000,2000,500") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ有効@}

|:mkspell| に対するパラメーター。単語ツリーの圧縮を開始するタイミングを設定する。単語がたくさんあると圧縮に時間がかかるが、メモリ不足になるのを防ぐためには必要な事である。単語につき使われるメモリ量はそれらの単語がどれだけ似ているかに密接に関係する。そのため、この設定は複雑になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There are three numbers, separated by commas:
		{start},{inc},{added}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
3 つの数値があり、それらをコンマで区切る:
@verbatim
{start},{inc},{added}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For most languages the uncompressed word tree fits in memory.  {start}
	gives the amount of memory in Kbyte that can be used before any
	compression is done.  It should be a bit smaller than the amount of
	memory that is available to Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどの言語では圧縮しない単語ツリーがメモリに収まる。@{start@} は圧縮を行う前に使えるメモリ量をキロバイト単位で指定する。これは Vim が利用可能なメモリ量より少し少なくするべきである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When going over the {start} limit the {inc} number specifies the
	amount of memory in Kbyte that can be allocated before another
	compression is done.  A low number means compression is done after
	less words are added, which is slow.  A high number means more memory
	will be allocated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{start@} の制限を超えたとき、別な圧縮を行う前に割り当てることができるメモリ量を @{inc@} によりキロバイト単位で指定する。これを低い値にするとより少ない単語を追加した後に圧縮を行うことになる。高い値にするとより多くのメモリが割り当てられることになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	After doing compression, {added} times 1024 words can be added before
	the {inc} limit is ignored and compression is done when any extra
	amount of memory is needed.  A low number means there is a smaller
	chance of hitting the {inc} limit, less memory is used but it's
	slower.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
圧縮を行った後、さらにメモリが必要になって @{inc@} の制限が無視されて圧縮が行われる前に @{added@}×1024 個の単語を追加することができる。これを低い値にすると @{inc@} の制限にぶつかる機会が少なくなり、より少ないメモリを使うが、遅くなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The languages for which these numbers are important are Italian and
	Hungarian.  The default works for when you have about 512 Mbyte.  If
	you have 1 Gbyte you could use: >
		:set mkspellmem=900000,3000,800
<	If you have less than 512 Mbyte |:mkspell| may fail for some
	languages, no matter what you set 'mkspellmem' to.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの値が重要になる言語はイタリア語とハンガリー語である。システムが約 512Mbyte のメモリを備えているときは既定値でうまくいく。1 GByte のメモリを持っているならこうしてもよい:
@example
:set mkspellmem=900000,3000,800
@end example
512 Mbyte より少ないメモリしか持っていないなら、'@option{mkspellmem}' がどんな値であっても、ある言語に対しては |:mkspell| が失敗するかもしれない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'modeline'* *'ml'* *'nomodeline'* *'noml'*
'modeline' 'ml'		boolean	(Vim default: on (off for root),
				 Vi default: off)
			local to buffer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'modeline'}
@anchor{'ml'}
@anchor{'nomodeline'}
@anchor{'noml'}
@cindex 'modeline'
@cindex 'ml'
@cindex 'nomodeline'
@cindex 'noml'
@item 'modeline' 'ml'
切替 (Vim の既定値はオン (root の場合はオフ)、Vi の既定値はオフ) @*
バッファについてローカル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'modelines'* *'mls'*
'modelines' 'mls'	number	(default 5)
			global
			{not in Vi}
	If 'modeline' is on 'modelines' gives the number of lines that is
	checked for set commands.  If 'modeline' is off or 'modelines' is zero
	no lines are checked.  See |modeline|.
	NOTE: 'modeline' is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'modelines'}
@anchor{'mls'}
@cindex 'modelines'
@cindex 'mls'
@item 'modelines' 'mls'
数値 (既定では 5) @*
グローバル @*
@{Vi にはない@}

オプション '@option{modeline}' がオンのときは、テキスト中のコマンド "@command{:set}" を '@option{modelines}' に指定された行数だけ調べる。'@option{modeline}' がオフであるか、'@option{modelines}' が 0 のときは、"@command{:set}" は調べられない。|modeline| を参照。
@quotation
@strong{Note:} @*
'@option{modeline}' は、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'modifiable'* *'ma'* *'nomodifiable'* *'noma'*
'modifiable' 'ma'	boolean	(default on)
			local to buffer
			{not in Vi}		*E21*
	When off the buffer contents cannot be changed.  The 'fileformat' and
	'fileencoding' options also can't be changed.
	Can be reset on startup with the |-M| command line argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'modifiable'}
@anchor{'ma'}
@anchor{'nomodifiable'}
@anchor{'noma'}
@cindex 'modifiable'
@cindex 'ma'
@cindex 'nomodifiable'
@cindex 'noma'
@item 'modifiable' 'ma'
切替 (既定ではオン) @*
バッファについてローカル

@anchor{E21}
@cindex E21
@{Vi にはない@}

オフのときは、バッファの内容が変更できなくなる。オプション '@option{fileformat}' と '@option{fileencoding}' も変更できなくなる。起動時にコマンドライン引数 |-M| でオフに設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'modified'* *'mod'* *'nomodified'* *'nomod'*
'modified' 'mod'	boolean	(default off)
			local to buffer
			{not in Vi}
	When on, the buffer is considered to be modified.  This option is set
	when:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'modified'}
@anchor{'mod'}
@anchor{'nomodified'}
@anchor{'nomod'}
@cindex 'modified'
@cindex 'mod'
@cindex 'nomodified'
@cindex 'nomod'
@item 'modified' 'mod'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

オンのとき、バッファは変更を受けたものとされる。これは以下のようなときにオンになる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	1. A change was made to the text since it was last written.  Using the
	   |undo| command to go back to the original text will reset the
	   option.  But undoing changes that were made before writing the
	   buffer will set the option again, since the text is different from
	   when it was written.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
最後に書き込みをした後にテキストが変更されたとき。|undo| をするコマンドで元の状態まで戻ったときは、このオプションはオフになる。しかし書き込みより前の編集を undo すると、再びこのオプションはオンになる。テキストが最後に書き込まれたときと異なっているからである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	2. 'fileformat' or 'fileencoding' is different from its original
	   value.  The original value is set when the buffer is read or
	   written.  A ":set nomodified" command also resets the original
	   values to the current values and the 'modified' option will be
	   reset.
	   Similarly for 'eol' and 'bomb'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
オプション '@option{fileformat}' や '@option{fileencoding}' が元の値と異なっているとき。元の値とは、バッファが読み込まれたり書き込まれたときに設定された値である。コマンド "@command{:set nomodified}" は '@option{fileformat}' や '@option{fileencoding}' を現在の値に設定し、'@option{modified}' をオフにする。'@option{eol}' と '@option{bomb}' に似ている。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This option is not set when a change is made to the buffer as the
	result of a BufNewFile, BufRead/BufReadPost, BufWritePost,
	FileAppendPost or VimLeave autocommand event.  See |gzip-example| for
	an explanation.
	When 'buftype' is "nowrite" or "nofile" this option may be set, but
	will be ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは、BufNewFile, BufRead/BufReadPost, BufWritePost, FileAppendPost, VimLeave イベントでバッファが変更された場合には設定されない。例として |gzip-example| 参照。

'@option{buftype}' が "@var{nowrite}" または "@var{nofile}" であるときもこのオプションを設定できるが、無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'more'* *'nomore'*
'more'			boolean	(Vim default: on, Vi default: off)
			global
			{not in Vi}
	When on, listings pause when the whole screen is filled.  You will get
	the |more-prompt|.  When this option is off there are no pauses, the
	listing continues until finished.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'more'}
@anchor{'nomore'}
@cindex 'more'
@cindex 'nomore'
@item 'more'
切替 (Vim の既定値: オン、Vi の既定値: オフ) @*
グローバル @*
@{Vi にはない@}

オンのときは、一覧表示で画面が一杯になったときは一旦停止し、「継続」プロンプト |more-prompt| を表示する。オフのときは停止せず、最後まで表示する。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mouse'* *E538*
'mouse'			string	(default "", "a" for GUI, MS-DOS and Win32,
						 set to "a" in |defaults.vim|)
			global
			{not in Vi}
	Enable the use of the mouse.  Only works for certain terminals
	(xterm, MS-DOS, Win32 |win32-mouse|, QNX pterm, *BSD console with
	sysmouse and Linux console with gpm).  For using the mouse in the
	GUI, see |gui-mouse|.
	The mouse can be enabled for different modes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mouse'}
@anchor{E538}
@cindex 'mouse'
@cindex E538
@item 'mouse'
文字列 (既定では "", MS-DOS, Win32とGUI版では "a", |defaults.vim| 内で "a" に設定される) @*
グローバル @*
@{Vi にはない@}

オンのとき、マウスが利用可能になる。特定のターミナルでのみ有効である (xterm, MS-DOS, Win32 |win32-mouse|, QNX pterm, sysmouse 付きの *BSD コンソール, gpm 付きの Linux コンソール)。GUI でマウスを使うことについては、|gui-mouse| を参照。

マウスの利用はモードごとに設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		n	Normal mode and Terminal modes
		v	Visual mode
		i	Insert mode
		c	Command-line mode
		h	all previous modes when editing a help file
		a	all previous modes
		r	for |hit-enter| and |more-prompt| prompt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item n	@tab ノーマルモードとターミナルモード
@item v	@tab ビジュアルモード
@item i	@tab 挿入モード
@item c	@tab コマンドラインモード
@item h	@tab ヘルプファイルを閲覧しているときの上記の4モード全て
@item a	@tab 上記の 4 モード全て
@item r	@tab 「続けるには」プロンプト |hit-enter| および「継続」プロンプト |more-prompt| が出ているとき
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Normally you would enable the mouse in all four modes with: >
		:set mouse=a
<	When the mouse is not enabled, the GUI will still use the mouse for
	modeless selection.  This doesn't move the text cursor.

	See |mouse-using|.  Also see |'clipboard'|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
普通、次のようにしてマウスを 4 モード全てで利用可能にする。
@example
:set mouse=a
@end example
マウスを有効にしていなくても、GUI 版ではモードレスセレクションにマウスを使うことができる。しかしこのときにはカーソルは動かない。

|mouse-using| を参照。またオプション '@option{clipboard}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: When enabling the mouse in a terminal, copy/paste will use the
	"* register if there is access to an X-server.  The xterm handling of
	the mouse buttons can still be used by keeping the shift key pressed.
	Also see the 'clipboard' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
ターミナルでマウスを有効にすると、X サーバーにアクセスできるならばコピー／貼り付けではレジスタ "* を使うことに注意。マウスボタンの xterm 風の操作は、シフトキーを押したままにすることで実現できる。'@option{clipboard}' も参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'mousefocus'* *'mousef'* *'nomousefocus'* *'nomousef'*
'mousefocus' 'mousef'	boolean	(default off)
			global
			{not in Vi}
			{only works in the GUI}
	The window that the mouse pointer is on is automatically activated.
	When changing the window layout or window focus in another way, the
	mouse pointer is moved to the window with keyboard focus.  Off is the
	default because it makes using the pull down menus a little goofy, as
	a pointer transit may activate a window unintentionally.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mousefocus'}
@anchor{'mousef'}
@anchor{'nomousefocus'}
@anchor{'nomousef'}
@cindex 'mousefocus'
@cindex 'mousef'
@cindex 'nomousefocus'
@cindex 'nomousef'
@item 'mousefocus' 'mousef'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

オンのときは、マウスカーソルのおかれたウィンドウが自動的にアクティブになる。マウス以外でウィンドウ配置やウィンドウフォーカスを変更すると、マウスカーソルはキーボードフォーカスと共に移動する。既定ではオフだが、これはマウスカーソルを動かして予期しないウィンドウをアクティブにしてしまうことがあるため、プルダウンメニューの利用を少し面倒にするからである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'mousehide'* *'mh'* *'nomousehide'* *'nomh'*
'mousehide' 'mh'	boolean	(default on)
			global
			{not in Vi}
			{only works in the GUI}
	When on, the mouse pointer is hidden when characters are typed.
	The mouse pointer is restored when the mouse is moved.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mousehide'}
@anchor{'mh'}
@anchor{'nomousehide'}
@anchor{'nomh'}
@cindex 'mousehide'
@cindex 'mh'
@cindex 'nomousehide'
@cindex 'nomh'
@item 'mousehide' 'mh'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の GUI 版でのみ有効@}

オンのとき、文字が入力されるときにはマウスカーソルが隠される。マウスが動くとマウスカーソルは再び現れる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mousemodel'* *'mousem'*
'mousemodel' 'mousem'	string	(default "extend", "popup" for MS-DOS and Win32)
			global
			{not in Vi}
	Sets the model to use for the mouse.  The name mostly specifies what
	the right mouse button is used for:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mousemodel'}
@anchor{'mousem'}
@cindex 'mousemodel'
@cindex 'mousem'
@item 'mousemodel' 'mousem'
文字列 (既定では "extend", MS-DOS と Win32 では "popup") @*
グローバル @*
@{Vi にはない@}

マウスの動作モデルを設定する。モデル名は主にマウスの右クリックで行われる動作を表している:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   extend	Right mouse button extends a selection.  This works
			like in an xterm.
	   popup	Right mouse button pops up a menu.  The shifted left
			mouse button extends a selection.  This works like
			with Microsoft Windows.
	   popup_setpos Like "popup", but the cursor will be moved to the
			position where the mouse was clicked, and thus the
			selected operation will act upon the clicked object.
			If clicking inside a selection, that selection will
			be acted upon, i.e. no cursor move.  This implies of
			course, that right clicking outside a selection will
			end Visual mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item extend @tab 右クリックで選択範囲を広げる。これは xterm と同様の動作である。
@item popup	@tab 右クリックでポップアップメニューを表示する。シフト+左クリックで選択範囲を広げる。これは MS-Windows のような動作になる。
@item popup_setpos @tab "popup" と似ているが、カーソルが右クリックした場所に移動する。その結果、選択範囲を対象とする操作が @{訳注: マウスのドラッグで選択した範囲ではなく@} クリックしたオブジェクトに対して働くようになる。

元々操作の対象となるはずの選択範囲内を右クリックしたときは、カーソルは移動しない。もちろん、選択範囲の外側を左クリックすればビジュアルモードは終了する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Overview of what button does what for each model:
	mouse		    extend		popup(_setpos) ~
	left click	    place cursor	place cursor
	left drag	    start selection	start selection
	shift-left	    search word		extend selection
	right click	    extend selection	popup menu (place cursor)
	right drag	    extend selection	-
	middle click	    paste		paste
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それぞれのモデルでの、マウス操作の働きの一覧:
@multitable @columnfractions .33 .33 .33
@item マウス操作 @tab extend @tab popup(_setpos)
@item 左クリック @tab カーソル移動 @tab カーソル移動
@item 左ドラッグ @tab 選択開始 @tab 選択開始
@item シフト+左 @tab 単語検索 @tab 選択範囲の拡張
@item 右クリック @tab 選択範囲の拡張 @tab メニュー (カーソル移動)
@item 右ドラッグ @tab 選択範囲の拡張 @tab なし
@item 中央クリック @tab 貼り付け @tab 貼り付け
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	In the "popup" model the right mouse button produces a pop-up menu.
	You need to define this first, see |popup-menu|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"popup" モデルでは、右クリックでポップアップメニューを表示する。これは先に定義しておかなければならない。|popup-menu| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note that you can further refine the meaning of buttons with mappings.
	See |gui-mouse-mapping|.  But mappings are NOT used for modeless
	selection (because that's handled in the GUI code directly).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
マウス操作による動作は、マッピングでさらに詳しく設定できることに注意。|gui-mouse-mapping| を参照。しかしマッピングはモードレスセレクションには「使われない」 (GUIそのものの機能であるため)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The 'mousemodel' option is set by the |:behave| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{mousemodel}' は、コマンド |:behave| で設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'mouseshape'* *'mouses'* *E547*
'mouseshape' 'mouses'	string	(default "i:beam,r:beam,s:updown,sd:cross,
					m:no,ml:up-arrow,v:rightup-arrow")
			global
			{not in Vi}
			{only available when compiled with the |+mouseshape|
			feature}
	This option tells Vim what the mouse pointer should look like in
	different modes.  The option is a comma separated list of parts, much
	like used for 'guicursor'.  Each part consist of a mode/location-list
	and an argument-list:
		mode-list:shape,mode-list:shape,..
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mouseshape'}
@anchor{'mouses'}
@anchor{E547}
@cindex 'mouseshape'
@cindex 'mouses'
@cindex E547
@item 'mouseshape' 'mouses'
文字列 (既定では "i:beam, r:beam, s:updown, sd:cross, m:no,ml:up-arrow, v:rightup-arrow") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mouseshape| 機能付きでコンパイルされたときのみ有効@}

それぞれのモードでのマウスカーソルの外観を設定する。値はコンマ区切りの指定部のリストであり、オプション '@option{guicursor}' に使われるものと大分似ている。指定部は、次のような状態リストと外観設定からなる。
@verbatim
状態リスト:外観,状態リスト:外観,..
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The mode-list is a dash separated list of these modes/locations:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
状態リストは、以下のモードまたはカーソル位置のダッシュ '-' 区切りのリストである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			In a normal window: ~
		n	Normal mode
		v	Visual mode
		ve	Visual mode with 'selection' "exclusive" (same as 'v',
			if not specified)
		o	Operator-pending mode
		i	Insert mode
		r	Replace mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item @tab 普通のウィンドウ内:
@item n @tab ノーマルモード
@item v @tab ビジュアルモード
@item ve @tab '@option{selection}' に "@var{exclusive}" が含まれているときのビジュアルモード (指定されなければ '@var{v}' と同じ設定になる)
@item o @tab Operator-pendingモード
@item i @tab 挿入モード
@item r @tab 置換モード
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Others: ~
		c	appending to the command-line
		ci	inserting in the command-line
		cr	replacing in the command-line
		m	at the 'Hit ENTER' or 'More' prompts
		ml	idem, but cursor in the last line
		e	any mode, pointer below last window
		s	any mode, pointer on a status line
		sd	any mode, while dragging a status line
		vs	any mode, pointer on a vertical separator line
		vd	any mode, while dragging a vertical separator line
		a	everywhere
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item @tab その他:
@item c @tab コマンドラインへの追加時
@item ci @tab コマンドラインへの挿入時
@item cr @tab コマンドラインでの置換時
@item m @tab 「続けるには」プロンプトまたは「継続」プロンプト表示中
@item e @tab 全てのモードにおいて、マウスカーソルが最下ウィンドウよりも下に置かれているとき
@item s @tab 全てのモードにおいて、マウスカーソルがステータス行に置かれているとき
@item sd @tab 全てのモードにおいて、ステータス行をドラッグ中のとき
@item vs @tab 全てのモードにおいて、マウスカーソルが垂直分割の区切り行に置かれているとき
@item vd @tab 全てのモードにおいて、垂直分割区切りをドラッグ中のとき
@item a @tab あらゆる場所
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The shape is one of the following:
	avail	name		looks like ~
	w x	arrow		Normal mouse pointer
	w x	blank		no pointer at all (use with care!)
	w x	beam		I-beam
	w x	updown		up-down sizing arrows
	w x	leftright	left-right sizing arrows
	w x	busy		The system's usual busy pointer
	w x	no		The system's usual 'no input' pointer
	  x	udsizing	indicates up-down resizing
	  x	lrsizing	indicates left-right resizing
	  x	crosshair	like a big thin +
	  x	hand1		black hand
	  x	hand2		white hand
	  x	pencil		what you write with
	  x	question	big ?
	  x	rightup-arrow	arrow pointing right-up
	w x	up-arrow	arrow pointing up
	  x	<number>	any X11 pointer number (see X11/cursorfont.h)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定可能なマウスカーソルの形は以下の通りである:
@multitable @columnfractions .1 .2 .7
@item avail @tab 名前 @tab 外見
@item w x @tab arrow @tab 普通のマウスカーソル
@item w x @tab blank @tab カーソルなし (注意して使うこと!)
@item w x @tab beam @tab I 状の縦棒
@item w x @tab updown @tab 上下のサイズ変更矢印
@item w x @tab leftright @tab 左右のサイズ変更矢印
@item w x @tab busy @tab システムの「待ち」カーソル
@item w x @tab no @tab システムの「入力不可」カーソル
@item   x @tab udsizing @tab 上下のサイズ変更を示す
@item   x @tab lrsizing @tab 左右のサイズ変更を示す
@item   x @tab crosshair @tab 大きくて細い +
@item   x @tab hand1 @tab 黒い手
@item   x @tab hand2 @tab 白い手
@item   x @tab pencil @tab 文字を書くときの、あの鉛筆
@item   x @tab question @tab 大きな ?
@item   x @tab rightup-arrow @tab 右上向き矢印
@item w x @tab up-arrow @tab 上向き矢印
@item   x @tab <number> @tab 任意の X11 のカーソルナンバー (X11/cursorfont.h を参照)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "avail" column contains a 'w' if the shape is available for Win32,
	x for X11.
	Any modes not specified or shapes not available use the normal mouse
	pointer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上の "avail" という項目は、'w' ならばそのマウスカーソルを Win32 で利用でき、'x' ならば X11 で利用できることを表す。指定されなかったモードや、利用不可能なカーソルを指定されたモードでは、通常のマウスカーソルを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
		:set mouseshape=s:udsizing,m:no
<	will make the mouse turn to a sizing arrow over the status lines and
	indicate no input when the hit-enter prompt is displayed (since
	clicking the mouse has no effect in this state.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set mouseshape=s:udsizing,m:no
@end example
とすると、マウスカーソルはステータス行の上ではサイズ変更を表す形になり、「続けるには」プロンプトが表示されているときには入力不可を表す (この状態ではマウスクリックに効果がないので)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mousetime'* *'mouset'*
'mousetime' 'mouset'	number	(default 500)
			global
			{not in Vi}
	Only for GUI, MS-DOS, Win32 and Unix with xterm.  Defines the maximum
	time in msec between two mouse clicks for the second click to be
	recognized as a multi click.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mousetime'}
@anchor{'mouset'}
@cindex 'mousetime'
@cindex 'mouset'
@item 'mousetime' 'mouset'
数値 (既定では 500) @*
グローバル @*
@{Vi にはない@}

GUI 版, MS-DOS, Win32 と Unix の xterm でのみ有効。ダブルクリックなどとして認識されるクリックとクリックの間の時間を、ミリ秒単位で設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mzschemedll'*
'mzschemedll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+mzscheme/dyn|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mzschemedll'}
@cindex 'mzschemedll'
@item 'mzschemedll'
文字列 (既定はビルドに依存する) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mzscheme/dyn| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Specifies the name of the MzScheme shared library. The default is
	DYNAMIC_MZSCH_DLL which was specified at compile time.
	Environment variables are expanded |:set_env|.
	The value must be set in the |vimrc| script or earlier.  In the
	startup, before the |load-plugins| step.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MzScheme の共有ライブラリの名前を指定する。既定は DYNAMIC_MZSCH_DLL で、これはコンパイル時に決められる。環境変数は展開される |:set_env|。

値は |vimrc| スクリプト内かそれより前に設定されていなければならない。起動中ではプラグインを読み込む |load-plugins| 処理の前。

安全上の問題のため、このオプションは |modeline| からの設定も、|sandbox| 中での設定もすることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'mzschemegcdll'*
'mzschemegcdll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+mzscheme/dyn|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mzschemegcdll'}
@cindex 'mzschemegcdll'
@item 'mzschemegcdll'
文字列 (既定はビルドに依存する) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mzscheme/dyn| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Specifies the name of the MzScheme GC shared library. The default is
	DYNAMIC_MZGC_DLL which was specified at compile time.
	The value can be equal to 'mzschemedll' if it includes the GC code.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MzScheme GC の共有ライブラリの名前を指定する。既定は DYNAMIC_MZGC_DLL で、これはコンパイル時に決められる。もしも GC コードを含んでいるのであれば、値は 'mzschemedll' と同等である。環境変数は展開される |:set_env|。

安全上の問題のため、このオプションは |modeline| からの設定も、|sandbox| 中での設定もすることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						    *'mzquantum'* *'mzq'*
'mzquantum' 'mzq'	number	(default 100)
			global
			{not in Vi}
			{not available when compiled without the |+mzscheme|
			feature}
	The number of milliseconds between polls for MzScheme threads.
	Negative or zero value means no thread scheduling.
	NOTE: This option is set to the Vim default value when 'compatible'
	is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'mzquantum'}
@anchor{'mzq'}
@cindex 'mzquantum'
@cindex 'mzq'
@item 'mzquantum' 'mzq'
数値 (既定では 100) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mzscheme| 機能付きでコンパイルされたときのみ有効@}

MzScheme のスレッドを切り替える間隔 (ミリ秒)。負または 0 にするとスレッドのスケジューリングを行わなくなる。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'nrformats'* *'nf'*
'nrformats' 'nf'	string	(default "bin,octal,hex",
					   set to "bin,hex" in |defaults.vim|)
			local to buffer
			{not in Vi}
	This defines what bases Vim will consider for numbers when using the
	CTRL-A and CTRL-X commands for adding to and subtracting from a number
	respectively; see |CTRL-A| for more info on these commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'nrformats'}
@anchor{'nf'}
@cindex 'nrformats'
@cindex 'nf'
@item 'nrformats' 'nf'
文字列 (既定では "bin,octal,hex", |defaults.vim| 内で "bin,hex" に設定される) @*
バッファについてローカル @*
@{Vi にはない@}

テキスト内の数をコマンド @kbd{CTRL-A} や @kbd{CTRL-X} で増減させるとき、Vim に何を数として認識させるかを設定する。これらのコマンドの詳しい情報については |CTRL-A| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	alpha	If included, single alphabetical characters will be
		incremented or decremented.  This is useful for a list with a
		letter index a), b), etc.		*octal-nrformats*
	octal	If included, numbers that start with a zero will be considered
		to be octal.  Example: Using CTRL-A on "007" results in "010".
	hex	If included, numbers starting with "0x" or "0X" will be
		considered to be hexadecimal.  Example: Using CTRL-X on
		"0x100" results in "0x0ff".
	bin	If included, numbers starting with "0b" or "0B" will be
		considered to be binary.  Example: Using CTRL-X on
		"0b1000" subtracts one, resulting in "0b0111".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item alpha @tab これが含まれると、単一のアルファベットも増減操作を受ける。これ	は a), b) 等の、文字を使ったリストに対して便利である。
@anchor{octal-nrformats}
@cindex octal-nrformats
@item octal @tab これが含まれると、0 で始まる数は 8 進数として認識される。例:	"007" の上で @kbd{CTRL-A} を使うと "010" となる。
@item hex @tab これが含まれると、"0x" や "0X" で始まる数は 16 進数として認識される。例: "0x100" の上で @kbd{CTRL-X} を使うと "0x0ff" となる。
@item bin @tab これが含まれている場合には、"0b" か "0B" で始まる数値は 2 進数であるとみなす。例えば "0b1000" の上で @kbd{CTRL-X} を押すと 1 減算され、結果 "0b0111" になる。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Numbers which simply begin with a digit in the range 1-9 are always
	considered decimal.  This also happens for numbers that are not
	recognized as octal or hex.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 から 9 の数字で始まる数は、常に 10 進数として認識される。8 進数または 16 進数として認識されない数も 10 進数として認識される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'number'* *'nu'* *'nonumber'* *'nonu'*
'number' 'nu'		boolean	(default off)
			local to window
	Print the line number in front of each line.  When the 'n' option is
	excluded from 'cpoptions' a wrapped line will not use the column of
	line numbers (this is the default when 'compatible' isn't set).
	The 'numberwidth' option can be used to set the room used for the line
	number.
	When a long, wrapped line doesn't start with the first character, '-'
	characters are put before the number.
	See |hl-LineNr|  and |hl-CursorLineNr| for the highlighting used for
	the number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'number'}
@anchor{'nu'}
@anchor{'nonumber'}
@anchor{'nonu'}
@cindex 'number'
@cindex 'nu'
@cindex 'nonumber'
@cindex 'nonu'
@item 'number' 'nu'
切替 (既定ではオフ) @*
ウィンドウについてローカル

毎行の前に行番号を表示する。オプション '@option{cpoptions}' にフラグ '@var{n}' が含まれていないときは、折り返された行の先頭は行番号の表示される桁に入り込まない ('@option{compatible}' がオフのときはこれが既定である)。

オプション '@option{numberwidth}' で行番号の幅を設定することができる。折り返された行が長すぎて @{訳注: 行の途中の部分だけで画面一杯になってしまい@} 行の本当の先頭の文字が表示されていないときは、文字 '-' が行番号の前に表示される。行番号に使われる強調表示グループについては |hl-LineNr| と |hl-CursorLineNr| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*number_relativenumber*
	The 'relativenumber' option changes the displayed number to be
	relative to the cursor.  Together with 'number' there are these
	four combinations (cursor in line 3):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{number_relativenumber}
@cindex number_relativenumber
'@option{relativenumber}' オプションは表示される番号をカーソルからの相対にする。'@option{number}' と共にこれら 4 つの組み合わせがある。(カーソルは 3 行目):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		'nonu'          'nu'            'nonu'          'nu'
		'nornu'         'nornu'         'rnu'           'rnu'

	    |apple          |  1 apple      |  2 apple      |  2 apple
	    |pear           |  2 pear       |  1 pear       |  1 pear
	    |nobody         |  3 nobody     |  0 nobody     |3   nobody
	    |there          |  4 there      |  1 there      |  1 there
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .25 .25 .25
@item 'nonu' @tab 'nu' @tab 'nonu' @tab 'nu'
@item 'nornu' @tab 'nornu' @tab 'rnu' @tab 'rnu'
@item
@item |apple @tab |  1 apple @tab |  2 apple @tab |  2 apple
@item |pear @tab |  2 pear @tab |  1 pear @tab |  1 pear
@item |nobody @tab |  3 nobody @tab |  0 nobody @tab |  3 nobody
@item |there @tab |  4 there @tab |  1 there @tab |  1 there
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'numberwidth'* *'nuw'*
'numberwidth' 'nuw'	number	(Vim default: 4  Vi default: 8)
			local to window
			{not in Vi}
			{only available when compiled with the |+linebreak|
			feature}
	Minimal number of columns to use for the line number.  Only relevant
	when the 'number' or 'relativenumber' option is set or printing lines
	with a line number. Since one space is always between the number and
	the text, there is one less character for the number itself.
	The value is the minimum width.  A bigger width is used when needed to
	fit the highest line number in the buffer respectively the number of
	rows in the window, depending on whether 'number' or 'relativenumber'
	is set. Thus with the Vim default of 4 there is room for a line number
	up to 999. When the buffer has 1000 lines five columns will be used.
	The minimum value is 1, the maximum value is 10.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'numberwidth'}
@anchor{'nuw'}
@cindex 'numberwidth'
@cindex 'nuw'
@item 'numberwidth' 'nuw'
数値 (Vim の既定値: 4  Vi の既定値: 8) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ利用可能@}

行番号を表示するのに使われる桁数の最小値。'@option{number}' か '@option{relativenumber}' がオンのときか行番号付きで印刷するときのみ意味がある。常に番号とテキストの間にスペースが 1 つ置かれるので、番号そのものに割かれる桁数はこれより 1 文字少なくなる。

この値は最小の幅である。'@option{number}' がオンのときにはバッファの行数、'@option{relativenumber}' がオンのときにはウィンドウの行数を、それぞれ表示するのに足りないときは設定されたよりも広い幅が使われる。つまり、Vim の既定値の 4 だと、999 行目までの幅が割り当てられることになる。バッファが 1000 行以上になると 5 桁が割り当てられるようになる。

最小値は 1。最大値は 10。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'omnifunc'* *'ofu'*
'omnifunc' 'ofu'	string	(default: empty)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+eval|
			or |+insert_expand| features}
	This option specifies a function to be used for Insert mode omni
	completion with CTRL-X CTRL-O. |i_CTRL-X_CTRL-O|
	See |complete-functions| for an explanation of how the function is
	invoked and what it should return.
	This option is usually set by a filetype plugin:
	|:filetype-plugin-on|
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'omnifunc'}
@anchor{'ofu'}
@cindex 'omnifunc'
@cindex 'ofu'
@item 'omnifunc' 'ofu'
文字列 (既定では: 空) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+eval| と |+insert_expand| 機能付きでコンパイルされたときのみ利用可能@}

このオプションは挿入モードにおける @kbd{CTRL-X} @kbd{CTRL-O} でのオムニ補完で使われる関数を指定する。|i_CTRL-X_CTRL-O| この関数がどのように呼び出され、何を返すべきかについては |complete-functions| を参照。このオプションは普通、ファイルタイププラグインによって設定される。|:filetype-plugin-on|

このオプションは |modeline| や |sandbox| の中ではセキュリティ上の理由により設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
			    *'opendevice'* *'odev'* *'noopendevice'* *'noodev'*
'opendevice' 'odev'	boolean	(default off)
			global
			{not in Vi}
			{only for MS-DOS, MS-Windows and OS/2}
	Enable reading and writing from devices.  This may get Vim stuck on a
	device that can be opened but doesn't actually do the I/O.  Therefore
	it is off by default.
	Note that on MS-Windows editing "aux.h", "lpt1.txt" and the like also
	result in editing a device.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'opendevice'}
@anchor{'odev'}
@anchor{'noopendevice'}
@anchor{'noodev'}
@cindex 'opendevice'
@cindex 'odev'
@cindex 'noopendevice'
@cindex 'noodev'
@item 'opendevice' 'odev'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{MS-DOS, MS-Windows と OS/2 でのみ有効@}

デバイスからの読み書きを有効にする。これを有効にすると、実際には入出力をできないデバイスをオープンしてしまうと、Vim は動作を停止してしまう。そのため既定ではオフになっている。

MS-Windows で "aux.h"、"lpt1.txt" などを編集するとデバイスを編集中になることに注意。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'operatorfunc'* *'opfunc'*
'operatorfunc' 'opfunc'	string	(default: empty)
			global
			{not in Vi}
	This option specifies a function to be called by the |g@| operator.
	See |:map-operator| for more info and an example.

	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'operatorfunc'}
@anchor{'opfunc'}
@cindex 'operatorfunc'
@cindex 'opfunc'
@item 'operatorfunc' 'opfunc'
文字列 (既定では: 空) @*
グローバル *@
@{Vi にはない@}

このオプションはオペレータ |g@@| で呼び出される関数を指定する。より詳しい情報と例については |:map-operator| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
					*'osfiletype'* *'oft'*
'osfiletype' 'oft'	string (default: "")
			local to buffer
			{not in Vi}
	This option was supported on RISC OS, which has been removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'osfiletype'}
@anchor{'oft'}
@cindex 'osfiletype'
@cindex 'oft'
@item 'osfiletype' 'oft'
文字列 (既定では: "") @*
バッファについてローカル @*
@{Vi にはない@}

このオプションは RISC OS でサポートされていたが、RISC OS サポートは削除された。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
				*'packpath'* *'pp'*
'packpath' 'pp'		string	(default: see 'runtimepath')
			{not in Vi}
	Directories used to find packages.  See |packages|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'packpath'}
@anchor{'pp'}
@cindex 'packpath'
@cindex 'pp'
@item 'packpath' 'pp'
文字列 (既定では: '@option{runtimepath}' を参照) @*
@{Vi にはない@}

パッケージを見つけるために使われるディレクトリ。|packages| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'paragraphs'* *'para'*
'paragraphs' 'para'	string	(default "IPLPPPQPP TPHPLIPpLpItpplpipbp")
			global
	Specifies the nroff macros that separate paragraphs.  These are pairs
	of two letters (see |object-motions|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'paragraphs'}
@anchor{'para'}
@cindex 'paragraphs'
@cindex 'para'
@item 'paragraphs' 'para'
文字列 (既定では "IPLPPPQPP TPHPLIPpLpItpplpipbp") @*
グローバル

Nroff @{訳注: UNIX で使われる画面整形システム@} で使われる、段落を分けるためのマクロを指定する。値は 2 文字の組である (|object-motions| を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'paste'* *'nopaste'*
'paste'			boolean	(default off)
			global
			{not in Vi}
	Put Vim in Paste mode.  This is useful if you want to cut or copy
	some text from one window and paste it in Vim.  This will avoid
	unexpected effects.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'paste'}
@anchor{'nopaste'}
@cindex 'paste'
@cindex 'nopaste'
@item 'paste'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンにすると Vim は Paste モードに移行する。これはテキストを別のウィンドウから切り取ったりコピーして、Vim 内に貼り付けたいときに便利であり、予想しない作用を避けることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Setting this option is useful when using Vim in a terminal, where Vim
	cannot distinguish between typed text and pasted text.  In the GUI, Vim
	knows about pasting and will mostly do the right thing without 'paste'
	being set.  The same is true for a terminal where Vim handles the
	mouse clicks itself.
	This option is reset when starting the GUI.  Thus if you set it in
	your .vimrc it will work in a terminal, but not in the GUI.  Setting
	'paste' in the GUI has side effects: e.g., the Paste toolbar button
	will no longer work in Insert mode, because it uses a mapping.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは Vim をターミナルで使っているときに便利である。ターミナルでは打ち込まれたテキストと貼り付けられたテキストの区別がつかないからだ。GUI 版の Vim では貼り付け時にすべき動作を知っているので、'@option{paste}' がオフでも大抵うまくいく。Vim がマウスクリックを扱えるようなターミナルでも同様にうまくいく。

GUI を開始するとこのオプションはオフになる。そのため、@file{.vimrc} 内でこのオプションをオンにすると、それはターミナル内では働くが、GUI ではオフになる。GUI 版で '@option{paste}' をオンにすると次のような副作用がある: 例.「ペースト」ツールバーボタンが挿入モードで動作しなくなる。このボタンはマッピングを使っているためである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'paste' option is switched on (also when it was already on):
		- mapping in Insert mode and Command-line mode is disabled
		- abbreviations are disabled
		- 'autoindent' is reset
		- 'expandtab' is reset
		- 'formatoptions' is used like it is empty
		- 'revins' is reset
		- 'ruler' is reset
		- 'showmatch' is reset
		- 'smartindent' is reset
		- 'smarttab' is reset
		- 'softtabstop' is set to 0
		- 'textwidth' is set to 0
		- 'wrapmargin' is set to 0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{paste}' がオンのときは、以下のように設定が変わる:
@itemize @minus
@item 挿入モードとコマンドラインモードでのマッピングが無効になる
@item 略語展開が無効になる
@item '@option{autoindent}' がオフになる
@item '@option{expandtab}' がオフになる
@item '@option{formatoptions}' が空のときのような動作になる
@item '@option{revins}' がオフになる
@item '@option{ruler}' がオフになる
@item '@option{showmatch}' がオフになる
@item '@option{smartindent}' がオフになる
@item '@option{smarttab}' がオフになる
@item '@option{softtabstop}' が 0 になる
@item '@option{textwidth}' が 0 になる
@item '@option{wrapmargin}' が 0 になる
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	These options keep their value, but their effect is disabled:
		- 'cindent'
		- 'indentexpr'
		- 'lisp'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のオプションの値に変化はないが、働きは無効になる:
@itemize @minus
@item '@option{cindent}'
@item '@option{indentexpr}'
@item '@option{lisp}'
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: When you start editing another file while the 'paste' option is
	on, settings from the modelines or autocommands may change the
	settings again, causing trouble when pasting text.  You might want to
	set the 'paste' option again.
	When the 'paste' option is reset the mentioned options are restored to
	the value before the moment 'paste' was switched from off to on.
	Resetting 'paste' before ever setting it does not have any effect.
	Since mapping doesn't work while 'paste' is active, you need to use
	the 'pastetoggle' option to toggle the 'paste' option with some key.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{paste}' がオンのときに別のファイルの編集を始めると、モードラインや autocommand によって設定が再び変わり、貼り付け時に問題が起きることがあるので注意。そのときは '@option{paste}' を再びオンにするとよいだろう。

'@option{paste}' をオフにすると、上記のオプションの設定は '@option{paste}' がオンになった時点の前の状態に復元される。

'@option{paste}' をオンにする前にオフにしても何の効果もない。

'@option{paste}' がオンの間はマッピングが無効になるので、どれかのキーで '@option{paste}' を切り替えるには '@option{pastetoggle}' を使う必要がある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pastetoggle'* *'pt'*
'pastetoggle' 'pt'	string	(default "")
			global
			{not in Vi}
	When non-empty, specifies the key sequence that toggles the 'paste'
	option.  This is like specifying a mapping: >
	    :map {keys} :set invpaste<CR>
<	Where {keys} is the value of 'pastetoggle'.
	The difference is that it will work even when 'paste' is set.
	'pastetoggle' works in Insert mode and Normal mode, but not in
	Command-line mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pastetoggle'}
@anchor{'pt'}
@cindex 'pastetoggle'
@cindex 'pt'
@item 'pastetoggle' 'pt'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

空でないとき、オプション '@option{paste}' を切り替えるキー列を指定する。これは以下のようなマッピングの設定に似ている。
@example
:map @{keys@} :set invpaste<CR>
@end example
ここで @{keys@} は '@option{pastetoggle}' の値が当てはまる。違うのは、こちらは '@option{paste}' がオンでも有効だという点だ。'@option{pastetoggle}' は挿入モードとノーマルモードで有効だが、コマンドラインモードでは無効である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Mappings are checked first, thus overrule 'pastetoggle'.  However,
	when 'paste' is on mappings are ignored in Insert mode, thus you can do
	this: >
	    :map <F10> :set paste<CR>
	    :map <F11> :set nopaste<CR>
	    :imap <F10> <C-O>:set paste<CR>
	    :imap <F11> <nop>
	    :set pastetoggle=<F11>
<	This will make <F10> start paste mode and <F11> stop paste mode.
	Note that typing <F10> in paste mode inserts "<F10>", since in paste
	mode everything is inserted literally, except the 'pastetoggle' key
	sequence.
	When the value has several bytes 'ttimeoutlen' applies.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッピングが最初に調べられるので、'@option{pastetoggle}' を上書きできる。しかし '@option{paste}' がオンならば挿入モードでマッピングは無視されるので、以下のような設定が可能である。
@example
:map <F10> :set paste<CR>
:map <F11> :set nopaste<CR>
:imap <F10> <C-O>:set paste<CR>
:imap <F11> <nop>
:set pastetoggle=<F11>
@end example
こうすると @key{<F10>} で Paste モードが始まり、@key{<F11>} で Paste モードが終わる。
@quotation
@strong{Note:} @*
Pasteモードで @key{<F10>} を入力すると "<F10>" が挿入されるので注意。これは、Paste モードでは '@option{pastetoggle}' で指定されたキー列以外は全てそのまま挿入されるからである。このオプションの値が複数バイトからなる場合、'@option{ttimeoutlen}' が適用される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pex'* *'patchexpr'*
'patchexpr' 'pex'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+diff|
			feature}
	Expression which is evaluated to apply a patch to a file and generate
	the resulting new version of the file.  See |diff-patchexpr|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pex'}
@anchor{'patchexpr'}
@cindex 'pex'
@cindex 'patchexpr'
@item 'patchexpr' 'pex'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+diff| 機能付きでコンパイルされたときのみ有効@}

ファイルにパッチを適用し、ファイルの新しいバージョンを生成するために使われる式。|diff-patchexpr| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'patchmode'* *'pm'* *E205* *E206*
'patchmode' 'pm'	string	(default "")
			global
			{not in Vi}
	When non-empty the oldest version of a file is kept.  This can be used
	to keep the original version of a file if you are changing files in a
	source distribution.  Only the first time that a file is written a
	copy of the original file will be kept.  The name of the copy is the
	name of the original file with the string in the 'patchmode' option
	appended.  This option should start with a dot.  Use a string like
	".orig" or ".org".  'backupdir' must not be empty for this to work
	(Detail: The backup file is renamed to the patchmode file after the
	new file has been successfully written, that's why it must be possible
	to write a backup file).  If there was no file to be backed up, an
	empty file is created.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'patchmode'}
@anchor{'pm'}
@anchor{E205}
@anchor{E206}
@cindex 'patchmode'
@cindex 'pm'
@cindex E205
@cindex E206
@item 'patchmode' 'pm'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

値が空でないとき、ファイルの最も古いバージョンが保管されるようになる。ソース配布物内のファイルに変更を加えたとき、元のバージョンを取っておきたいならこれを使う。最初にファイルが書き込まれたときのみ、元のファイルのコピーが作られる。

コピーのファイル名は、元のファイル名の後に '@option{patchmode}' の値を付け加えたものである。このオプションの値はドットで始めるようにすべきである。".orig" または ".org" 等を使うこと。

この機能を使うには、'@option{backupdir}' が空であってはならない (詳細: 変更後のファイルの書き込みが成功してから、バックアップファイルがオリジナルをコピーしたファイルにリネームされるため、バックアップファイルを生成できなければならない)。バックアップすべきファイルがないときは、空ファイルが作られる。

@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'backupskip' pattern matches, a patchmode file is not made.
	Using 'patchmode' for compressed files appends the extension at the
	end (e.g., "file.gz.orig"), thus the resulting name isn't always
	recognized as a compressed file.
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{backupskip}' がファイル名にマッチしたときは、元のファイルは保管されない。圧縮ファイルに '@option{patchmode}' を使うと、ファイル名末尾に拡張子が付けられるので (例えば "file.gz.orig")、その結果できたファイルは必ずしも圧縮ファイルとは認識されなくなってしまう。通常のファイル名文字だけが使える。"/\*?[|<>" は不正である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'path'* *'pa'* *E343* *E345* *E347* *E854*
'path' 'pa'		string	(default on Unix: ".,/usr/include,,"
				   on OS/2:	  ".,/emx/include,,"
				   other systems: ".,,")
			global or local to buffer |global-local|
			{not in Vi}
	This is a list of directories which will be searched when using the
	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
	provided that the file being searched for has a relative path (not
	starting with "/", "./" or "../").  The directories in the 'path'
	option may be relative or absolute.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'path'}
@anchor{'pa'}
@anchor{E343}
@anchor{E345}
@anchor{E347}
@anchor{E854}
@cindex 'path'
@cindex 'pa'
@cindex E343
@cindex E345
@cindex E347
@cindex E854
@item 'path' 'pa'
文字列 (
@multitable @columnfractions .5 .5
@item Unix での既定値: @tab ".,/usr/include,,"
@item OS/2 での既定値: @tab ".,/emx/include,,"
@item 他のシステムでの既定値: @tab ".,,")
@end multitable
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

値はディレクトリのリストであり、コマンド |gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| 等で、検索されるファイルが相対パス ("/", "./", "../" で始まらないパス @{訳注: MS-Windows では "C:/" 等で始まらないパス@}) で指定されたときに使われるものである。オプション '@option{path}' にディレクトリを指定するには、相対パスでも絶対パスでもよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- Use commas to separate directory names: >
		:set path=.,/usr/local/include,/usr/include
<	- Spaces can also be used to separate directory names (for backwards
	  compatibility with version 3.0).  To have a space in a directory
	  name, precede it with an extra backslash, and escape the space: >
		:set path=.,/dir/with\\\ space
<	- To include a comma in a directory name precede it with an extra
	  backslash: >
		:set path=.,/dir/with\\,comma
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @minus
@item 複数のディレクトリ名はコンマで区切る。
@example
:set path=.,/usr/local/include,/usr/include
@end example
@item 区切りには空白も使える (Vim version 3.0 との後方互換性のため)。中に空白を含んだディレクトリ名を指定するには、空白の前に余分に '\' @{訳注: |option-backslash| を参照@} を置き、その上で空白と '\' を '\' でエスケープすること。
@example
:set path=.,/dir/with\\\ space
@end example
@{訳注: 結果は ".,/dir/with\ space"@}
@item 中にコンマを含んだディレクトリ名を指定するには、コンマの前に余分に '\' を置き、その上で '\' を '\' でエスケープすること。
@example
:set path=.,/dir/with\\,comma
@end example
@{訳注: 結果は ".,/dir/with\,comma"@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	- To search relative to the directory of the current file, use: >
		:set path=.
<	- To search in the current directory use an empty string between two
	  commas: >
		:set path=,,
<	- A directory name may end in a ':' or '/'.
	- Environment variables are expanded |:set_env|.
	- When using |netrw.vim| URLs can be used.  For example, adding
	  "http://www.vim.org" will make ":find index.html" work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item カレントファイルに対し相対的にディレクトリを指定するには、こうする。
@example
:set path=.
@end example
@item カレントディレクトリを指定するには、2個のコンマで空文字列を挟む。
@example
:set path=,,
@end example
@item ディレクトリ名の末尾は ':' や '/' でもよい。
@item 環境変数は展開される |:set_env|。
@item 公式プラグイン |netrw.vim| を使っているときはURLも指定できる。例えば "http://www.vim.org" を追加すると ":find index.html" とすることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- Search upwards and downwards in a directory tree using "*", "**" and
	  ";".  See |file-searching| for info and syntax.
	  {not available when compiled without the |+path_extra| feature}
	- Careful with '\' characters, type two to get one in the option: >
		:set path=.,c:\\include
<	  Or just use '/' instead: >
		:set path=.,c:/include
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item "*", "**", ";" を使えばディレクトリツリーの上下に向かって検索できる。詳しくは |file-searching| を参照。

@{Vimが |+path_extra| 機能付きでコンパイルされたときのみ有効@}
@item 文字 '\' の扱いには注意。オプションの値に '\' を 1 個含めるには、次のように 2 個打ち込む。
@example
:set path=.,c:\\include
@end example
または、次のように代わりに '/' を使う。
@example
:set path=.,c:/include
@end example
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Don't forget "." or files won't even be found in the same directory as
	the file!
	The maximum length is limited.  How much depends on the system, mostly
	it is something like 256 or 1024 characters.
	You can check if all the include files are found, using the value of
	'path', see |:checkpath|.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.  To remove the current directory use: >
		:set path-=
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値に "." を含めるのを忘れないこと！そうしないと、カレントファイルと同じディレクトリ内のファイルさえも発見できない！

値の長さには制限がある。システムごとに異なるが、大抵は 256 文字か 1024 文字等の長さである @{訳注: これは半角の場合で、全角では半分@}。

'@option{path}' でインクルードしたファイルを全て発見できているかどうかについては、|:checkpath| を参照。

リストにディレクトリを追加するときにはコマンド |:set+=|、リストからディレクトリを除くときにはコマンド |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。ただしカレントディレクトリを取り除くには次のようにする。
@example
:set path-=
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	To add the current directory use: >
		:set path+=
<	To use an environment variable, you probably need to replace the
	separator.  Here is an example to append $INCL, in which directory
	names are separated with a semi-colon: >
		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
<	Replace the ';' with a ':' or whatever separator is used.  Note that
	this doesn't work when $INCL contains a comma or white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
またカレントディレクトリを追加するには次のようにする。
@example
:set path+=
@end example
環境変数を使うには、その中の区切り文字を変える必要があるだろう。次のものは環境変数 $INCL を追加する例だが、その中ではディレクトリ名はセミコロン ';' で区切られているとする。
@example
:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
@end example
文字 ';' を ':' または指定可能な区切り文字で置換する。
@quotation
@strong{Note:} @*
この方法は、$INCL がコンマや空白を含んでいるときには使えないので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'perldll'*
'perldll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+perl/dyn|
			feature}
	Specifies the name of the Perl shared library. The default is
	DYNAMIC_PERL_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'perldll'}
@cindex 'perldll'
@item 'perldll'
文字列 (既定はビルドに依存する) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+perl/dyn| 機能付きでコンパイルされたときのみ有効@}

Perl の共有ライブラリの名前を指定する。既定は DYNAMIC_PERL_DLL で、これはコンパイル時に決められる。環境変数は展開される |:set_env|。

安全上の問題のため、このオプションは |modeline| からの設定も、|sandbox| 中での設定もすることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'preserveindent'* *'pi'* *'nopreserveindent'* *'nopi'*
'preserveindent' 'pi'	boolean	(default off)
			local to buffer
			{not in Vi}
	When changing the indent of the current line, preserve as much of the
	indent structure as possible.  Normally the indent is replaced by a
	series of tabs followed by spaces as required (unless |'expandtab'| is
	enabled, in which case only spaces are used).  Enabling this option
	means the indent will preserve as many existing characters as possible
	for indenting, and only add additional tabs or spaces as required.
	'expandtab' does not apply to the preserved white space, a Tab remains
	a Tab.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'preserveindent'}
@anchor{'pi'}
@anchor{'nopreserveindent'}
@anchor{'nopi'}
@cindex 'preserveindent'
@cindex 'pi'
@cindex 'nopreserveindent'
@cindex 'nopi'
@item 'preserveindent' 'pi'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

カレント行のインデントを変更するとき、可能な限りインデントの構造を保つようにする。普通、インデントはまずタブで埋められ、その後に必要なだけスペースで埋められる(|'expandtab'| がオンになっているときは違い、スペースだけで埋められる)。このオプションをオンにすると、インデントの既存の文字をできるだけそのままにし、追加の際に必要なだけタブやスペースを追加するようになる。

'@option{expandtab}' は適用されない。タブはタブのままになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: When using ">>" multiple times the resulting indent is a mix of
	tabs and spaces.  You might not like this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
">>" を複数回使うと、インデントにタブとスペースが混在するようになる。これは好ましくないかもしれない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	NOTE: This option is reset when 'compatible' is set.
	Also see 'copyindent'.
	Use |:retab| to clean up white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。'@option{copyindent}' も参照。空白文字を揃えるには |:retab| を使う。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'previewheight'* *'pvh'*
'previewheight' 'pvh'	number (default 12)
			global
			{not in Vi}
			{not available when compiled without the |+windows| or
			|+quickfix| features}
	Default height for a preview window.  Used for |:ptag| and associated
	commands.  Used for |CTRL-W_}| when no count is given.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'previewheight'}
@anchor{'pvh'}
@cindex 'previewheight'
@cindex 'pvh'
@item 'previewheight' 'pvh'
数値 (既定では 12) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能と |+quickfix| 機能付きでコンパイルされたときのみ有効@}

プレビューウィンドウの高さの既定値。コマンド |:ptag| とその関連コマンドで使われる。|CTRL-W_@}| にカウントが指定されなかったときもこれが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'previewwindow'* *'nopreviewwindow'*
					*'pvw'* *'nopvw'* *E590*
'previewwindow' 'pvw'	boolean (default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+windows| or
			|+quickfix| features}
	Identifies the preview window.  Only one window can have this option
	set.  It's normally not set directly, but by using one of the commands
	|:ptag|, |:pedit|, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'previewwindow'}
@anchor{'nopreviewwindow'}
@anchor{'pvw'}
@anchor{'nopvw'}
@anchor{E590}
@cindex 'previewwindow'
@cindex 'nopreviewwindow'
@cindex 'pvw'
@cindex 'nopvw'
@cindex E590
@item 'previewwindow' 'pvw'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能と |+quickfix| 機能付きでコンパイルされたときのみ有効@}

このオプションでプレビューウィンドウを決める。ただ1つのウィンドウでのみ、このオプションをオンに設定できる。普通、直接設定されることはないが、コマンド |:ptag|, |:pedit| 等を使うと設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printdevice'* *'pdev'*
'printdevice' 'pdev'	string	(default empty)
			global
			{not in Vi}
			{only available when compiled with the |+printer|
			feature}
	The name of the printer to be used for |:hardcopy|.
	See |pdev-option|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printdevice'}
@anchor{'pdev'}
@cindex 'printdevice'
@cindex 'pdev'
@item 'printdevice' 'pdev'
文字列 (既定では空) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| 機能付きでコンパイルされたときのみ有効@}

|:hardcopy| で使われるプリンタの名前。|pdev-option| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printencoding'* *'penc'*
'printencoding' 'penc'	String	(default empty, except for some systems)
			global
			{not in Vi}
			{only available when compiled with the |+printer|
			and |+postscript| features}
	Sets the character encoding used when printing.
	See |penc-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printencoding'}
@anchor{'penc'}
@cindex 'printencoding'
@cindex 'penc'
@item 'printencoding' 'penc'
文字列 (いくつかのシステムを除き、既定は空) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| と |+postscript| 機能付きでコンパイルされたときのみ利用可能@}

印刷の際に使われる文字エンコーディングを指定する。|penc-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printexpr'* *'pexpr'*
'printexpr' 'pexpr'	String	(default: see below)
			global
			{not in Vi}
			{only available when compiled with the |+printer|
			and |+postscript| features}
	Expression used to print the PostScript produced with |:hardcopy|.
	See |pexpr-option|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printexpr'}
@anchor{'pexpr'}
@cindex 'printexpr'
@cindex 'pexpr'
@item 'printexpr' 'pexpr'
文字列 (既定値は、以下を参照) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| 機能と |+postscript| 機能付きでコンパイルされたときのみ有効@}

コマンド "@command{:hardcopy}" で生成される PostScript (PS) ファイルを印刷するために評価される expression を指定する。|pexpr-option| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printfont'* *'pfn'*
'printfont' 'pfn'	string	(default "courier")
			global
			{not in Vi}
			{only available when compiled with the |+printer|
			feature}
	The name of the font that will be used for |:hardcopy|.
	See |pfn-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printfont'}
@anchor{'pfn'}
@cindex 'printfont'
@cindex 'pfn'
@item 'printfont' 'pfn'
文字列 (既定では "courier") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| 機能付きでコンパイルされたときのみ有効@}

コマンド |:hardcopy| の出力に使われるフォント名。|pfn-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printheader'* *'pheader'*
'printheader' 'pheader'  string  (default "%<%f%h%m%=Page %N")
			global
			{not in Vi}
			{only available when compiled with the |+printer|
			feature}
	The format of the header produced in |:hardcopy| output.
	See |pheader-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printheader'}
@anchor{'pheader'}
@cindex 'printheader'
@cindex 'pheader'
@item 'printheader' 'pheader'
文字列 (既定では "%<%f%h%m%=Page %N") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| 機能付きでコンパイルされたときのみ有効@}

コマンド |:hardcopy| の出力のヘッダーの書式を定義する。|pheader-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printmbcharset'* *'pmbcs'*
'printmbcharset' 'pmbcs'  string (default "")
			global
			{not in Vi}
			{only available when compiled with the |+printer|,
			|+postscript| and |+multi_byte| features}
	The CJK character set to be used for CJK output from |:hardcopy|.
	See |pmbcs-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printmbcharset'}
@anchor{'pmbcs'}
@cindex 'printmbcharset'
@cindex 'pmbcs'
@item 'printmbcharset' 'pmbcs'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer|, |+postscript|, |+multi_byte| 機能付きでコンパイルされたときのみ利用可能@}

コマンド |:hardcopy| の出力の中の CJK 文字に使われる文字集合。|pmbcs-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printmbfont'* *'pmbfn'*
'printmbfont' 'pmbfn'	string (default "")
			global
			{not in Vi}
			{only available when compiled with the |+printer|,
			|+postscript| and |+multi_byte| features}
	List of font names to be used for CJK output from |:hardcopy|.
	See |pmbfn-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printmbfont'}
@anchor{'pmbfn'}
@cindex 'printmbfont'
@cindex 'pmbfn'
@item 'printmbfont' 'pmbfn'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer|, |+postscript|, |+multi_byte| 機能付きでコンパイルされたときのみ利用可能@}

コマンド |:hardcopy| の出力の中の CJK 文字に使われるフォント名のリスト。|pmbfn-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'printoptions'* *'popt'*
'printoptions' 'popt' string (default "")
			global
			{not in Vi}
			{only available when compiled with |+printer| feature}
	List of items that control the format of the output of |:hardcopy|.
	See |popt-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'printoptions'}
@anchor{'popt'}
@cindex 'printoptions'
@cindex 'popt'
@item 'printoptions' 'popt'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+printer| 機能付きでコンパイルされたときのみ有効@}

コマンド |:hardcopy| の出力の書式を設定する項目のリスト。|popt-option| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'prompt'* *'noprompt'*
'prompt'		boolean	(default on)
			global
	When on a ":" prompt is used in Ex mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'prompt'}
@anchor{'noprompt'}
@cindex 'prompt'
@cindex 'noprompt'
@item 'prompt'
切替 (既定ではオン) @*
グローバル

オンならば、Ex モードでプロンプト ":" が表示される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pumheight'* *'ph'*
'pumheight' 'ph'	number	(default 0)
			global
			{not available when compiled without the
			|+insert_expand| feature}
			{not in Vi}
	Determines the maximum number of items to show in the popup menu for
	Insert mode completion.  When zero as much space as available is used.
	|ins-completion-menu|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pumheight'}
@anchor{'ph'}
@cindex 'pumheight'
@cindex 'ph'
@item 'pumheight' 'ph'
数値 (既定では 0) @*
グローバル @*
@{Vim が |+insert_expand| 機能付きでコンパイルされたときのみ利用可能@} @*
@{Vi にはない@}

挿入モード補完のポップアップメニューに表示される項目数の最大値。0 のときはスペースの許す限り多く表示される。|ins-completion-menu|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pythondll'*
'pythondll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+python/dyn|
			feature}
	Specifies the name of the Python 2.x shared library. The default is
	DYNAMIC_PYTHON_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pythondll'}
@cindex 'pythondll'
@item 'pythondll'
文字列 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vimが |+python/dyn| 機能付きでコンパイルされたときのみ有効@}

Python 2.x 共有ライブラリの名前を指定。既定値はコンパイル時に指定された DYNAMIC_PYTHON_DLL の値。環境変数は展開される |:set_env|。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pythonhome'*
'pythonhome'		string	(default "")
			global
			{not in Vi}
			{only available when compiled with the |+python/dyn|
			feature}
	Specifies the name of the Python 2.x home directory. When 'pythonhome'
	and the PYTHONHOME environment variable are not set, PYTHON_HOME,
	which was specified at compile time, will be used for the Python 2.x
	home directory.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pythonhome'}
@cindex 'pythonhome'
@item 'pythonhome'
文字列 (既定値は "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+python/dyn| 機能付きでコンパイルされたときのみ有効@}

Python 2.x のホームディレクトリ名を指定。'pythonhome' と PYTHONHOME 環境変数が設定されていない場合、コンパイル時に指定された PYTHON_HOME が Python 2.x のホームディレクトリとして使われる。

環境変数は |:set_env| で展開される。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pythonthreedll'*
'pythonthreedll'	string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+python3/dyn|
			feature}
	Specifies the name of the Python 3 shared library. The default is
	DYNAMIC_PYTHON3_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pythonthreedll'}
@cindex 'pythonthreedll'
@item 'pythonthreedll'
文字列 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+python3/dyn| 機能付きでコンパイルされたときのみ有効@}

Python 3 共有ライブラリの名前を指定。既定値はコンパイル時に指定された DYNAMIC_PYTHON3_DLL の値。環境変数は展開される |:set_env|。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pythonthreehome'*
'pythonthreehome'	string	(default "")
			global
			{not in Vi}
			{only available when compiled with the |+python3/dyn|
			feature}
	Specifies the name of the Python 3 home directory. When
	'pythonthreehome' and the PYTHONHOME environment variable are not set,
	PYTHON3_HOME, which was specified at compile time, will be used for
	the Python 3 home directory.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pythonthreehome'}
@cindex 'pythonthreehome'
@item 'pythonthreehome'
文字列 (既定値は "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+python3/dyn| 機能付きでコンパイルされたときのみ有効@}

Python 3 のホームディレクトリ名を指定。'pythonthreehome' と PYTHONHOME 環境変数が設定されていない場合、コンパイル時に指定された PYTHON3_HOME が Python 3 のホームディレクトリとして使われる。

環境変数は |:set_env| で展開される。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'pyxversion'* *'pyx'*
'pyxversion' 'pyx'	number	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+python| or
			the |+python3| feature}
	Specifies the python version used for pyx* functions and commands
	|python_x|.  The default value is as follows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'pyxversion'}
@anchor{'pyx'}
@cindex 'pyxversion'
@cindex 'pyx'
@item 'pyxversion' 'pyx'
数値 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+python| または |+python3| 機能付きでコンパイルされたときのみ有効@}

pyx* 関数とコマンドで使用する python のバージョンを指定する |python_x|。既定値は以下の通り:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Compiled with		     Default ~
		|+python| and |+python3|	0
		only |+python|			2
		only |+python3|			3
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .75 .25
@item 以下でコンパイル @tab 既定値
@item |+python| と |+python3| @tab 0
@item |+python| のみ @tab 2
@item |+python3| のみ @tab 3
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Available values are 0, 2 and 3.
	If 'pyxversion' is 0, it is set to 2 or 3 after the first execution of
	any python2/3 commands or functions.  E.g. `:py` sets to 2, and `:py3`
	sets to 3. `:pyx` sets it to 3 if Python 3 is available, otherwise sets
	to 2 if Python 2 is available.
	See also: |has-pythonx|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使用可能な値は 0, 2, 3 のいずれかである。

'@option{pyxversion}' が 0 の場合、最初に実行された python2/3 コマンドまたは関数によって 2 または 3 に設定される。例えば、`:py` は 2 に設定し、`:py3` は 3 に設定する。`:pyx` は、Python 3 が利用可能ならば 3 に設定し、そうでなく Python 2 が利用可能ならば 2 に設定する。|has-pythonx| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If Vim is compiled with only |+python| or |+python3| setting
	'pyxversion' has no effect.  The pyx* functions and commands are
	always the same as the compiled version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もし Vim が |+python| または |+python3| のみでコンパイルされている場合、'@option{pyxversion}' は効果がない。pyx* 関数とコマンドは、常にコンパイルされたバージョンと同じとなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'quoteescape'* *'qe'*
'quoteescape' 'qe'	string	(default "\")
			local to buffer
			{not in Vi}
	The characters that are used to escape quotes in a string.  Used for
	objects like a', a" and a` |a'|.
	When one of the characters in this option is found inside a string,
	the following character will be skipped.  The default value makes the
	text "foo\"bar\\" considered to be one string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'quoteescape'}
@anchor{'qe'}
@cindex 'quoteescape'
@cindex 'qe'
@item 'quoteescape' 'qe'
文字列 (既定では "\") @*
バッファについてローカル @*
@{Vi にはない@}

文字列内で引用符をエスケープする文字。テキストオブジェクト a', a", a` |a'| などで使われる。

このオプションの文字のどれかが文字列内に現れると、その次の文字はスキップされる。既定値では、テキスト "foo\"bar\\" が 1 つの文字列とみなされる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'readonly'* *'ro'* *'noreadonly'* *'noro'*
'readonly' 'ro'		boolean	(default off)
			local to buffer
	If on, writes fail unless you use a '!'.  Protects you from
	accidentally overwriting a file.  Default on when Vim is started
	in read-only mode ("vim -R") or when the executable is called "view".
	When using ":w!" the 'readonly' option is reset for the current
	buffer, unless the 'Z' flag is in 'cpoptions'.
	{not in Vi:}  When using the ":view" command the 'readonly' option is
	set for the newly edited buffer.
	See 'modifiable' for disallowing changes to the buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'readonly'}
@anchor{'ro'}
@anchor{'noreadonly'}
@anchor{'noro'}
@cindex 'readonly'
@cindex 'ro'
@cindex 'noreadonly'
@cindex 'noro'
@item 'readonly' 'ro'
切替 (既定ではオフ) @*
バッファについてローカル

オンのときは、書き込みコマンドは '!' を付けないと使えない。これは間違ってファイルを上書きしてしまうことを防ぐためのものである。Vim が読み込み専用モードで起動された ("vim -R") ときと、実行ファイルの名前が "view" のときにはオンが既定値になる。

'@option{cpoptions}' にフラグ '@var{Z}' が入っていない場合、"@command{:w!}" を使うとカレントバッファの '@option{readonly}' がオフになる。

@{Vi には、以下のコマンドはない@}

コマンド "@command{:view}" を使って開かれたバッファでは、オプション '@option{readonly}' はオンになる。バッファの変更を不許可とするには '@option{modifiable}' を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'redrawtime'* *'rdt'*
'redrawtime' 'rdt'	number	(default 2000)
			global
			{not in Vi}
			{only available when compiled with the |+reltime|
			feature}
	The time in milliseconds for redrawing the display.  This applies to
	searching for patterns for 'hlsearch', |:match| highlighting an syntax
	highlighting.
	When redrawing takes more than this many milliseconds no further
	matches will be highlighted.
	For syntax highlighting the time applies per window.  When over the
	limit syntax highlighting is disabled until |CTRL-L| is used.
	This is used to avoid that Vim hangs when using a very complicated
	pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'redrawtime'}
@anchor{'rdt'}
@cindex 'redrawtime'
@cindex 'rdt'
@item 'redrawtime' 'rdt'
数値 (既定では 2000) @*
グローバル @*
@{Vi にはない@} @*
@{|+reltime| 機能付きでコンパイルされたときのみ有効@}

画面を再描画するのにかける時間(ミリ秒)。これは '@option{hlsearch}' がオンのときのパターン検索や |:match| によるシンタックスハイライトに対して適用される。再描画にこれで指定したミリ秒以上の時間がかかるとき、それ以上のマッチはハイライトされない。シンタックスハイライトはウィンドウ毎に適用される。このリミットを超えると、シンタックスハイライトは |CTRL-L| が使われるまで無効にされる。非常に複雑なパターンを検索する際に Vim が応答しなくなるのを避けるためである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'regexpengine'* *'re'*
'regexpengine' 're'	number	(default 0)
			global
			{not in Vi}
	This selects the default regexp engine. |two-engines|
	The possible values are:
		0	automatic selection
		1	old engine
		2	NFA engine
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'regexpengine'}
@anchor{'re'}
@cindex 'regexpengine'
@cindex 're'
@item 'regexpengine' 're'
数値 (既定では 0) @*
グローバル @*
@{Vi にはない@}

デフォルトで使う正規表現エンジンを選択する。|two-engines| 設定できる値:
@multitable @columnfractions .15 .85
@item 0 @tab 自動選択
@item 1 @tab 古いエンジン
@item 2 @tab NFA エンジン
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that when using the NFA engine and the pattern contains something
	that is not supported the pattern will not match.  This is only useful
	for debugging the regexp engine.
	Using automatic selection enables Vim to switch the engine, if the
	default engine becomes too costly.  E.g., when the NFA engine uses too
	many states.  This should prevent Vim from hanging on a combination of
	a complex pattern with long text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
NFA エンジンを使う設定のときは、サポートされていないパターンを使うと、そのパターンはマッチしない。これは正規表現エンジンのデバッグ用。

自動選択を使用すると既定のエンジンの実行コストが高い場合に Vim の正規表現エンジンのスイッチが有効となる。例えば NFA エンジンが多くの処理時間を要する場合など。これは長いテキストで複雑なパターンの組み合わせにより Vim がハングしない様にする為の物である。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		*'relativenumber'* *'rnu'* *'norelativenumber'* *'nornu'*
'relativenumber' 'rnu'	boolean	(default off)
			local to window
			{not in Vi}
	Show the line number relative to the line with the cursor in front of
	each line. Relative line numbers help you use the |count| you can
	precede some vertical motion commands (e.g. j k + -) with, without
	having to calculate it yourself. Especially useful in combination with
	other commands (e.g. y d c < > gq gw =).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'relativenumber'}
@anchor{'rnu'}
@anchor{'norelativenumber'}
@anchor{'nornu'}
@cindex 'relativenumber'
@cindex 'rnu'
@cindex 'norelativenumber'
@cindex 'nornu'
@item 'relativenumber' 'rnu'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@}

カーソル行からの相対的な行番号を表示する。相対行番号を見れば縦移動のコマンドでカウント指定 (|count|) を使うとき自分で数える必要がないので便利である。特に他のコマンド (例: y d c < > gg gw =) と組み合わせるときなど。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'n' option is excluded from 'cpoptions' a wrapped
	line will not use the column of line numbers (this is the default when
	'compatible' isn't set).
	The 'numberwidth' option can be used to set the room used for the line
	number.
	When a long, wrapped line doesn't start with the first character, '-'
	characters are put before the number.
	See |hl-LineNr|  and |hl-CursorLineNr| for the highlighting used for
	the number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{cpoptions}' に '@var{n}' オプションが含まれていないときは、折り返された行を表示するのに行番号の表示領域は使われない (これは '@option{compatible}' がオフのときの既定動作である)。

行番号の表示領域の幅は '@option{numberwidth}' オプションで設定できる。折り返された行がとても長くてその行頭が画面外にあるときは、行番号の前に '-' 文字が表示される。

行番号の強調表示には |hl-LineNr| か |hl-CursorLineNr| が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
	
@ifset EN
	The number in front of the cursor line also depends on the value of
	'number', see |number_relativenumber| for all combinations of the two
	options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソル行の前の番号もまた '@option{number}' の値に依存し、この 2 つのオプションの全ての組み合わせについては |number_relativenumber| を参照せよ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'remap'* *'noremap'*
'remap'			boolean	(default on)
			global
	Allows for mappings to work recursively.  If you do not want this for
	a single entry, use the :noremap[!] command.
	NOTE: To avoid portability problems with Vim scripts, always keep
	this option at the default "on".  Only switch it off when working with
	old Vi scripts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'remap'}
@anchor{'noremap'}
@cindex 'remap'
@cindex 'noremap'
@item 'remap'
切替 (既定ではオン) @*
グローバル

再帰的マッピング @{訳注: マッピングに対するマッピング、に対するマッピング...@} を有効にする。特定のマッピングに対して再帰的マッピングを禁止したいときは、コマンド "@command{:noremap[!]}" を使うこと。
@quotation
@strong{Note:} @*
Vim script のポータビリティのために、このオプションは常に既定値のオンのままにしておくこと。昔の Vi スクリプトを使うときだけこれをオフにすること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
                                               *'renderoptions'* *'rop'*
'renderoptions' 'rop'	string  (default: empty)
			global
			{not in Vi}
			{only available when compiled with GUI and DIRECTX on
			MS-Windows}
	Select a text renderer and set its options.  The options depend on the
	renderer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'renderoptions'}
@anchor{'rop'}
@cindex 'renderoptions'
@cindex 'rop'
@item 'renderoptions' 'rop'
文字列 (既定では空) @*
グローバル @*
@{Vi にはない@} @*
@{MS-Windows で GUI と DIRECTX 付きでコンパイルされたときのみ有効@}

テキストレンダラの選択とそのオプションの設定。オプションはレンダラごとに異なる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Syntax: >
		set rop=type:{renderer}(,{name}:{value})*
<
	Currently, only one optional renderer is available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
構文:
@example
set rop=type:@{renderer@}(,@{name@}:@{value@})*
@end example
現在、選択できる追加のレンダラは一つだけである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	render	behavior    ~
	directx	Vim will draw text using DirectX (DirectWrite).  It makes
		drawn glyphs more beautiful than default GDI.
		It requires 'encoding' is "utf-8", and only works on
		MS-Windows Vista or newer version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item レンダラ @tab 振る舞い
@item directx @tab Vim は DirextX (DirectWrite) を使ってテキストを表示する。デフォルトの GDI よりも文字をきれいに表示できる。

MS-Windows の Vista 以降のバージョンで '@option{encoding}' が "@var{utf-8}" である必要がある。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Options:
		  name	    meaning		type	value       ~
		  gamma	    gamma		float	1.0 - 2.2 (maybe)
		  contrast  enhancedContrast	float	(unknown)
		  level	    clearTypeLevel	float	(unknown)
		  geom	    pixelGeometry	int	0 - 2 (see below)
		  renmode   renderingMode	int	0 - 6 (see below)
		  taamode   textAntialiasMode	int	0 - 3 (see below)
		  scrlines  Scroll Lines	int	(deprecated)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション:
@multitable @columnfractions .15 .4 .15 .3
@item 名前 @tab 意味 @tab 型 @tab 値
@item gamma @tab gamma @tab float @tab 1.0 - 2.2 (おそらく)
@item contrast @tab enhancedContrast @tab float @tab (不明)
@item level @tab clearTypeLevel @tab float @tab (不明)
@item geom @tab pixelGeometry @tab int @tab 0 - 2 (下記参照)
@item renmode @tab renderingMode @tab int @tab 0 - 6 (下記参照)
@item taamode @tab textAntialiasMode @tab int @tab 0 - 3 (下記参照)
@item scrlines @tab Scroll Lines @tab int @tab (非推奨)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		See this URL for detail (except for scrlines):
		  https://msdn.microsoft.com/en-us/library/dd368190.aspx
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は次の URL を参照 (scrlines を除く):

@url{https://msdn.microsoft.com/en-us/library/dd368190.aspx}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		For geom: structure of a device pixel.
		  0 - DWRITE_PIXEL_GEOMETRY_FLAT
		  1 - DWRITE_PIXEL_GEOMETRY_RGB
		  2 - DWRITE_PIXEL_GEOMETRY_BGR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
geom: デバイスピクセルの内部構造。
@multitable @columnfractions .15 .85
@item 0 - @tab DWRITE_PIXEL_GEOMETRY_FLAT
@item 1 - @tab DWRITE_PIXEL_GEOMETRY_RGB
@item 2 - @tab DWRITE_PIXEL_GEOMETRY_BGR
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		See this URL for detail:
		  https://msdn.microsoft.com/en-us/library/dd368114.aspx
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は次の URL を参照:

@url{https://msdn.microsoft.com/en-us/library/dd368114.aspx}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		For renmode: method of rendering glyphs.
		  0 - DWRITE_RENDERING_MODE_DEFAULT
		  1 - DWRITE_RENDERING_MODE_ALIASED
		  2 - DWRITE_RENDERING_MODE_GDI_CLASSIC
		  3 - DWRITE_RENDERING_MODE_GDI_NATURAL
		  4 - DWRITE_RENDERING_MODE_NATURAL
		  5 - DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC
		  6 - DWRITE_RENDERING_MODE_OUTLINE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
renmode: 文字レンダリングの方法。
@multitable @columnfractions .15 .85
@item 0 - @tab DWRITE_RENDERING_MODE_DEFAULT
@item 1 - @tab DWRITE_RENDERING_MODE_ALIASED
@item 2 - @tab DWRITE_RENDERING_MODE_GDI_CLASSIC
@item 3 - @tab DWRITE_RENDERING_MODE_GDI_NATURAL
@item 4 - @tab DWRITE_RENDERING_MODE_NATURAL
@item 5 - @tab DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC
@item 6 - @tab DWRITE_RENDERING_MODE_OUTLINE
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		See this URL for detail:
		  https://msdn.microsoft.com/en-us/library/dd368118.aspx
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は次の URL を参照:

@url{https://msdn.microsoft.com/en-us/library/dd368118.aspx}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		For taamode: antialiasing mode used for drawing text.
		  0 - D2D1_TEXT_ANTIALIAS_MODE_DEFAULT
		  1 - D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE
		  2 - D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE
		  3 - D2D1_TEXT_ANTIALIAS_MODE_ALIASED
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
taamode: テキスト描画に使われるアンチエイリアスモード。
@multitable @columnfractions .15 .85
@item 0 - @tab D2D1_TEXT_ANTIALIAS_MODE_DEFAULT
@item 1 - @tab D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE
@item 2 - @tab D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE
@item 3 - @tab D2D1_TEXT_ANTIALIAS_MODE_ALIASED
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		See this URL for detail:
		  https://msdn.microsoft.com/en-us/library/dd368170.aspx
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は次の URL を参照:

@url{https://msdn.microsoft.com/en-us/library/dd368170.aspx}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		For scrlines:
		This was used for optimizing scrolling behavior, however this
		is now deprecated.  If specified, it is simply ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
scrlines: @*
これはスクロールの挙動を最適化するために使われたが、現在では非推奨になっている。もしも指定されていたとしても、単に無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Example: >
		  set encoding=utf-8
		  set gfn=Ricty_Diminished:h12
		  set rop=type:directx
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
set encoding=utf-8
set gfn=Ricty_Diminished:h12
set rop=type:directx
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If select a raster font (Courier, Terminal or FixedSys which
		have ".fon" extension in file name) to 'guifont', it will be
		drawn by GDI as a fallback.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{guifont}' にラスターフォント (Courier、Terminal、FixedSys など拡張子に ".fon" が付いているもの) が選択されているときは、自動的に GDI による描画に切り替わる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		NOTE: It is known that some fonts and options combination
		causes trouble on drawing glyphs.

		  - 'renmode:5' and 'renmode:6' will not work with some
		    special made fonts (True-Type fonts which includes only
		    bitmap glyphs).
		  - 'taamode:3' will not work with some vector fonts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
一部のフォントとオプションの組み合わせによってはグリフが描画されない場合があることに注意。
@itemize @minus
@item '@option{renmode:5}' と '@option{renmode:6}' は、一部の特製フォント (ビットマップしか含まない TrueType フォントなど) に対して動作しない。
@item '@option{taamode:3}' は一部のベクターフォントに対して動作しない。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		NOTE: With this option, you can display colored emoji
		(emoticon) in Windows 8.1 or later.  To display colored emoji,
		there are some conditions which you should notice.

		  - If your font includes non-colored emoji already, it will
		    be used.
		  - If your font doesn't have emoji, the system chooses an
		    alternative symbol font.  On Windows 10, "Segoe UI Emoji"
		    will be used.
		  - When this alternative font didn't have fixed width glyph,
		    emoji might be rendered beyond the bounding box of drawing
		    cell.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Windows 8.1 またはそれ以降では、このオプションを使うことで、色付き絵文字を表示することができる。ただし、色付き絵文字を表示するためにはいくつかの条件があることに注意。
@itemize @minus
@item 選択したフォントが色無しの絵文字を含んでいる場合は、それが使われる。
@item 選択したフォントが絵文字を含んでいない場合、システムが代替フォントを選択する。Windows 10 では "Segoe UI Emoji" が使われる。
@item この代替フォントが固定幅のグリフを持っていない場合、絵文字は文字の描画幅を超えて描画されるかもしれない。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Other render types are currently not supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のレンダタイプは現在のところサポートされていない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'report'*
'report'		number	(default 2)
			global
	Threshold for reporting number of lines changed.  When the number of
	changed lines is more than 'report' a message will be given for most
	":" commands.  If you want it always, set 'report' to 0.
	For the ":substitute" command the number of substitutions is used
	instead of the number of lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'report'}
@cindex 'report'
@item 'report'
数値 (既定では 2) @*
グローバル

変更された行の数の報告が出る最小値。変更された行の数がオプション '@option{report}' より大きければ、ほとんどの ":" によるコマンドでメッセージが表示される。必ず報告してほしいなら '@option{report}' を 0 にすること。
コマンド "@command{:substitute}" では、基準は変更された行数ではなく、置換を行った回数になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			 *'restorescreen'* *'rs'* *'norestorescreen'* *'nors'*
'restorescreen' 'rs'	boolean	(default on)
			global
			{not in Vi}  {only in Windows 95/NT console version}
	When set, the screen contents is restored when exiting Vim.  This also
	happens when executing external commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'restorescreen'}
@anchor{'rs'}
@anchor{'norestorescreen'}
@anchor{'nors'}
@cindex 'restorescreen'
@cindex 'rs'
@cindex 'norestorescreen'
@cindex 'nors'
@item 'restorescreen' 'rs'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の Windows 95/NT のコンソール版@}

オンのとき、Vim を終了した後にコンソール画面の内容が復元される。外部コマンドを実行するときも同様である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For non-Windows Vim: You can set or reset the 't_ti' and 't_te'
	options in your .vimrc.  To disable restoring:
		set t_ti= t_te=
	To enable restoring (for an xterm):
		set t_ti=^[7^[[r^[[?47h t_te=^[[?47l^[8
	(Where ^[ is an <Esc>, type CTRL-V <Esc> to insert it)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Windows 版以外の Vim では: ファイル @file{.vimrc} で、オプション '@option{t_ti}' と '@option{t_te}' を設定することで実現できる。画面の復元を無効にするには次のようにする。
@example
set t_ti= t_te=
@end example
復元を有効にするには次のようにする (xterm 用の設定)。
@example
set t_ti=^[7^[[r^[[?47h t_te=^[[?47l^[8
@end example
(ここで ^[ は <Esc> であり、入力するには @kbd{CTRL-V} @key{<Esc>} と打ち込む)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'revins'* *'ri'* *'norevins'* *'nori'*
'revins' 'ri'		boolean	(default off)
			global
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	Inserting characters in Insert mode will work backwards.  See "typing
	backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
	command in Insert mode, when 'allowrevins' is set.
	NOTE: This option is reset when 'compatible' is set.
	This option is reset when 'paste' is set and restored when 'paste' is
	reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'revins'}
@anchor{'ri'}
@anchor{'norevins'}
@anchor{'nori'}
@cindex 'revins'
@cindex 'ri'
@cindex 'norevins'
@cindex 'nori'
@item 'revins' 'ri'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

挿入モードでの文字の挿入が通常と逆向きになる。"typing backwards" を参照 |ins-reverse|。このオプションは、オプション '@option{allowrevins}' がオンならば挿入モードでコマンド @kbd{CTRL-_} を使うことで切り替えられる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、'@option{paste}' オプションがリセットされた際には復元される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'rightleft'* *'rl'* *'norightleft'* *'norl'*
'rightleft' 'rl'	boolean	(default off)
			local to window
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	When on, display orientation becomes right-to-left, i.e., characters
	that are stored in the file appear from the right to the left.
	Using this option, it is possible to edit files for languages that
	are written from the right to the left such as Hebrew and Arabic.
	This option is per window, so it is possible to edit mixed files
	simultaneously, or to view the same file in both ways (this is
	useful whenever you have a mixed text file with both right-to-left
	and left-to-right strings so that both sets are displayed properly
	in different windows).  Also see |rileft.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'rightleft'}
@anchor{'rl'}
@anchor{'norightleft'}
@anchor{'norl'}
@cindex 'rightleft'
@cindex 'rl'
@cindex 'norightleft'
@cindex 'norl'
@item 'rightleft' 'rl'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ有効@}

オンのとき、画面表示の方向が右から左になる。つまり、ファイルに保存されている文字は右から左の方向へ表示される。このオプションを使うと、ヘブライ語やアラビア語のような右から左に向かって書かれる言語によるファイルを編集できる。このオプションはウィンドウごとに設定可能なので、ヘブライ語と英語のファイルを同時に編集したり、同一のファイルを2通りに表示することができる (これは右から左のテキストと左から右のテキストが混在しているファイルを編集するときに便利である。両方を異なるウィンドウで適切に表示することができる)。|rileft.txt| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'rightleftcmd'* *'rlc'*
'rightleftcmd' 'rlc'	string	(default "search")
			local to window
			{not in Vi}
			{only available when compiled with the |+rightleft|
			feature}
	Each word in this option enables the command line editing to work in
	right-to-left mode for a group of commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'rightleftcmd'}
@anchor{'rlc'}
@cindex 'rightleftcmd'
@cindex 'rlc'
@item 'rightleftcmd' 'rlc'
文字列 (既定では "search") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+rightleft| 機能付きでコンパイルされたときのみ利用可能@}

左←右書きモードで動作するコマンドを指定する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		search		"/" and "?" commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
search      コマンド "/" と "?"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This is useful for languages such as Hebrew, Arabic and Farsi.
	The 'rightleft' option must be set for 'rightleftcmd' to take effect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはヘブライ語、アラビア語、ペルシア語などの言語で便利である。オプション '@option{rightleft}' を設定しないと '@option{rightleftcmd}' は効果がない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'rubydll'*
'rubydll'		string	(default: depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+ruby/dyn|
			feature}
	Specifies the name of the Ruby shared library. The default is
	DYNAMIC_RUBY_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'rubydll'}
@cindex 'rubydll'
@item 'rubydll'
文字列 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+ruby/dyn| 機能付きでコンパイルされたときのみ有効@}

Ruby 共有ライブラリの名前を指定。既定値はコンパイル時に指定された DYNAMIC_RUBY_DLL の値。環境変数は展開される |:set_env|。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					 *'ruler'* *'ru'* *'noruler'* *'noru'*
'ruler' 'ru'		boolean	(default off, set in |defaults.vim|)
			global
			{not in Vi}
			{not available when compiled without the
			|+cmdline_info| feature}
	Show the line and column number of the cursor position, separated by a
	comma.  When there is room, the relative position of the displayed
	text in the file is shown on the far right:
		Top	first line is visible
		Bot	last line is visible
		All	first and last line are visible
		45%	relative position in the file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ruler'}
@anchor{'ru'}
@anchor{'noruler'}
@anchor{'noru'}
@cindex 'ruler'
@cindex 'ru'
@cindex 'noruler'
@cindex 'noru'
@item 'ruler' 'ru'
切替 (既定ではオフ, |defaults.vim| 内でオンに設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+cmdline_info| 機能付きでコンパイルされたときのみ有効@}

カーソルが何行目の何列目に置かれているかを表示する @{訳注: これをルーラーと呼ぶ@}。行数と列数はコンマで区切られる。幅に余裕があるときは、表示されているテキストの、ファイル内での相対位置が右端に表示される。
@multitable @columnfractions .15 .85
@item 先頭 @tab ファイル先頭の行が表示されているとき
@item 末尾 @tab ファイル末尾の行が表示されているとき
@item 全て @tab ファイル先頭と末尾の行の両方が表示されているとき
@item 45% @tab ファイル内での相対位置
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If 'rulerformat' is set, it will determine the contents of the ruler.
	Each window has its own ruler.  If a window has a status line, the
	ruler is shown there.  Otherwise it is shown in the last line of the
	screen.  If the statusline is given by 'statusline' (i.e. not empty),
	this option takes precedence over 'ruler' and 'rulerformat'
	If the number of characters displayed is different from the number of
	bytes in the text (e.g., for a TAB or a multi-byte character), both
	the text column (byte number) and the screen column are shown,
	separated with a dash.
	For an empty line "0-1" is shown.
	For an empty buffer the line number will also be zero: "0,0-1".
	This option is reset when 'paste' is set and restored when 'paste' is
	reset.
	If you don't want to see the ruler all the time but want to know where
	you are, use "g CTRL-G" |g_CTRL-G|.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{rulerformat}' が設定されているときは、それによってルーラーの内容が指定される。ルーラーはウィンドウごとに表示される。ウィンドウにステータス行が表示されていれば、ルーラーもそこに表示される。そうでなければ画面 の末尾の行に表示される。ステータス行の内容が '@option{statusline}' で指定されているときは (つまりその値が空でないときは)、'@option{statusline}' が '@option{ruler}' や '@option{rulerformat}' より優先される。

表示された文字の数がテキスト上でのバイト数と違うときは (例えば、タブ文字やマルチバイト文字があるとき)、テキスト上の列数 (バイト数) と画面上の列数が、ダッシュで区切られて両方表示される。

空行では "0-1" と表示される。空のバッファでは行数も0になり、"0,0-1" と表示される。このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、'@option{paste}' オプションがリセットされた際には復元される。ルーラーを常に表示したくはないが、テキスト内のどこにいるのか知りたいときは、コマンド "g CTRL-G" を使うこと |g_CTRL-G|。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'rulerformat'* *'ruf'*
'rulerformat' 'ruf'	string	(default empty)
			global
			{not in Vi}
			{not available when compiled without the |+statusline|
			feature}
	When this option is not empty, it determines the content of the ruler
	string, as displayed for the 'ruler' option.
	The format of this option is like that of 'statusline'.
	The default ruler width is 17 characters.  To make the ruler 15
	characters wide, put "%15(" at the start and "%)" at the end.
	Example: >
		:set rulerformat=%15(%c%V\ %p%%%)
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'rulerformat'}
@anchor{'ruf'}
@cindex 'rulerformat'
@cindex 'ruf'
@item 'rulerformat' 'ruf'
文字列 (既定では空) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+statusline| 機能付きでコンパイルされたときのみ有効@}

値が空でないときは、オプション '@option{ruler}' によって表示されるルーラーの内容を指定する。このオプションの書式は '@option{statusline}' のものと同様である。

ルーラーの幅は既定では 17 文字である。幅を 15 文字にするには、値の先頭に "%15(" を置き、末尾に "%)" を置くこと。例:
@example
:set rulerformat=%15(%c%V\ %p%%%)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				*'runtimepath'* *'rtp'* *vimfiles*
'runtimepath' 'rtp'	string	(default:
					Unix: "$HOME/.vim,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						$HOME/.vim/after"
					Amiga: "home:vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						home:vimfiles/after"
					PC, OS/2: "$HOME/vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						$HOME/vimfiles/after"
					Macintosh: "$VIM:vimfiles,
						$VIMRUNTIME,
						$VIM:vimfiles:after"
					RISC-OS: "Choices:vimfiles,
						$VIMRUNTIME,
						Choices:vimfiles/after"
					VMS: "sys$login:vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						sys$login:vimfiles/after")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'runtimepath'}
@anchor{'rtp'}
@anchor{vimfiles}
@cindex 'runtimepath'
@cindex 'rtp'
@cindex vimfiles
@item 'runtimepath' 'rtp'
文字列	(既定値:
@multitable @columnfractions .3 .7
@item Unix: @tab "$HOME/.vim, $VIM/vimfiles, $VIMRUNTIME, $VIM/vimfiles/after, $HOME/.vim/after"
@item Amiga: @tab "home:vimfiles, $VIM/vimfiles, $VIMRUNTIME, $VIM/vimfiles/after, home:vimfiles/after"
@item DOS, MS-Win系, OS/2: @tab "$HOME/vimfiles, $VIM/vimfiles, $VIMRUNTIME, $VIM/vimfiles/after, $HOME/vimfiles/after"
@item Macintosh: @tab "$VIM:vimfiles, $VIMRUNTIME, $VIM:vimfiles:after"
@item RISC-OS: @tab "Choices:vimfiles, $VIMRUNTIME, Choices:vimfiles/after"
@item VMS: @tab "sys$login:vimfiles, $VIM/vimfiles, $VIMRUNTIME, $VIM/vimfiles/after, sys$login:vimfiles/after")
@end multitable
グローバル

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This is a list of directories which will be searched for runtime
	files:
	  filetype.vim	filetypes by file name |new-filetype|
	  scripts.vim	filetypes by file contents |new-filetype-scripts|
	  autoload/	automatically loaded scripts |autoload-functions|
	  colors/	color scheme files |:colorscheme|
	  compiler/	compiler files |:compiler|
	  doc/		documentation |write-local-help|
	  ftplugin/	filetype plugins |write-filetype-plugin|
	  indent/	indent scripts |indent-expression|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のランタイムファイルが検索されるディレクトリのリスト:
@multitable @columnfractions .25 .75
@item filetype.vim @tab ファイル名によるファイルタイプの決定 |new-filetype|
@item scripts.vim @tab ファイルの内容によるファイルタイプの決定 |new-filetype-scripts|
@item autoload/ @tab 自動的に読み込まれるスクリプト |autoload-functions|
@item colors/ @tab 色テーマ定義ファイル |:colorscheme|
@item compiler/ @tab コンパイラ定義ファイル |:compiler|
@item doc/ @tab ヘルプドキュメント |write-local-help|
@item ftplugin/ @tab ファイルタイププラグイン |write-filetype-plugin|
@item indent/ @tab インデントスクリプト |indent-expression|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  keymap/	key mapping files |mbyte-keymap|
	  lang/		menu translations |:menutrans|
	  menu.vim	GUI menus |menu.vim|
	  pack/		packages |:packadd|
	  plugin/	plugin scripts |write-plugin|
	  print/	files for printing |postscript-print-encoding|
	  spell/	spell checking files |spell|
	  syntax/	syntax files |mysyntaxfile|
	  tutor/	files for vimtutor |tutor|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item keymap/ @tab キーマップ定義ファイル |mbyte-keymap|
@item lang/ @tab 翻訳版メニュー |:menutrans|
@item menu.vim @tab GUI 版メニュー |menu.vim|
@item pack/ @tab パッケージ |:packadd|
@item plugin/ @tab プラグインスクリプト |write-plugin|
@item print/ @tab 印刷用のファイル |postscript-print-encoding|
@item spell/ @tab スペルチェック用のファイル |spell|
@item syntax/ @tab 文法ファイル |mysyntaxfile|
@item tutor/ @tab Vimtutor 用ファイル |tutor|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	And any other file searched for with the |:runtime| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
および、コマンド |:runtime| で検索される全てのファイル。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The defaults for most systems are setup to search five locations:
	1. In your home directory, for your personal preferences.
	2. In a system-wide Vim directory, for preferences from the system
	   administrator.
	3. In $VIMRUNTIME, for files distributed with Vim.
							*after-directory*
	4. In the "after" directory in the system-wide Vim directory.  This is
	   for the system administrator to overrule or add to the distributed
	   defaults (rarely needed)
	5. In the "after" directory in your home directory.  This is for
	   personal preferences to overrule or add to the distributed defaults
	   or system-wide settings (rarely needed).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどのシステムでの既定値は、以下の5カ所を検索するようになっている。
@enumerate
@item ユーザーの個人的な設定を読み込むため、ユーザーのホームディレクトリを検索する。
@item システム管理者による設定を読み込むため、システム共通の Vim 用ディレクトリを検索する。
@item Vim 付属のファイルを読み込むため、環境変数 $VIMRUNTIME 内を検索する。
@anchor{after-directory}
@cindex after-directory
@item システム管理者が付属ファイルによる設定を上書きしたり、それに追加設定をしたりできるようにするため、システム共通のVimディレクトリ内のディレクトリ "after" を検索する (これは滅多に使われない)。
@item ユーザーが付属ファイルやシステム管理者による設定を上書きしたり、それに追加設定をしたりできるようにするため、ユーザーのホームディレクトリ内のディレクトリ "after" を検索する。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	More entries are added when using |packages|.  If it gets very long
	then `:set rtp` will be truncated, use `:echo &rtp` to see the full
	string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|packages| を使用するとさらに多くのエントリが追加される。もしもとても長くなる場合 `:set rtp` は省略されるので、全てをみる必要がある場合は `:echo &rtp` を使用する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note that, unlike 'path', no wildcards like "**" are allowed.  Normal
	wildcards are allowed, but can significantly slow down searching for
	runtime files.  For speed, use as few items as possible and avoid
	wildcards.
	See |:runtime|.
	Example: >
		:set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
オプション '@option{path}' と違い、ワイルドカードのうち "**" 等は使えないことに注意。普通のワイルドカードは使えるが、ランタイムファイルの検索が目に見えて遅くなることがある。速度を向上させるには、設定する項目の数をなるべく少なくし、ワイルドカードの使用を避けること。|:runtime| を参照。

例:
@example
:set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	This will use the directory "~/vimruntime" first (containing your
	personal Vim runtime files), then "/mygroup/vim" (shared between a
	group of people) and finally "$VIMRUNTIME" (the distributed runtime
	files).
	You probably should always include $VIMRUNTIME somewhere, to use the
	distributed runtime files.  You can put a directory before $VIMRUNTIME
	to find files which replace a distributed runtime files.  You can put
	a directory after $VIMRUNTIME to find files which add to distributed
	runtime files.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
こうすると、ディレクトリ "~/vimruntime" (ユーザーの個人的Vimランタイムファイルを格納) を最初に検索し、次にディレクトリ "/mygroup/vim" (グループ共通の設定ファイルを格納) を、最後に "$VIMRUNTIME" (付属ランタイムファイル) を検索する。

付属ランタイムファイルを使えるようにするため、どこかに必ず環境変数 $VIMRUNTIME を指定するべきだろう。付属ランタイムファイルの代わりに使うファイルを置くディレクトリは、環境変数 $VIMRUNTIME の前に指定すればよい。付属ランタイムファイルによる設定に追加するためのファイルを置くディレクトリは、環境変数 $VIMRUNTIME の後に指定すればよい。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'scroll'* *'scr'*
'scroll' 'scr'		number	(default: half the window height)
			local to window
	Number of lines to scroll with CTRL-U and CTRL-D commands.  Will be
	set to half the number of lines in the window when the window size
	changes.  If you give a count to the CTRL-U or CTRL-D command it will
	be used as the new value for 'scroll'.  Reset to half the window
	height with ":set scroll=0".   {Vi is a bit different: 'scroll' gives
	the number of screen lines instead of file lines, makes a difference
	when lines wrap}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'scroll'}
@anchor{'scr'}
@cindex 'scroll'
@cindex 'scr'
@item 'scroll' 'scr'
数値 (既定では、ウィンドウ高の半分) @*
ウィンドウについてローカル

コマンド @kbd{CTRL-U} や @kbd{CTRL-D} でスクロールする行数。ウィンドウのサイズが変わると、ウィンドウの行数の半分に設定される。@kbd{CTRL-U} や @kbd{CTRL-D} を、カウントを指定して使うと、カウントはオプション '@option{scroll}' の値として使われる。

"@command{:set scroll=0}" とすると、値はウィンドウ高の半分に戻る。@{Vi では微妙に違う: オプション '@option{scroll}' ではファイル上の行数ではなく、画面上の行数を指定していた。行の折り返しがあるときに違いが出る@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
'scrollbind' 'scb'	boolean  (default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+scrollbind|
			feature}
	See also |scroll-binding|.  When this option is set, the current
	window scrolls as other scrollbind windows (windows that also have
	this option set) scroll.  This option is useful for viewing the
	differences between two versions of a file, see 'diff'.
	See |'scrollopt'| for options that determine how this option should be
	interpreted.
	This option is mostly reset when splitting a window to edit another
	file.  This means that ":split | edit file" results in two windows
	with scroll-binding, but ":split file" does not.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'scrollbind'}
@anchor{'scb'}
@anchor{'noscrollbind'}
@anchor{'noscb'}
@cindex 'scrollbind'
@cindex 'scb'
@cindex 'noscrollbind'
@cindex 'noscb'
@item 'scrollbind' 'scb'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+scrollbind| 機能付きでコンパイルされたときのみ有効@}

|scroll-binding| も参照。オンのとき、カレントウィンドウは他のスクロール同調中ウィンドウ (このオプションがオンになっているウィンドウ) と同じだけスクロールする。このオプションは、ファイルの 2 個のバージョン間の違いを見るのに便利である。オプション '@option{diff}' を参照。

このオプションがどのように解釈されるかを決定するオプションについては、オプション '@option{scrollopt}' を参照。

ウィンドウを分割して他のファイルを編集すると、ほとんどの場合このオプションはオフになる。よって ":split | edit file" はウィンドウを 2 つに分割し、scroll-binding を設定するが、":split file" はそうならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'scrolljump'* *'sj'*
'scrolljump' 'sj'	number	(default 1)
			global
			{not in Vi}
	Minimal number of lines to scroll when the cursor gets off the
	screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
	CTRL-D).  Useful if your terminal scrolls very slowly.
	When set to a negative number from -1 to -100 this is used as the
	percentage of the window height.  Thus -50 scrolls half the window
	height.
	NOTE: This option is set to 1 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'scrolljump'}
@anchor{'sj'}
@cindex 'scrolljump'
@cindex 'sj'
@item 'scrolljump' 'sj'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@}

カーソルが画面外に出たときにスクロールする行数の最小値 (例えばコマンド "j" 等によって)。スクロールコマンド (例えば @kbd{CTRL-E}, @kbd{CTRL-D}) には使われない。ユーザーのターミナルのスクロールがとても遅いときに便利である。

-1 から -100 までの負の数に設定すると、ウィンドウの高さのパーセンテージとして扱われる。つまり -50 はウィンドウの高さの半分スクロールする。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 1 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'scrolloff'* *'so'*
'scrolloff' 'so'	number	(default 0, set to 5 in |defaults.vim|)
			global
			{not in Vi}
	Minimal number of screen lines to keep above and below the cursor.
	This will make some context visible around where you are working.  If
	you set it to a very large value (999) the cursor line will always be
	in the middle of the window (except at the start or end of the file or
	when long lines wrap).
	For scrolling horizontally see 'sidescrolloff'.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'scrolloff'}
@anchor{'so'}
@cindex 'scrolloff'
@cindex 'so'
@item 'scrolloff' 'so'
数値 (既定では 0、|defaults.vim| 内で 5 に設定される) @*
グローバル @*
@{Vi にはない@}

カーソルの上または下には、最低でもこのオプションに指定した数の行が表示される。これにより、編集中の箇所の周辺のテキストを見ることができる。とても大きい値 (999 等) にすると、カーソルの置かれた行は常にウィンドウの中央に表示される (ファイル先頭または末尾にいるときと、長い行が折り返されているとき以外)。

水平スクロールについてはオプション '@option{sidescrolloff}' を参照。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'scrollopt'* *'sbo'*
'scrollopt' 'sbo'	string	(default "ver,jump")
			global
			{not available when compiled without the |+scrollbind|
			feature}
			{not in Vi}
	This is a comma-separated list of words that specifies how
	'scrollbind' windows should behave.  'sbo' stands for ScrollBind
	Options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'scrollopt'}
@anchor{'sbo'}
@cindex 'scrollopt'
@cindex 'sbo'
@item 'scrollopt' 'sbo'
文字列 (既定では "ver,jump") @*
グローバル @*
@{Vim が |+scrollbind| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

スクロール同調中ウィンドウ @{訳注: オプション '@option{scrollbind}' がオンのウィンドウ@} の動作を設定するキーワードの、コンマ区切りのリスト。'sbo' は ScrollBindOptions の略である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The following words are available:
	    ver		Bind vertical scrolling for 'scrollbind' windows
	    hor		Bind horizontal scrolling for 'scrollbind' windows
	    jump	Applies to the offset between two windows for vertical
			scrolling.  This offset is the difference in the first
			displayed line of the bound windows.  When moving
			around in a window, another 'scrollbind' window may
			reach a position before the start or after the end of
			the buffer.  The offset is not changed though, when
			moving back the 'scrollbind' window will try to scroll
			to the desired position when possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定可能なキーワードは以下の通りである:
@multitable @columnfractions .15 .85
@item ver @tab 同調中ウィンドウの垂直スクロールを同調させる
@item hor @tab 同調中ウィンドウの水平スクロールを同調させる
@item jump @tab これは垂直スクロールにおいて、2 個のウィンドウ間の offset に適用される。この offset とは同調中ウィンドウに表示されているテキストの先頭行のずれのことである。

ウィンドウ内を動き回るときは、別の同調中ウィンドウの表示区域が、バッファの先頭より前またはバッファの末尾より後ろに達してしまうかもしれない。それでも offset は変更されず、カーソルが戻ってきたときは、同調中ウィンドウは可能ならば求められる位置にスクロールしようとする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			When now making that window the current one, two
			things can be done with the relative offset:
			1. When "jump" is not included, the relative offset is
			   adjusted for the scroll position in the new current
			   window.  When going back to the other window, the
			   new relative offset will be used.
			2. When "jump" is included, the other windows are
			   scrolled to keep the same relative offset.  When
			   going back to the other window, it still uses the
			   same relative offset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントウィンドウを変更したときは、相対 offset を使って 2 つのことが行われる:
@enumerate
@item 値に "jump" が含まれていないとき、新しくカレントウィンドウになったウィンドウのスクロール位置により相対 offset が調節される。別のウィンドウに戻ったときは、新しい相対 offset が使われる。
@item 値に "jump" が含まれているとき、同じ相対オフセットを保つために他のウィンドウもスクロールする。他のウィンドウに戻ったときも、同じ相対 offset を使う。
@end enumerate
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Also see |scroll-binding|.
	When 'diff' mode is active there always is vertical scroll binding,
	even when "ver" isn't there.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@{訳注: "jump" についての訳注: 100 行のファイル "short" と 200 行のファイル "long" をウィンドウ分割で並べ、1 行目を表示させたまま共に '@option{scrollbind}' をオンにする。"long" を開いているウィンドウで 150 行目に移動すると、"short" に 150 行目はないのだから、ウィンドウの同調が崩れる。
具体的には、"short" の方だけ 100 行目を表示したままになる。しかしそのまま "long" の 50 行目に移動すると、何事もなかったかのように "short" のウィンドウも 50 行目を表示する。しかし "long" の 150 行目に移動した時点でカーソルを "short" のウィンドウ (の 100 行目) に移すと、"jump" によって違いが出る。

1. では「"long" では 150 行目、"short" では100行目」という状態が新たな基準となり、"short" のウィンドウで 50 行目に移ると、"long" のウィンドウはとにかく 50 行バック、というわけで 100 行目を表示する。

2. では「1 行目同士を合わせる」という基準は変わらず、やはり 100 行目同士を合わせろ、というわけでウィンドウを移って "short" の 100 行目に着いた瞬間に "long" のウィンドウも 100 行目を表示する。話を簡単にするために始めは共に 1 行目を表示しているとしたが、始めがずれているとそれが基準となることに注意@}
@end quotation
|scroll-binding| も参照。

差分モードでは、たとえ "ver" が含まれていなくても常に垂直スクロール同調をする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'sections'* *'sect'*
'sections' 'sect'	string	(default "SHNHH HUnhsh")
			global
	Specifies the nroff macros that separate sections.  These are pairs of
	two letters (See |object-motions|).  The default makes a section start
	at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'sections'}
@anchor{'sect'}
@cindex 'sections'
@cindex 'sect'
@item 'sections' 'sect'
文字列 (既定では "SHNHH HUnhsh") @*
グローバル

Nroff @{訳注: UNIXで使われる画面整形システム@} で使われる、章を分けるためのマクロを指定する。値は 2 文字の組である (|object-motions| を参照)。

既定では、章は nroff マクロの ".SH", ".NH", ".H", ".HU", ".nh" および ".sh" で始まることになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'secure'* *'nosecure'* *E523*
'secure'		boolean	(default off)
			global
			{not in Vi}
	When on, ":autocmd", shell and write commands are not allowed in
	".vimrc" and ".exrc" in the current directory and map commands are
	displayed.  Switch it off only if you know that you will not run into
	problems, or when the 'exrc' option is off.  On Unix this option is
	only used if the ".vimrc" or ".exrc" is not owned by you.  This can be
	dangerous if the systems allows users to do a "chown".  You better set
	'secure' at the end of your ~/.vimrc then.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'secure'}
@anchor{'nosecure'}
@anchor{E523}
@cindex 'secure'
@cindex 'nosecure'
@cindex E523
@item 'secure'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンのとき、コマンド "@command{:autocmd}" やシェルコマンド、書き込みコマンドがカレントディレクトリ内のファイル "@file{.vimrc}" や "@file{.exrc}" では使用できなくなり、マッピングコマンドも表示されるようになる。問題が起きることはないと分かっているときか、オプション '@option{exrc}' がオフのときにのみこのオプションをオフにすること。

Unix では、このオプションはファイル "@file{.vimrc}" または "@file{.exrc}" の所有者がユーザー自身でないときのみ使われる。これはユーザーが "chown" を使えるシステムでは危険である。そのときにはユーザーのファイル @file{~/.vimrc} の末尾で '@option{secure}' をオンにしておいた方がよい。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'selection'* *'sel'*
'selection' 'sel'	string	(default "inclusive")
			global
			{not in Vi}
	This option defines the behavior of the selection.  It is only used
	in Visual and Select mode.
	Possible values:
	   value	past line     inclusive ~
	   old		   no		yes
	   inclusive	   yes		yes
	   exclusive	   yes		no
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'selection'}
@anchor{'sel'}
@cindex 'selection'
@cindex 'sel'
@item 'selection' 'sel'
文字列 (既定では "inclusive") @*
グローバル @*
@{Vi にはない@}

このオプションは、選択時の動作を設定する。これはビジュアルモードと選択モードでのみ使用される。

設定可能な値は以下の通り:
@multitable @columnfractions .33 .33 .33
@item 値 @tab 行末の後 @tab 末尾に操作
@item old @tab X @tab O
@item inclusive @tab O @tab O
@item exclusive @tab O @tab X
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"past line" means that the cursor is allowed to be positioned one
	character past the line.
	"inclusive" means that the last character of the selection is included
	in an operation.  For example, when "x" is used to delete the
	selection.
	When "old" is used and 'virtualedit' allows the cursor to move past
	the end of line the line break still isn't included.
	Note that when "exclusive" is used and selecting from the end
	backwards, you cannot include the last character of a line, when
	starting in Normal mode and 'virtualedit' empty.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
「行末の後」というのは、カーソルを行末より 1 文字後ろに置けることを表す。「末尾に操作」というのは、選択領域の末尾の文字が操作を受けることを表す。

例えば、選択領域の削除に "x" が使われたときなどに違いが出る。"old" を指定して '@option{virtualedit}' でカーソルが行末を超えられるようにした場合には、改行は依然として含まれない。"@var{exclusive}" に設定していると、'@option{virtualedit}' が空のときノーマルモードから選択を開始し、末尾から後方に選択すると行末の文字を含めることができなくなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The 'selection' option is set by the |:behave| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{selection}' は、コマンド |:behave| によって設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'selectmode'* *'slm'*
'selectmode' 'slm'	string	(default "")
			global
			{not in Vi}
	This is a comma separated list of words, which specifies when to start
	Select mode instead of Visual mode, when a selection is started.
	Possible values:
	   mouse	when using the mouse
	   key		when using shifted special keys
	   cmd		when using "v", "V" or CTRL-V
	See |Select-mode|.
	The 'selectmode' option is set by the |:behave| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'selectmode'}
@anchor{'slm'}
@cindex 'selectmode'
@cindex 'slm'
@item 'selectmode' 'slm'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

値はキーワードのコンマ区切りのリストである。キーワードは領域選択が開始されたときのうち、どの場合でビジュアルモードでなく選択モードを開始するかを決定する。

指定可能なキーワードは以下の通りである:
@multitable @columnfractions .2 .8
@item mouse @tab マウス使用時
@item key @tab シフトキーと特別なキーの同時押しをしたとき
@item cmd @tab コマンド "v", "V" または @kbd{CTRL-V} の使用時
@end multitable
|Select-mode| を参照。

オプション '@option{selectmode}' はコマンド |:behave| で設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'sessionoptions'* *'ssop'*
'sessionoptions' 'ssop'	string	(default: "blank,buffers,curdir,folds,
					       help,options,tabpages,winsize")
			global
			{not in Vi}
			{not available when compiled without the |+mksession|
			feature}
	Changes the effect of the |:mksession| command.  It is a comma
	separated list of words.  Each word enables saving and restoring
	something:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'sessionoptions'}
@anchor{'ssop'}
@cindex 'sessionoptions'
@cindex 'ssop'
@item 'sessionoptions' 'ssop'
文字列 (既定では "blank,buffers,curdir,folds, help,options,tabpages,winsize") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mksession| 機能付きでコンパイルされたときのみ有効@}

コマンド |:mksession| の効果を変更する。値はキーワードのコンマ区切りのリストである。キーワードは、ある項目の保存と復元を有効にする:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   word		save and restore ~
	   blank	empty windows
	   buffers	hidden and unloaded buffers, not just those in windows
	   curdir	the current directory
	   folds	manually created folds, opened/closed folds and local
			fold options
	   globals	global variables that start with an uppercase letter
			and contain at least one lowercase letter.  Only
			String and Number types are stored.
	   help		the help window
	   localoptions	options and mappings local to a window or buffer (not
			global values for local options)
	   options	all options and mappings (also global values for local
			options)
	   resize	size of the Vim window: 'lines' and 'columns'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item キーワード @tab 復元される項目
@item blank @tab 空のウィンドウ
@item buffers @tab ウィンドウに表示されたバッファだけでなく、隠れバッファと、リストに載っているだけで読み込まれていないバッファ
@item curdir @tab カレントディレクトリ
@item folds @tab 手動で作られた折り畳み、折り畳みの開閉の区別、折り畳み関連のローカルなオプション
@item globals @tab 大文字で始まり、最低1個の小文字を含む名前のグローバル変数。文字列型と数値型の変数のみ保存される。
@item help @tab ヘルプウィンドウ
@item localoptions @tab ウィンドウまたはバッファに対してローカルなオプションとマッピング (ローカルなオプションのグローバルな値ではない)
@item options @tab 全てのオプションとマッピング (ローカルなオプションのグローバルな値も)
@item resize @tab Vimのウィンドウのサイズ: '@option{lines}' と '@option{columns}' の値
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   sesdir	the directory in which the session file is located
			will become the current directory (useful with
			projects accessed over a network from different
			systems)
	   slash	backslashes in file names replaced with forward
			slashes
	   tabpages	all tab pages; without this only the current tab page
			is restored, so that you can make a session for each
			tab page separately
	   unix		with Unix end-of-line format (single <NL>), even when
			on Windows or DOS
	   winpos	position of the whole Vim window
	   winsize	window sizes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item sesdir @tab セッションファイルがおかれているディレクトリが、カレントディレクトリになる (ネットワーク越しに、異なったシステムからアクセスを受けるプロジェクトでは便利である)
@item slash @tab ファイル名内の '\' がスラッシュに置換される
@item tabpages @tab 全タブページ。これが含まれていないと、カレントタブページのみが復元される。そのため、タブページごとに別々のセッションを保存することができる。
@item unix @tab Windows や DOS 上でも、Unix 形式の end-of-line (1 個の <NL>) を使う
@item winpos @tab Vim のウィンドウ全体の位置
@item winsize @tab ウィンドウサイズ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Don't include both "curdir" and "sesdir".
	When neither "curdir" nor "sesdir" is included, file names are stored
	with absolute paths.
	"slash" and "unix" are useful on Windows when sharing session files
	with Unix.  The Unix version of Vim cannot source dos format scripts,
	but the Windows version of Vim can source unix format scripts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@var{curdir}" と "@var{sesdir}" の両方を含めないこと。"@var{curdir}" も "@var{sesdir}" も含まれていないときは、ファイル名は絶対パスで保存される。

"@var{slash}" と "@var{unix}" は、Windows 上でセッションファイルを Unix と共有するときに便利である。Unix 版の Vim は dos 形式のスクリプトを読み込めないが、Windows 版の Vim は unix 形式のスクリプトを読み込めるからだ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shell'* *'sh'* *E91*
'shell' 'sh'		string	(default $SHELL or "sh",
					MS-DOS and Win32: "command.com" or
					"cmd.exe", OS/2: "cmd")
			global
	Name of the shell to use for ! and :! commands.  When changing the
	value also check these options: 'shelltype', 'shellpipe', 'shellslash'
	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
	It is allowed to give an argument to the command, e.g.  "csh -f".
	See |option-backslash| about including spaces and backslashes.
	Environment variables are expanded |:set_env|.
	If the name of the shell contains a space, you might need to enclose
	it in quotes.  Example: >
		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shell'}
@anchor{'sh'}
@anchor{E91}
@cindex 'shell'
@cindex 'sh'
@cindex E91
@item 'shell' 'sh'
文字列 (
@multitable @columnfractions .5 .5
@item 既定では @tab $SHELL または "sh",
@item MS-DOS と Win32 では: @tab "command.com" または "cmd.exe",
@item OS/2では: @tab "cmd")
@end multitable
グローバル

"!" や ":!" 等のコマンドで使うシェルの名前。この値を変えたときは、以下のオプションも調べること: 'shelltype', 'shellpipe', 'shellslash', 'shellredir', 'shellquote', 'shellxquote', 'shellcmdflag' コマンドには引数を与えることができる。例えば "csh -f" である。

値に空白や '\' を含める方法については、|option-backslash| を参照。環境変数は展開される |:set_env|。シェルの名前が空白を含むときは、それを引用符で挟む必要があるだろう。

例:
@example
:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Note the backslash before each quote (to avoid starting a comment) and
	each space (to avoid ending the option value).  Also note that the
	"-f" is not inside the quotes, because it is not part of the command
	name.  And Vim automagically recognizes the backslashes that are path
	separators.
	Under MS-Windows, when the executable ends in ".com" it must be
	included.  Thus setting the shell to "command.com" or "4dos.com"
	works, but "command" and "4dos" do not work for all commands (e.g.,
	filtering).
	For unknown reasons, when using "4dos.com" the current directory is
	changed to "C:\".  To avoid this set 'shell' like this: >
		:set shell=command.com\ /c\ 4dos
<	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
引用符にそれぞれ付けられた '\' (コメントの開始を防ぐため) と空白にそれぞれ付けられた '\' (値の終わりと間違えないため) に注意。
@end quotation
@quotation
@strong{Note:} @*
また "-f" は引用符の中に入っていないことにも注意。それはコマンド名の一部ではないからである。またVimはパスの区切りに使われている '\' を自動的に認識する。

MS-Windows では、実行ファイルの名前が ".com" で終わるときは ".com" まで含めなければならない。つまりシェルを "command.com" や "4dos.com" に設定すると正しく機能するが、"command" や "4dos" に設定すると、必ずしも全てのコマンドに対しては動作しなくなる (例えばフィルタコマンド)。

理由は不明だが、"4dos.com" を使ったときはカレントディレクトリが "C:\" に変更される。これを防ぐには 'shell' を次のようにすること。
@example
:set shell=command.com\ /c\ 4dos
@end example
@end quotation
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellcmdflag'* *'shcf'*
'shellcmdflag' 'shcf'	string	(default: "-c";
				 MS-DOS and Win32, when 'shell' does not
				 contain "sh" somewhere: "/c")
			global
			{not in Vi}
	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
	"bash.exe -c ls" or "command.com /c dir".  For the MS-DOS-like
	systems, the default is set according to the value of 'shell', to
	reduce the need to set this option by the user.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellcmdflag'}
@anchor{'shcf'}
@cindex 'shellcmdflag'
@cindex 'shcf'
@item 'shellcmdflag' 'shcf'
文字列 (既定では: "-c", MS-DOS と Win32 で '@option{shell}' に "@var{sh}" が含まれないときは: "/c") @*
グローバル @*
@{Vi にはない@}

"@command{!}" や "@command{:!}" 等のコマンドを実行するためにシェルに渡されるフラグ。例えば、"bash.exe -c ls" や "command.com /c dir" である。MS-DOS 系のシステムでは、ユーザーが必ずこのオプションを設定しなくともよいように、既定値はオプション '@option{shell}' に従って設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	On Unix it can have more than one flag.  Each white space separated
	part is passed as an argument to the shell command.
	See |option-backslash| about including spaces and backslashes.
	Also see |dos-shell| for MS-DOS and MS-Windows.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix では 1 つ以上のフラグを指定できる。空白で区切られた各部は shell コマンドの引数として渡される。値に空白や '\' を含める方法については、|option-backslash| を参照。MS-DOS と MS-Windows については |dos-shell| も参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellpipe'* *'sp'*
'shellpipe' 'sp'	string	(default ">", "| tee", "|& tee" or "2>&1| tee")
			global
			{not in Vi}
			{not available when compiled without the |+quickfix|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellpipe'}
@anchor{'sp'}
@cindex 'shellpipe'
@cindex 'sp'
@item 'shellpipe' 'sp'
文字列 (既定では ">", "| tee", "|& tee" または "2>&1| tee") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+quickfix| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	String to be used to put the output of the ":make" command in the
	error file.  See also |:make_makeprg|.  See |option-backslash| about
	including spaces and backslashes.
	The name of the temporary file can be represented by "%s" if necessary
	(the file name is appended automatically if no %s appears in the value
	of this option).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

コマンド ":make" の出力をエラーファイルに導くために使われる文字列。|:make_makeprg|も参照。値に空白や '\' を含める方法については、|option-backslash| を参照。

必要であれば、一時ファイルの名前は "%s" で参照できる (値に "%s" が 1 個も含まれていなければ、一時ファイル名は自動的に追加される)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	For the Amiga and MS-DOS the default is ">".  The output is directly
	saved in a file and not echoed to the screen.
	For Unix the default it "| tee".  The stdout of the compiler is saved
	in a file and echoed to the screen.  If the 'shell' option is "csh" or
	"tcsh" after initializations, the default becomes "|& tee".  If the
	'shell' option is "sh", "ksh", "mksh", "pdksh", "zsh" or "bash" the
	default becomes "2>&1| tee".  This means that stderr is also included.
	Before using the 'shell' option a path is removed, thus "/bin/sh" uses
	"sh".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

Amiga と MS-DOS での既定値は ">" である。出力はファイルに直接保存され、スクリーンには表示されない。

Unix での既定値は "| tee" である。コンパイラからの標準出力がファイルに保存され、画面にも表示される。初期化の後にオプション '@option{shell}' が "@var{csh}" か "@var{tcsh}" だったときは、既定値は "|& tee" である。

'@option{shell}' が "@var{sh}", "@var{ksh}", "@var{mksh}", "@var{pdksh}", "@var{zsh}" または "@var{bash}" のときは、既定値は "2>&1| tee" である。つまり標準エラー出力も含まれる。'@option{shell}' オプションは、使用される前にパスが削除される (例えば "/bin/sh" なら "sh" が使われる)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The initialization of this option is done after reading the ".vimrc"
	and the other initializations, so that when the 'shell' option is set
	there, the 'shellpipe' option changes automatically, unless it was
	explicitly set before.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの初期化は、ファイル "@file{.vimrc}" の読み込みと他の初期化の後に行われる。これは '@option{shell}' がその間に設定されていたときは、'@option{shellpipe}' を自動的に変更するためである。ただし '@option{shellpipe}' がユーザー自らによって設定されていたときは、自動設定は行われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'shellpipe' is set to an empty string, no redirection of the
	":make" output will be done.  This is useful if you use a 'makeprg'
	that writes to 'makeef' by itself.  If you want no piping, but do
	want to include the 'makeef', set 'shellpipe' to a single space.
	Don't forget to precede the space with a backslash: ":set sp=\ ".
	In the future pipes may be used for filtering and this option will
	become obsolete (at least for Unix).
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

'@option{shellpipe}' が空のときは、"@command{:make}" の出力はリダイレクトされない。この設定は '@option{makeprg}' のプログラムが自分で '@option{makeef}' に書き込んでくれるときに便利である。パイプ処理はしたくないが '@option{makeef}' を含みたいときには、'@option{shellpipe}' を 1 個の空白に設定すること。空白の前には ":set sp=\ " のように '\' を置くことを忘れないこと。

将来はフィルタ処理にはパイプが使われるようになり、このオプションは時代遅れになるだろう (少なくとも Unix では)。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellquote'* *'shq'*
'shellquote' 'shq'	string	(default: ""; MS-DOS and Win32, when 'shell'
					contains "sh" somewhere: "\"")
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellquote'}
@anchor{'shq'}
@cindex 'shellquote'
@cindex 'shq'
@item 'shellquote' 'shq'
文字列 (既定では ""; MS-DOS と Win32 で 'shell' に "sh" が含まれるなら "\"") @*
グローバル

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Quoting character(s), put around the command passed to the shell, for
	the "!" and ":!" commands.  The redirection is kept outside of the
	quoting.  See 'shellxquote' to include the redirection.  It's
	probably not useful to set both options.
	This is an empty string by default.  Only known to be useful for
	third-party shells on MS-DOS-like systems, such as the MKS Korn Shell
	or bash, where it should be "\"".  The default is adjusted according
	the value of 'shell', to reduce the need to set this option by the
	user.  See |dos-shell|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

"!" や ":!" 等のコマンドでコマンドをシェルに渡すときに、コマンドを囲む引用符(の列)。リダイレクトの指示は常に引用符の外側に置かれる。リダイレクトの指示を中に含めるには、オプション '@option{shellxquote}' を参照。両方のオプションを設定するのは、おそらく良い方法ではない。

既定値は空である。MS-DOS 系のシステムの、MKS Korn Shell や bash 等のサードパーティ製のシェルに対してのみ便利である。それらのシェルでは引用符を "\"" とするべきである。ユーザーが必ずこのオプションを設定しなくともよいように、既定値は '@option{shell}' に従って設定される。|dos-shell| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellredir'* *'srr'*
'shellredir' 'srr'	string	(default ">", ">&" or ">%s 2>&1")
			global
			{not in Vi}
	String to be used to put the output of a filter command in a temporary
	file.  See also |:!|.  See |option-backslash| about including spaces
	and backslashes.
	The name of the temporary file can be represented by "%s" if necessary
	(the file name is appended automatically if no %s appears in the value
	of this option).
	The default is ">".  For Unix, if the 'shell' option is "csh", "tcsh"
	or "zsh" during initializations, the default becomes ">&".  If the
	'shell' option is "sh", "ksh" or "bash" the default becomes
	">%s 2>&1".  This means that stderr is also included.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellredir'}
@anchor{'srr'}
@cindex 'shellredir'
@cindex 'srr'
@item 'shellredir' 'srr'
文字列 (既定では ">", ">&" or ">%s 2>&1") @*
グローバル @*
@{Vi にはない@}

フィルタコマンドの出力を一時ファイルに導くために使われる文字列。|:!| も参照。値に空白や '\' を含める方法については、|option-backslash| を参照。必要であれば、一時ファイルの名前は "%s" で参照できる (このオプションの値に "%s" が 1 個も含まれていなければ、一時ファイル名は自動的に追加される)。

既定値は ">" である。Unix では、初期化の後にオプション '@option{shell}' が "@var{csh}", "@var{tcsh}" または "@var{zsh}" だったときは、既定値は "@var{>&}" になる。'@option{shell}' が "@var{sh}", "@var{ksh}" または "@var{bash}" だったときは、既定値は "@var{>%s 2>&1}" になる。つまり標準エラー出力も含まれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	For Win32, the Unix checks are done and additionally "cmd" is checked
	for, which makes the default ">%s 2>&1".  Also, the same names with
	".exe" appended are checked for.
	The initialization of this option is done after reading the ".vimrc"
	and the other initializations, so that when the 'shell' option is set
	there, the 'shellredir' option changes automatically unless it was
	explicitly set before.
	In the future pipes may be used for filtering and this option will
	become obsolete (at least for Unix).
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 では、Unix と同様のチェックがなされ、加えて値が "@var{cmd}" であるかどうか調べられる。そのときは既定値は "@var{>%s 2>&1}" になる。また ".exe" 付きのシェル名も探す。

このオプションの初期化は、ファイル "@file{.vimrc}" の読み込みと他の初期化の後に行われる。これは '@option{shell}' がその間に設定されていたときは、'@option{shellredir}' を自動的に変更するためである。ただし '@option{shellredir}' がユーザー自らによって設定されていたときは、自動設定は行われない。将来はフィルタ処理にはパイプが使われるようになり、このオプションは時代遅れになるだろう (少なくとも Unix では)。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
'shellslash' 'ssl'	boolean	(default off)
			global
			{not in Vi} {only for MSDOS, MS-Windows and OS/2}
	When set, a forward slash is used when expanding file names.  This is
	useful when a Unix-like shell is used instead of command.com or
	cmd.exe.  Backward slashes can still be typed, but they are changed to
	forward slashes by Vim.
	Note that setting or resetting this option has no effect for some
	existing file names, thus this option needs to be set before opening
	any file for best results.  This might change in the future.
	'shellslash' only works when a backslash can be used as a path
	separator.  To test if this is so use: >
		if exists('+shellslash')
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellslash'}
@anchor{'ssl'}
@anchor{'noshellslash'}
@anchor{'nossl'}
@cindex 'shellslash'
@cindex 'ssl'
@cindex 'noshellslash'
@cindex 'nossl'
@item 'shellslash' 'ssl'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の MSDOS, MS-Windows, OS/2 版でのみ有効@}

オンのときは、ファイル名の展開にスラッシュが使われる。これは command.com や cmd.exe の代わりに Unix 系のシェルを使うときに便利である。'\' も入力できるが、Vim によってスラッシュに変換される。
@quotation
@strong{Note:} @*
このオプションをオンにしたりオフにしても、すでに Vim 内に読み込まれたファイル名には影響がないので、完全を期すためにはこのオプションはどのファイルを開くのよりも先に設定する必要があることに注意。この点は将来変更になるかもしれない。
@end quotation
'@option{shellslash}' はパスの区切りとして '\' が使われるときだけ働く。これをテストするには次のようにする:
@verbatim
if exists('+shellslash')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
'shelltemp' 'stmp'	boolean	(Vi default off, Vim default on)
			global
			{not in Vi}
	When on, use temp files for shell commands.  When off use a pipe.
	When using a pipe is not possible temp files are used anyway.
	Currently a pipe is only supported on Unix and MS-Windows 2K and
	later.  You can check it with: >
		:if has("filterpipe")
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shelltemp'}
@anchor{'stmp'}
@anchor{'noshelltemp'}
@anchor{'nostmp'}
@cindex 'shelltemp'
@cindex 'stmp'
@cindex 'noshelltemp'
@cindex 'nostmp'
@item 'shelltemp' 'stmp'
切替 (Vi の既定はオフ, Vim の既定はオン) @*
グローバル @*
@{Vi にはない@}

オンのときは、シェルコマンドに一時ファイルを使う。オフのときはパイプを使う。オフであってもパイプが使えない場合は一時ファイルを使う。

現在のところパイプは Unix と MS-Windows 2K 以降でのみサポートされている。これを確認するには次のようにする:
@verbatim
:if has("filterpipe")
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	The advantage of using a pipe is that nobody can read the temp file
	and the 'shell' command does not need to support redirection.
	The advantage of using a temp file is that the file type and encoding
	can be detected.
	The |FilterReadPre|, |FilterReadPost| and |FilterWritePre|,
	|FilterWritePost| autocommands event are not triggered when
	'shelltemp' is off.
	The `system()` function does not respect this option and always uses
	temp files.
	NOTE: This option is set to the Vim default value when 'compatible'
	is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パイプを使うことの利点は、一時ファイルを他人に読み取られないことと、'shell' のプログラムがリダイレクトをサポートしていなくてもよいことである。

一時ファイルを使うことの利点は、ファイルタイプとエンコーディングを判別できることである。

'@option{shelltemp}' がオフのときは自動コマンドイベント |FilterReadPre|, |FilterReadPost|, |FilterWritePre|, |FilterWritePost| が発生しない。`system()` 関数はこのオプションを参照せず常に一時ファイルを利用する。
@quotation
@strong{Note:} @*
このオプションは 'compatible' がオフになるとVimの既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shelltype'* *'st'*
'shelltype' 'st'	number	(default 0)
			global
			{not in Vi} {only for the Amiga}
	On the Amiga this option influences the way how the commands work
	which use a shell.
	0 and 1: always use the shell
	2 and 3: use the shell only to filter lines
	4 and 5: use shell only for ':sh' command
	When not using the shell, the command is executed directly.

	0 and 2: use "shell 'shellcmdflag' cmd" to start external commands
	1 and 3: use "shell cmd" to start external commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shelltype'}
@anchor{'st'}
@cindex 'shelltype'
@cindex 'st'
@item 'shelltype' 'st'
数値 (既定では 0) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の Amiga 版のみ@}

Amiga では、このオプションはシェルを使うコマンドの実行方法に影響する。
@multitable @columnfractions .3 .7
@item 0 または 1: @tab 常にシェルを使う
@item 2 または 3: @tab 行のフィルタ処理にのみシェルを使う
@item 4 または 5: @tab コマンド ':sh' にのみシェルを使う
@end multitable
シェルを使わないときは、コマンドは直接実行される。
@multitable @columnfractions .3 .7
@item 0 または 2: @tab "シェル名 '@option{shellcmdflag}' コマンド" で外部コマンドを実行
@item 1 または 3: @tab "シェル名 コマンド" で外部コマンドを実行
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellxescape'* *'sxe'*
'shellxescape' 'sxe'	string	(default: "";
				 for MS-DOS and MS-Windows: "\"&|<>()@^")
			global
			{not in Vi}
	When 'shellxquote' is set to "(" then the characters listed in this
	option will be escaped with a '^' character.  This makes it possible
	to execute most external commands with cmd.exe.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellxescape'}
@anchor{'sxe'}
@cindex 'shellxescape'
@cindex 'sxe'
@item 'shellxescape' 'sxe'
文字列 (
@multitable @columnfractions .7 .3
@item 既定では: @tab ""
@item MS-DOS と MS-Windows: @tab "\"&|<>()@@^")
@end multitable
グローバル @*
@{Vi にはない@}

'@option{shellxquote}' が "(" に設定されているとき、このオプションで指定された文字は '^' 文字でエスケープされる。これによって cmd.exe を使ってほとんどの外部コマンドを実行できるようにする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shellxquote'* *'sxq'*
'shellxquote' 'sxq'	string	(default: "";
					for Win32, when 'shell' is cmd.exe: "("
					for Win32, when 'shell' contains "sh"
					somewhere: "\""
					for Unix, when using system(): "\"")
			global
			{not in Vi}
	Quoting character(s), put around the command passed to the shell, for
	the "!" and ":!" commands.  Includes the redirection.  See
	'shellquote' to exclude the redirection.  It's probably not useful
	to set both options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shellxquote'}
@anchor{'sxq'}
@cindex 'shellxquote'
@cindex 'sxq'
@item 'shellxquote' 'sxq'
文字列 (
@multitable @columnfractions .8 .2
@item 既定では @tab "";
@item Win32 で 'shell' が cmd.exe なら: @tab "("
@item Win32で 'shell' に "sh" が含まるなら: @tab "\""
@item Unixで system() を使っているなら: @tab "\"")
@end multitable
グローバル @*
@{Vi にはない@}

"!" や ":!" 等のコマンドでコマンドをシェルに渡すときに、コマンドを囲む引用符 (の列)。リダイレクトの指示もこの中に含む。リダイレクトの指示を含めないようにするには、オプション '@option{shellquote}' を参照。両方のオプションを設定するのは、おそらく良い方法ではない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the value is '(' then ')' is appended. When the value is '"('
	then ')"' is appended.
	When the value is '(' then also see 'shellxescape'.
	This is an empty string by default on most systems, but is known to be
	useful for on Win32 version, either for cmd.exe which automatically
	strips off the first and last quote on a command, or 3rd-party shells
	such as the MKS Korn Shell or bash, where it should be "\"".  The
	default is adjusted according the value of 'shell', to reduce the need
	to set this option by the user.  See |dos-shell|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値が '@var{(}' なら末尾に ')' が追加される。値が '@var{"(}' なら ')"' が追加される。

値が '@var{(}' のときの動作に付いては '@option{shellxescape}' も参照。

ほとんどのシステムでは初期設定は空になる。このオプションは Win32 版で cmd.exe やサードパーティ製のシェルを使う場合に便利である。cmd.exe は自動的にコマンドの最初と最後のクォート文字を取り除く。

MKS Korn Shell や bash などのサードパーティ製のシェルを使う場合は設定値は "\"" とすべきである。ユーザーがこのオプションを設定する必要がないように、初期設定は '@option{shell}' に適した値が設定される。|dos-shell| を参照。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'shiftround'* *'sr'* *'noshiftround'* *'nosr'*
'shiftround' 'sr'	boolean	(default off)
			global
			{not in Vi}
	Round indent to multiple of 'shiftwidth'.  Applies to > and <
	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
	a multiple of 'shiftwidth' (this is Vi compatible).
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shiftround'}
@anchor{'sr'}
@anchor{'noshiftround'}
@anchor{'nosr'}
@cindex 'shiftround'
@cindex 'sr'
@cindex 'noshiftround'
@cindex 'nosr'
@item 'shiftround' 'sr'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

インデントをオプション '@option{shiftwidth}' の値の倍数に丸める。コマンド ">" と "<" に適用される。挿入モードでの @kbd{CTRL-T} と @kbd{CTRL-D} では、インデントは常に '@option{shiftwidth}' の倍数に丸められる (これは Vi 互換の動作である)。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shiftwidth'* *'sw'*
'shiftwidth' 'sw'	number	(default 8)
			local to buffer
	Number of spaces to use for each step of (auto)indent.  Used for
	|'cindent'|, |>>|, |<<|, etc.
	When zero the 'ts' value will be used.  Use the |shiftwidth()|
	function to get the effective shiftwidth value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shiftwidth'}
@anchor{'sw'}
@cindex 'shiftwidth'
@cindex 'sw'
@item 'shiftwidth' 'sw'
数値 (既定では 8) @*
バッファについてローカル

(自動) インデントの各段階に使われる空白の数。オプション '@option{cindent}', コマンド |>>|, |<<| 等に使われる。

0 の場合は、'ts' の値が使われる。実際に使われる値を取得するには |shiftwidth()| 関数を使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'shortmess'* *'shm'*
'shortmess' 'shm'	string	(Vim default "filnxtToO", Vi default: "",
							POSIX default: "A")
			global
			{not in Vi}
	This option helps to avoid all the |hit-enter| prompts caused by file
	messages, for example  with CTRL-G, and to avoid some other messages.
	It is a list of flags:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shortmess'}
@anchor{'shm'}
@cindex 'shortmess'
@cindex 'shm'
@item 'shortmess' 'shm'
文字列 (Vim の既定値: "filnxtToO", Vi の既定値: "",	POSIX の既定値: "A") @*
グローバル @*
@{Vi にはない@}

このオプションは、コマンド @kbd{CTRL-G} 等によるファイル関連のメッセージで、「継続」プロンプト |hit-enter| を避けるのに役立つ。またその他のメッセージを避けるのにも役立つ。

値は以下のフラグのリストである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	 flag	meaning when present	~
	  f	use "(3 of 5)" instead of "(file 3 of 5)"
	  i	use "[noeol]" instead of "[Incomplete last line]"
	  l	use "999L, 888C" instead of "999 lines, 888 characters"
	  m	use "[+]" instead of "[Modified]"
	  n	use "[New]" instead of "[New File]"
	  r	use "[RO]" instead of "[readonly]"
	  w	use "[w]" instead of "written" for file write message
		and "[a]" instead of "appended" for ':w >> file' command
	  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
		"[unix format]" and "[mac]" instead of "[mac format]".
	  a	all of the above abbreviations
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item フラグ @tab 効果
@item f @tab "(file 3 of 5)" の代わりに "(3 of 5)" を表示。
@item i @tab "[最終行が不完全]" の代わりに "[noeol]" を表示。
@item l @tab "999 行, 888 文字" の代わりに "999L, 888C" を表示。
@item m @tab "[変更あり]" の代わりに "[+]" を表示。
@item n @tab "[新ファイル]" の代わりに "[新]" を表示。
@item r @tab "[読込専用]" の代わりに "[読専]" を表示。
@item w @tab 書き込みコマンドには "書込み" の代わりに "[w]" を、コマンド ':w >> file' には "追加" の代わりに "[a]" を表示。
@item x @tab "[dosフォーマット]" の代わりに "[dos]", "[unixフォーマット]" の代わりに "[unix]", "[macフォーマット]" の代わりに "[mac]" を表示。
@item a @tab 上記の省略を全て行う。
@item @tab
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	  o	overwrite message for writing a file with subsequent message
		for reading a file (useful for ":wn" or when 'autowrite' on)
	  O	message for reading a file overwrites any previous message.
		Also for quickfix message (e.g., ":cn").
	  s	don't give "search hit BOTTOM, continuing at TOP" or "search
		hit TOP, continuing at BOTTOM" messages
	  t	truncate file message at the start if it is too long to fit
		on the command-line, "<" will appear in the left most column.
		Ignored in Ex mode.
	  T	truncate other messages in the middle if they are too long to
		fit on the command line.  "..." will appear in the middle.
		Ignored in Ex mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item o	@tab ファイルの書き込み時のメッセージを、その後のファイルの読み込み時のメッセージで上書きする (":wn" を使うときやオプション '@option{autowrite}' がオンのときに便利である)
@item O	@tab ファイルの読み込み時のメッセージや QuickFix 関係のメッセージ (例えば ":cn") がその前のメッセージを必ず上書きする。
@item s	@tab "下まで検索したので上に戻ります" と "上まで検索したので下に戻ります" というメッセージを表示しない。
@item t	@tab ファイル間連のメッセージが長すぎてコマンドラインに収まらないときは、先頭を切り詰める。先頭には "<" が表示される。Ex モードでは無視される。
@item T	@tab その他のメッセージが長すぎてコマンドラインに収まらないときは、中央を切り詰める。中央には "..." が表示される。Ex モードでは無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  W	don't give "written" or "[w]" when writing a file
	  A	don't give the "ATTENTION" message when an existing swap file
		is found.
	  I	don't give the intro message when starting Vim |:intro|.
	  c	don't give |ins-completion-menu| messages.  For example,
		"-- XXX completion (YYY)", "match 1 of 2", "The only match",
		"Pattern not found", "Back at original", etc.
	  q	use "recording" instead of "recording @a"
	  F	don't give the file info when editing a file, like `:silent`
		was used for the command
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item W	@tab ファイルの書き込み時に "書込み" や "[w]" を表示しない。
@item A	@tab スワップファイルがすでにあることが発見されたときに "注意" メッセージを表示しない。
@item I	@tab Vim の開始時に挨拶メッセージを表示しない |:intro|。
@item c	@tab |ins-completion-menu| 関連のメッセージを表示しない。例えば、"-- XXX補完 (YYY)"、"1 番目の該当 (全該当 2 個中)"、"唯一の該当"、"パターンは見つかりませんでした"、"始めに戻る"、など。
@item q	@tab "記録中 @@a" の代わりに "記録中" を表示。
@item F	@tab コマンドに対する |:silent| のように、ファイルを編集中にファイル情報を表示しない。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This gives you the opportunity to avoid that a change between buffers
	requires you to hit <Enter>, but still gives as useful a message as
	possible for the space available.  To get the whole message that you
	would have got with 'shm' empty, use ":file!"
	Useful values:
	    shm=	No abbreviation of message.
	    shm=a	Abbreviation, but no loss of information.
	    shm=at	Abbreviation, and truncate message when necessary.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションはバッファを変更するとき @key{<Enter>} を打ち込むのを避ける機会を提供する。が、表示の余裕がある限り有益なメッセージを表示する。

'@option{shm}' が空のときと同じようにメッセージ全体を表示するには、コマンド "@command{:file!}" を使うこと。
便利な値の例:
@multitable @columnfractions .2 .8
@item shm= @tab メッセージの省略なし
@item shm=a @tab メッセージを省略するが内容までは省略しない
@item shm=at @tab メッセージを省略し、必要があれば内容も切りつめる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'shortname'* *'sn'* *'noshortname'* *'nosn'*
'shortname' 'sn'	boolean	(default off)
			local to buffer
			{not in Vi, not in MS-DOS versions}
	Filenames are assumed to be 8 characters plus one extension of 3
	characters.  Multiple dots in file names are not allowed.  When this
	option is on, dots in file names are replaced with underscores when
	adding an extension (".~" or ".swp").  This option is not available
	for MS-DOS, because then it would always be on.  This option is useful
	when editing files on an MS-DOS compatible filesystem, e.g., messydos
	or crossdos.  When running the Win32 GUI version under Win32s, this
	option is always on by default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'shortname'}
@anchor{'sn'}
@anchor{'noshortname'}
@anchor{'nosn'}
@cindex 'shortname'
@cindex 'sn'
@cindex 'noshortname'
@cindex 'nosn'
@item 'shortname' 'sn'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi と MS-DOS 版の Vim にはない@}

ファイル名が 8 文字に 3 文字の拡張子を付けたものであると仮定する。ファイル名には複数のドット '.' は使えない。オンならば、拡張子 (".~" または ".swp") を付けるときにはファイル名の中のドットは下線 '_' に置き換えられる。

このオプションは MS-DOS 版では無効である。なぜなら当然常にオンであるからだ。このオプションは、ファイルを MS-DOS 互換のシステム (例えば messydos や crossdos) 上で編集するときに便利である。Win32s 上で Win32 の GUI版を使っているときは、このオプションは常に既定ではオンである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'showbreak'* *'sbr'* *E595*
'showbreak' 'sbr'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+linebreak|
			feature}
	String to put at the start of lines that have been wrapped.  Useful
	values are "> " or "+++ ": >
		:set showbreak=>\ 
<	Note the backslash to escape the trailing space.  It's easier like
	this: >
		:let &showbreak = '+++ '
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showbreak'}
@anchor{'sbr'}
@anchor{E595}
@cindex 'showbreak'
@cindex 'sbr'
@cindex E595
@item 'showbreak' 'sbr'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+linebreak| 機能付きでコンパイルされたときのみ有効@}

折り返された行の先頭に表示する文字列。"> " や "+++ " に設定すると便利である:
@example
:set showbreak=>\ 
@end example
@quotation
@strong{Note:} @*
スペースの前にバックスラッシュをつけてエスケープしていることに注意。次のようにするともっと簡単である:
@example
:let &showbreak = '+++ '
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Only printable single-cell characters are allowed, excluding <Tab> and
	comma (in a future version the comma might be used to separate the
	part that is shown at the end and at the start of a line).
	The characters are highlighted according to the '@' flag in
	'highlight'.
	Note that tabs after the showbreak will be displayed differently.
	If you want the 'showbreak' to appear in between line numbers, add the
	"n" flag to 'cpoptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<Tab>} 文字とコンマ以外の、printable な文字 @{訳注: 文書先頭を参照@} のみが指定できる (将来のバージョンでは、行末に表示される部分と行頭に表示される部分の区切りにコンマが使われるかもしれない)。

この文字列は、オプション '@option{highlight}' のフラグ '@var{@@}' に従って強調表示される。
@quotation
@strong{Note:} @*
'@option{showbreak}' の文字列の次にタブ文字が来たときは、表示方法が異なるので注意。'@option{showbreak}' の文字列を行番号の間に表示したいときは、'@option{cpoptions}' にフラグ "n" を加えること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				     *'showcmd'* *'sc'* *'noshowcmd'* *'nosc'*
'showcmd' 'sc'		boolean	(Vim default: on, off for Unix,
				       Vi default: off, set in |defaults.vim|)
			global
			{not in Vi}
			{not available when compiled without the
			|+cmdline_info| feature}
	Show (partial) command in the last line of the screen.  Set this
	option off if your terminal is slow.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showcmd'}
@anchor{'sc'}
@anchor{'noshowcmd'}
@anchor{'nosc'}
@cindex 'showcmd'
@cindex 'sc'
@cindex 'noshowcmd'
@cindex 'nosc'
@item 'showcmd' 'sc'
切替 (Vim の既定値: オン、Unix での既定値: オフ、Vi の既定値: オフ、|defaults.vim| 内でオンに設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+cmdline_info| 機能付きでコンパイルされたときのみ有効@}

コマンド (の一部) を画面の最下行に表示する。ユーザーのターミナルの表示が遅いときにはオフにすること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	In Visual mode the size of the selected area is shown:
	- When selecting characters within a line, the number of characters.
	  If the number of bytes is different it is also displayed: "2-6"
	  means two characters and six bytes.
	- When selecting more than one line, the number of lines.
	- When selecting a block, the size in screen characters:
	  {lines}x{columns}.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードでは、選択領域のサイズが以下のように表示される:
@itemize @minus
@item 1 行の中で選択しているときは、文字数を表示。文字数とバイト数が違う場合はそれも表示される: 例えば "2-6" なら 2 文字で 6 バイトという意味になる。
@item 2 行以上にわたって選択しているときは、行数を表示。
@item 矩形選択のときは、画面上の文字数、つまり行数×列数を表示。
@end itemize
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			*'showfulltag'* *'sft'* *'noshowfulltag'* *'nosft'*
'showfulltag' 'sft'	boolean (default off)
			global
			{not in Vi}
	When completing a word in insert mode (see |ins-completion|) from the
	tags file, show both the tag name and a tidied-up form of the search
	pattern (if there is one) as possible matches.  Thus, if you have
	matched a C function, you can see a template for what arguments are
	required (coding style permitting).
	Note that this doesn't work well together with having "longest" in
	'completeopt', because the completion from the search pattern may not
	match the typed text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showfulltag'}
@anchor{'sft'}
@anchor{'noshowfulltag'}
@anchor{'nosft'}
@cindex 'showfulltag'
@cindex 'sft'
@cindex 'noshowfulltag'
@cindex 'nosft'
@item 'showfulltag' 'sft'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

挿入モードでタグファイルから単語補完をするとき (|ins-completion| を参照)、タグ名と整理された検索パターン (あれば) の両方をマッチする限り表示する。そのため、C 言語の関数にマッチすれば、どのような引数を必要とするかのテンプレートを見ることができる (コーディングスタイルが適当なものであれば)。
@quotation
@strong{Note:} @*
'@option{completeopt}' に "@var{longest}" を含めている場合はこれを同時に使うことはできない。検索パターンからの補完がタイプされたテキストにマッチしないことがあるからである。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'showmatch'* *'sm'* *'noshowmatch'* *'nosm'*
'showmatch' 'sm'	boolean	(default off)
			global
	When a bracket is inserted, briefly jump to the matching one.  The
	jump is only done if the match can be seen on the screen.  The time to
	show the match can be set with 'matchtime'.
	A Beep is given if there is no match (no matter if the match can be
	seen or not).
	This option is reset when 'paste' is set and restored when 'paste' is
	reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showmatch'}
@anchor{'sm'}
@anchor{'noshowmatch'}
@anchor{'nosm'}
@cindex 'showmatch'
@cindex 'sm'
@cindex 'noshowmatch'
@cindex 'nosm'
@item 'showmatch' 'sm'
切替 (既定ではオフ) @*
グローバル

閉じ括弧が入力されたとき、対応する開き括弧にわずかの間ジャンプする。マッチした括弧が画面上に見えているときのみジャンプする。マッチを表示する時間はオプション '@option{matchtime}' で設定できる。

マッチする閉じ括弧がないときは、ビープ音が鳴る (マッチが見えても見えなくても)。

このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、'@option{paste}' オプションがリセットされた際には復元される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'm' flag is not included in 'cpoptions', typing a character
	will immediately move the cursor back to where it belongs.
	See the "sm" field in 'guicursor' for setting the cursor shape and
	blinking when showing the match.
	The 'matchpairs' option can be used to specify the characters to show
	matches for.  'rightleft' and 'revins' are used to look for opposite
	matches.
	Also see the matchparen plugin for highlighting the match when moving
	around |pi_paren.txt|.
	Note: Use of the short form is rated PG.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{cpoptions}' にフラグ '@var{m}' が含まれていないときは、ジャンプ中に文字を入力するとカーソルがすぐに元の場所に戻る。マッチの表示時のカーソルの形状や点滅方法については、'@option{guicursor}' の "@var{sm}" の項目を参照。

オプション '@option{matchpairs}' によって対応する文字を指定することができる。対応する括弧を探すときは '@option{rightleft}' と '@option{revins}' が適用される。カーソル下の括弧に対応する括弧を強調させる方法については matchparen プラグインを参照 |pi_paren.txt|。
@quotation
@strong{Note:} @*
このオプションの省略形式の名前の使用には、保護者への説明が望まれるので注意 (笑)
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'showmode'* *'smd'* *'noshowmode'* *'nosmd'*
'showmode' 'smd'	boolean	(Vim default: on, Vi default: off)
			global
	If in Insert, Replace or Visual mode put a message on the last line.
	Use the 'M' flag in 'highlight' to set the type of highlighting for
	this message.
	When |XIM| may be used the message will include "XIM".  But this
	doesn't mean XIM is really active, especially when 'imactivatekey' is
	not set.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showmode'}
@anchor{'smd'}
@anchor{'noshowmode'}
@anchor{'nosmd'}
@cindex 'showmode'
@cindex 'smd'
@cindex 'noshowmode'
@cindex 'nosmd'
@item 'showmode' 'smd'
切替 (Vim の既定値: オン、Vi の既定値: オフ) @*
グローバル @*

挿入モード、置換モードまたはビジュアルモードで最終行にメッセージを表示する。このメッセージの強調表示の設定には、オプション '@option{highlight}' のフラグ '@var{M}' を使うこと。

|XIM| が使用可能なときは、メッセージに "XIM" が含まれる。しかしこれは実際に XIM が起動しているということではない。特に '@option{imactivatekey}' が設定されていないときは注意。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'showtabline'* *'stal'*
'showtabline' 'stal'	number	(default 1)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
	The value of this option specifies when the line with tab page labels
	will be displayed:
		0: never
		1: only if there are at least two tab pages
		2: always
	This is both for the GUI and non-GUI implementation of the tab pages
	line.
	See |tab-page| for more information about tab pages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'showtabline'}
@anchor{'stal'}
@cindex 'showtabline'
@cindex 'stal'
@item 'showtabline' 'stal'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@}

@{Vim が |+windows| 機能付きでコンパイルされたときのみ利用可能@}

このオプションは、いつタブページのラベルを表示するかを指定する。
@multitable @columnfractions .1 .9
@item 0: @tab 表示しない
@item 1: @tab 2 個以上のタブページがあるときのみ表示
@item 2: @tab 常に表示
@end multitable
これは GUI 版と非 GUI 版両方に適用される。タブページについて詳しくは |tab-page| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'sidescroll'* *'ss'*
'sidescroll' 'ss'	number	(default 0)
			global
			{not in Vi}
	The minimal number of columns to scroll horizontally.  Used only when
	the 'wrap' option is off and the cursor is moved off of the screen.
	When it is zero the cursor will be put in the middle of the screen.
	When using a slow terminal set it to a large number or 0.  When using
	a fast terminal use a small number or 1.  Not used for "zh" and "zl"
	commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'sidescroll'}
@anchor{'ss'}
@cindex 'sidescroll'
@cindex 'ss'
@item 'sidescroll' 'ss'
数値 (既定では 0) @*
グローバル @*
@{Vi にはない@}

水平スクロールの刻み幅。オプション '@option{wrap}' がオフでカーソルが画面外に出るときのみ使われる。値が 0 のときはカーソルを画面の中央に置くようにスクロールする。

遅いターミナルを使っているときは、大きい値または 0 に設定すること。速いターミナルを使っているときは小さい値または 1 に設定すること。コマンド "zh" と "zl" には使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'sidescrolloff'* *'siso'*
'sidescrolloff' 'siso'	number (default 0)
			global
			{not in Vi}
	The minimal number of screen columns to keep to the left and to the
	right of the cursor if 'nowrap' is set.  Setting this option to a
	value greater than 0 while having |'sidescroll'| also at a non-zero
	value makes some context visible in the line you are scrolling in
	horizontally (except at beginning of the line).  Setting this option
	to a large value (like 999) has the effect of keeping the cursor
	horizontally centered in the window, as long as one does not come too
	close to the beginning of the line.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'sidescrolloff'}
@anchor{'siso'}
@cindex 'sidescrolloff'
@cindex 'siso'
@item 'sidescrolloff' 'siso'
数値 (既定では 0) @*
グローバル @*
@{Vi にはない@}

オプション '@option{wrap}' がオフのとき、カーソルの右または左には、最低でもこの数だけの列が表示される。'@option{sidescroll}' を 1 以上に設定しているときにこのオプションも 1 以上にすると、水平スクロールをしている周辺のテキストが見えるようになる (行頭の近くにいるとき以外)。とても大きい値 (999 等) にすると、カーソルの置かれた列は常にウィンドウの中央に表示される (行頭の近くにいるとき以外)。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: Try this together with 'sidescroll' and 'listchars' as
		 in the following example to never allow the cursor to move
		 onto the "extends" character: >

		 :set nowrap sidescroll=1 listchars=extends:>,precedes:<
		 :set sidescrolloff=1
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例: 次の例のように、このオプションを '@option{sidescroll}' と '@option{listchars}' と一緒に設定し、カーソルを "extends" の文字の上に決して来ないようにしてみる。
@example
:set nowrap sidescroll=1 listchars=extends:>,precedes:<
:set sidescrolloff=1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'signcolumn'* *'scl'*
'signcolumn' 'scl'	string	(default "auto")
			local to window
			{not in Vi}
			{not available when compiled without the |+signs|
			feature}
	Whether or not to draw the signcolumn. Valid values are:
	   "auto"   	only when there is a sign to display
	   "no"	    	never
	   "yes"    	always
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'signcolumn'}
@anchor{'scl'}
@cindex 'signcolumn'
@cindex 'scl'
@item 'signcolumn' 'scl'
文字列 (既定では "auto") @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+signs| 機能付きでコンパイルされたときのみ有効@}

目印行を表示するかどうかを指定する。有効な値は以下のとおり:
@multitable @columnfractions .2 .8
@item "auto" @tab 表示すべき目印があるときのみ
@item "no" @tab 常に表示しない
@item "yes" @tab 常に表示する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
			*'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
'smartcase' 'scs'	boolean	(default off)
			global
			{not in Vi}
	Override the 'ignorecase' option if the search pattern contains upper
	case characters.  Only used when the search pattern is typed and
	'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
	":g" and ":s".  Not used for "*", "#", "gd", tag search, etc.  After
	"*" and "#" you can make 'smartcase' used by doing a "/" command,
	recalling the search pattern from history and hitting <Enter>.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'smartcase'}
@anchor{'scs'}
@anchor{'nosmartcase'}
@anchor{'noscs'}
@cindex 'smartcase'
@cindex 'scs'
@cindex 'nosmartcase'
@cindex 'noscs'
@item 'smartcase' 'scs'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*

検索パターンが大文字を含んでいたらオプション '@option{ignorecase}' を上書きする。検索パターンがキーボードから打ち込まれたときに '@option{ignorecase}' がオンの場合にのみ使われる。

適用されるコマンドは "/", "?", "n", "N", ":g", ":s" である。"*", "#", "gd" やタグ検索などには適用されない。"*" や "#" の後で "/" を使い、検索パターンの履歴を呼び出して @key{<Enter>} を打ち込むことで、'@option{smartcase}' の効果を適用することができる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			     *'smartindent'* *'si'* *'nosmartindent'* *'nosi'*
'smartindent' 'si'	boolean	(default off)
			local to buffer
			{not in Vi}
			{not available when compiled without the
			|+smartindent| feature}
	Do smart autoindenting when starting a new line.  Works for C-like
	programs, but can also be used for other languages.  'cindent' does
	something like this, works better in most cases, but is more strict,
	see |C-indenting|.  When 'cindent' is on or 'indentexpr' is set,
	setting 'si' has no effect.  'indentexpr' is a more advanced
	alternative.
	Normally 'autoindent' should also be on when using 'smartindent'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'smartindent'}
@anchor{'si'}
@anchor{'nosmartindent'}
@anchor{'nosi'}
@cindex 'smartindent'
@cindex 'si'
@cindex 'nosmartindent'
@cindex 'nosi'
@item 'smartindent' 'si'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+smartindent| 機能付きでコンパイルされたときのみ有効@}

新しい行を作ったときに高度な自動インデント smart autoindenting を行う。C 言語系のプログラミング言語で有効だが、他のプログラミング言語にも使える。オプション '@option{cindent}' でも似たことができ、より多くの場面で適切に動作するが、'@option{cindent}' の方がこちらより厳密である。 |C-indenting| を参照。

'@option{cindent}' がオンか '@option{indentexpr}' が設定されているときは '@option{si}' をオンにしても効果はない。'@option{indentexpr}' を使うとさらに高度な動作が実現できる。

'@option{smartindent}' を使うときは、'@option{autoindent}' もオンに設定するべきである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	An indent is automatically inserted:
	- After a line ending in '{'.
	- After a line starting with a keyword from 'cinwords'.
	- Before a line starting with '}' (only with the "O" command).
	When typing '}' as the first character in a new line, that line is
	given the same indent as the matching '{'.
	When typing '#' as the first character in a new line, the indent for
	that line is removed, the '#' is put in the first column.  The indent
	is restored for the next line.  If you don't want this, use this
	mapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.
	When using the ">>" command, lines starting with '#' are not shifted
	right.
	NOTE: This option is reset when 'compatible' is set.
	This option is reset when 'paste' is set and restored when 'paste' is
	reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
インデントは、以下のときに自動的に挿入される:
@itemize @minus
@item '@{' で終わる行で新しい行を作ったとき。
@item '@option{cinwords}' 内のキーワードで始まる行の次に新しい行を作ったとき。
@item '@}' で始まる行の上に新しい行を作ったとき (コマンド "O" のみ)。
@end itemize
新しい行の先頭に '@}' を入力すると、そこのインデントは対応する '@{' と等しくなる。新しく作った行の最初の文字が '#' のとき、その行のインデントは取り除かれ、'#' は最前列に置かれる。次の行のインデントは '#' の行の前と同じになる。こうしてほしくないなら、次のマッピングを使うこと。
@example
":inoremap # X^H#"
@end example
ここで ^H は @kbd{CTRL-V} @kbd{CTRL-H} と打ち込むと入力される。コマンド ">>" を使ったとき、'#' で始まる行は右に移動しない。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、@option{'paste}' オプションがリセットされた際には復元される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				 *'smarttab'* *'sta'* *'nosmarttab'* *'nosta'*
'smarttab' 'sta'	boolean	(default off)
			global
			{not in Vi}
	When on, a <Tab> in front of a line inserts blanks according to
	'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.  A
	<BS> will delete a 'shiftwidth' worth of space at the start of the
	line.
	When off, a <Tab> always inserts blanks according to 'tabstop' or
	'softtabstop'.  'shiftwidth' is only used for shifting text left or
	right |shift-left-right|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'smarttab'}
@anchor{'sta'}
@anchor{'nosmarttab'}
@anchor{'nosta'}
@cindex 'smarttab'
@cindex 'sta'
@cindex 'nosmarttab'
@cindex 'nosta'
@item 'smarttab' 'sta'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンのときは、行頭の余白内で @key{<Tab>} を打ち込むと、'@option{shiftwidth}' の数だけ空白が挿入される。他の場所では '@option{tabstop}' または '@option{softtabstop}' の数だけ空白が挿入される。@key{<BS>} を使うと行頭の '@option{shiftwidth}' 分のスペースを削除する。

オフのときは、@key{<Tab>} を打ち込むと常に '@option{tabstop}' または '@option{softtabstop}' の数だけ空白が挿入される。'@option{shiftwidth}' はテキストを右左にずらすときのみ使われる |shift-left-right|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	What gets inserted (a <Tab> or spaces) depends on the 'expandtab'
	option.  Also see |ins-expandtab|.  When 'expandtab' is not set, the
	number of spaces is minimized by using <Tab>s.
	This option is reset when 'paste' is set and restored when 'paste' is
	reset.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
挿入される文字 (タブ文字または空白) は '@option{expandtab}' によって変わる。|ins-expandtab| も参照。'@option{expandtab}' がオフのときは、@key{<Tab>} を打ち込むと空白の数が最小になる @{訳注: できる限り空白をタブ文字で置き換える@}。このオプションは '@option{paste}' オプションがオンになった時にはリセットされ、'@option{paste}' オプションがリセットされた際には復元される。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'softtabstop'* *'sts'*
'softtabstop' 'sts'	number	(default 0)
			local to buffer
			{not in Vi}
	Number of spaces that a <Tab> counts for while performing editing
	operations, like inserting a <Tab> or using <BS>.  It "feels" like
	<Tab>s are being inserted, while in fact a mix of spaces and <Tab>s is
	used.  This is useful to keep the 'ts' setting at its standard value
	of 8, while being able to edit like it is set to 'sts'.  However,
	commands like "x" still work on the actual characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'softtabstop'}
@anchor{'sts'}
@cindex 'softtabstop'
@cindex 'sts'
@item 'softtabstop' 'sts'
数値 (既定では 0) @*
バッファについてローカル @*
@{Vi にはない@}

編集で <Tab> の幅として使用する空白の数。@key{<Tab>} を挿入したり @key{<BS>} を使ったときに適用される。普通に <Tab> を挿入するような使用感でありながら、実際にはスペース文字と <Tab> 文字が混ぜて使用される。これは 'ts' を標準値の 8 にしたままで、編集作業では <Tab> 幅として他の値を使いたいときに便利である。その場合でも "x" 等のコマンドは実際の文字に対して動作する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'sts' is zero, this feature is off.
	When 'sts' is negative, the value of 'shiftwidth' is used.
	'softtabstop' is set to 0 when the 'paste' option is set and restored
	when 'paste' is reset.
	See also |ins-expandtab|.  When 'expandtab' is not set, the number of
	spaces is minimized by using <Tab>s.
	The 'L' flag in 'cpoptions' changes how tabs are used when 'list' is
	set.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{sts}' がゼロならこの機能は無効になる。'@option{sts}' がマイナスなら '@option{shiftwidth}' の値が使われる。

'@option{softtabstop}' は、'@option{paste}' オプションがオンになった時には 0 に設定され、'@option{paste}' オプションがリセットされた際には復元される。|ins-expandtab| も参照。

'@option{expandtab}' がオフのときは、@key{<Tab>} を打ち込むと空白の数が最小になる @{訳注: できる限り空白をタブ文字で置き換える@}。

'@option{cpoptions}' にフラグ '@var{L}' を含めると、'@option{list}' がオンのとき、タブの扱い方が変わる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'spell'* *'nospell'*
'spell'			boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	When on spell checking will be done.  See |spell|.
	The languages are specified with 'spelllang'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'spell'}
@anchor{'nospell'}
@cindex 'spell'
@cindex 'nospell'
@item 'spell'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ利用可能@}

これがオンのときはスペルチェックが行われる。|spell| を参照。その言語は '@option{spelllang}' で指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'spellcapcheck'* *'spc'*
'spellcapcheck' 'spc'	string	(default "[.?!]\_[\])'" \t]\+")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Pattern to locate the end of a sentence.  The following word will be
	checked to start with a capital letter.  If not then it is highlighted
	with SpellCap |hl-SpellCap| (unless the word is also badly spelled).
	When this check is not wanted make this option empty.
	Only used when 'spell' is set.
	Be careful with special characters, see |option-backslash| about
	including spaces and backslashes.
	To set this option automatically depending on the language, see
	|set-spc-auto|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'spellcapcheck'}
@anchor{'spc'}
@cindex 'spellcapcheck'
@cindex 'spc'
@item 'spellcapcheck' 'spc'
文字列 (既定では "[.?!]\_[\])'" \t]\+") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ利用可能@}

文の末尾を見つけるのに使うパターン。その次の単語が大文字で始まるかどうかチェックされる。大文字でなければ、その単語が SpellCap |hl-SpellCap| で強調される (その単語がスペリングミスともみなされていなければ)。

このチェックを行いたくなければ、このオプションを空にすること。'@option{spell}' がオンのときだけ適用される。特殊な文字について注意すること。スペースとバックスラッシュを含める方法については |option-backslash| を参照。

言語に応じて自動的にこのオプションをオンにする方法については |set-spc-auto| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'spellfile'* *'spf'*
'spellfile' 'spf'	string	(default empty)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Name of the word list file where words are added for the |zg| and |zw|
	commands.  It must end in ".{encoding}.add".  You need to include the
	path, otherwise the file is placed in the current directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'spellfile'}
@anchor{'spf'}
@cindex 'spellfile'
@cindex 'spf'
@item 'spellfile' 'spf'
文字列 (既定では空) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ利用可能@}

コマンド |zg|, |zw| で単語を追加するための単語リストファイルの名前。このファイル名の末尾は ".@{encoding@}.add" でなければならない。ここにパスを含める必要がある。そうしないと、カレントディレクトリにそのファイルが作られる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*E765*
	It may also be a comma separated list of names.  A count before the
	|zg| and |zw| commands can be used to access each.  This allows using
	a personal word list file and a project word list file.
	When a word is added while this option is empty Vim will set it for
	you: Using the first directory in 'runtimepath' that is writable.  If
	there is no "spell" directory yet it will be created.  For the file
	name the first language name that appears in 'spelllang' is used,
	ignoring the region.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E765}
@cindex E765
このオプションの値はファイル名のコンマ区切りのリストであってもよい。コマンド |zg| と |zw| に与えるカウントによって、そのリストのどれにアクセスするかを指定することができる。これによって、個人用の単語リストファイルとプロジェクト用の単語リストファイルを使い分けることができる。

このオプションが空なのに単語が追加されたときは、Vim が自動的に値を設定する: 書き込み可能な最初の '@option{runtimepath}' のディレクトリを使用する。そこに "@var{spell}" というディレクトリがなければ作成する。ファイル名には '@option{spelllang}' に現れる最初の言語名が使われ、地域名は無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The resulting ".spl" file will be used for spell checking, it does not
	have to appear in 'spelllang'.
	Normally one file is used for all regions, but you can add the region
	name if you want to.  However, it will then only be used when
	'spellfile' is set to it, for entries in 'spelllang' only files
	without region name will be found.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そうして作られる ".spl" ファイルがスペルチェックに作られる。このファイルは '@option{spelllang}' に入っていなくてもよい。普通は全ての地域に対して 1 つのファイルが使われるが、望むなら地域名を追加することもできる。しかしその場合、'@option{spellfile}' がそのファイル名に設定されているときだけ使われる。'@option{spelllang}' のエントリに対しては地域名を省いたファイルだけが使われる。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'spelllang'* *'spl'*
'spelllang' 'spl'	string	(default "en")
			local to buffer
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	A comma separated list of word list names.  When the 'spell' option is
	on spellchecking will be done for these languages.  Example: >
		set spelllang=en_us,nl,medical
<	This means US English, Dutch and medical words are recognized.  Words
	that are not recognized will be highlighted.
	The word list name must not include a comma or dot.  Using a dash is
	recommended to separate the two letter language name from a
	specification.  Thus "en-rare" is used for rare English words.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'spelllang'}
@anchor{'spl'}
@cindex 'spelllang'
@cindex 'spl'
@item 'spelllang' 'spl'
文字列 (既定では "en") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ利用可能@}

コンマ区切りの単語リスト名のリスト。オプション '@option{spell}' がオンのとき、これらの言語に対してスペルチェックが行われる。例:
@example
set spelllang=en_us,nl,medical
@end example
こうすると US 英語、オランダ語、医学用語が認識される。認識されない単語は強調される。

単語リスト名はコンマやドットを含んではならない。2 文字の言語名と詳細を区切るのにダッシュを使うことが推奨される。つまり、"en-rare" は頻度の低い (rare) 英語となる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A region name must come last and have the form "_xx", where "xx" is
	the two-letter, lower case region name.  You can use more than one
	region by listing them: "en_us,en_ca" supports both US and Canadian
	English, but not words specific for Australia, New Zealand or Great
	Britain. (Note: currently en_au and en_nz dictionaries are older than
	en_ca, en_gb and en_us).
	If the name "cjk" is included East Asian characters are excluded from
	spell checking.  This is useful when editing text that also has Asian
	words.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
地域名は最後に書いて、"_xx" という形でなければならない。ここで "xx" は小文字で2文字の地域名である。複数の地域名を列挙することもできる:

"en_us, en_ca" とすると US 英語とカナダ英語の両方に対応する。しかしオーストラリア、ニュージーランド、英国に固有の単語には対応しない。(@strong{Note:} 現在のところ en_au と en_nz の辞書は en_ca, en_gb そして en_us のものよりも古い)

"cjk" という名前が含まれる場合は、東アジアの文字はスペルチェックから除外される。これは、アジアの文字を含むようなテキストを編集する際に便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E757*
	As a special case the name of a .spl file can be given as-is.  The
	first "_xx" in the name is removed and used as the region name
	(_xx is an underscore, two letters and followed by a non-letter).
	This is mainly for testing purposes.  You must make sure the correct
	encoding is used, Vim doesn't check it.
	When 'encoding' is set the word lists are reloaded.  Thus it's a good
	idea to set 'spelllang' after setting 'encoding' to avoid loading the
	files twice.
	How the related spell files are found is explained here: |spell-load|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E757}
@cindex E757
特別な場合として、.spl ファイルの名前をそのまま指定することができる。その名前の最初の "_xx" は除去され、地域名として使われる (_xx はアンダースコア、2 文字、そしてその後にアルファベットでないものが続くことを意味する)。これは主にテスト用のためである。正しいエンコーディングが使われているかどうか Vim はチェックしないので、ユーザーが確認しなければならない。

'@option{encoding}' が設定されると、単語リストは再読み込みされる。そのため、2 度読み込むのを避けるため、'@option{encoding}' の後で '@option{spelllang}' を設定するとよい。関係するスペルファイルがどう探されるかについてはここで説明されている: |spell-load|.
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If the |spellfile.vim| plugin is active and you use a language name
	for which Vim cannot find the .spl file in 'runtimepath' the plugin
	will ask you if you want to download the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグイン |spellfile.vim| が動作しているならば、'@option{runtimepath}' に .spl ファイルが見つからない言語名が指定されたとき、このプラグインによりユーザーに対してファイルをダウンロードするかどうか問い合わせが行われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	After this option has been set successfully, Vim will source the files
	"spell/LANG.vim" in 'runtimepath'.  "LANG" is the value of 'spelllang'
	up to the first comma, dot or underscore.
	Also see |set-spc-auto|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの設定が成功すると、'@option{runtimepath}' の "spell/LANG.vim" が読み込まれる。"LANG" は '@option{spelllang}' の値の最初のコンマ、ドット、アンダースコアまでの部分である。|set-spc-auto| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'spellsuggest'* *'sps'*
'spellsuggest' 'sps'	string	(default "best")
			global
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Methods used for spelling suggestions.  Both for the |z=| command and
	the |spellsuggest()| function.  This is a comma-separated list of
	items:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'spellsuggest'}
@anchor{'sps'}
@cindex 'spellsuggest'
@cindex 'sps'
@item 'spellsuggest' 'sps'
文字列 (既定では "best") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ利用可能@}

スペリング候補の方法を指定する。コマンド |z=| と関数 |spellsuggest()| の両方に適用される。次の要素のコンマ区切りのリストになる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	best		Internal method that works best for English.  Finds
			changes like "fast" and uses a bit of sound-a-like
			scoring to improve the ordering.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item best
英語にもっともよく対応している内部メソッド。"fast" 方式と同じように相異点を発見した上で、音の近さによるスコア判定を少し用いて順序を改善する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	double		Internal method that uses two methods and mixes the
			results.  The first method is "fast", the other method
			computes how much the suggestion sounds like the bad
			word.  That only works when the language specifies
			sound folding.  Can be slow and doesn't always give
			better results.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item double
2 つの方法を用い、その結果を混合させる内部メソッド。第一の方法は "fast" で、第二の方法は候補と修正対象の音がどれだけ似ているかを計算する。これは言語が sound folding を明示するときだけ機能する。時間がかかるかもしれず、必ずしもよい結果を出すとは限らない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	fast		Internal method that only checks for simple changes:
			character inserts/deletes/swaps.  Works well for
			simple typing mistakes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item fast
文字の挿入、削除、交換など、単純な相異だけを判定する内部メソッド。単純なタイプミスに対してよく機能する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	{number}	The maximum number of suggestions listed for |z=|.
			Not used for |spellsuggest()|.  The number of
			suggestions is never more than the value of 'lines'
			minus two.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @{number@}
|z=| でリストされる候補の最大数。|spellsuggest()| には適用されない。候補の数は決して '@option{lines}' の値 - 2 を超えない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	file:{filename} Read file {filename}, which must have two columns,
			separated by a slash.  The first column contains the
			bad word, the second column the suggested good word.
			Example:
				theribal/terrible ~
			Use this for common mistakes that do not appear at the
			top of the suggestion list with the internal methods.
			Lines without a slash are ignored, use this for
			comments.
			The word in the second column must be correct,
			otherwise it will not be used.  Add the word to an
			".add" file if it is currently flagged as a spelling
			mistake.
			The file is used for all languages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item file:@{filename@}
@{filename@} を読み込む。そのファイルにはスラッシュで区切られた2つの列が書いていなければならない。第 1 列に間違った単語が書かれ、第2列に候補となる正しい単語が書かれている。
例:
@verbatim
theribal/terrible
@end verbatim
内部メソッドでは候補リストの上の方には出てこない、ありがちなミスのためにこれを使う。スラッシュを含まない行は無視されるのでコメントとすることができる。

第 2 列の単語は正しいものでない場合は、それは使われない。その単語がスペルミスとして扱われている場合は ".add" ファイルにその単語を追加する。

このファイルは全ての言語に対して使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	expr:{expr}	Evaluate expression {expr}.  Use a function to avoid
			trouble with spaces.  |v:val| holds the badly spelled
			word.  The expression must evaluate to a List of
			Lists, each with a suggestion and a score.
			Example:
				[['the', 33], ['that', 44]] ~
			Set 'verbose' and use |z=| to see the scores that the
			internal methods use.  A lower score is better.
			This may invoke |spellsuggest()| if you temporarily
			set 'spellsuggest' to exclude the "expr:" part.
			Errors are silently ignored, unless you set the
			'verbose' option to a non-zero value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item expr:@{expr@}
式 @{expr@} を評価する。スペースによるトラブルを避けるため、関数を使うこと。|v:val| が間違ってつづられた単語を保持する。この式を評価した結果が候補とスコアからなるリストのリストにならなければならない。

例:
@verbatim
[['the', 33], ['that', 44]]
@end verbatim
'verbose' をオンにして |z=| を使うと内部メソッドが使うスコアを見ることができる。スコアは低いほどよい。

一時的に '@option{spellsuggest}' から "@var{expr:}" の部分を除くならば |spellsuggest()| を呼び出してもよい。

オプション '@option{verbose}' が非 0 になっていない限り、エラーは警告無しに無視される。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Only one of "best", "double" or "fast" may be used.  The others may
	appear several times in any order.  Example: >
		:set sps=file:~/.vim/sugg,best,expr:MySuggest()
<
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"best", "double", "fast" は、どれか 1 つだけ指定できる。他のものはどんな順序で何回指定してもよい。例:
@example
:set sps=file:~/.vim/sugg,best,expr:MySuggest()
@end example
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
			*'splitbelow'* *'sb'* *'nosplitbelow'* *'nosb'*
'splitbelow' 'sb'	boolean	(default off)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
	When on, splitting a window will put the new window below the current
	one. |:split|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'splitbelow'}
@anchor{'sb'}
@anchor{'nosplitbelow'}
@anchor{'nosb'}
@cindex 'splitbelow'
@cindex 'sb'
@cindex 'nosplitbelow'
@cindex 'nosb'
@item 'splitbelow' 'sb'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}

オンのとき、ウィンドウを横分割すると新しいウィンドウはカレントウィンドウの下に開かれる |:split|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'splitright'* *'spr'* *'nosplitright'* *'nospr'*
'splitright' 'spr'	boolean	(default off)
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
	When on, splitting a window will put the new window right of the
	current one. |:vsplit|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'splitright'}
@anchor{'spr'}
@anchor{'nosplitright'}
@anchor{'nospr'}
@cindex 'splitright'
@cindex 'spr'
@cindex 'nosplitright'
@cindex 'nospr'
@item 'splitright' 'spr'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}

オンのとき、ウィンドウを縦分割すると新しいウィンドウはカレントウィンドウの右に開かれる |:vsplit|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			   *'startofline'* *'sol'* *'nostartofline'* *'nosol'*
'startofline' 'sol'	boolean	(default on)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'startofline'}
@anchor{'sol'}
@anchor{'nostartofline'}
@anchor{'nosol'}
@cindex 'startofline'
@cindex 'sol'
@cindex 'nostartofline'
@cindex 'nosol'
@item 'startofline' 'sol'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When "on" the commands listed below move the cursor to the first
	non-blank of the line.  When off the cursor is kept in the same column
	(if possible).  This applies to the commands: CTRL-D, CTRL-U, CTRL-B,
	CTRL-F, "G", "H", "M", "L", gg, and to the commands "d", "<<" and ">>"
	with a linewise operator, with "%" with a count and to buffer changing
	commands (CTRL-^, :bnext, :bNext, etc.).  Also for an Ex command that
	only has a line number, e.g., ":25" or ":+".
	In case of buffer changing commands the cursor is placed at the column
	where it was the last time the buffer was edited.
	NOTE: This option is set when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

オンのときは、以下のコマンドで移動すると、カーソルは行内の最初の非空白文字に移動する。オフのときは、カーソルは (可能ならば) 同じ列に置かれる。

適用されるコマンド: @kbd{CTRL-D}, @kbd{CTRL-U}, @kbd{CTRL-B}, @kbd{CTRL-F}, "G", "H", "M", "L", gg, 行単位で行うときの "d", "<<", ">>", カウントを指定したときの "%"、バッファ変更コマンド (@kbd{CTRL-^}, :bnext, :bNext 等)、行番号のみの Ex コマンド (例えば ":25" や ":+")。

バッファ変更コマンドの場合は、カーソルはそのバッファが最後に編集されたときの列に置かれる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオンになるので注意。
@{訳注: 実際の動作はドキュメントとかなり違う。移動先が 1 列目の場合と余白以外の最初の文字の場合が混在している。ただ、オンのときはカーソルが元いた列を無視して先頭の「方に」移動するのは確か@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			   *'statusline'* *'stl'* *E540* *E542*
'statusline' 'stl'	string	(default empty)
			global or local to window |global-local|
			{not in Vi}
			{not available when compiled without the |+statusline|
			feature}
	When nonempty, this option determines the content of the status line.
	Also see |status-line|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'statusline'}
@anchor{'stl'}
@anchor{E540}
@anchor{E542}
@cindex 'statusline'
@cindex 'stl'
@cindex E540
@cindex E542
@item 'statusline' 'stl'
文字列 (既定では空) @*
グローバル／ウィンドウについてローカル |global-local| @*
@{Vi にはない@} @*
@{Vim が |+statusline| 機能付きでコンパイルされたときのみ有効@}

値が空でないとき、このオプションはステータス行の表示内容を設定する。|status-line| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The option consists of printf style '%' items interspersed with
	normal text.  Each status line item is of the form:
	  %-0{minwid}.{maxwid}{item}
	All fields except the {item} are optional.  A single percent sign can
	be given as "%%".  Up to 80 items can be specified.  *E541*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値は、普通のテキストに挟まれた関数 printf 形式の項目からなる。項目の形式は以下の通りである。
@verbatim
%-0{minwid}.{maxwid}{item}
@end verbatim
@{item@} 以外の欄は指定しなくてもよい。パーセント記号そのものを表示するには "%%" とする。80個までの項目を指定できる。
@anchor{E541}
@cindex E541
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When the option starts with "%!" then it is used as an expression,
	evaluated and the result is used as the option value.  Example: >
		:set statusline=%!MyStatusLine()
<	The result can contain %{} items that will be evaluated too.
	Note that the "%!" expression is evaluated in the context of the
	current window and buffer, while %{} items are evaluated in the
	context of the window that the statusline belongs to.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの先頭が "%!" である場合は式とみなされ、評価した結果がオプションの値となる。例:
@example
:set statusline=%!MyStatusLine()
@end example
この結果が %@{@} を含んでいると、それも評価される。
@quotation
@strong{Note:} @*
"%!" 式は現在のウィンドウとバッファのコンテキストで評価される。%@{@} アイテムは対象のウィンドウのコンテキストで評価される。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When there is error while evaluating the option then it will be made
	empty to avoid further errors.  Otherwise screen updating would loop.

	Note that the only effect of 'ruler' when this option is set (and
	'laststatus' is 2) is controlling the output of |CTRL-G|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションを評価している間にエラーが発生すると、それ以降のエラーを避けるためにオプションに空が設定される。そうしないと画面更新がループに陥ってしまう。
@quotation
@strong{Note:} @*
このオプションが設定されているとき (さらにオプション '@option{laststatus}' が 2 であるとき) は、'@option{ruler}' にはコマンド |CTRL-G| の出力を設定する効果しかないことに注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	field	    meaning ~
	-	    Left justify the item.  The default is right justified
		    when minwid is larger than the length of the item.
	0	    Leading zeroes in numeric items.  Overridden by '-'.
	minwid	    Minimum width of the item, padding as set by '-' & '0'.
		    Value must be 50 or less.
	maxwid	    Maximum width of the item.  Truncation occurs with a '<'
		    on the left for text items.  Numeric items will be
		    shifted down to maxwid-2 digits followed by '>'number
		    where number is the amount of missing digits, much like
		    an exponential notation.
	item	    A one letter code as described below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item 欄 @tab 意味
@item - @tab その項目を左寄せする。minwid が項目の長さより大きい場合は、既定では右寄せになる。
@item 0 @tab 数値の頭に 0 を表示する。欄 '-' が優先する。
@item minwid @tab 項目の長さの最小値。余白の穴埋めは '-' と '0' で設定する。50 以下でなければならない。
@item maxwid @tab 項目の長さの最大値。文字列の項目の切り詰めでは '<' が左に表示される。数値の項目は maxwid-2 文字に切り詰められ、それに ">数" が続く。ここで "数" は表示されなかった文字数であり、指数表記に似ている。
@item item @tab 以下で説明するアルファベット1文字。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Following is a description of the possible statusline items.  The
	second character in "item" is the type:
		N for number
		S for string
		F for flags as described below
		- not applicable
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下は、指定可能なステータス行の item の説明である。"item" の2文字目はその item の種類を表す。
@multitable @columnfractions .1 .9
@item N @tab 数値
@item S @tab 文字列
@item F @tab 以下で説明するフラグ
@item - @tab 実際に表示されるものではない
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	item  meaning ~
	f S   Path to the file in the buffer, as typed or relative to current
	      directory.
	F S   Full path to the file in the buffer.
	t S   File name (tail) of file in the buffer.
	m F   Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
	M F   Modified flag, text is ",+" or ",-".
	r F   Readonly flag, text is "[RO]".
	R F   Readonly flag, text is ",RO".
	h F   Help buffer flag, text is "[help]".
	H F   Help buffer flag, text is ",HLP".
	w F   Preview window flag, text is "[Preview]".
	W F   Preview window flag, text is ",PRV".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item item @tab 意味
@item f S @tab バッファ内のファイルのパス(入力された通り、またはカレントディレクトリに対する相対パス)
@item F S @tab バッファ内のファイルのフルパス。
@item t S @tab バッファ内のファイルのファイル名 (パスを除く)。
@item m F @tab 修正フラグ。表示されるのは "[+]"。'@option{modifiable}' がオフのときは "[-]"
@item M F @tab 修正フラグ。表示されるのは ",+" または ",-"。
@item r F @tab 読み込み専用フラグ。表示されるのは "[RO]"。
@item R F @tab 読み込み専用フラグ。表示されるのは  ",RO"。
@item h F @tab ヘルプバッファフラグ。表示されるのは "[ヘルプ]"。
@item H F @tab ヘルプバッファフラグ。表示されるのは ",HLP"。
@item w F @tab プレビューウィンドウフラグ。表示されるのは "[プレビュー]"。
@item W F @tab プレビューウィンドウフラグ。表示されるのは ",PRV"。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	y F   Type of file in the buffer, e.g., "[vim]".  See 'filetype'.
	Y F   Type of file in the buffer, e.g., ",VIM".  See 'filetype'.
	      {not available when compiled without |+autocmd| feature}
	q S   "[Quickfix List]", "[Location List]" or empty.
	k S   Value of "b:keymap_name" or 'keymap' when |:lmap| mappings are
	      being used: "<keymap>"
	n N   Buffer number.
	b N   Value of character under cursor.
	B N   As above, in hexadecimal.
	o N   Byte number in file of byte under cursor, first byte is 1.
	      Mnemonic: Offset from start of file (with one added)
	      {not available when compiled without |+byte_offset| feature}
	O N   As above, in hexadecimal.
	N N   Printer page number.  (Only works in the 'printheader' option.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item y F @tab バッファ内のファイルのタイプ。例えば "[vim]"。'@option{filetype}' を参照。
@item Y F @tab バッファ内のファイルのタイプ。例えば ",VIM"。'@option{filetype}' を参照。@{Vim が |+autocmd| 機能付きでコンパイルされたときのみ有効@}
@item q S @tab "[Quickfix List]"、"[Location List]" または空文字。
@item k S @tab 他言語用マッピング |:lmap| が使われているとき、変数 "b:keymap_name" または '@option{keymap}' を "<keymap>" と表示する。
@item n N @tab バッファ番号。
@item b N @tab カーソル下の文字の文字コードの10進数表現。
@item B N @tab 同上、ただし 16 進数表現。
@item o N @tab カーソル下の文字がファイル内で何バイト目であるか。先頭では 1。覚え方: ファイル先頭からの隔たり (に 1 を足したもの) @{Vim が |+byte_offset| 機能付きでコンパイルされたときのみ有効@}
@item O N @tab 同上、ただし 16 進数表現。
@item N N @tab 印刷時のページ番号 ('@option{printheader}' 内でのみ有効)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	l N   Line number.
	L N   Number of lines in buffer.
	c N   Column number.
	v N   Virtual column number.
	V N   Virtual column number as -{num}.  Not displayed if equal to 'c'.
	p N   Percentage through file in lines as in |CTRL-G|.
	P S   Percentage through file of displayed window.  This is like the
	      percentage described for 'ruler'.  Always 3 in length, unless
	      translated.
	a S   Argument list status as in default title.  ({current} of {max})
	      Empty if the argument file count is zero or one.
	{ NF  Evaluate expression between '%{' and '}' and substitute result.
	      Note that there is no '%' before the closing '}'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item l N @tab 何行目にカーソルがあるか。
@item L N @tab バッファ内の総行数。
@item c N @tab 何列目にカーソルがあるか。
@item v N @tab 画面上の何列目にカーソルがあるか。
@item V N @tab 画面上の何列目にカーソルがあるか。表示形式は -@{num@}。値が '@var{c}' と等しければ表示されない。
@item p N @tab 現在行がファイル内の何 % の位置にあるか (|CTRL-G| と同様)
@item P S @tab 現在表示されているウィンドウ内のテキストが、ファイル内の何 % の位置にあるか。これは '@option{ruler}' で説明されているものに似ている。翻訳されていない限り、値は常に3文字である @{訳注: 日本語版では全角 2 文字になりうる@}。
@item a S @tab 既定のタイトルと同様の引数ファイルリストを "(@{current@} of @{max@})" と表示する。ファイル引数の数が 0 または 1 のときは空。
@item @{ NF @tab '%@{' と '@}' の間の expression を評価し、結果に置き換える。閉じ括弧 '@}' の前には '%' がつかないことに注意。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	( -   Start of item group.  Can be used for setting the width and
	      alignment of a section.  Must be followed by %) somewhere.
	) -   End of item group.  No width fields allowed.
	T N   For 'tabline': start of tab page N label.  Use %T after the last
	      label.  This information is used for mouse clicks.
	X N   For 'tabline': start of close tab N label.  Use %X after the
	      label, e.g.: %3Xclose%X.  Use %999X for a "close current tab"
	      mark.  This information is used for mouse clicks.
	< -   Where to truncate line if too long.  Default is at the start.
	      No width fields allowed.
	= -   Separation point between left and right aligned items.
	      No width fields allowed.
	# -   Set highlight group.  The name must follow and then a # again.
	      Thus use %#HLname# for highlight group HLname.  The same
	      highlighting is used, also for the statusline of non-current
	      windows.
	* -   Set highlight group to User{N}, where {N} is taken from the
	      minwid field, e.g. %1*.  Restore normal highlight with %* or %0*.
	      The difference between User{N} and StatusLine  will be applied
	      to StatusLineNC for the statusline of non-current windows.
	      The number N must be between 1 and 9.  See |hl-User1..9|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ( - @tab 項目グループの開始。グループ内の項目全てに対する幅と寄せ方の設定に使える。どこかで %) で閉じられなければならない。
@item ) - @tab 項目グループの終了。欄 width は指定できない。
@item T N @tab '@option{tabline}' 用: ラベル「タブページ N」の開始。最後のラベルの後に %T を書くこと。この情報はマウスクリックに使われる。
@item X N @tab '@option{tabline}' 用: ラベル「タブ N を閉じる」の開始。ラベルの後に %X を書くこと。例: %3Xclose%X。%999X は「カレントタブを閉じる」を意味する。この情報はマウスクリックに使われる。
@item < - @tab 行が長すぎるときに切り詰める位置。既定では先頭。欄 width は指定できない。
@item = - @tab 左寄せ項目と右寄せ項目の区切り。欄 width は指定できない。
@item # - @tab 強調グループを設定する。この後に名前を書き、その後にまた # を書く。つまり、%#HLname# と書くと、強調グループ HLname になる。カレントウィンドウ以外のステータスラインに対しても同じ強調が施される。
@item * - @tab 使われる強調表示グループを User@{N@} に設定する。ここで @{N@} は欄 minwid から取られる。例えば %1* と設定する。%* や %0* で通常の強 調表示を復元する。

強調表示グループ User@{N@} と StatusLine の違いは、非カレントウィンドウのステータス行の強調表示を設定するグループの StatusLineNC に適用される。数 N は 1 以上 9 以下である。|hl-User1..9| を参照。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When displaying a flag, Vim removes the leading comma, if any, when
	that flag comes right after plaintext.  This will make a nice display
	when flags are used like in the examples below.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フラグを表示するとき、そのフラグがプレーンテキストの直後にあるなら、その先頭にコンマがある場合は削除される。そうすることによって以下の例のようなフラグの使い方をしたとき、きれいに表示されるようになっている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When all items in a group becomes an empty string (i.e. flags that are
	not set) and a minwid is not set for the group, the whole group will
	become empty.  This will make a group like the following disappear
	completely from the statusline when none of the flags are set. >
		:set statusline=...%(\ [%M%R%H]%)...
<							*g:actual_curbuf*
	Beware that an expression is evaluated each and every time the status
	line is displayed.  The current buffer and current window will be set
	temporarily to that of the window (and buffer) whose statusline is
	currently being drawn.  The expression will evaluate in this context.
	The variable "actual_curbuf" is set to the 'bufnr()' number of the
	real current buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるグループ内の全ての項目が空文字列 (つまり設定されていないフラグ) になり、かつそのグループに minwid が指定されていなかったときは、グループ全体が空になる。これにより、次のようなグループは、フラグがどれも設定されていないときは全く表示されない。
@example
:set statusline=...%(\ [%M%R%H]%)...
@end example
@anchor{g:actual_curbuf}
@cindex g:actual_curbuf
気をつけてほしいのは、expression はステータス行が表示されるたびに評価されるということだ。あるバッファまたはウィンドウのステータス行が描画されている最中は、一時的にそのバッファまたはウィンドウがカレントバッファまたはカレントウィンドウに設定され、そこで expression が評価される。変数 "actual_curbuf" は、本当のカレントバッファで関数 'bufnr()' が返す値に設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The 'statusline' option will be evaluated in the |sandbox| if set from
	a modeline, see |sandbox-option|.

	It is not allowed to change text or jump to another window while
	evaluating 'statusline' |textlock|.

	If the statusline is not updated when you want it (e.g., after setting
	a variable that's used in an expression), you can force an update by
	setting an option without changing its value.  Example: >
		:let &ro = &ro
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションがモードラインで設定されたときは、式はサンドボックス (|sandbox|) の中で評価される。|sandbox-option| を参照。

'@option{statusline}' を評価している間にテキストを変更したり他のウィンドウにジャンプすることは許されていない |textlock|。

ステータス行が望みの時点 (例えば expression 内で使われる変数の設定をした後) で更新されていないときは、オプションを値を変えずに設定し直すことで更新させることができる。例:
@example
:let &ro = &ro
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<	A result of all digits is regarded a number for display purposes.
	Otherwise the result is taken as flag text and applied to the rules
	described above.

	Watch out for errors in expressions.  They may render Vim unusable!
	If you are stuck, hold down ':' or 'Q' to get a prompt, then quit and
	edit your .vimrc or whatever with "vim --clean" to get it right.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
全て数字で返された結果は、表示用の数値と見なされる。それ以外の結果はフラグ列と解釈され、上記の方法が適用される。

ステータス行で expression を使うときはエラーに気をつけること。Vim の描画機構が使い物にならなくなるかもしれない！行き詰まってしまったならば、プロンプトを表示させるために ':' か 'Q' を打ち込む。そして Vim を終了したら "vim --clean" として @{訳注: エラーを起こす設定を読み込まないようにして@} ユーザーのファイル @file{.vimrc} か何かを編集し、正常に戻す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Examples:
	Emulate standard status line with 'ruler' set >
	  :set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
<	Similar, but add ASCII value of char under the cursor (like "ga") >
	  :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
<	Display byte count and byte value, modified flag in red. >
	  :set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
	  :hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:

'@option{ruler}' がオンのときの標準のステータス行に似せる
@example
:set statusline=%<%f%h%m%r%=%l,%c%V\ %P
@end example
同上、しかしカーソル下の文字の10/16進表現を表示する ("ga" のように)
@example
:set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
@end example
カーソルが置かれているバイト数、カーソル下の文字のコード、修正フラグを赤で表示
@example
:set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	Display a ,GZ flag if a compressed file is loaded >
	  :set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...
<	In the |:autocmd|'s: >
	  :let b:gzflag = 1
<	And: >
	  :unlet b:gzflag
<	And define this function: >
	  :function VarExists(var, val)
	  :    if exists(a:var) | return a:val | else | return '' | endif
	  :endfunction
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
圧縮ファイルが読み込まれたとき、フラグ ,GZ を表示するには次のようにする。まず
@example
:set statusline=...%r%@{VarExists('b:gzflag','\ [GZ]')@}%h...
@end example
として、さらに @{訳注: 自動解凍を行う役割の@} |:autocmd| 内で
@example
:let b:gzflag = 1
@end example
および
@example
:unlet b:gzflag
@end example
を設定し、最後に次の関数を定義する。
@verbatim
:function VarExists(var, val)
:    if exists(a:var) | return a:val | else | return '' | endif
:endfunction
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'suffixes'* *'su'*
'suffixes' 'su'		string	(default ".bak,~,.o,.h,.info,.swp,.obj")
			global
			{not in Vi}
	Files with these suffixes get a lower priority when multiple files
	match a wildcard.  See |suffixes|.  Commas can be used to separate the
	suffixes.  Spaces after the comma are ignored.  A dot is also seen as
	the start of a suffix.  To avoid a dot or comma being recognized as a
	separator, precede it with a backslash (see |option-backslash| about
	including spaces and backslashes).
	See 'wildignore' for completely ignoring files.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	suffixes from the list.  This avoids problems when a future version
	uses another default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'suffixes'}
@anchor{'su'}
@cindex 'suffixes'
@cindex 'su'
@item 'suffixes' 'su'
文字列 (既定では ".bak,~,.o,.h,.info,.swp,.obj") @*
グローバル @*
@{Vi にはない@}

この拡張子を持つファイルは、ワイルドカードに複数のファイルがマッチしたときの優先度が低くなる。|suffixes| を参照。拡張子はコンマで区切って指定する。コンマの後の空白は無視される。またドットは拡張子の始まりと見なされる。ドットやコンマが区切りと見なされないようにするには、前に '\' を置くこと。値に空白や '\' を含める方法については、|option-backslash|	を参照。

ファイルを完全に無視するには、オプション '@option{wildignore}' を参照。リストに拡張子を追加するときにはコマンド |:set+=|、リストから拡張子を除くときには |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'suffixesadd'* *'sua'*
'suffixesadd' 'sua'	string	(default "")
			local to buffer
			{not in Vi}
			{not available when compiled without the
			|+file_in_path| feature}
	Comma separated list of suffixes, which are used when searching for a
	file for the "gf", "[I", etc. commands.  Example: >
		:set suffixesadd=.java
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'suffixesadd'}
@anchor{'sua'}
@cindex 'suffixesadd'
@cindex 'sua'
@item 'suffixesadd' 'sua'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@}

@{Vim が |+file_in_path| 機能付きでコンパイルされたときのみ有効@}

値は拡張子のコンマ区切りのリスト。その拡張子は "gf", "[I" 等のコマンドで検索されるファイルのものである。例:
@example
:set suffixesadd=.java
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
'swapfile' 'swf'	boolean (default on)
			local to buffer
			{not in Vi}
	Use a swapfile for the buffer.  This option can be reset when a
	swapfile is not wanted for a specific buffer.  For example, with
	confidential information that even root must not be able to access.
	Careful: All text will be in memory:
		- Don't use this for big files.
		- Recovery will be impossible!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'swapfile'}
@anchor{'swf'}
@anchor{'noswapfile'}
@anchor{'noswf'}
@cindex 'swapfile'
@cindex 'swf'
@cindex 'noswapfile'
@cindex 'noswf'
@item 'swapfile' 'swf'
切替 (既定ではオン) @*
バッファについてローカル @*
@{Vi にはない@}

バッファでスワップファイルを使用する。このオプションは、特定のバッファでスワップファイルを使いたくないときにはオフに設定できる。例えば root ユーザーさえもアクセスしてはならない機密情報等でオフにする。

注意: テキストは全てメモリ内に格納される:
@itemize @minus
@item この手段は大きいファイルに使わないこと。
@item クラッシュからの回復ができなくなる！
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A swapfile will only be present when |'updatecount'| is non-zero and
	'swapfile' is set.
	When 'swapfile' is reset, the swap file for the current buffer is
	immediately deleted.  When 'swapfile' is set, and 'updatecount' is
	non-zero, a swap file is immediately created.
	Also see |swap-file| and |'swapsync'|.
	If you want to open a new buffer without creating a swap file for it,
	use the |:noswapfile| modifier.

	This option is used together with 'bufhidden' and 'buftype' to
	specify special kinds of buffers.   See |special-buffers|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
スワップファイルが作られるのはオプション '@option{updatecount}' が非 0 で、'@option{swapfile}' がオンのときだけである。

'@option{swapfile}' がオフになったときは、カレントバッファのスワップファイルはすぐに削除される。'@option{swapfile}' がオンで、'@option{updatecount}' が非 0 のときは、スワップファイルはすぐに作られる。|swap-file| と '@option{swapsync}' も参照。

スワップファイルを作成せずに新しいバッファを開きたい場合は |:noswapfile| 修飾子を使う。

このオプションは、'@option{bufhidden}' と '@option{buftype}' と共に、特別な種類のバッファを指定するのに使われる。|special-buffers| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'swapsync'* *'sws'*
'swapsync' 'sws'	string	(default "fsync")
			global
			{not in Vi}
	When this option is not empty a swap file is synced to disk after
	writing to it.  This takes some time, especially on busy unix systems.
	When this option is empty parts of the swap file may be in memory and
	not written to disk.  When the system crashes you may lose more work.
	On Unix the system does a sync now and then without Vim asking for it,
	so the disadvantage of setting this option off is small.  On some
	systems the swap file will not be written at all.  For a unix system
	setting it to "sync" will use the sync() call instead of the default
	fsync(), which may work better on some systems.
	The 'fsync' option is used for the actual file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'swapsync'}
@anchor{'sws'}
@cindex 'swapsync'
@cindex 'sws'
@item 'swapsync' 'sws'
文字列 (既定では "fsync") @*
グローバル @*
@{Vi にはない@}

値が空でないときは、書き込みの後にディスク上のスワップファイルの内容が同調される。これにはいくらか時間がかかる。ビジー状態の Unix システムでは特にそうだ。

値が空のときは、スワップファイルの一部はメモリ内のままで、ディスクに書き込まれないかもしれない。システムがクラッシュすると、仕事の成果が余計ひどく失われるかもしれない。

Unix では、Vim が求めなくとも時折システムが同調を行うので、これを空にすることの不利益は小さい。システムによってはスワップファイルは全く書き込まれない。Unix システムでは、値を "sync" にすると既定の関数 fsync() ではなく関数 sync() を呼び出すが、システムによってはそちらの方がよい。

実ファイルに対してはオプション '@option{fsync}' が適用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'switchbuf'* *'swb'*
'switchbuf' 'swb'	string	(default "")
			global
			{not in Vi}
	This option controls the behavior when switching between buffers.
	Possible values (comma separated list):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'switchbuf'}
@anchor{'swb'}
@cindex 'switchbuf'
@cindex 'swb'
@item 'switchbuf' 'swb'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

バッファを切り替えるときの動作を調節する。指定可能なキーワードは以下の通りである (コンマ区切りのリストにする):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   useopen	If included, jump to the first open window that
			contains the specified buffer (if there is one).
			Otherwise: Do not examine other windows.
			This setting is checked with |quickfix| commands, when
			jumping to errors (":cc", ":cn", "cp", etc.).  It is
			also used in all buffer related split commands, for
			example ":sbuffer", ":sbnext", or ":sbrewind".
	   usetab	Like "useopen", but also consider windows in other tab
			pages.
	   split	If included, split the current window before loading
			a buffer for a |quickfix| command that display errors.
			Otherwise: do not split, use current window.
	   vsplit	Just like "split" but split vertically.
	   newtab	Like "split", but open a new tab page.  Overrules
			"split" when both are present.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item useopen
これが含まれたときは、指定されたバッファを開いているウィンドウがあれば、そこにジャンプする。含まれないときは、他のウィンドウを調べない。

この設定は |quickfix| 関係のコマンドでエラーにジャンプするとき (":cc", ":cn", "cp" 等で) に影響する。また ":sbuffer", ":sbnext", ":sbrewind" 等のバッファ関係のウィンドウ分割コマンド全てにも影響する。
@item usetab
"useopen" と同様だが、他のタブページで開かれているウィンドウも考慮する。
@item split
これが含まれていると、|quickfix| コマンドでエラーを表示するときに、バッファを読み込む前にカレントウィンドウを分割する。

含まれていないときは、分割はされない。カレントウィンドウが使われる。
@item vsplit
"split" と同様だが、垂直に分割する。
@item newtab
"split" と同様だが、新しいタブページを開く。"split" と両方指定された場合はこちらが優先される。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'synmaxcol'* *'smc'*
'synmaxcol' 'smc'	number	(default 3000)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	Maximum column in which to search for syntax items.  In long lines the
	text after this column is not highlighted and following lines may not
	be highlighted correctly, because the syntax state is cleared.
	This helps to avoid very slow redrawing for an XML file that is one
	long line.
	Set to zero to remove the limit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'synmaxcol'}
@anchor{'smc'}
@cindex 'synmaxcol'
@cindex 'smc'
@item 'synmaxcol' 'smc'
数値 (既定では 3000) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ有効@}

構文アイテムを検索する桁数の最大値。長い行において、この桁以降のテキストは強調されない。また構文の状態がクリアされるため、これ以下の行は正しく強調されない可能性がある。

これは長い行を持つ XML ファイルの描画が非常に遅くなるのを避けるために役に立つ。ゼロにするとその制限がなくなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'syntax'* *'syn'*
'syntax' 'syn'		string	(default empty)
			local to buffer
			{not in Vi}
			{not available when compiled without the |+syntax|
			feature}
	When this option is set, the syntax with this name is loaded, unless
	syntax highlighting has been switched off with ":syntax off".
	Otherwise this option does not always reflect the current syntax (the
	b:current_syntax variable does).
	This option is most useful in a modeline, for a file which syntax is
	not automatically recognized.  Example, in an IDL file:
		/* vim: set syntax=idl : */ ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'syntax'}
@anchor{'syn'}
@cindex 'syntax'
@cindex 'syn'
@item 'syntax' 'syn'
文字列 (既定では "") @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+syntax| 機能付きでコンパイルされたときのみ有効@}

このオプションが設定されたとき、コマンド ":syntax off" で構文強調表示が無効にされていない限り、値の名前の構文定義が読み込まれる。

このオプションは、その時点以外では使われている構文定義を常に反映する訳ではない (常に反映するのは変数 b:current_syntax)。

このオプションは、構文が自動的に認識されないファイルのモードラインで使うのが最も便利である。例えば、IDLファイルでは次のようにする。
@verbatim
/* vim: set syntax=idl : */
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When a dot appears in the value then this separates two filetype
	names.  Example:
		/* vim: set syntax=c.doxygen : */ ~
	This will use the "c" syntax first, then the "doxygen" syntax.
	Note that the second one must be prepared to be loaded as an addition,
	otherwise it will be skipped.  More than one dot may appear.
	To switch off syntax highlighting for the current file, use: >
		:set syntax=OFF
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの値にドットを含めると、ファイルタイプの区切りとなる。例:
@verbatim
/* vim: set syntax=c.doxygen : */
@end verbatim
こうするとまず最初に "c" の構文を使い、次に "doxygen" の構文を使うようになる。2 番目のファイルタイプは追加として読み込まれるように準備されていなければならない。そうでないとスキップされる。ドットは 1 つ以上現れてもよい。カレントファイルに対する構文強調表示を無効にするにはこうする。
@example
:set syntax=OFF
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	To switch syntax highlighting on according to the current value of the
	'filetype' option: >
		:set syntax=ON
<	What actually happens when setting the 'syntax' option is that the
	Syntax autocommand event is triggered with the value as argument.
	This option is not copied to another buffer, independent of the 's' or
	'S' flag in 'cpoptions'.
	Only normal file name characters can be used, "/\*?[|<>" are illegal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{filetype}' に従って、構文強調表示を開始するにはこうする。
@example
:set syntax=ON
@end example
'@option{syntax}' の設定時に実際起きることは、autocommand のイベント Syntax が、このオプションの値を引数にして発生するということだ。

'@option{cpoptions}' のフラグ '@var{s}' や '@var{S}' に関わらず、このオプションの値は別のバッファにはコピーされない。通常のファイル名文字だけが使える。"/\*?[|<>" は不正である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'tabline'* *'tal'*
'tabline' 'tal'		string	(default empty)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
	When nonempty, this option determines the content of the tab pages
	line at the top of the Vim window.  When empty Vim will use a default
	tab pages line.  See |setting-tabline| for more info.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tabline'}
@anchor{'tal'}
@cindex 'tabline'
@cindex 'tal'
@item 'tabline' 'tal'
文字列 (既定では"") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}

このオプションが空でないとき、Vim ウィンドウの上にあるタブページ行の表示内容を指定する。空のときは、既定のタブページ行が使われる。より詳しくは |setting-tabline| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The tab pages line only appears as specified with the 'showtabline'
	option and only when there is no GUI tab line.  When 'e' is in
	'guioptions' and the GUI supports a tab line 'guitablabel' is used
	instead.  Note that the two tab pages lines are very different.

	The value is evaluated like with 'statusline'.  You can use
	|tabpagenr()|, |tabpagewinnr()| and |tabpagebuflist()| to figure out
	the text to be displayed.  Use "%1T" for the first label, "%2T" for
	the second one, etc.  Use "%X" items for closing labels.

	Keep in mind that only one of the tab pages is the current one, others
	are invisible and you can't jump to their windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページ行はオプション '@option{showtabline}' で指定されたとき、また GUI のタブ行がないときだけ表示される。'@option{guioptions}' に '@var{e}' が入っていて、GUI がタブ行に対応しているときは代わりに '@option{guitablabel}' が使われる。
@quotation
@strong{Note:} @*
この 2 つのタブページ行はかなり異なる。
@end quotation
このオプションの値は '@option{statusline}' と同じように評価される。|tabpagenr()|, |tabpagewinnr()|, |tabpagebuflist()| を使えば表示されるテキストを把握することができる。1 番目のラベルには "%1T"、2 番目のラベルには "%2T" など。閉じラベルにはアイテム "%X" を使う。

アクティブなタブページは 1 つだけである。他のタブページは表示されず、その中のウィンドウにジャンプすることはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'tabpagemax'* *'tpm'*
'tabpagemax' 'tpm'	number	(default 10)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
	Maximum number of tab pages to be opened by the |-p| command line
	argument or the ":tab all" command. |tabpage|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tabpagemax'}
@anchor{'tpm'}
@cindex 'tabpagemax'
@cindex 'tpm'
@item 'tabpagemax' 'tpm'
数値 (既定では 10) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}

コマンドライン引数 |-p| や ":tab all" で開かれるタブページの最大数。|tabpage|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*'tabstop'* *'ts'*
'tabstop' 'ts'		number	(default 8)
			local to buffer
	Number of spaces that a <Tab> in the file counts for.  Also see
	|:retab| command, and 'softtabstop' option.

	Note: Setting 'tabstop' to any other value than 8 can make your file
	appear wrong in many places (e.g., when printing it).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tabstop'}
@anchor{'ts'}
@cindex 'tabstop'
@cindex 'ts'
@item 'tabstop' 'ts'
数値 (既定では 8) @*
バッファについてローカル

ファイル内の <Tab> が対応する空白の数。コマンド |:retab| とオプション '@option{softtabstop'} も参照 @{訳注: このオプション説明の最後も参照@}。
@quotation
@strong{Note:} @*
'@option{tabstop}' を 8 以外の数に設定すると、多くの場合で (例えば印刷時) ユーザーのファイルが間違って表示されうるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There are four main ways to use tabs in Vim:
	1. Always keep 'tabstop' at 8, set 'softtabstop' and 'shiftwidth' to 4
	   (or 3 or whatever you prefer) and use 'noexpandtab'.  Then Vim
	   will use a mix of tabs and spaces, but typing <Tab> and <BS> will
	   behave like a tab appears every 4 (or 3) characters.
	2. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use
	   'expandtab'.  This way you will always insert spaces.  The
	   formatting will never be messed up when 'tabstop' is changed.
	3. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use a
	   |modeline| to set these values when editing the file again.  Only
	   works when using Vim to edit the file.
	4. Always set 'tabstop' and 'shiftwidth' to the same value, and
	   'noexpandtab'.  This should then work (for initial indents only)
	   for any tabstop setting that people use.  It might be nice to have
	   tabs after the first non-blank inserted as spaces if you do this
	   though.  Otherwise aligned comments will be wrong when 'tabstop' is
	   changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim では、タブの主な使い方には以下の4種類がある:
@enumerate
@item
'@option{tabstop}' を常に 8 に保ち、'@option{softtabstop}' と '@option{shiftwidth}' を 4 (または 3 等の好きな値) に設定し、'@option{expandtab}' をオフにする。すると Vim はタブと空白の両方を使うが、@key{<Tab>} と @key{<BS>} を打ち込むと、タブが 4 (または 3) 文字ごとに現れているかのように表示される。
@item
'@option{tabstop}' と '@option{shiftwidth}' を好きなように設定し、'@option{expandtab}' をオンにする。この方法では常に空白が挿入される。'@option{tabstop}' が変更されても、整形されたテキストはめちゃめちゃにならない。
@item
'@option{tabstop}' と '@option{shiftwidth}' を好きなように設定し、再びファイルを編集するときにはモードライン |modeline| でこれらを設定する。ファイルの編集に Vim を使うときのみ有効。
@item
常に '@option{tabstop}' と '@option{shiftwidth}' を等しく設定し、'@option{expandtab}' をオフにする。すると (1 回目のインデントのみだが) どのタブ幅でもうまく働く。こうするにしても、余白より後の最初の文字より後にタブ文字を挿入するときは、空白文字として挿入されるようにするとよいだろう。そうしないと、'@option{tabstop}' が変更されたときに、整形されたコメントの形がおかしくなる。
@end enumerate
@{訳注: '@option{shiftwidth}' は自動インデントやコマンド "<<", ">>" でずれる幅。'@option{softtabstop}' は @key{<Tab>} や @key{<BS>} を打ち込んだときにカーソルが動く幅。'@option{tabstop}' は画面上でタブ文字が占める幅の設定@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'tagbsearch'* *'tbs'* *'notagbsearch'* *'notbs'*
'tagbsearch' 'tbs'	boolean	(default on)
			global
			{not in Vi}
	When searching for a tag (e.g., for the |:ta| command), Vim can either
	use a binary search or a linear search in a tags file.  Binary
	searching makes searching for a tag a LOT faster, but a linear search
	will find more tags if the tags file wasn't properly sorted.
	Vim normally assumes that your tags files are sorted, or indicate that
	they are not sorted.  Only when this is not the case does the
	'tagbsearch' option need to be switched off.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tagbsearch'}
@anchor{'tbs'}
@anchor{'notagbsearch'}
@anchor{'notbs'}
@cindex 'tagbsearch'
@cindex 'tbs'
@cindex 'notagbsearch'
@cindex 'notbs'
@item 'tagbsearch' 'tbs'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

タグを検索するとき (例えば |:ta| コマンド)、Vim は tags ファイル内で二分探索か線形探索のどちらかを使用する。二分探索はタグの検索が「大幅に」速くなるが、タグファイルが適切に整列されていないときには線形探索の方がより多くのタグを発見できる。

Vim は普通はタグファイルが整列されているか、整列されていないことが明示されているものと想定している。そうなっていない場合は '@option{tagbsearch}' オプションをオフに設定する必要がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When 'tagbsearch' is on, binary searching is first used in the tags
	files.  In certain situations, Vim will do a linear search instead for
	certain files, or retry all files with a linear search.  When
	'tagbsearch' is off, only a linear search is done.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{tagbsearch}' がオンのときは、最初に tags ファイル内で二分探索が使われる。特定の状況下では、Vim は特定のファイルに対しては線形探索を使ったり、全てのファイルを線形探索で再試行したりする。'@option{tagbsearch}' がオフのときは線形探索のみが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Linear searching is done anyway, for one file, when Vim finds a line
	at the start of the file indicating that it's not sorted: >
   !_TAG_FILE_SORTED	0	/some comment/
<	[The whitespace before and after the '0' must be a single <Tab>]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグファイルの先頭に、それが整列されていないことを示す行があったときは、そのファイルでは線形探索が使われる。
@verbatim
!_TAG_FILE_SORTED	0	/some comment/
@end verbatim
['0' の前後の余白は、単一の <Tab> でなければならない]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When a binary search was done and no match was found in any of the
	files listed in 'tags', and case is ignored or a pattern is used
	instead of a normal tag name, a retry is done with a linear search.
	Tags in unsorted tags files, and matches with different case will only
	be found in the retry.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
二分探索が完了し、'@option{tags}' で列挙されたどのファイルからもマッチが見つからなかった場合、かつ大文字小文字が無視される場合、もしくはその検索がタグ名による検索ではなくパターンによる検索であれば、線形探索を使って検索が再試行される。

整列されていないタグファイル内のタグや、大文字と小文字の違いのあるマッチは、再試行でのみ見つかるだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If a tag file indicates that it is case-fold sorted, the second,
	linear search can be avoided when case is ignored.  Use a value of '2'
	in the "!_TAG_FILE_SORTED" line for this.  A tag file can be case-fold
	sorted with the -f switch to "sort" in most unices, as in the command:
	"sort -f -o tags tags".  For "Exuberant ctags" version 5.x or higher
	(at least 5.5) the --sort=foldcase switch can be used for this as
	well.  Note that case must be folded to uppercase for this to work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグファイルが大文字・小文字を無視して整列されていることを示しているなら、'@option{ignorecase}' のための線形探索はしなくてもよくなる。それには "!_TAG_FILE_SORTED" 行の値として '2' を使う。ほとんどの Unix では "sort" にオプション -f をつけることで大文字・小文字を無視してタグファイルを整列することができる。

そのコマンドは次のようになる: "@command{sort -f -o tags tags}"。"Exuberant ctags" のバージョン 5.x 以降 (少なくとも 5.5 以降) ではオプション @samp{--sort=foldcase} をつけることでこれと同様のことができる。@strong{Note:} これが機能するために文字は大文字にまとめられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	By default, tag searches are case-sensitive.  Case is ignored when
	'ignorecase' is set and 'tagcase' is "followic", or when 'tagcase' is
	"ignore".
	Also when 'tagcase' is "followscs" and 'smartcase' is set, or
	'tagcase' is "smart", and the pattern contains only lowercase
	characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトではタグ検索は大文字小文字を区別する。'@option{ignorecase}' が設定済みで '@option{tagcase}' が "@var{followic}" もしくは "@var{ignore}" に設定されている時は、大文字小文字の違いが無視される。

'@option{tagcase}' が "@var{followscs}" で '@option{smartcase}' が設定されている時、もしくは '@option{tagcase}' が "@var{smart}" でパターンが小文字でのみ構成されている場合も、同様に大文字小文字の違いが無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When 'tagbsearch' is off, tags searching is slower when a full match
	exists, but faster when no full match exists.  Tags in unsorted tags
	files may only be found with 'tagbsearch' off.
	When the tags file is not sorted, or sorted in a wrong way (not on
	ASCII byte value), 'tagbsearch' should be off, or the line given above
	must be included in the tags file.
	This option doesn't affect commands that find all matching tags (e.g.,
	command-line completion and ":help").
	{Vi: always uses binary search in some versions}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{tagbsearch}' がオフの場合、完全なマッチがあるときはタグの検索はより遅くなるが、完全なマッチがないときは検索はより速くなる。整列されていないタグファイル内のタグは '@option{tagbsearch}' がオフでないと見つからないかもしれない。

タグファイルが整列されていない、あるいは間違った順に整列されている (ASCII コード順になっていない) ときは、'@option{tagbsearch}' をオフにするべきである。またはタグファイル内に上記の行が含まれていなければならない。このオプションは、マッチするすべてのタグを検索するようなコマンド (例えばコマンドライン補完や "@command{:help}") には影響しない。

@{Vi: バージョンによっては常に二分探索を使う@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*'tagcase'* *'tc'*
'tagcase' 'tc'		string	(default "followic")
			global or local to buffer |global-local|
			{not in Vi}
	This option specifies how case is handled when searching the tags
	file:
	   followic	Follow the 'ignorecase' option
	   followscs    Follow the 'smartcase' and 'ignorecase' options
	   ignore	Ignore case
	   match	Match case
	   smart	Ignore case unless an upper case letter is used
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tagcase'}
@anchor{'tc'}
@cindex 'tagcase'
@cindex 'tc'
@item 'tagcase' 'tc'
文字列 (既定では "followic") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

このオプションはタグファイルを探索する際に大文字小文字をどの様に取り扱うかを指定する:
@multitable @columnfractions .2 .8
@item followic @tab オプション '@option{ignorecase}' に従う
@item followscs @tab '@option{smartcase}' 及び '@option{ignorecase}' オプションに従う
@item ignore @tab 大文字小文字の違いを無視する
@item match @tab 大文字小文字をマッチする
@item smart @tab 大文字を使わない限りは、大文字小文字の違いを無視する
@end multitable
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'taglength'* *'tl'*
'taglength' 'tl'	number	(default 0)
			global
	If non-zero, tags are significant up to this number of characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'taglength'}
@anchor{'tl'}
@cindex 'taglength'
@cindex 'tl'
@item 'taglength' 'tl'
数値 (既定では 0) @*
グローバル @*

非 0 のときは、タグ名のうち、前からこの値の文字数までが意味を持つ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'tagrelative'* *'tr'* *'notagrelative'* *'notr'*
'tagrelative' 'tr'	boolean	(Vim default: on, Vi default: off)
			global
			{not in Vi}
	If on and using a tags file in another directory, file names in that
	tags file are relative to the directory where the tags file is.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tagrelative'}
@anchor{'tr'}
@anchor{'notagrelative'}
@anchor{'notr'}
@cindex 'tagrelative'
@cindex 'tr'
@cindex 'notagrelative'
@cindex 'notr'
@item 'tagrelative' 'tr'
切替 (Vim の既定値: オン、Vi の既定値: オフ) @*
グローバル @*
@{Vi にはない@}

オンのとき、タグファイルを別のディレクトリから使うと、そのタグファイルでのタグ名は、タグファイルのあるディレクトリに対して相対的になる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'tags'* *'tag'* *E433*
'tags' 'tag'		string	(default "./tags,tags", when compiled with
				|+emacs_tags|: "./tags,./TAGS,tags,TAGS")
			global or local to buffer |global-local|
	Filenames for the tag command, separated by spaces or commas.  To
	include a space or comma in a file name, precede it with a backslash
	(see |option-backslash| about including spaces and backslashes).
	When a file name starts with "./", the '.' is replaced with the path
	of the current file.  But only when the 'd' flag is not included in
	'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
	|tags-option|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tags'}
@anchor{'tag'}
@anchor{E433}
@cindex 'tags'
@cindex 'tag'
@cindex E433
@item 'tags' 'tag'
文字列 (既定では "./tags,tags", |+emacs_tags| 機能付きでコンパイルされたときの既定値: "./tags,./TAGS,tags,TAGS") @*
グローバル／バッファについてローカル |global-local|

タグを使うコマンドで必要とするタグファイルの名前の、空白またはコンマ区切りのリスト。ファイル名に空白やコンマを使うときは、'\' を前に置くこと (値に空白や '\' を含める方法については、|option-backslash| を参照)。

ファイル名が "./" で始まるときは、'.' はカレントファイルのパスに置き換えられる。ただしそれはオプション '@option{cpoptions}' にフラグ '@var{d}' が含まれていないときのみである。環境変数は展開される |:set_env|。|tags-option| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"*", "**" and other wildcards can be used to search for tags files in
	a directory tree.  See |file-searching|.  E.g., "/lib/**/tags" will
	find all files named "tags" below "/lib".  The filename itself cannot
	contain wildcards, it is used as-is.  E.g., "/lib/**/tags?" will find
	files called "tags?".  {not available when compiled without the
	|+path_extra| feature}
	The |tagfiles()| function can be used to get a list of the file names
	actually used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"*" や "**" などのワイルドカードを使い、ディレクトリツリーの下に向かってタグファイルを検索できる。|file-searching| を参照。例えば、"/lib/**/tags" なら "/lib" 以下の "tags" という名前がすべて検索される。ファイル名自体にはワイルドカードを含めることはできない (そのまま使われる)。例えば "/lib/**/tags?" なら "tags?" という名前のファイルが検索される。

@{Vim が |+path_extra| 機能付きでコンパイルされたときのみ有効@}

関数 |tagfiles()| を使うと実際に使われるファイル名のリストを取得することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If Vim was compiled with the |+emacs_tags| feature, Emacs-style tag
	files are also supported.  They are automatically recognized.  The
	default value becomes "./tags,./TAGS,tags,TAGS", unless case
	differences are ignored (MS-Windows).  |emacs-tags|
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	file names from the list.  This avoids problems when a future version
	uses another default.
	{Vi: default is "tags /usr/lib/tags"}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が |+emacs_tags| 機能付きでコンパイルされたときは、Emacs 形式のタグファイルも利用できる。形式は自動的に認識される。そのときの既定値は、大文字と小文字の区別がないシステム (MS-Windows) 以外では "./tags,./TAGS,tags,TAGS" となる。|emacs-tags|

リストにファイル名を追加するときにはコマンド |:set+=|、リストからファイル名を除くときにはコマンド |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。

@{Vi: 既定値は "tags /usr/lib/tags"@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'tagstack'* *'tgst'* *'notagstack'* *'notgst'*
'tagstack' 'tgst'	boolean	(default on)
			global
			{not in all versions of Vi}
	When on, the |tagstack| is used normally.  When off, a ":tag" or
	":tselect" command with an argument will not push the tag onto the
	tagstack.  A following ":tag" without an argument, a ":pop" command or
	any other command that uses the tagstack will use the unmodified
	tagstack, but does change the pointer to the active entry.
	Resetting this option is useful when using a ":tag" command in a
	mapping which should not change the tagstack.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tagstack'}
@anchor{'tgst'}
@anchor{'notagstack'}
@anchor{'notgst'}
@cindex 'tagstack'
@cindex 'tgst'
@cindex 'notagstack'
@cindex 'notgst'
@item 'tagstack' 'tgst'
切替 (既定ではオン) @*
グローバル @*
@{Vi のバージョンによってはこれがないものもある@}

オンのときは、タグスタック |tagstack| が通常通りに使われる。オフのときは、引数付きのコマンド ":tag" または ":tselect" は、タグをタグスタックにプッシュしない。その後に引数無しの ":tag" や、":pop" 等のタグスタックを使うコマンドを使うと、修正されていないタグスタックが使われるが、アクティブな項目へのポインタは変更される。

このオプションをオンにするのは、":tag" をマッピング内で使っていて、タグスタックを変更すべきでないときに便利である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'tcldll'*
'tcldll'		string	(default depends on the build)
			global
			{not in Vi}
			{only available when compiled with the |+tcl/dyn|
			feature}
	Specifies the name of the Tcl shared library. The default is
	DYNAMIC_TCL_DLL, which was specified at compile time.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tcldll'}
@cindex 'tcldll'
@item 'tcldll'
文字列 (既定値はビルドに依存) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+tcl/dyn| 機能付きでコンパイルされたときのみ有効@}

Tcl 共有ライブラリの名前を指定。既定値はコンパイル時に指定された DYNAMIC_TCL_DLL の値。環境変数は展開される |:set_env|。

このオプションはセキュリティの理由により |modeline| や |sandbox| からは設定できない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'term'* *E529* *E530* *E531*
'term'			string	(default is $TERM, if that fails:
				      in the GUI: "builtin_gui"
					on Amiga: "amiga"
					 on BeOS: "beos-ansi"
					  on Mac: "mac-ansi"
					 on MiNT: "vt52"
				       on MS-DOS: "pcterm"
					 on OS/2: "os2ansi"
					 on Unix: "ansi"
					  on VMS: "ansi"
				       on Win 32: "win32")
			global
	Name of the terminal.  Used for choosing the terminal control
	characters.  Environment variables are expanded |:set_env|.
	For example: >
		:set term=$TERM
<	See |termcap|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'term'}
@anchor{E529}
@anchor{E530}
@anchor{E531}
@cindex 'term'
@cindex E529
@cindex E530
@cindex E531
@item 'term'
文字列 (既定では $TERM、それが失敗したら
@multitable @columnfractions .5 .5
@item GUI版では: @tab "builtin_gui"
@item Amigaでは: @tab "amiga"
@item BeOSでは: @tab "beos-ansi"
@item Macでは: @tab "mac-ansi"
@item MiNTでは: @tab "vt52"
@item MS-DOSでは: @tab "pcterm"
@item OS/2では: @tab "os2ansi"
@item Unixでは: @tab "ansi"
@item VMSでは: @tab "ansi"
@item Win32では: @tab "win32")
@end multitable
グローバル

ターミナルの名前。ターミナル制御文字の選択に使われる。環境変数は展開される |:set_env|。

例:
@example
:set term=$TERM
@end example
|termcap| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'termbidi'* *'tbidi'*
						*'notermbidi'* *'notbidi'*
'termbidi' 'tbidi'	boolean (default off, on for "mlterm")
			global
			{not in Vi}
			{only available when compiled with the |+arabic|
			feature}
	The terminal is in charge of Bi-directionality of text (as specified
	by Unicode).  The terminal is also expected to do the required shaping
	that some languages (such as Arabic) require.
	Setting this option implies that 'rightleft' will not be set when
	'arabic' is set and the value of 'arabicshape' will be ignored.
	Note that setting 'termbidi' has the immediate effect that
	'arabicshape' is ignored, but 'rightleft' isn't changed automatically.
	This option is reset when the GUI is started.
	For further details see |arabic.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'termbidi'}
@anchor{'tbidi'}
@anchor{'notermbidi'}
@anchor{'notbidi'}
@cindex 'termbidi'
@cindex 'tbidi'
@cindex 'notermbidi'
@cindex 'notbidi'
@item 'termbidi' 'tbidi'
切替 (既定ではオフ、"mlterm" のときはオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+arabic| 機能付きでコンパイルされたときのみ有効@}

端末がテキストの双方向性 (Bi-directionality) (Unicode による定義) をサポートしていることを示す。端末はいくつかの言語 (例えばアラビア語) で必要とされている変形文字 (shaping) も処理することが期待される。

このオプションをオンなっている場合、'@option{arabic}' をオンに設定しても '@option{rightleft}' はオンにならず、そして '@option{arabicshape}' の値は無視される。
@quotation
@strong{Note:} @*
'@option{termbidi}' を設定するとすぐに '@option{arabicshape}' が無視されるようになるが、'@option{rightleft}' は自動的には変更されない。
@end quotation
このオプションは GUI を開始するとリセットされる。詳細は |arabic.txt| を参照のこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*'termencoding'* *'tenc'*
'termencoding' 'tenc'	string	(default ""; with GTK+ GUI: "utf-8"; with
						    Macintosh GUI: "macroman")
			global
			{only available when compiled with the |+multi_byte|
			feature}
			{not in Vi}
	Encoding used for the terminal.  This specifies what character
	encoding the keyboard produces and the display will understand.  For
	the GUI it only applies to the keyboard ('encoding' is used for the
	display).  Except for the Mac when 'macatsui' is off, then
	'termencoding' should be "macroman".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'termencoding'}
@anchor{'tenc'}
@cindex 'termencoding'
@cindex 'tenc'
@item 'termencoding' 'tenc'
文字列 (既定では ""; GTK+ GUI では "utf-8"; Macintosh GUI では "macroman") @*
グローバル @*
@{Vim が |+multi_byte| 機能付きでコンパイルされたときのみ有効@} @*
@{Vi にはない@}

ターミナルで使われるエンコーディング名。このオプションは、どの文字エンコーディングをキーボードが生成し、どの文字エンコーディングをディスプレイが理解できるかを指定する。GUI 版ではキーボードにのみ適用される (ディスプレイにはオプション '@option{encoding}' が使われる)。Mac で '@option{macatsui}' がオフになっているときは例外で、'@option{termencoding}' は "@var{macroman}" になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*E617*
	Note: This does not apply to the GTK+ GUI.  After the GUI has been
	successfully initialized, 'termencoding' is forcibly set to "utf-8".
	Any attempts to set a different value will be rejected, and an error
	message is shown.
	For the Win32 GUI and console versions 'termencoding' is not used,
	because the Win32 system always passes Unicode characters.
	When empty, the same encoding is used as for the 'encoding' option.
	This is the normal value.
	Not all combinations for 'termencoding' and 'encoding' are valid.  See
	|encoding-table|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E617}
@cindex E617
@quotation
@strong{Note:} @*
これは GTK+ GUI には適用されない。GUI の初期化に成功した後で強制的に '@option{termencoding}' が "@var{utf-8}" に設定される。これを他の値に設定しようとしても失敗し、エラーメッセージが表示される。

Win32 GUI とコンソールでは '@option{termencoding}' は使用されない。Win32 では常に Unicode 文字が渡されるからである。

空のときは、'@option{encoding}' で指定されたエンコーディングが使われる。これが通常の値である。'@option{termencoding}' と '@option{encoding}' の組み合わせが全て正しいわけではない。|encoding-table| を参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The value for this option must be supported by internal conversions or
	iconv().  When this is not possible no conversion will be done and you
	will probably experience problems with non-ASCII characters.
	Example: You are working with the locale set to euc-jp (Japanese) and
	want to edit a UTF-8 file: >
		:let &termencoding = &encoding
		:set encoding=utf-8
<	You need to do this when your system has no locale support for UTF-8.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションの値は、内部変換または関数 iconv() でサポートされていなければならない。iconv() が値を扱えないときは、変換はなされず、非 ASCII 文字で問題が生じるだろう。

例: ユーザーは euc-jp (日本語) に設定されたロケールで作業していて、UTF-8 のファイルを編集したいとする。
@example
:let &termencoding = &encoding
:set encoding=utf-8
@end example
ユーザーのシステムが UTF-8 のロケールをサポートしていないときは、ユーザーがこのように設定する必要がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'termguicolors'* *'tgc'*
'termguicolors' 'tgc'	boolean (default off)
			global
			{not in Vi}
			{not available when compiled without the
			|+termguicolors| feature}
	When on, uses |highlight-guifg| and |highlight-guibg| attributes in
	the terminal (thus using 24-bit color). Requires a ISO-8613-3
	compatible terminal.
	If setting this option does not work (produces a colorless UI)
	reading |xterm-true-color| might help.
	Note that the "cterm" attributes are still used, not the "gui" ones.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'termguicolors'}
@anchor{'tgc'}
@cindex 'termguicolors'
@cindex 'tgc'
@item 'termguicolors' 'tgc'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+termguicolors| 機能付きでコンパイルされたときのみ有効@}

オンのとき、|highlight-guifg| と |highlight-guibg| がターミナル内で使われる (24 ビットカラー)。ISO-8613-3 互換なターミナルが必要。

このオプションを設定しても機能しない (色が UI に付かない) 場合は、|xterm-true-color| を読むと助けになるかもしれない。
@quotation
@strong{Note:} @*
"cterm" の特徴はまだ使われているが、"gui" はそうではないことに注意。
@end quotation
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'termkey'* *'tk'*
'termkey' 'tk'		string	(default "")
			local to window
			{not in Vi}
	The key that starts a CTRL-W command in a terminal window.  Other keys
	are sent to the job running in the window.
	The <> notation can be used, e.g.: >
		:set termkey=<C-L>
<	The string must be one key stroke but can be multiple bytes.
	When not set CTRL-W is used, so that CTRL-W : gets you to the command
	line.  If 'termkey' is set to CTRL-L then CTRL-L : gets you to the
	command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'termkey'}
@anchor{'tk'}
@cindex 'termkey'
@cindex 'tk'
@item 'termkey' 'tk'
文字列 (既定では "") @*
ウィンドウについてローカル @*
@{Vi にはない@}

ターミナルウィンドウ内で CTRL-W で始まるキーはコマンドです。他のキーはウィンドウ内で動作しているジョブに送られる。

<> 表記法を使うことができる。例えば:
@example
:set termkey=<C-L>
@end example
この文字列は 1 つのキーストロークでなければならないが、マルチバイトでも良い。

何も設定されていない CTRL-W が使われると、@key{CTRL-W :} はコマンドライン入力になる。もしも '@option{termkey}' が CTRL-L に設定されているなら、@key{CTRL-L :} がコマンドライン入力になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'termsize'* *'tms'*
'termsize' 'tms'	string	(default "")
			local to window
			{not in Vi}
	Size of the |terminal| window.  Format: {rows}x{columns}.
	- When empty the terminal gets the size from the window.
	- When set (e.g., "24x80") the terminal size is not adjusted to the
	  window size.  If the window is smaller only the top-left part is
	  displayed.
	  When rows is zero then use the height of the window.
	  When columns is zero then use the width of the window.
	  For example: "30x0" uses 30 rows with the current window width.
	  Using "0x0" is the same as empty.
	Note that the command running in the terminal window may still change
	the size of the terminal.  In that case the Vim window will be
	adjusted to that size, if possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'termsize'}
@anchor{'tms'}
@cindex 'termsize'
@cindex 'tms'
@item 'termsize' 'tms'
文字列 (既定では "") @*
ウィンドウについてローカル @*
@{Vi にはない@}

|terminal| ウィンドウのサイズ。書式: @{rows@} x @{columns@}.
@itemize @minus
@item 空の場合、ターミナルはウィンドウからサイズを取得する。
@item 設定されている場合 (例えば "24x80")、ターミナルのサイズはウィンドウサイズに調節されない。もしもウィンドウが上と左の部分のみ小さいのなら表示されない。

行がゼロなら、ウィンドウの高さを使う。列がゼロなら、ウィンドウの幅を使う。例えば、"30x0" の場合、カレントウィンドウの幅として 30 行を使う。"0x0" の場合、空の場合と同じになる。
@end itemize
@quotation
@strong{Note:} @*
ターミナルウィンドウ中で動作しているコマンドはターミナルのサイズを黙って変更するかもしれない。この場合、Vim のウィンドウは可能ならばそのサイズに調節されることに注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'terse'* *'noterse'*
'terse'			boolean	(default off)
			global
	When set: Add 's' flag to 'shortmess' option (this makes the message
	for a search that hits the start or end of the file not being
	displayed).  When reset: Remove 's' flag from 'shortmess' option.  {Vi
	shortens a lot of messages}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'terse'}
@anchor{'noterse'}
@cindex 'terse'
@cindex 'noterse'
@item 'terse'
切替 (既定ではオフ) @*
グローバル

オンのときは、オプション '@option{shortmess}' にフラグ '@var{s}' を追加する (こうするとファイルの端まで検索してしまったときのメッセージが表示されなくなる)。オフのときは、オプション '@option{shortmess}' からフラグ '@var{s}' を取り除く。

@{Vi では多くのメッセージを切り詰める@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'textauto'* *'ta'* *'notextauto'* *'nota'*
'textauto' 'ta'		boolean	(Vim default: on, Vi default: off)
			global
			{not in Vi}
	This option is obsolete.  Use 'fileformats'.
	For backwards compatibility, when 'textauto' is set, 'fileformats' is
	set to the default value for the current system.  When 'textauto' is
	reset, 'fileformats' is made empty.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'textauto'}
@anchor{'ta'}
@anchor{'notextauto'}
@anchor{'nota'}
@cindex 'textauto'
@cindex 'ta'
@cindex 'notextauto'
@cindex 'nota'
@item 'textauto' 'ta'
切替 (Vim の既定値: オン、Vi の既定値: オフ) @*
グローバル @*
@{Vi にはない@}

このオプションは時代遅れである。オプション '@option{fileformats}' を使うこと。後方互換性のため、'@option{textauto}' がオンのときは、'@option{fileformats}' はシステムの既定値に設定される。'@option{textauto}' がオフになったときは、'@option{fileformats}' は空になる。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'textmode'* *'tx'* *'notextmode'* *'notx'*
'textmode' 'tx'		boolean	(MS-DOS, Win32 and OS/2: default on,
				 others: default off)
			local to buffer
			{not in Vi}
	This option is obsolete.  Use 'fileformat'.
	For backwards compatibility, when 'textmode' is set, 'fileformat' is
	set to "dos".  When 'textmode' is reset, 'fileformat' is set to
	"unix".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'textmode'}
@anchor{'tx'}
@anchor{'notextmode'}
@anchor{'notx'}
@cindex 'textmode'
@cindex 'tx'
@cindex 'notextmode'
@cindex 'notx'
@item 'textmode' 'tx'
切替 (MS-DOS, Win32 と OS/2 では: 既定ではオン、他のシステムでは: 既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@}

このオプションは時代遅れである。オプション '@option{fileformat}' を使うこと。後方互換性のため、'@option{textmode}' がオンのときは、'@option{fileformats}' は "@var{dos}" になる。'@option{textmode}' がオフのときは、'@option{fileformats}' は "@var{unix}" になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'textwidth'* *'tw'*
'textwidth' 'tw'	number	(default 0)
			local to buffer
			{not in Vi}
	Maximum width of text that is being inserted.  A longer line will be
	broken after white space to get this width.  A zero value disables
	this.
	'textwidth' is set to 0 when the 'paste' option is set and restored
	when 'paste' is reset.
	When 'textwidth' is zero, 'wrapmargin' may be used.  See also
	'formatoptions' and |ins-textwidth|.
	When 'formatexpr' is set it will be used to break the line.
	NOTE: This option is set to 0 when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'textwidth'}
@anchor{'tw'}
@cindex 'textwidth'
@cindex 'tw'
@item 'textwidth' 'tw'
数値 (既定では 0) @*
バッファについてローカル @*
@{Vi にはない@}

入力されているテキストの最大幅。行がそれより長くなると、この幅を超えないように空白の後で改行される。値を 0 に設定すると無効になる。

'@option{textwidth}' は、'@option{paste}' オプションがオンになった時には 0 が設定され、'@option{paste}' オプションがリセットされた際には復元される。

オプション '@option{textwidth'} が 0 のときは、'@option{wrapmargin}' が使われる場合がある。'@option{formatoptions}' と |ins-textwidth| を参照。

'@option{formatexpr}' が設定されている場合、その値を使って改行される。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると 0 になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'thesaurus'* *'tsr'*
'thesaurus' 'tsr'	string	(default "")
			global or local to buffer |global-local|
			{not in Vi}
	List of file names, separated by commas, that are used to lookup words
	for thesaurus completion commands |i_CTRL-X_CTRL-T|.  Each line in
	the file should contain words with similar meaning, separated by
	non-keyword characters (white space is preferred).  Maximum line
	length is 510 bytes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'thesaurus'}
@anchor{'tsr'}
@cindex 'thesaurus'
@cindex 'tsr'
@item 'thesaurus' 'tsr'
文字列 (既定では "") @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

同義語補完コマンド |i_CTRL-X_CTRL-T| で単語の検索に使われるファイルの名前の、コンマ区切りのリスト。そのファイルの各行には、似た意味の単語をキーワードを構成しない文字で (空白がよい) 区切ったものが並ぶ。行長の最大値は 510 バイトである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	To obtain a file to be used here, check out this ftp site:
	[Sorry this link doesn't work anymore, do you know the right one?] 
	ftp://ftp.ox.ac.uk/pub/wordlists/  First get the README file.
	To include a comma in a file name precede it with a backslash.  Spaces
	after a comma are ignored, otherwise spaces are included in the file
	name.  See |option-backslash| about using backslashes.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.
	Backticks cannot be used in this option for security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これに使われるファイルを得るには、この ftp サイトを調べる: [残念ながらこのリンクはもう機能していない。正しいリンクをご存じないだろうか？] ftp://ftp.ox.ac.uk/pub/wordlists/ 最初に README ファイルを読むこと。

ファイル名にコンマを含めるときは、その前に '\' を置くこと。コンマの後の空白は無視されるが、それ以外では空白はそのままファイル名に含まれる。値に空白や '\' を含める方法については、|option-backslash| を参照。

リストにディレクトリを追加するときには |:set+=|、リストからディレクトリを除くときには |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。

安全上の問題のため、このオプションにバッククォート '`' は使えない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			     *'tildeop'* *'top'* *'notildeop'* *'notop'*
'tildeop' 'top'		boolean	(default off)
			global
			{not in Vi}
	When on: The tilde command "~" behaves like an operator.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'tildeop'}
@anchor{'top'}
@anchor{'notildeop'}
@anchor{'notop'}
@cindex 'tildeop'
@cindex 'top'
@cindex 'notildeop'
@cindex 'notop'
@item 'tildeop' 'top'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

オンのとき、チルダコマンド "~" が operator のように使用できる。@{訳注: 普通チルダは、打ち込まれた時点でカーソル下のアルファベットの大文字／小文字を変換するが、このオプションがオンのときは、"d" 等のように範囲を指定されるまで変換しない。このオプションがオフでも、"g~@{motion@}" なら範囲を指定できる。|case| を参照@}
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'timeout'* *'to'* *'notimeout'* *'noto'*
'timeout' 'to'		boolean (default on)
			global
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'timeout'}
@anchor{'to'}
@anchor{'notimeout'}
@anchor{'noto'}
@cindex 'timeout'
@cindex 'to'
@cindex 'notimeout'
@cindex 'noto'
@item 'timeout' 'to'
切替 (既定ではオン) @*
グローバル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'ttimeout'* *'nottimeout'*
'ttimeout'		boolean (default off, set in |defaults.vim|)
			global
			{not in Vi}
	These two options together determine the behavior when part of a
	mapped key sequence or keyboard code has been received:

	'timeout'    'ttimeout'		action	~
	   off		off		do not time out
	   on		on or off	time out on :mappings and key codes
	   off		on		time out on key codes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttimeout'}
@anchor{'nottimeout'}
@cindex 'ttimeout'
@cindex 'nottimeout'
@item 'ttimeout'
切替 (既定ではオフ、|defaults.vim| 内でオンに設定される) @*
グローバル @*
@{Vi にはない@}

これら 2 個のオプションは共に、Vim がマッピングされたキー列やキーコードの一部を受け取ったときの動作を決定する。
@multitable @columnfractions .2 .2 .6
@item 'timeout' @tab 'ttimeout' @tab 動作
@item オフ @tab オフ @tab タイムアウト (時間切れ) を設けない
@item オン @tab オンまたはオフ @tab マッピングとキーコードにタイムアウトあり
@item オフ @tab オン @tab キーコードにタイムアウトあり
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If both options are off, Vim will wait until either the complete
	mapping or key sequence has been received, or it is clear that there
	is no mapping or key sequence for the received characters.  For
	example: if you have mapped "vl" and Vim has received 'v', the next
	character is needed to see if the 'v' is followed by an 'l'.
	When one of the options is on, Vim will wait for about 1 second for
	the next character to arrive.  After that the already received
	characters are interpreted as single characters.  The waiting time can
	be changed with the 'timeoutlen' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
両方オフのときは、完全なマッピングやキー列を受け取るか、受け取った文字列に対応するマッピングやキー列はないと明らかになるまで、Vim は待つ。例えば "vl" をマッピングして 'v' を入力したとき、'v' の次に 'l' が来るかどうか判断するには次の文字が入力されることが必要である。

どちらかがオンのとき、Vim は次の文字が入力されるまで約1秒待つ。その後入力された文字をそれぞれ単一の文字として解釈する。待ち時間はオプション '@option{timeoutlen}' で設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	On slow terminals or very busy systems timing out may cause
	malfunctioning cursor keys.  If both options are off, Vim waits
	forever after an entered <Esc> if there are key codes that start
	with <Esc>.  You will have to type <Esc> twice.  If you do not have
	problems with key codes, but would like to have :mapped key
	sequences not timing out in 1 second, set the 'ttimeout' option and
	reset the 'timeout' option.

	NOTE: 'ttimeout' is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
遅いターミナルや非常にビジーなシステムでは、時間切れを設けるとカーソルキーの動作がおかしくなることがある。両方オフのときは、<Esc> で始まるキーコードがあると Vim は @key{<Esc>} が入力された後ずっと待ち状態になる。ユーザーは @key{<Esc>} を 2 回打ち込まなければならない。キーコードに問題はないが、マッピングされたキー列を 1 秒でタイムアウトにされたくなければ、'@option{ttimeout}' をオン、'@option{timeout}' をオフにすること。
@quotation
@strong{Note:} @*
'@option{ttimeout}' は、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'timeoutlen'* *'tm'*
'timeoutlen' 'tm'	number	(default 1000)
			global
			{not in all versions of Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'timeoutlen'}
@anchor{'tm'}
@cindex 'timeoutlen'
@cindex 'tm'
@item 'timeoutlen' 'tm'
数値 (既定では 1000) @*
グローバル @*
@{Vi のバージョンによってはないものもある@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'ttimeoutlen'* *'ttm'*
'ttimeoutlen' 'ttm'	number	(default -1, set to 100 in |defaults.vim|)
			global
			{not in Vi}
	The time in milliseconds that is waited for a key code or mapped key
	sequence to complete.  Also used for CTRL-\ CTRL-N and CTRL-\ CTRL-G
	when part of a command has been typed.
	Normally only 'timeoutlen' is used and 'ttimeoutlen' is -1.  When a
	different timeout value for key codes is desired set 'ttimeoutlen' to
	a non-negative number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttimeoutlen'}
@anchor{'ttm'}
@cindex 'ttimeoutlen'
@cindex 'ttm'
@item 'ttimeoutlen' 'ttm'
数値 (既定では -1、|defaults.vim| 内で 100 に設定される) @*
グローバル @*
@{Vi にはない@}

キーコードやマッピングされたキー列が完了するのを待つ時間 (ミリ秒単位)。すでにコマンドの一部がタイプされているとき、@kbd{CTRL-\} @kbd{CTRL-N} と @kbd{CTRL-\} @kbd{CTRL-G} にも適用される。

普通、オプション '@option{timeoutlen}' のみが使われ、'@option{ttimeoutlen}' は -1 に設定される。キーコードに対して異なった待ち時間を設定したいときは、'@option{ttimeoutlen}' を非負の値に設定すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		ttimeoutlen	mapping delay	   key code delay	~
		   < 0		'timeoutlen'	   'timeoutlen'
		  >= 0		'timeoutlen'	   'ttimeoutlen'

	The timeout only happens when the 'timeout' and 'ttimeout' options
	tell so.  A useful setting would be >
		:set timeout timeoutlen=3000 ttimeoutlen=100
<	(time out on mapping after three seconds, time out on key codes after
	a tenth of a second).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .33 .33 .33
@item ttimeoutlen @tab マッピング待ち @tab キーコード待ち
@item 負 @tab '@option{timeoutlen}' @tab '@option{timeoutlen}'
@item 0以上 @tab '@option{timeoutlen}' @tab '@option{ttimeoutlen}'
@end multitable
タイムアウト (時間切れ) になるのは、'@option{timeout}' と '@option{ttimeout}' でそう設定されているときのみである。便利な設定は次の通り。
@example
:set timeout timeoutlen=3000 ttimeoutlen=100
@end example
(マッピングは 3 秒、キーコードは 0.1 秒で時間切れ)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'title'* *'notitle'*
'title'			boolean	(default off, on when title can be restored)
			global
			{not in Vi}
			{not available when compiled without the |+title|
			feature}
	When on, the title of the window will be set to the value of
	'titlestring' (if it is not empty), or to:
		filename [+=-] (path) - VIM
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'title'}
@anchor{'notitle'}
@cindex 'title'
@cindex 'notitle'
@item 'title'
切替 (既定ではオフ、タイトルが復元できるときにはオン) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}

オンのとき、ウィンドウのタイトルがオプション '@option{titlestring}' の値 (空でなければ) になる。空の場合は次のようになる。
@verbatim
filename [+=-] (path) - VIM
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Where:
		filename	the name of the file being edited
		-		indicates the file cannot be modified, 'ma' off
		+		indicates the file was modified
		=		indicates the file is read-only
		=+		indicates the file is read-only and modified
		(path)		is the path of the file being edited
		- VIM		the server name |v:servername| or "VIM"
	Only works if the terminal supports setting window titles
	(currently Amiga console, Win32 console, all GUI versions and
	terminals with a non- empty 't_ts' option - these are Unix xterm and
	iris-ansi by default, where 't_ts' is taken from the builtin termcap).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここでの意味は以下の通り:
@multitable @columnfractions .1 .9
@item filename @tab 編集されているファイルの名前
@item - @tab ファイルが変更できない、つまり '@option{ma}' がオフであることを表す
@item + @tab ファイルが変更を受けたことを表す
@item = @tab ファイルが読み込み専用であることを表す
@item =+ @tab ファイルが読み込み専用であるが変更を受けたことを表す
@item (path) @tab 編集されているファイルのパス
@item - VIM @tab サーバー名、変数 |v:servername| の値または "VIM"
@end multitable
ターミナルがウィンドウタイトルを設定できるもののときのみ有効である (現在のところ Amiga と Win32 のコンソール版、全ての GUI 版と 't_IS' が空でないターミナルのみ --- これらは既定では Unix xterm と iris-ansi であり、このときターミナルオプション 't_IS' は組み込み termcap から取られる)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*X11*
	When Vim was compiled with HAVE_X11 defined, the original title will
	be restored if possible.  The output of ":version" will include "+X11"
	when HAVE_X11 was defined, otherwise it will be "-X11".  This also
	works for the icon name |'icon'|.
	But: When Vim was started with the |-X| argument, restoring the title
	will not work (except in the GUI).
	If the title cannot be restored, it is set to the value of 'titleold'.
	You might want to restore the title outside of Vim then.
	When using an xterm from a remote machine you can use this command:
	    rsh machine_name xterm -display $DISPLAY &
	then the WINDOWID environment variable should be inherited and the
	title of the window should change back to what it should be after
	exiting Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{X11}
@cindex X11
Vim が HAVE_X11 が定義された状態でコンパイルされた場合は、可能ならば元のタイトルが復元される。HAVE_X11 が定義されていたら、コマンド "@command{:version}" の出力には "+X11" が含まれ、定義されていなかったら "-X11" が含まれる。これはアイコン名 'icon' にも働く。

しかし Vim が引数 |-X| 付きで起動した場合は、タイトルは復元されない (GUI 版を除く)。タイトルを復元できないときは、'@option{titleold}' がタイトルになる。その場合は Vim の外でタイトルを復元したいと思うかもしれない。ネットワーク越しに xterm を使っているときは、次のコマンドが使える。
@example
rsh マシン名 xterm -display $DISPLAY &
@end example
すると環境変数 $WINDOWID の値が受け継がれ、ウィンドウのタイトルは、Vim の終了後に戻るべき状態に戻る。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*'titlelen'*
'titlelen'		number	(default 85)
			global
			{not in Vi}
			{not available when compiled without the |+title|
			feature}
	Gives the percentage of 'columns' to use for the length of the window
	title.  When the title is longer, only the end of the path name is
	shown.  A '<' character before the path name is used to indicate this.
	Using a percentage makes this adapt to the width of the window.  But
	it won't work perfectly, because the actual number of characters
	available also depends on the font used and other things in the title
	bar.  When 'titlelen' is zero the full path is used.  Otherwise,
	values from 1 to 30000 percent can be used.
	'titlelen' is also used for the 'titlestring' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'titlelen'}
@cindex 'titlelen'
@item 'titlelen'
数値 (既定では 85) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}

ウィンドウタイトルが占める列の割合 (パーセント単位)。タイトルがこれより長かったときは、パス名の後ろの部分のみが表示される。この切り詰めを示すためには、パス名の前に文字 '<' が表示される。

割合で指定しているため、タイトルが占める長さはウィンドウの幅に従って調整できる。しかし完全にその通りになる訳ではない。それは実際に利用できる文字数は、使われているフォントやタイトルバー内の他のものによっても変わるからだ。値が 0 のときは、フルパスが使われる。フルパスを使わないときは 1 以上 30000 以下の数を指定する。

このオプションはオプション '@option{titlestring}' にも使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'titleold'*
'titleold'		string	(default "Thanks for flying Vim")
			global
			{not in Vi}
			{only available when compiled with the |+title|
			feature}
	This option will be used for the window title when exiting Vim if the
	original title cannot be restored.  Only happens if 'title' is on or
	'titlestring' is not empty.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'titleold'}
@cindex 'titleold'
@item 'titleold'
文字列 (既定では "Vim を使ってくれてありがとう") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}

このオプションの値は、Vim の終了時に元のウィンドウタイトルが復元できない場合のタイトルに使われる。オプション '@option{title}' がオンであるか '@option{titlestring}' が空でないときのみ有効である。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'titlestring'*
'titlestring'		string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+title|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'titlestring'}
@cindex 'titlestring'
@item 'titlestring'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+title| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When this option is not empty, it will be used for the title of the
	window.  This happens only when the 'title' option is on.
	Only works if the terminal supports setting window titles (currently
	Amiga console, Win32 console, all GUI versions and terminals with a
	non-empty 't_ts' option).
	When Vim was compiled with HAVE_X11 defined, the original title will
	be restored if possible, see |X11|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

空でないとき、ウィンドウタイトルに使われる。オプション '@option{title}' がオンのときのみ有効である。

ターミナルがウィンドウタイトルを設定できるもののときのみ有効である (現在のところ Amiga と Win32 のコンソール版、全ての GUI 版とターミナルオプション 't_IS' が空でないターミナルのみ)。

Vim が HAVE_X11 が定義された状態でコンパイルされた場合は、可能ならば元のタイトルが復元される |X11|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When this option contains printf-style '%' items, they will be
	expanded according to the rules used for 'statusline'.
	Example: >
    :auto BufEnter * let &titlestring = hostname() . "/" . expand("%:p")
    :set title titlestring=%<%F%=%l/%L-%P titlelen=70
<	The value of 'titlelen' is used to align items in the middle or right
	of the available space.
	Some people prefer to have the file name first: >
    :set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
<	Note the use of "%{ }" and an expression to get the path of the file,
	without the file name.  The "%( %)" constructs are used to add a
	separating space only when needed.
	NOTE: Use of special characters in 'titlestring' may cause the display
	to be garbled (e.g., when it contains a CR or NL character).
	{not available when compiled without the |+statusline| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値に関数 printf 形式の '%' による書式指定が含まれているときは、'@option{statusline}' と同じ方法で展開される。例:
@example
:auto BufEnter * let &titlestring = hostname() . "/" . expand("%:p")
:set title titlestring=%<%F%=%l/%L-%P titlelen=70
@end example
'@option{titlelen}' の値は、利用できる場所の中で項目を中央や右にそろえるために使われる。ファイル名を最初に表示したい人は、こう設定する。
@example
:set titlestring=%t%(\ %M%)%(\ (%@{expand(\"%:~:.:h\")@})%)%(\ %a%)
@end example
@quotation
@strong{Note:} @*
(ファイル名を除いた) パスを得るため、"%@{ @}" と expression を使っていることに注意。"%( %)" は、区切りの空白を必要なときだけ加えるために使われている。
@end quotation
@quotation
@strong{Note:} @*
'@option{titlestring}' に特殊な文字 (例えば文字 <CR> や文字 <NL>) を使うと、表示がおかしくなることがあるので注意。

@{Vim が |+statusline| 機能付きでコンパイルされたときのみ有効@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'toolbar'* *'tb'*
'toolbar' 'tb'		string	(default "icons,tooltips")
			global
			{only for |+GUI_GTK|, |+GUI_Athena|, |+GUI_Motif| and
			|+GUI_Photon|}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'toolbar'}
@anchor{'tb'}
@cindex 'toolbar'
@cindex 'tb'
@item 'toolbar' 'tb'
文字列 (既定では "icons,tooltips") @*
グローバル @*
@{Vim の |+GUI_GTK| 版, |+GUI_Athena| 版, |+GUI_Motif| 版, |+GUI_Photon| 版のみ@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The contents of this option controls various toolbar settings.  The
	possible values are:
		icons		Toolbar buttons are shown with icons.
		text		Toolbar buttons shown with text.
		horiz		Icon and text of a toolbar button are
				horizontally arranged.  {only in GTK+ 2 GUI}
		tooltips	Tooltips are active for toolbar buttons.
	Tooltips refer to the popup help text which appears after the mouse
	cursor is placed over a toolbar button for a brief moment.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ツールバーの様々な設定を行う。指定可能な値は以下の通り:
@multitable @columnfractions .2 .8
@item icons @tab ツールバーのボタンにアイコンが表示される。
@item text @tab ツールバーのボタンに名前が表示される。
@item horiz @tab ツールバーのボタンのアイコンとテキストが水平に配置される。@{GTK+ 2 GUI でのみ利用可能@}
@item tooltips @tab ツールバーのボタンでツールチップが表示される。ツールチップとは、マウスカーソルがツールバーのボタン上にしばらく置かれたときに飛び出す、ヘルプテキストのことである。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If you want the toolbar to be shown with icons as well as text, do the
	following: >
		:set tb=icons,text
<	Motif and Athena cannot display icons and text at the same time.  They
	will show icons if both are requested.

	If none of the strings specified in 'toolbar' are valid or if
	'toolbar' is empty, this option is ignored.  If you want to disable
	the toolbar, you need to set the 'guioptions' option.  For example: >
		:set guioptions-=T
<	Also see |gui-toolbar|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールバーにアイコンと名前を両方表示したいときは、このように設定する。
@example
:set tb=icons,text
@end example
Motif と Athena では両方同時には表示できない。両方求められると、アイコンだけが表示される。

オプション '@option{toolbar}' が空であるか、適切な値が 1 つもないときは、このオプションは無視される。ツールバーを無効にしたいときは、'@option{guioptions}' を設定する必要がある。例:
@example
:set guioptions-=T
@end example
|gui-toolbar| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'toolbariconsize'* *'tbis'*
'toolbariconsize' 'tbis'	string	(default "small")
				global
				{not in Vi}
				{only in the GTK+ GUI}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'toolbariconsize'}
@anchor{'tbis'}
@cindex 'toolbariconsize'
@cindex 'tbis'
@item 'toolbariconsize' 'tbis'
文字列 (既定では "small") @*
グローバル @*
@{Vi にはない@} @*
@{GTK+ GUI 版でのみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Controls the size of toolbar icons.  The possible values are:
		tiny		Use tiny icons.
		small		Use small icons (default).
		medium		Use medium-sized icons.
		large		Use large icons.
		huge		Use even larger icons.
		giant		Use very big icons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ツールバーのアイコンのサイズを制御する。設定可能な値は次の通り:
@multitable @columnfractions .2 .8
@item tiny @tab 最も小さいアイコンを使用する。
@item small @tab 小さいアイコンを使用する(既定値)。
@item medium @tab 中程度のアイコンを使用する。
@item large @tab 大きいアイコンを使用する。
@item huge @tab さらに大きいアイコンを使用する。
@item giant @tab 非常に大きいアイコンを使用する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The exact dimensions in pixels of the various icon sizes depend on
	the current theme.  Common dimensions are giant=48x48, huge=32x32,
	large=24x24, medium=24x24, small=20x20 and tiny=16x16.

	If 'toolbariconsize' is empty, the global default size as determined
	by user preferences or the current theme is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
各種アイコンサイズのピクセル単位での正確な大きさは、使用しているテーマに依存する。共通の大きさは giant=48x48, huge=32x32, large=24x24, medium=24x24, small=20x20, tiny=16x16 である。

'@option{toolbariconsize}' が空のときは、ユーザーの設定または現在使用しているテーマによって決定されるグローバルなデフォルトサイズが使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			     *'ttybuiltin'* *'tbi'* *'nottybuiltin'* *'notbi'*
'ttybuiltin' 'tbi'	boolean	(default on)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttybuiltin'}
@anchor{'tbi'}
@anchor{'nottybuiltin'}
@anchor{'notbi'}
@cindex 'ttybuiltin'
@cindex 'tbi'
@cindex 'nottybuiltin'
@cindex 'notbi'
@item 'ttybuiltin' 'tbi'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When on, the builtin termcaps are searched before the external ones.
	When off the builtin termcaps are searched after the external ones.
	When this option is changed, you should set the 'term' option next for
	the change to take effect, for example: >
		:set notbi term=$TERM
<	See also |termcap|.
	Rationale: The default for this option is "on", because the builtin
	termcap entries are generally better (many systems contain faulty
	xterm entries...).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

オンのときは、外部の termcap の前に組み込みの termcap を探す。オフのときは、外部の termcap の後に組み込みの termcap を探す。

このオプションが変更されたときは、変更を有効にするため、次にオプション '@option{term}' を設定する必要がある。例:
@example
:set notbi term=$TERM
@end example
|termcap| も参照。

関連情報: このオプションは既定ではオンである。それは普通、組み込み termcap のエントリの方が良いものだからだ (多くのシステムでおかしな xterm エントリが含まれている...)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				     *'ttyfast'* *'tf'* *'nottyfast'* *'notf'*
'ttyfast' 'tf'		boolean	(default off, on when 'term' is xterm, hpterm,
					sun-cmd, screen, rxvt, dtterm or
					iris-ansi; also on when running Vim in
					a DOS console)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttyfast'}
@anchor{'tf'}
@anchor{'nottyfast'}
@anchor{'notf'}
@cindex 'ttyfast'
@cindex 'tf'
@cindex 'nottyfast'
@cindex 'notf'
@item 'ttyfast' 'tf'
切替 (既定ではオフ、'@option{term}' が xterm, hpterm, sun-cmd, screen, rxvt, dtterm, iris-ansi のときはオン、DOS のコンソール版でもオン) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Indicates a fast terminal connection.  More characters will be sent to
	the screen for redrawing, instead of using insert/delete line
	commands.  Improves smoothness of redrawing when there are multiple
	windows and the terminal does not support a scrolling region.
	Also enables the extra writing of characters at the end of each screen
	line for lines that wrap.  This helps when using copy/paste with the
	mouse in an xterm and other terminals.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

高速ターミナル接続を行う。再描画のとき、行挿入／削除コマンドを使う代わりに、より多くの文字が画面に送られる。複数のウィンドウが開かれており、なおかつターミナルが部分スクロールをサポートしていないとき、再描画が滑らかになる。

また折り返された行のそれぞれの行末で、文字の extra writing @{訳注: 端末に行の折り返しを認識させ、複数行にまたがった文字列をコピーする際、余分な改行が含まれてしまうことを防ぐテクニック@} を有効にする。これは xterm 等のターミナルで、マウスを使ってコピーやペーストをするときに役立つ。

@{訳注: "tty" とは、昔のコンピュータに使われていたテレタイプ (TeleTYpe) 端末 (コンソールみたいなもの) から来た言葉である@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'ttymouse'* *'ttym'*
'ttymouse' 'ttym'	string	(default depends on 'term')
			global
			{not in Vi}
			{only in Unix and VMS, doesn't work in the GUI; not
			available when compiled without |+mouse|}
	Name of the terminal type for which mouse codes are to be recognized.
	Currently these strings are valid:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttymouse'}
@anchor{'ttym'}
@cindex 'ttymouse'
@cindex 'ttym'
@item 'ttymouse' 'ttym'
文字列 (既定値は '@option{term}' によって異なる) @*
グローバル @*
@{Vi にはない@} @*
@{Vim の Unix 版と VMS 版でのみ使用可能で、GUI 版では無効。Vim が |+mouse| 機能付きでコンパイルされたときのみ有効@}

マウスコードが、このオプションで指定したターミナル名に従って認識される。現在のところ、以下のターミナル名を設定できる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*xterm-mouse*
	   xterm	xterm-like mouse handling.  The mouse generates
			"<Esc>[Mscr", where "scr" is three bytes:
				"s"  = button state
				"c"  = column plus 33
				"r"  = row plus 33
			This only works up to 223 columns!  See "dec",
			"urxvt", and "sgr" for solutions.
	   xterm2	Works like "xterm", but with the xterm reporting the
			mouse position while the mouse is dragged.  This works
			much faster and more precise.  Your xterm must at
			least at patchlevel 88 / XFree 3.3.3 for this to
			work.  See below for how Vim detects this
			automatically.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{xterm-mouse}
@cindex xterm-mouse
@table @asis
@item xterm
xterm 風にマウスを扱う。マウスが生成するコードは "<Esc>[Mscr" である。ここで "scr" は次のような 3 バイトのコードである:
@multitable @columnfractions .1 .9
@item "s" = @tab ボタンの状態
@item "c" = @tab 桁数足す 33
@item "r" = @tab 行数足す 33
@end multitable
これは 223 桁までしか機能しないことに注意。解決策については "dec"、"urxvt"、"sgr" を参照。

@item xterm2
"xterm" と動作が似ているが、ドラッグ中もマウス位置を返すような xterm に対して働く。こちらの方がずっと動作が速く、正確である。これを使うには、ユーザーの xterm が最低でもパッチレベルが 88 で XFree 3.3.3 に対応していなければならない。Vim がこれを自動認識する方法については、以下を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*netterm-mouse*
	   netterm	NetTerm mouse handling.  The mouse generates
			"<Esc>}r,c<CR>", where "r,c" are two decimal numbers
			for the row and column.
							*dec-mouse*
	   dec		DEC terminal mouse handling.  The mouse generates a
			rather complex sequence, starting with "<Esc>[".
			This is also available for an Xterm, if it was
			configured with "--enable-dec-locator".
							*jsbterm-mouse*
	   jsbterm	JSB term mouse handling.
							*pterm-mouse*
	   pterm	QNX pterm mouse handling.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{netterm-mouse}
@cindex netterm-mouse
@item netterm
NetTerm 風にマウスを扱う。マウスが生成するコードは "<Esc>@}r,c<CR>" である。ここで "r,c" は、それぞれ行数と列数を表す 10 進数である。
@anchor{dec-mouse}
@cindex dec-mouse
@item dec
DEC terminal 風にマウスを扱う。マウスが生成するのは、"<Esc>[" で始まるかなり複雑なコードである。Xtermが "--enable-dec-locator" つきで configure されているならば、Xterm でもこれを利用できる。
@anchor{jsbterm-mouse}
@cindex jsbterm-mouse
@item jsbterm
JSB term 風にマウスを扱う。
@anchor{pterm-mouse}
@cindex pterm-mouse
@item pterm
QNX pterm 風にマウスを扱う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*urxvt-mouse*
	   urxvt	Mouse handling for the urxvt (rxvt-unicode) terminal.
			The mouse works only if the terminal supports this
			encoding style, but it does not have 223 columns limit
			unlike "xterm" or "xterm2".
							*sgr-mouse*
	   sgr		Mouse handling for the terminal that emits SGR-styled
			mouse reporting.  The mouse works even in columns
			beyond 223.  This option is backward compatible with
			"xterm2" because it can also decode "xterm2" style
			mouse codes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{urxvt-mouse}
@cindex urxvt-mouse
@item urxvt
urxvt (rxvt-unicode) 風にマウスを扱う。	端末がこのエンコードスタイルをサポートしているときのみ機能する。"xterm" や "xterm2" のような 223 列の制限はない。
@anchor{sgr-mouse}
@cindex sgr-mouse
@item sgr
SGR スタイルのマウスレポートを発行するターミナル用にマウスを扱う。xterm のバージョン 277 かそれ以降で動作する。マウスは 223 列を超えても機能する。このオプションは "xterm2" と後方互換性がある。このスタイルでは "xterm2" スタイルのマウスコードもデコードできる。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The mouse handling must be enabled at compile time |+mouse_xterm|
	|+mouse_dec| |+mouse_netterm| |+mouse_jsbterm| |+mouse_urxvt|
	|+mouse_sgr|.
	Only "xterm"(2) is really recognized.  NetTerm mouse codes are always
	recognized, if enabled at compile time.  DEC terminal mouse codes
	are recognized if enabled at compile time, and 'ttymouse' is not
	"xterm", "xterm2", "urxvt" or "sgr" (because dec mouse codes conflict
	with them).
	This option is automatically set to "xterm", when the 'term' option is
	set to a name that starts with "xterm", "mlterm", "screen", "tmux",
	"st" (full match only), "st-" or "stterm", and 'ttymouse' is not set
	already.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスを使用するには、コンパイル時に |+mouse_xterm| |+mouse_dec| |+mouse_netterm| |+mouse_jsbterm| |+mouse_urxvt| |+mouse_sgr| 等のどれかの機能を有効にしておかなければならない。

本当に認識されるのは "xterm(2)" のみである。NetTerm のマウスコードは、コンパイル時に有効にされていれば必ず認識される。DEC terminal のマウスコードは、コンパイル時に有効にされ、かつオプション '@option{ttymouse}' が "@var{xterm}", "@var{xterm2}", "@var{urxvt}", "@var{sgr}" でないときのみ認識される (dec マウスコードはそれらのコードと競合するため)。

このオプションが自動的に "@var{xterm}" に設定されるのは、'@option{term}' が "@var{xterm}", "@var{mlterm}", "@var{screen}", "@var{tmux}", "@var{st}" (完全一致のみ), "@var{st-}", "@var{stterm}" のいずれかで始まり、'@option{ttymouse}' がまだ設定されていないときである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Additionally, if vim is compiled with the |+termresponse| feature and
	|t_RV| is set to the escape sequence to request the xterm version
	number, more intelligent detection process runs.
	The "xterm2" value will be set if the xterm version is reported to be
	from 95 to 276.  The "sgr" value will be set if the xterm version is
	277 or higher and when Vim detects Mac Terminal.app or iTerm2.
	If you do not want 'ttymouse' to be set to "xterm2" or "sgr"
	automatically, set t_RV to an empty string: >
		:set t_RV=
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
加えて、Vim が |+termresponse| 機能付きでコンパイルされていて、|t_RV| に xterm のバージョン番号を要求するためのエスケープシーケンスが設定されているときは、さらに高度な判定手続きが使われる。

xterm バージョンが 95 以上、276 以下であると報告されたときは "xterm2" に設定される。xterm バージョンが 277 以上のとき、Mac の Terminal.app か Iterm2 を検出したときは "sgr" に設定される。

'@option{ttymouse}' を "@var{xterm2}" や "@var{sgr}" に自動的に設定したくないときは、次のように |t_RV| を空に設定する。
@example
:set t_RV=
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*'ttyscroll'* *'tsl'*
'ttyscroll' 'tsl'	number	(default 999)
			global
	Maximum number of lines to scroll the screen.  If there are more lines
	to scroll the window is redrawn.  For terminals where scrolling is
	very slow and redrawing is not slow this can be set to a small number,
	e.g., 3, to speed up displaying.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttyscroll'}
@anchor{'tsl'}
@cindex 'ttyscroll'
@cindex 'tsl'
@item 'ttyscroll' 'tsl'
数値 (既定では 999) @*
グローバル @*

画面をスクロールする行数の最大値。この行数以上スクロールするときは、ウィンドウが再描画される。スクロールがとても遅いが再描画は遅くないようなターミナルでは、表示を高速化するため、このオプションを 3 等の小さい数にするとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'ttytype'* *'tty'*
'ttytype' 'tty'		string	(default from $TERM)
			global
	Alias for 'term', see above.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'ttytype'}
@anchor{'tty'}
@cindex 'ttytype'
@cindex 'tty'
@item 'ttytype' 'tty'
文字列 (既定値は $TERM によって決まる) @*
グローバル @*

上記のオプション '@option{term}' の別名。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'undodir'* *'udir'*
'undodir' 'udir'	string	(default ".")
			global
			{not in Vi}
			{only when compiled with the |+persistent_undo| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'undodir'}
@anchor{'udir'}
@cindex 'undodir'
@cindex 'udir'
@item 'undodir' 'udir'
文字列 (既定値は ".") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+persistent_undo| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	List of directory names for undo files, separated with commas.
	See |'backupdir'| for details of the format.
	"." means using the directory of the file.  The undo file name for
	"file.txt" is ".file.txt.un~".
	For other directories the file name is the full path of the edited
	file, with path separators replaced with "%".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

アンドゥファイル用のディレクトリをコンマ区切りのリストで指定する。書式についての詳細は |'backupdir'| を参照。

"." はファイルのディレクトリを意味する。アンドゥファイルの名前は例えば "file.txt" なら ".file.txt.un~" になる。

別ディレクトリに保存される場合は、アンドゥファイルの名前は対象のファイルの絶対パスのパス区切り文字を "%" で置換した名前になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When writing: The first directory that exists is used. "." always
	works, no directories after "." will be used for writing.
	When reading all entries are tried to find an undo file.  The first
	undo file that exists is used.  When it cannot be read an error is
	given, no further entry is used.
	See |undo-persistence|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

保存するとき: 最初に見つかった、存在するディレクトリが使われる。"." は常に有効なので "." 以降に指定されたディレクトリは使用されない。

読み込むとき: アンドゥファイルを探すためにすべてのエントリが試行される。最初に見つかったファイルが使用される。

見つかったファイルが読めなかったりエラーが発生したりしても、それ以降のエントリは使用されない。|undo-persistence| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'undofile'* *'noundofile'* *'udf'* *'noudf'*
'undofile' 'udf'	boolean	(default off)
			local to buffer
			{not in Vi}
			{only when compiled with the |+persistent_undo| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'undofile'}
@anchor{'noundofile'}
@anchor{'udf'}
@anchor{'noudf'}
@cindex 'undofile'
@cindex 'noundofile'
@cindex 'udf'
@cindex 'noudf'
@item 'undofile' 'udf'
切替 (既定ではオフ) @*
バッファについてローカル @*
@{Vi にはない@} @*
@{Vim が |+persistent_undo| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When on, Vim automatically saves undo history to an undo file when
	writing a buffer to a file, and restores undo history from the same
	file on buffer read.
	The directory where the undo file is stored is specified by 'undodir'.
	For more information about this feature see |undo-persistence|.
	The undo file is not read when 'undoreload' causes the buffer from
	before a reload to be saved for undo.
	When 'undofile' is turned off the undo file is NOT deleted.
	NOTE: This option is reset when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

オンにすると、バッファをファイルに保存したときにアンドゥ履歴がアンドゥファイルに自動的に保存され、そして、後でそのファイルを開いたときにアンドゥファイルからアンドゥ履歴が復元される。

アンドゥファイルが保存されるディレクトリは '@option{undodir}' で設定する。この機能の詳細は |undo-persistence| を参照のこと。

'@option{undoreload}' の処理の過程でファイルが読み込まれるときはアンドゥファイルは読み込まれない。

'@option{undofile}' がオフに設定されたときアンドゥファイルは削除「されない」。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになるとオフになるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'undolevels'* *'ul'*
'undolevels' 'ul'	number	(default 100, 1000 for Unix, VMS,
						Win32 and OS/2)
			global or local to buffer |global-local|
			{not in Vi}
	Maximum number of changes that can be undone.  Since undo information
	is kept in memory, higher numbers will cause more memory to be used
	(nevertheless, a single change can use an unlimited amount of memory).
	Set to 0 for Vi compatibility: One level of undo and "u" undoes
	itself: >
		set ul=0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'undolevels'}
@anchor{'ul'}
@cindex 'undolevels'
@cindex 'ul'
@item 'undolevels' 'ul'
数値 (既定では 100、Unix, VMS, Win32, OS/2 での既定値は 1000) @*
グローバル／バッファについてローカル |global-local| @*
@{Vi にはない@}

アンドゥ可能な変更の最大値。アンドゥをするための情報はメモリに蓄えられるため、大きい数を設定するとメモリの消費量も多くなる (にも関わらず、単一の変更には無制限にメモリを利用できる)。

Vi 互換にするには、次のように 0 にすること。アンドゥは 1 回だけ可能で、もう 1 回 "u" を使うとアンドゥがアンドゥ @{訳注: リドゥ@} される。
@example
set ul=0
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	But you can also get Vi compatibility by including the 'u' flag in
	'cpoptions', and still be able to use CTRL-R to repeat undo.
	Also see |undo-two-ways|.
	Set to -1 for no undo at all.  You might want to do this only for the
	current buffer: >
		setlocal ul=-1
<	This helps when you run out of memory for a single change.

	The local value is set to -123456 when the global value is to be used.

	Also see |clear-undo|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかし Vi 互換にするには、オプション '@option{cpoptions}' にフラグ '@var{u}' を追加してもよい。こうするとコマンド @kbd{CTRL-R} でリドゥできる。|undo-two-ways| も参照。

アンドゥを無効にするには、-1 にすること。現在のバッファに対してだけ無効にするには次のようにする。
@example
setlocal ul=-1
@end example
これは 1 回の変更でもメモリを使い果たしそうなときに役立つ。

グローバルな値が使われる場合、ローカルな値が -123456 に設定される。

|clear-undo| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'undoreload'* *'ur'*
'undoreload' 'ur'	number	(default 10000)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'undoreload'}
@anchor{'ur'}
@cindex 'undoreload'
@cindex 'ur'
@item 'undoreload' 'ur'
数値 (既定は 10000) @* 
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Save the whole buffer for undo when reloading it.  This applies to the
	":e!" command and reloading for when the buffer changed outside of
	Vim. |FileChangedShell|
	The save only happens when this option is negative or when the number
	of lines is smaller than the value of this option.
	Set this option to zero to disable undo for a reload.

	When saving undo for a reload, any undo file is not read.

	Note that this causes the whole buffer to be stored in memory.  Set
	this option to a lower value if you run out of memory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

リロードするときにアンドゥのためにバッファ全体を保存する。これは ":e!" コマンドを実行したときや、バッファが Vim の外で変更されたためにそれをリロードするときに使用される。|FileChangedShell|

保存は、オプションの値が負数に設定されているか、行数が設定値より少ない場合にのみ実行される。リロードのアンドゥを無効化するにはこのオプションをゼロに設定する。リロードのためにアンドゥが保存されるときは、アンドゥファイルは読み込まれない。
@quotation
@strong{Note:} @*
この機能によってバッファ全体がメモリに保持される。メモリ不足が起こる場合はこのオプションに小さい値を設定すること。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'updatecount'* *'uc'*
'updatecount' 'uc'	number	(default: 200)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'updatecount'}
@anchor{'uc'}
@cindex 'updatecount'
@cindex 'uc'
@item 'updatecount' 'uc'
数値 (既定では 200) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	After typing this many characters the swap file will be written to
	disk.  When zero, no swap file will be created at all (see chapter on
	recovery |crash-recovery|).  'updatecount' is set to zero by starting
	Vim with the "-n" option, see |startup|.  When editing in readonly
	mode this option will be initialized to 10000.
	The swapfile can be disabled per buffer with |'swapfile'|.
	When 'updatecount' is set from zero to non-zero, swap files are
	created for all buffers that have 'swapfile' set.  When 'updatecount'
	is set to zero, existing swap files are not deleted.
	Also see |'swapsync'|.
	This option has no meaning in buffers where |'buftype'| is "nofile"
	or "nowrite".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

この回数だけ文字を打ち込むと、スワップファイルがディスクに書き込まれる。0 にすると、スワップファイルは全く作られない (復旧に関する章 |crash-recovery| を参照)。Vim を引数 "-n" 付きで起動すると、オプション '@option{updatecount}' を 0 に設定できる。|startup| を参照。読み込み専用モードで編集しているときは、このオプションは 10000 に初期化される。

'@option{swapfile}' により、スワップファイルをバッファごとに無効化できる。'@option{updatecount}' が 0 から 非0 に変更されたときは、'@option{swapfile}' がオンになっている全てのバッファで、スワップファイルが作られる。'@option{updatecount}' が 0 になったときは、既存のスワップファイルは削除されない。'@option{swapsync}' も参照。

'@option{buftype}' が "@var{nofile}" や "@var{nowrite}" であるようなバッファでは、このオプションの意味はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'updatetime'* *'ut'*
'updatetime' 'ut'	number	(default 4000)
			global
			{not in Vi}
	If this many milliseconds nothing is typed the swap file will be
	written to disk (see |crash-recovery|).  Also used for the
	|CursorHold| autocommand event.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'updatetime'}
@anchor{'ut'}
@cindex 'updatetime'
@cindex 'ut'
@item 'updatetime' 'ut'
数値 (既定では 4000) @*
グローバル @*
@{Vi にはない@}

この時間の間 (ミリ秒単位) 入力がなければ、スワップファイルがディスクに書き込まれる (|crash-recovery| を参照)。また autocommand のイベント |CursorHold| にも使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'verbose'* *'vbs'*
'verbose' 'vbs'		number	(default 0)
			global
			{not in Vi, although some versions have a boolean
			verbose option}
	When bigger than zero, Vim will give messages about what it is doing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'verbose'}
@anchor{'vbs'}
@cindex 'verbose'
@cindex 'vbs'
@item 'verbose' 'vbs'
数値 (既定では 0) @*
グローバル @*
@{Vi にはないが、Vi のバージョンによっては切替型のオプション verbose がある@}

値が 0 より大きいとき、Vim は実行中の動作に関するメッセージを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Currently, these messages are given:
	>= 1	When the viminfo file is read or written.
	>= 2	When a file is ":source"'ed.
	>= 5	Every searched tags file and include file.
	>= 8	Files for which a group of autocommands is executed.
	>= 9	Every executed autocommand.
	>= 12	Every executed function.
	>= 13	When an exception is thrown, caught, finished, or discarded.
	>= 14	Anything pending in a ":finally" clause.
	>= 15	Every executed Ex command (truncated at 200 characters).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のところ、以下のメッセージが表示される:
@multitable @columnfractions .2 .8
@item 1 以上 @tab ファイル @file{viminfo} が読み書きされたとき
@item 2 以上 @tab コマンド "@command{:source}" でファイルを読み込んだとき
@item 5 以上 @tab 検索されたタグファイルとインクルードファイル全て
@item 8 以上 @tab autocommand のグループが実行されたファイル
@item 9 以上 @tab 実行された autocommand 全て
@item 12 以上 @tab 実行された関数全て
@item 13 以上 @tab 例外が発生／捕捉／終了／破棄されたとき
@item 14 以上 @tab "@command{:finally}" 節において保留されている全て
@item 15 以上 @tab 実行された Ex コマンド全て (200 文字から後は切り捨て)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option can also be set with the "-V" argument.  See |-V|.
	This option is also set by the |:verbose| command.

	When the 'verbosefile' option is set then the verbose messages are not
	displayed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このオプションは、引数 "-V" でも設定できる。|-V| を参照。

このオプションは、コマンド |:verbose| でも設定できる。

'@option{verbosefile}' が設定されている場合、verbose のメッセージは表示されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'verbosefile'* *'vfile'*
'verbosefile' 'vfile'	string	(default empty)
			global
			{not in Vi}
	When not empty all messages are written in a file with this name.
	When the file exists messages are appended.
	Writing to the file ends when Vim exits or when 'verbosefile' is made
	empty.  Writes are buffered, thus may not show up for some time.
	Setting 'verbosefile' to a new value is like making it empty first.
	The difference with |:redir| is that verbose messages are not
	displayed when 'verbosefile' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'verbosefile'}
@anchor{'vfile'}
@cindex 'verbosefile'
@cindex 'vfile'
@item 'verbosefile' 'vfile'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@}

このオプションが空でないとき、全てのメッセージはこの名前のファイルに書き出される。ファイルが既に存在するときは、そこに追加される。

ファイルへの書き出しは Vim が終了したときか、または '@option{verbosefile}' が空に設定されたとき終了する。書き込みはバッファされるので出力が欠けることがある。

'@option{verbosefile}' を新しい値に設定すると、最初に空に設定したのと同じことになる。|:redir|との違いは、'@option{verbosefile}' が設定されているとき冗長なメッセージは画面に表示されないことである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'viewdir'* *'vdir'*
'viewdir' 'vdir'	string	(default for Amiga, MS-DOS, OS/2 and Win32:
							 "$VIM/vimfiles/view",
				 for Unix: "~/.vim/view",
				 for Macintosh: "$VIM:vimfiles:view"
				 for VMS: "sys$login:vimfiles/view"
				 for RiscOS: "Choices:vimfiles/view")
			global
			{not in Vi}
			{not available when compiled without the |+mksession|
			feature}
	Name of the directory where to store files for |:mkview|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'viewdir'}
@anchor{'vdir'}
@cindex 'viewdir'
@cindex 'vdir'
@item 'viewdir' 'vdir'
文字列 (
@multitable @columnfractions .33 .33 .33
@item Amiga, MS-DOS, OS/2 と Win32 での既定値: @tab "$VIM/vimfiles/view"
@item Unixでの既定値: @tab "~/.vim/view"
@item Macintoshでの既定値: @tab "$VIM:vimfiles:view"
@item VMSでの既定値: @tab "sys$login:vimfiles/view"
@item RiscOSでの既定値: @tab "Choices:vimfiles/view"
@end multitable
)

グローバル @*
@{Vi にはない@} @*
@{Vim が |+mksession| 機能付きでコンパイルされたときのみ有効@}

コマンド |:mkview| によるファイルを格納するディレクトリの名前。

安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'viewoptions'* *'vop'*
'viewoptions' 'vop'	string	(default: "folds,options,cursor,curdir")
			global
			{not in Vi}
			{not available when compiled without the |+mksession|
			feature}
	Changes the effect of the |:mkview| command.  It is a comma separated
	list of words.  Each word enables saving and restoring something:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'viewoptions'}
@anchor{'vop'}
@cindex 'viewoptions'
@cindex 'vop'
@item 'viewoptions' 'vop'
文字列 (既定では "folds,options,cursor,curdir") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+mksession| 機能付きでコンパイルされたときのみ有効@}

コマンド |:mkview| の効果を変更する。値はキーワードのコンマ区切りのリストである。キーワードは、ある項目の保存と復元を有効にする:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   word		save and restore ~
	   cursor	cursor position in file and in window
	   folds	manually created folds, opened/closed folds and local
			fold options
	   options	options and mappings local to a window or buffer (not
			global values for local options)
	   localoptions same as "options"
	   slash	backslashes in file names replaced with forward
			slashes
	   unix		with Unix end-of-line format (single <NL>), even when
			on Windows or DOS
	   curdir	the window-local directory, if set with `:lcd`
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item キーワード @tab 復元される項目
@item cursor @tab ファイル／ウィンドウ内のカーソル位置
@item folds @tab 手動で作られた折り畳み、折り畳みの開閉の区別、折り畳み関連のローカルなオプション
@item options @tab ウィンドウまたはバッファについてローカルなオプションとマッピング (ローカルなオプションのグローバルな値は含めない)
@item localoptions @tab "options" と同じ
@item slash @tab ファイル名内の '\' がスラッシュに置換される
@item unix @tab Windows や DOS 上でも、Unix 形式の end-of-line (1 個の <NL>) を使う
@item curdir @tab `:lcd` が設定されているなら、ウィンドウローカルなディレクトリ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"slash" and "unix" are useful on Windows when sharing view files
	with Unix.  The Unix version of Vim cannot source dos format scripts,
	but the Windows version of Vim can source unix format scripts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"slash" と "unix" は、Windows 上でビューファイルを Unix と共有するときに便利である。Unix 版の Vim は dos 形式のスクリプトを読み込めないが、Windows 版の Vim は unix 形式のスクリプトを読み込めるからだ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'viminfo'* *'vi'* *E526* *E527* *E528*
'viminfo' 'vi'		string	(Vi default: "", Vim default for MS-DOS,
				   Windows and OS/2: '100,<50,s10,h,rA:,rB:,
				   for Amiga: '100,<50,s10,h,rdf0:,rdf1:,rdf2:
				   for others: '100,<50,s10,h)
			global
			{not in Vi}
			{not available when compiled without the |+viminfo|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'viminfo'}
@anchor{'vi'}
@anchor{E526}
@anchor{E527}
@anchor{E528}
@cindex 'viminfo'
@cindex 'vi'
@cindex E526
@cindex E527
@cindex E528
@item 'viminfo' 'vi'
文字列 (Vi の既定値は "", Vim の既定値は、
@multitable @columnfractions .5 .5
@item MS-DOS, Windows と OS/2 では: @tab '100,<50,s10,h,rA:,rB:,
@item Amiga では: @tab '100,<50,s10,h,rdf0:,rdf1:,rdf2:
@item 他のシステムでは: @tab '100,<50,s10,h
@end multitable
)

グローバル @*
@{Vi にはない@} @*
@{Vim が |+viminfo| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When non-empty, the viminfo file is read upon startup and written
	when exiting Vim (see |viminfo-file|). Except when 'viminfofile' is
	"NONE".
	The string should be a comma separated list of parameters, each
	consisting of a single character identifying the particular parameter,
	followed by a number or string which specifies the value of that
	parameter.  If a particular character is left out, then the default
	value is used for that parameter.  The following is a list of the
	identifying characters and the effect of their value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

値が空でないとき、viminfo ファイルが起動に先立って読み込まれ、また終了時に書き出される (|viminfo-file| を参照)。ただし、'@option{viminfofile}' が "NONE" の時は除く。

値は指定部のコンマ区切りのリストである。指定部には、効果を指定するフラグ1文字の次に、その値を指定する数または文字列を指定する。指定されなかったものについては、既定値が使われる。フラグとその動作の一覧は、以下の通りである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CHAR	VALUE	~
							*viminfo-!*
	!	When included, save and restore global variables that start
		with an uppercase letter, and don't contain a lowercase
		letter.  Thus "KEEPTHIS and "K_L_M" are stored, but "KeepThis"
		and "_K_L_M" are not.  Nested List and Dict items may not be
		read back correctly, you end up with an empty item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item フラグ
動作
@anchor{viminfo-!}
@cindex viminfo-!
@item !
これが含まれると、アルファベットの大文字で始まり、小文字を含まないグローバル変数を保存・復元する。つまり "KEEPTHIS" と "K_L_M" は保存されるが、"KeepThis" と "_K_L_M" は保存されない。入れ子になったリストと辞書は正しく復元されず、空文字列になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-quote*
	"	Maximum number of lines saved for each register.  Old name of
		the '<' item, with the disadvantage that you need to put a
		backslash before the ", otherwise it will be recognized as the
		start of a comment!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-quote}
@cindex viminfo-quote
@item "
各レジスタで保存される行数の最大値。これはフラグ '<' の古い表記である。この表記の不利点は、(エスケープのために)バックスラッシュを " の前に書かないといけないことである。そうしないとコメントの開始と見なされてしまう！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-%*
	%	When included, save and restore the buffer list.  If Vim is
		started with a file name argument, the buffer list is not
		restored.  If Vim is started without a file name argument, the
		buffer list is restored from the viminfo file.  Quickfix
		('buftype'), unlisted ('buflisted'), unnamed and buffers on
		removable media (|viminfo-r|) are not saved.
		When followed by a number, the number specifies the maximum
		number of buffers that are stored.  Without a number all
		buffers are stored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-%}
@cindex viminfo-%
@item %
これが含まれると、バッファリストを保存・復元する。Vim の起動時にファイル名が引数に含まれていると、バッファリストは復元されない。Vim の起動時にファイル名が引数に含まれていないと、バッファリストが viminfo ファイルから復元される。Quickfix ('@option{buflisted}') と非リスト対象 ('@option{buflisted}') 無名バッファおよびリムーバブルメディア上のバッファ (|viminfo-r|) は保存されない。

このフラグの後に続けて数値を書くと、保存されるバッファ数の最大値を指定することができる。数値が書かれていない場合、全てのバッファが保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-'*
	'	Maximum number of previously edited files for which the marks
		are remembered.  This parameter must always be included when
		'viminfo' is non-empty.
		Including this item also means that the |jumplist| and the
		|changelist| are stored in the viminfo file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-'}
@cindex viminfo-'
@item '
マークが復元されるファイル履歴の最大値。オプション '@option{viminfo}' が空でないときは、常にこれを設定しなければならない。また、このオプションを設定するとジャンプリスト |jumplist| と |changelist| も viminfo ファイルに蓄えられることになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-/*
	/	Maximum number of items in the search pattern history to be
		saved.  If non-zero, then the previous search and substitute
		patterns are also saved.  When not included, the value of
		'history' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-/}
@cindex viminfo-/
@item /
保存される検索パターンの履歴の最大値。非 0 の値を指定すると、前回の検索パターンと置換パターンも保存される。これが含まれないときは、'@option{history}' の値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-:*
	:	Maximum number of items in the command-line history to be
		saved.  When not included, the value of 'history' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-:}
@cindex viminfo-:
@item :
保存されるコマンドライン履歴の最大値。これが含まれないときは、'@option{history}' の値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-<*
	<	Maximum number of lines saved for each register.  If zero then
		registers are not saved.  When not included, all lines are
		saved.  '"' is the old name for this item.
		Also see the 's' item below: limit specified in Kbyte.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-<}
@cindex viminfo-<
@item <
各レジスタで保存される行数の最大値。0 にすると、レジスタは保存されなくなる。'"' はこのフラグの古い表記である。下記のフラグ 's' も参照: 's' は Kbyte 単位で最大値を指定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-@*
	@	Maximum number of items in the input-line history to be
		saved.  When not included, the value of 'history' is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-@@}
@cindex viminfo-@@
@item @@
保存される input-line 履歴の最大値。これが含まれないときは、'@option{history}' の値が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-c*
	c	When included, convert the text in the viminfo file from the
		'encoding' used when writing the file to the current
		'encoding'.  See |viminfo-encoding|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-c}
@cindex viminfo-c
@item c
これが含まれると、viminfo ファイル内のテキストを、書き込まれたときのエンコーディングから現在のエンコーディングに変換する。|viminfo-encoding| @{訳注: および '@option{encoding}'@} を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-f*
	f	Whether file marks need to be stored.  If zero, file marks ('0
		to '9, 'A to 'Z) are not stored.  When not present or when
		non-zero, they are all stored.  '0 is used for the current
		cursor position (when exiting or when doing ":wviminfo").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-f}
@cindex viminfo-f
@item f
ファイルマークを保存するかどうか。0 を指定すると、ファイルマーク ('0 から '9, 'A から 'Z) は保存されない。これが含まれなかったり、値が非 0 のときは、みな保存される。'0 は (終了時やコマンド "@command{:wviminfo}" の実行時の) カーソル位置の保存に使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-h*
	h	Disable the effect of 'hlsearch' when loading the viminfo
		file.  When not included, it depends on whether ":nohlsearch"
		has been used since the last search command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-h}
@cindex viminfo-h
@item h
viminfo ファイルの読み込み時に、'@option{hlsearch}' を無効にする。含まれないときは、最後の検索コマンド以来、コマンド "@command{:nohlsearch}" が使われたかどうかによる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-n*
	n	Name of the viminfo file.  The name must immediately follow
		the 'n'.  Must be at the end of the option!  If the
		'viminfofile' option is set, that file name overrides the one
		given here with 'viminfo'.  Environment variables are
		expanded when opening the file, not when setting the option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-n}
@cindex viminfo-n
@item n
viminfo の名前。名前は 'n' のすぐ後に続けて指定する。オプションの最後に指定しなければならない！もしも '@option{viminfofile}' オプションが設定されていると、その ('@option{viminfofile}' で設定された) 名前は、ここの '@option{viminfo}' で指定された名前を上書きする。環境変数はオプションの設定時ではなく、ファイルの読み込み時に展開される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-r*
	r	Removable media.  The argument is a string (up to the next
		',').  This parameter can be given several times.  Each
		specifies the start of a path for which no marks will be
		stored.  This is to avoid removable media.  For MS-DOS you
		could use "ra:,rb:", for Amiga "rdf0:,rdf1:,rdf2:".  You can
		also use it for temp files, e.g., for Unix: "r/tmp".  Case is
		ignored.  Maximum length of each 'r' argument is 50
		characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-r}
@cindex viminfo-r
@item r
リムーバブルメディア @{訳注: USB メモリ、CD-ROM 等の取り外せる記憶装置。この中身は取り替えてしまえば全く変わるので、ファイル履歴の意味がない@} の指定。引数は文字列 (次の ',' まで) である。

これは複数個指定できる。それぞれがマーク履歴の対象外になるパスの先頭部を指定する。これはリムーバブルメディアを避けるためである。MS-DOS では "ra:,rb:", Amiga では "rdf0:,rdf1:,rdf2:" とするとよい。ここに一時ファイルを指定することもできる (Unix の例: "r/tmp")。大文字と小文字の区別はない。それぞれの 'r' の引数の最大長は 50 文字である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*viminfo-s*
	s	Maximum size of an item in Kbyte.  If zero then registers are
		not saved.  Currently only applies to registers.  The default
		"s10" will exclude registers with more than 10 Kbyte of text.
		Also see the '<' item above: line count limit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-s}
@cindex viminfo-s
@item s
Kbyte 単位でのフラグの最大値。0のときレジスタは保存されない。現在のところこれはレジスタにのみ適用される。既定値の "s10" の状態では、10Kbyte を超えるテキストを持つレジスタは除外される。上記のフラグ '<' も参照: '<' は行数で制限値を指定する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Example: >
	    :set viminfo='50,<1000,s100,:0,n~/vim/viminfo
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set viminfo='50,<1000,s100,:0,n~/vim/viminfo
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'50		Marks will be remembered for the last 50 files you
			edited.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item '50
最近編集した 50 ファイル内のマークは保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	<1000		Contents of registers (up to 1000 lines each) will be
			remembered.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item <1000
レジスタの中身 (それぞれ 1000 行まで) は保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	s100		Registers with more than 100 Kbyte text are skipped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item s100
100Kbyte を超えるテキストを持つレジスタは保存されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:0		Command-line history will not be saved.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :0
コマンドラインの履歴は保存されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	n~/vim/viminfo	The name of the file to use is "~/vim/viminfo".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item n~/vim/viminfo
使用するファイル名は "~/vim/viminfo" である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	no /		Since '/' is not specified, the default will be used,
			that is, save all of the search history, and also the
			previous search and substitute patterns.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '/' がない
'/' が指定されていないので、既定値が使われる。つまり全ての検索履歴や前回の検索パターン、置換パターンが保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	no %		The buffer list will not be saved nor read back.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '%' がない
バッファリストは、保存も復元もされない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	no h		'hlsearch' highlighting will be restored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'h' がない
'@option{hlsearch}' による強調表示は復元される。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	When setting 'viminfo' from an empty value you can use |:rviminfo| to
	load the contents of the file, this is not done automatically.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{viminfo}' を空の値から他の値へ変更するとき、|:rviminfo| を使うと、そのファイルの中身を読み込むことができる。これは自動的には行われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
	NOTE: This option is set to the Vim default value when 'compatible'
	is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
安全上の理由から、このオプションをモードライン |modeline| やサンドボックス |sandbox| の中で設定することはできない。
@quotation
@strong{Note:} @*
このオプションは '@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				*'viminfofile'* *'vif'*
'viminfofile' 'vif'	string	(default: "")
			global
			{not in Vi}
			{not available when compiled without the |+viminfo|
			feature}
	When non-empty, overrides the file name used for viminfo.
	When equal to "NONE" no viminfo file will be read or written.
	This option can be set with the |-i| command line flag.  The |--clean|
	command line flag sets it to "NONE".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'viminfofile'}
@anchor{'vif'}
@cindex 'viminfofile'
@cindex 'vif'
@item 'viminfofile' 'vif'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+viminfo| 機能付きでコンパイルされたときのみ有効@}

値が空でないとき、viminfo で使われているファイル名を上書きする。
"NONE" のとき、viminfo の読み込みも書き込みもされない。
このオプションはコマンドラインの |-i| フラグで設定することができる。コマンドラインからの |--clean| フラグはこれを "NONE" に設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					    *'virtualedit'* *'ve'*
'virtualedit' 've'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the
			|+virtualedit| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'virtualedit'}
@anchor{'ve'}
@cindex 'virtualedit'
@cindex 've'
@item 'virtualedit' 've'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+virtualedit| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A comma separated list of these words:
	    block	Allow virtual editing in Visual block mode.
	    insert	Allow virtual editing in Insert mode.
	    all		Allow virtual editing in all modes.
	    onemore	Allow the cursor to move just past the end of the line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

値は、以下のキーワードのコンマ区切りのリストである:
@multitable @columnfractions .2 .8
@item block @tab 矩形ビジュアルモードで仮想編集を有効にする。
@item insert @tab 挿入モードで仮想編集を有効にする。
@item all @tab 全てのモードで仮想編集を有効にする。
@item onemore @tab 行末の1文字先までカーソルを移動できるようにする。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Virtual editing means that the cursor can be positioned where there is
	no actual character.  This can be halfway into a tab or beyond the end
	of the line.  Useful for selecting a rectangle in Visual mode and
	editing a table.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
仮想編集とは、実際に文字がないところにもカーソルを置けるようにすることである。つまりタブ文字の内部や行末より後ろにカーソルを移動できる。ビジュアルモードで長方形を選択するときや、表を編集するときに便利である。@{訳注: フリーカーソルモードとも呼ばれる@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"onemore" is not the same, it will only allow moving the cursor just
	after the last character of the line.  This makes some commands more
	consistent.  Previously the cursor was always past the end of the line
	if the line was empty.  But it is far from Vi compatible.  It may also
	break some plugins or Vim scripts.  For example because |l| can move
	the cursor after the last character.  Use with care!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

"onemore" は同じではない。"onemore" は単にカーソルを行の最後の文字の直後まで移動できるようにするだけである。これによっていくつかのコマンドがより一貫性を持つようになる。以前は、空行では常にカーソルは行末を越えていた。しかしこれは Vi 互換からはほど遠い。

これを設定すると動かなくなるプラグインや Vim script もあるかもしれない。例えば |l| でカーソルが最後の文字の後に移動できるためである。よく注意して使うこと！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Using the `$` command will move to the last character in the line, not
	past it.  This may actually move the cursor to the left!
	The `g$` command will move to the end of the screen line.
	It doesn't make sense to combine "all" with "onemore", but you will
	not get a warning for it.
	NOTE: This option is set to "" when 'compatible' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

コマンド `$` はカーソルを行の最後の文字へ移動させる。最後の文字を越えはしない。そのため、`$` によってカーソルが左へ移動することもありえる！コマンド `g$` はスクリーン行の最後に移動するだろう。

"all" と "onemore" を同時に設定することは意味がないが、そのように設定しても警告は出ない。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると "" になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'visualbell'* *'vb'* *'novisualbell'* *'novb'* *beep*
'visualbell' 'vb'	boolean	(default off)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'visualbell'}
@anchor{'vb'}
@anchor{'novisualbell'}
@anchor{'novb'}
@anchor{beep}
@cindex 'visualbell'
@cindex 'vb'
@cindex 'novisualbell'
@cindex 'novb'
@cindex beep
@item 'visualbell' 'vb'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Use a visual bell instead of beeping.  The terminal code to display the
	visual bell is given with 't_vb'.  When no beep or flash is wanted,
	use: >
		:set vb t_vb=
<	If you want a short flash, you can use this on many terminals: >
		:set vb t_vb=[?5h$<100>[?5l
<	Here $<100> specifies the time, you can use a smaller or bigger value
	to get a shorter or longer flash.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ビープ音に、実際は音でなくビジュアルベル @{訳注: 画面フラッシュ@} を使う。ビジュアルベルに使われるターミナルコードは、ターミナルオプション 't_vb' で指定される。音もフラッシュも使いたくないならば、次のようにすること @{訳注: しかしエラーが分からなくなるという諸刃の剣@}。

次のように使う:
@example
:set vb t_vb=
@end example
短いフラッシュを望むのなら多くのターミナルでこれを使うことができる:
@example
:set vb t_vb=[?5h$<100>[?5l
@end example
ここで、$<100> は時間を特定する。これを小さくまたは大きくすることで、フラッシュを速くしたり遅くしたりすることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: Vim will limit the bell to once per half a second.  This avoids
	having to wait for the flashing to finish when there are lots of
	bells, e.g. on key repeat.  This also happens without 'visualbell'
	set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Vim はベルを 0.5 秒毎に制限する。これは、例えばキーリピートのような多くのベルがあった時に、フラッシュのためのフラッシュ待ちを回避する。'@option{visualbell}' が設定されていなくても生じることに注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	In the GUI, 't_vb' defaults to "<Esc>|f", which inverts the display
	for 20 msec.  If you want to use a different time, use "<Esc>|40f",
	where 40 is the time in msec.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI 版では、't_vb' の既定値は "<Esc>|f" であり、画面の色を 20 ミリ秒だけ反転させる。違った時間を設定したいときは、"<Esc>|40f" とすること。ここで 40 の所にはミリ秒単位で時間を設定する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note: When the GUI starts, 't_vb' is reset to its default value.  You
	might want to set it again in your |gvimrc|.

	Does not work on the Amiga, you always get a screen flash.
	Also see 'errorbells'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
GUI が開始するとき、't_vb' は既定値に設定されることに注意。|gvimrc| ファイルで再設定する必要があるだろう。
@end quotation

Amiga ではこのオプションは無効で、常に画面フラッシュが使われる。'@option{errorbells}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'warn'* *'nowarn'*
'warn'			boolean	(default on)
			global
	Give a warning message when a shell command is used while the buffer
	has been changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'warn'}
@anchor{'nowarn'}
@cindex 'warn'
@cindex 'nowarn'
@item 'warn'
切替 (既定ではオン) @*
グローバル @*

バッファが変更される間にシェルコマンドが使われたら、警告メッセージを表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		     *'weirdinvert'* *'wiv'* *'noweirdinvert'* *'nowiv'*
'weirdinvert' 'wiv'	boolean	(default off)
			global
			{not in Vi}
	This option has the same effect as the 't_xs' terminal option.
	It is provided for backwards compatibility with version 4.x.
	Setting 'weirdinvert' has the effect of making 't_xs' non-empty, and
	vice versa.  Has no effect when the GUI is running.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'weirdinvert'}
@anchor{'wiv'}
@anchor{'noweirdinvert'}
@anchor{'nowiv'}
@cindex 'weirdinvert'
@cindex 'wiv'
@cindex 'noweirdinvert'
@cindex 'nowiv'
@item 'weirdinvert' 'wiv'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@}

このオプションは termcap オプション 't_xs' と同じ効果を持つ。これは Vim version 4.x との後方互換性のためのものである。

このオプションをオンにすると、't_xs' が非 0 になる。またこのオプションをオフにすると、't_xs' が 0 になる。GUI 版では効果がない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'whichwrap'* *'ww'*
'whichwrap' 'ww'	string	(Vim default: "b,s", Vi default: "")
			global
			{not in Vi}
	Allow specified keys that move the cursor left/right to move to the
	previous/next line when the cursor is on the first/last character in
	the line.  Concatenate characters to allow this for these keys:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'whichwrap'}
@anchor{'ww'}
@cindex 'whichwrap'
@cindex 'ww'
@item 'whichwrap' 'ww'
文字列 (Vim の既定値: "b,s"、Vi の既定値: "") @*
グローバル @*
@{Vi にはない@}

カーソルを左右させるキーのうち、ここで指定したものでは、カーソルが行頭／末にあるときに前／次行に移動できるようになる。以下のキーでこれを有効にするには、文字を連結すること @{訳注: はて？以下の文字を値に加えろということか？@}。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		char   key	  mode	~
		 b    <BS>	 Normal and Visual
		 s    <Space>	 Normal and Visual
		 h    "h"	 Normal and Visual (not recommended)
		 l    "l"	 Normal and Visual (not recommended)
		 <    <Left>	 Normal and Visual
		 >    <Right>	 Normal and Visual
		 ~    "~"	 Normal
		 [    <Left>	 Insert and Replace
		 ]    <Right>	 Insert and Replace
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .2 .6
@item フラグ @tab キー @tab モード
@item b @tab <BS> @tab ノーマルとビジュアル
@item s @tab <Space> @tab ノーマルとビジュアル
@item h @tab "h" @tab ノーマルとビジュアル (非推奨)
@item l @tab "l" @tab ノーマルとビジュアル (非推奨)
@item < @tab <Left> @tab ノーマルとビジュアル
@item > @tab <Right> @tab ノーマルとビジュアル
@item ~ @tab "~" @tab ノーマル
@item [ @tab <Left> @tab 挿入と置換
@item ] @tab <Right> @tab 挿入と置換
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	For example: >
		:set ww=<,>,[,]
<	allows wrap only when cursor keys are used.
	When the movement keys are used in combination with a delete or change
	operator, the <EOL> also counts for a character.  This makes "3h"
	different from "3dh" when the cursor crosses the end of a line.  This
	is also true for "x" and "X", because they do the same as "dl" and
	"dh".  If you use this, you may also want to use the mapping
	":map <BS> X" to make backspace delete the character in front of the
	cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:set ww=<,>,[,]
@end example
こうすると、カーソルキーでのみ行末／頭の移動ができる。

移動キーが削除オペレータや変更オペレータと共に使われたときは、<EOL> も文字に含まれる。このためカーソルが行末を通るときは、"3h" の動きと "3dh" の動きは異なる。これは "x" と "X" にも当てはまる。それは、それらのコマンドは "dl" と "dh" と同様に働くからだ。これを使うときは、バックスペースでカーソル前の文字を削除できるようにするため、マッピング ":map <BS> X" を使うとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'l' is included and it is used after an operator at the end of a
	line then it will not move to the next line.  This makes "dl", "cl",
	"yl" etc. work normally.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

値に 'l' が含まれているとき、行末でオペレータの後に l を使うと、カーソルが次行に移動しない。これによって "dl", "cl", "yl" などが普通に動作する。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wildchar'* *'wc'*
'wildchar' 'wc'		number	(Vim default: <Tab>, Vi default: CTRL-E)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildchar'}
@anchor{'wc'}
@cindex 'wildchar'
@cindex 'wc'
@item 'wildchar' 'wc'
数値 (Vim の既定値: <Tab>、Vi の既定値: CTRL-E) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Character you have to type to start wildcard expansion in the
	command-line, as specified with 'wildmode'.
	More info here: |cmdline-completion|.
	The character is not recognized when used inside a macro.  See
	'wildcharm' for that.
	Although 'wc' is a number option, you can set it to a special key: >
		:set wc=<Esc>
<	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

コマンドラインで、オプション '@option{wildmode}' で指定したようにワイルドカードを展開するために打ち込まなければならない文字。より詳しくは |cmdline-completion| を参照。

その文字はマクロ内では認識されない。それには '@option{wildcharm}' を参照。このオプションは数値オプションだが、次のように特殊キーも設定できる。
@example
:set wc=<Esc>
@end example
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンになると Vi の既定値に設定され、'@option{compatible}' がオフになると Vim の既定値に設定されるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wildcharm'* *'wcm'*
'wildcharm' 'wcm'	number	(default: none (0))
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildcharm'}
@anchor{'wcm'}
@cindex 'wildcharm'
@cindex 'wcm'
@item 'wildcharm' 'wcm'
数値 (既定では空 (0)) @*
グローバル @*
@{Vi にはない@} @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'wildcharm' works exactly like 'wildchar', except that it is
	recognized when used inside a macro.  You can find "spare" command-line
	keys suitable for this option by looking at |ex-edit-index|.  Normally
	you'll never actually type 'wildcharm', just use it in mappings that
	automatically invoke completion mode, e.g.: >
		:set wcm=<C-Z>
		:cnoremap ss so $vim/sessions/*.vim<C-Z>
<	Then after typing :ss you can use CTRL-P & CTRL-N.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

このオプションはオプション '@option{wildchar}' と全く同様に働くが、こちらはマクロ内でも認識される点が異なっている。|ex-edit-index| を探せば、このオプションに適した「予備」コマンドラインキーが見つかるだろう。普通、ユーザーが実際に '@option{wildcharm}' で指定されたキーを打ち込むことはない。自動的に補完モードを呼び出すマッピング内でのみ使うこと。例えば次のようにする。
@example
:set wcm=<C-Z>
:cnoremap ss so $vim/sessions/*.vim<C-Z>
@end example
こうすると "@command{:ss}" と打ち込んだ後でコマンド @kbd{CTRL-P} や @kbd{CTRL-N} が使える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wildignore'* *'wig'*
'wildignore' 'wig'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+wildignore|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildignore'}
@anchor{'wig'}
@cindex 'wildignore'
@cindex 'wig'
@item 'wildignore' 'wig'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+wildignore| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A list of file patterns.  A file that matches with one of these
	patterns is ignored when expanding |wildcards|, completing file or
	directory names, and influences the result of |expand()|, |glob()| and
	|globpath()| unless a flag is passed to disable this.
	The pattern is used like with |:autocmd|, see |autocmd-patterns|.
	Also see 'suffixes'.
	Example: >
		:set wildignore=*.o,*.obj
<	The use of |:set+=| and |:set-=| is preferred when adding or removing
	a pattern from the list.  This avoids problems when a future version
	uses another default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ファイルパターンのリスト。パターンのどれかにマッチしたファイルは、ワイルドカード (|wildcards|) の展開時と、ファイル／ディレクトリ名の補完時に無視される。また、フラグを与えて無効化しない限り、|expand()|, |glob()|, |globpath()| の結果に影響する。

パターンは |:autocmd| と同様のものである。|autocmd-patterns| を参照。オプション '@option{suffixes}' も参照。

例:
@example
:set wildignore=*.o,*.obj
@end example
リストにパターンを追加するときにはコマンド |:set+=|、リストからパターンを除くときにはコマンド |:set-=| を使うのがよい。こうすると将来のバージョンで異なった既定値が使われるようになったときに、問題が起きるのを防げる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
			*'wildignorecase'* *'wic'* *'nowildignorecase'* *'nowic'*
'wildignorecase' 'wic'	boolean	(default off)
			global
			{not in Vi}
	When set case is ignored when completing file names and directories.
	Has no effect when 'fileignorecase' is set.
	Does not apply when the shell is used to expand wildcards, which
	happens when there are special characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildignorecase'}
@anchor{'wic'}
@anchor{'nowildignorecase'}
@anchor{'nowic'}
@cindex 'wildignorecase'
@cindex 'wic'
@cindex 'nowildignorecase'
@cindex 'nowic'
@item 'wildignorecase' 'wic'
切替 (既定ではオフ) @*
グローバル @*
@{Vi にはない@} @*

オンのとき、ファイル名やディレクトリを補完するときに大文字と小文字が無視される。'@option{fileignorecase}' が設定されているときは効果は無い。ワイルドカードの展開にシェルが使用されるとき (特殊文字が含まれているとき) はこのオプションは適用されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
				*'wildmenu'* *'wmnu'* *'nowildmenu'* *'nowmnu'*
'wildmenu' 'wmnu'	boolean	(default off, set in |defaults.vim|)
			global
			{not in Vi}
			{not available if compiled without the |+wildmenu|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildmenu'}
@anchor{'wmnu'}
@anchor{'nowildmenu'}
@anchor{'nowmnu'}
@cindex 'wildmenu'
@cindex 'wmnu'
@cindex 'nowildmenu'
@cindex 'nowmnu'
@item 'wildmenu' 'wmnu'
切替 (既定ではオフ、|defaults.vim| 内でオンに設定される) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+wildmenu| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When 'wildmenu' is on, command-line completion operates in an enhanced
	mode.  On pressing 'wildchar' (usually <Tab>) to invoke completion,
	the possible matches are shown just above the command line, with the
	first match highlighted (overwriting the status line, if there is
	one).  Keys that show the previous/next match, such as <Tab> or
	CTRL-P/CTRL-N, cause the highlight to move to the appropriate match.
	When 'wildmode' is used, "wildmenu" mode is used where "full" is
	specified.  "longest" and "list" do not start "wildmenu" mode.
	You can check the current mode with |wildmenumode()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

オンのとき、コマンドライン補完が拡張モードで行われる。オプション '@option{wildchar}' で指定されたキー (普通 <Tab>) を打ち込むと補完を開始し、コマンドラインのすぐ上に可能性のあるマッチが表示され、最初のマッチが強調表示される (ステータス行があるときは、それを上書きする)。<Tab> や CTRL-P/CTRL-N 等の前／次のマッチを表示するキーは、強調部分を適切なマッチに移動させる。

'@option{wildmode}' が有効なときは、"@var{full}" が指定されたところで "wildmenu" モードが使われる。"longest" と "list" では "wildmenu" モードは開始されない。現在のモードは |wildmenumode()| で確認できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If there are more matches than can fit in the line, a ">" is shown on
	the right and/or a "<" is shown on the left.  The status line scrolls
	as needed.
	The "wildmenu" mode is abandoned when a key is hit that is not used
	for selecting a completion.
	While the "wildmenu" is active the following keys have special
	meanings:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 行に収め切れない程マッチがあるときは、@{訳注: その後にマッチがあるなら@} 文字 ">" が右端に表示され、@{訳注: その前にマッチがあるなら@} 文字 "<" が左端に表示される。ステータス行は必要に応じてスクロールする。

"wildmenu" モードは、補完候補の選択に使われないキーが打ち込まれた時点で終了する。"wildmenu" が使われているとき、以下のキーは特別な働きを持つ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	<Left> <Right>	- select previous/next match (like CTRL-P/CTRL-N)
	<Down>		- in filename/menu name completion: move into a
			  subdirectory or submenu.
	<CR>		- in menu completion, when the cursor is just after a
			  dot: move into a submenu.
	<Up>		- in filename/menu name completion: move up into
			  parent directory or parent menu.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item <Left> <Right> @tab - 前／次のマッチを選択 (CTRL-P/CTRL-N と同じ)
@item <Down> @tab - ファイル／メニュー名補完時: サブディレクトリ／メニューに移動する。
@item <CR> @tab - メニュー補完時、カーソルがドットの直後にあるとき: サブメニューに移動する。
@item <Up> @tab - ファイル／メニュー名補完時: 親ディレクトリ／メニューに移動する。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	This makes the menus accessible from the console |console-menus|.

	If you prefer the <Left> and <Right> keys to move the cursor instead
	of selecting a different match, use this: >
		:cnoremap <Left> <Space><BS><Left>
		:cnoremap <Right> <Space><BS><Right>
<
	The "WildMenu" highlighting is used for displaying the current match
	|hl-WildMenu|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これにより、メニューがコンソールから扱える |console-menus|。

@key{<Left>} や @key{<Right>} キーで、別のマッチに移動するのではなく、カーソルを移動させたいときは、次のようにする。
@example
:cnoremap <Left> <Space><BS><Left>
:cnoremap <Right> <Space><BS><Right>
@end example
現在のマッチの表示には、強調表示グループ "WildMenu" が使われる |hl-WildMenu|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wildmode'* *'wim'*
'wildmode' 'wim'	string	(Vim default: "full")
			global
			{not in Vi}
	Completion mode that is used for the character specified with
	'wildchar'.  It is a comma separated list of up to four parts.  Each
	part specifies what to do for each consecutive use of 'wildchar'.  The
	first part specifies the behavior for the first use of 'wildchar',
	The second part for the second use, etc.
	These are the possible values for each part:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildmode'}
@anchor{'wim'}
@cindex 'wildmode'
@cindex 'wim'
@item 'wildmode' 'wim'
文字列 (Vim の既定値は "full") @*
グローバル @*
@{Vi にはない@} @*

オプション '@option{wildchar}' で指定されたキーで開始する補完モード。値は、キーワードの 4 個までのコンマ区切りのリストである。それぞれのキーワードで、連続して '@option{wildchar}' を使ったときの動作を指定する。1 個目のキーワードが '@option{wildchar}' を 1 回目に使ったときの動作を指定し、2 個目のキーワードが 2 回目の動作を指定、等となる。

指定可能なキーワードは、以下の通りである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	""		Complete only the first match.
	"full"		Complete the next full match.  After the last match,
			the original string is used and then the first match
			again.
	"longest"	Complete till longest common string.  If this doesn't
			result in a longer string, use the next part.
	"longest:full"	Like "longest", but also start 'wildmenu' if it is
			enabled.
	"list"		When more than one match, list all matches.
	"list:full"	When more than one match, list all matches and
			complete first match.
	"list:longest"	When more than one match, list all matches and
			complete till longest common string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item "" @tab 最初のマッチのみを補完する。
@item "full" @tab 次のマッチを完全に補完する。最後のマッチの次には元の文字列が使われ、その次は再び最初のマッチが補完される。
@item "longest" @tab 共通する最長の文字列までが補完される。それ以上長い文字列を補完できないときは、次の候補に移る。
@item "longest:full" @tab "longest" と似ているが、'@option{wildmenu}' が有効ならばそれを開始する。
@item "list" @tab 複数のマッチがあるときは、全てのマッチを羅列する。
@item "list:full" @tab 複数のマッチがあるときは、全てのマッチを羅列し、最初のマッチを補完する。
@item "list:longest" @tab 複数のマッチがあるときは、全てのマッチを羅列し、共通する最長の文字列までが補完される。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When there is only a single match, it is fully completed in all cases.

	Examples: >
		:set wildmode=full
<	Complete first full match, next match, etc.  (the default) >
		:set wildmode=longest,full
<	Complete longest common string, then each full match >
		:set wildmode=list:full
<	List all matches and complete each full match >
		:set wildmode=list,full
<	List all matches without completing, then each full match >
		:set wildmode=longest,list
<	Complete longest common string, then list alternatives.
	More info here: |cmdline-completion|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッチが 1 個しかないときは、どの場合でも完全に補完される。

例:
@example
:set wildmode=full
@end example
最初のマッチ、次のマッチ...を完全に補完する (既定値)
@example
:set wildmode=longest,full
@end example
共通する最長の文字列を補完し、次からマッチを完全に補完する
@example
:set wildmode=list:full
@end example
全てのマッチを羅列し、そして最初のマッチを完全に補完する
@example
:set wildmode=list,full
@end example
補完せずに全てのマッチを羅列し、次からマッチを完全に補完する
@example
:set wildmode=longest,list
@end example
共通する最長の文字列を補完し、次から他の候補を羅列するより詳しくは |cmdline-completion| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wildoptions'* *'wop'*
'wildoptions' 'wop'	string	(default "")
			global
			{not in Vi}
			{not available when compiled without the |+wildignore|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wildoptions'}
@anchor{'wop'}
@cindex 'wildoptions'
@cindex 'wop'
@item 'wildoptions' 'wop'
文字列 (既定では "") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+wildignore| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A list of words that change how command line completion is done.
	Currently only one word is allowed:
	  tagfile	When using CTRL-D to list matching tags, the kind of
			tag and the file of the tag is listed.	Only one match
			is displayed per line.  Often used tag kinds are:
				d	#define
				f	function
	Also see |cmdline-completion|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

コマンドライン補完の挙動を変える単語のリスト。現在のところ1つの単語だけが設定できる:
@table @asis
@item tagfile
@kbd{CTRL-D} でマッチするタグを一覧表示するとき、タグの種類とそのタグのファイル名が表示される。1 行につき 1 つのマッチが表示される。よく使われるタグの種類は次の通り:
@multitable @columnfractions .1 .9
@item d @tab #define マクロ
@item f @tab 関数
@end multitable
@end table
|cmdline-completion| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winaltkeys'* *'wak'*
'winaltkeys' 'wak'	string	(default "menu")
			global
			{not in Vi}
			{only used in Win32, Motif, GTK and Photon GUI}
	Some GUI versions allow the access to menu entries by using the ALT
	key in combination with a character that appears underlined in the
	menu.  This conflicts with the use of the ALT key for mappings and
	entering special characters.  This option tells what to do:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winaltkeys'}
@anchor{'wak'}
@cindex 'winaltkeys'
@cindex 'wak'
@item 'winaltkeys' 'wak'
文字列 (既定では "menu") @*
グローバル @*
@{Vi にはない@} @*
@{Vim の Win32 版、Motif 版、GTK 版、Photon GUI 版でのみ有効@} @*

GUI 版では、メニュー内で下線付きで表示されている文字と @key{ALT} キーを組み合わせて使うことで、メニューの項目にアクセスできるものがある。これはマッピングや特殊な文字の入力に @key{ALT} キーを使うことと衝突する。このオプションは、そのときの動作を指定する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	  no	Don't use ALT keys for menus.  ALT key combinations can be
		mapped, but there is no automatic handling.  This can then be
		done with the |:simalt| command.
	  yes	ALT key handling is done by the windowing system.  ALT key
		combinations cannot be mapped.
	  menu	Using ALT in combination with a character that is a menu
		shortcut key, will be handled by the windowing system.  Other
		keys can be mapped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item no @tab @key{ALT} キーをメニューに使わない。@key{ALT} キーを使った組み合わせはマッピングに使えるが、自動的にメニューの操作に使われることはない。このときメニューの操作は、コマンド |:simalt| で可能である。
@item yes @tab @key{ALT} キーの扱いはウィンドウシステムに任される。@key{ALT} キーとのキーの組み合わせは、マッピングには使えない。
@item menu @tab メニューのショートカットキーになっている文字と組み合わせて @key{ALT} キーを使うとウィンドウシステムが扱うが、他のキーはマッピングに使える。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If the menu is disabled by excluding 'm' from 'guioptions', the ALT
	key is never used for the menu.
	This option is not used for <F10>; on Win32 and with GTK <F10> will
	select the menu, unless it has been mapped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{guioptions}' からフラグ '@var{m}' が取り除かれ、メニューが無効になっていると、@key{ALT} キーはメニューには全く使われない。

このオプションは @key{<F10>} には適用されない; Win32 版と GTK 版では、マッピングされていない限り @key{<F10>} を押すとメニューが選択される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'window'* *'wi'*
'window' 'wi'		number  (default screen height - 1)
			global
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'window'}
@anchor{'wi'}
@cindex 'window'
@cindex 'wi'
@item 'window' 'wi'
数値 (既定では: 画面の高さ - 1) @*
グローバル @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Window height.  Do not confuse this with the height of the Vim window,
	use 'lines' for that.
	Used for |CTRL-F| and |CTRL-B| when there is only one window and the
	value is smaller than 'lines' minus one.  The screen will scroll
	'window' minus two lines, with a minimum of one.
	When 'window' is equal to 'lines' minus one CTRL-F and CTRL-B scroll
	in a much smarter way, taking care of wrapping lines.
	When resizing the Vim window, the value is smaller than 1 or more than
	or equal to 'lines' it will be set to 'lines' minus 1.
	{Vi also uses the option to specify the number of displayed lines}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ウィンドウの高さ。Vim ウィンドウの高さと混同しないこと。そちらには '@option{lines}' を使う。

ウィンドウが 1 つだけで、このオプションの値が '@option{lines}' - 1 より小さいとき、|CTRL-F| と |CTRL-B| でスクロールする行数に影響する。'@option{window}' - 2 行 (ただし最小値は 1 行) だけ画面がスクロールする。

'@option{window}' が '@option{lines}' - 1 に等しいとき、@kbd{CTRL-F} と @kbd{CTRL-B} は折り返された行を考慮したより賢い方法でスクロールする。

Vim ウィンドウをリサイズするとき、このオプションの値が 1 より小さいか '@option{lines}' 以上ならば '@option{lines}' - 1 に設定される。

@{Vi はこのオプションによって表示する行の数も決定する@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winheight'* *'wh'* *E591*
'winheight' 'wh'	number	(default 1)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winheight'}
@anchor{'wh'}
@anchor{E591}
@cindex 'winheight'
@cindex 'wh'
@cindex E591
@item 'winheight' 'wh'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@} @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Minimal number of lines for the current window.  This is not a hard
	minimum, Vim will use fewer lines if there is not enough room.  If the
	focus goes to a window that is smaller, its size is increased, at the
	cost of the height of other windows.
	Set 'winheight' to a small number for normal editing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

カレントウィンドウの行数の最小値。これは絶対的な最小値ではなく、余裕のないときには行数はこれよりも少なくなる。この指定より小さいウィンドウにフォーカスが移動すると、他のウィンドウの行数を減らしてそのウィンドウを大きくする。

通常の編集時には '@option{winheight}' を小さい値にしておくこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Set it to 999 to make the current window fill most of the screen.
	Other windows will be only 'winminheight' high.  This has the drawback
	that ":all" will create only two windows.  To avoid "vim -o 1 2 3 4"
	to create only two windows, set the option after startup is done,
	using the |VimEnter| event: >
		au VimEnter * set winheight=999
<	Minimum value is 1.
	The height is not adjusted after one of the commands that change the
	height of the current window.
	'winheight' applies to the current window.  Use 'winminheight' to set
	the minimal height for other windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
値を 999 にすると、常にカレントウィンドウが画面のほとんどを占め、ほかのウィンドウは '@option{winminheight}' の高さになる。(ただしこうすると "@command{:all}" を使ったときウィンドウが 2 つしか作られないという難点もある)。

"vim -o 1 2 3 4" としたとき 2 個のウィンドウしか作られないのを避けるには、イベント |VimEnter| を使って、スタートアップが行われた後にこのオプションを設定すればよい:
@example
au VimEnter * set winheight=999
@end example
最小値は 1。

カレントウィンドウの高さを変更するコマンドの後では、ウィンドウの高さは調整されない。'@option{winheight}' はカレントウィンドウに適用される。他のウィンドウの高さの最小値の設定には、'@option{winminheight}' を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'winfixheight'* *'wfh'* *'nowinfixheight'* *'nowfh'*
'winfixheight' 'wfh'	boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winfixheight'}
@anchor{'wfh'}
@anchor{'nowinfixheight'}
@anchor{'nowfh'}
@cindex 'winfixheight'
@cindex 'wfh'
@cindex 'nowinfixheight'
@cindex 'nowfh'
@item 'winfixheight' 'wfh'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Keep the window height when windows are opened or closed and
	'equalalways' is set.  Also for |CTRL-W_=|.  Set by default for the
	|preview-window| and |quickfix-window|.
	The height may be changed anyway when running out of room.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

'@option{equalalways}' をオンにしてウィンドウを開閉したとき、ウィンドウの高さを保つ。|CTRL-W_=| に対しても同様。|preview-window| と |quickfix-window| に対してはデフォルトでオンになる。

これをオンにしていても、利用できる高さが不足している場合には高さが変わる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*'winfixwidth'* *'wfw'* *'nowinfixwidth'* *'nowfw'*
'winfixwidth' 'wfw'	boolean	(default off)
			local to window
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winfixwidth'}
@anchor{'wfw'}
@anchor{'nowinfixwidth'}
@anchor{'nowfw'}
@cindex 'winfixwidth'
@cindex 'wfw'
@cindex 'nowinfixwidth'
@cindex 'nowfw'
@item 'winfixwidth' 'wfw'
切替 (既定ではオフ) @*
ウィンドウについてローカル @*
@{Vi にはない@} @*
@{Vim が|+windows|機能付きでコンパイルされたときのみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Keep the window width when windows are opened or closed and
	'equalalways' is set.  Also for |CTRL-W_=|.
	The width may be changed anyway when running out of room.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

'@option{equalalways}' がオンになっていてウィンドウを開閉したとき、ウィンドウの幅を保つ。|CTRL-W_=| に対しても同様。

これをオンにしていても、利用できる幅が不足している場合には幅が変わる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winminheight'* *'wmh'*
'winminheight' 'wmh'	number	(default 1)
			global
			{not in Vi}
			{not available when compiled without the |+windows|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winminheight'}
@anchor{'wmh'}
@cindex 'winminheight'
@cindex 'wmh'
@item 'winminheight' 'wmh'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+windows| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The minimal height of a window, when it's not the current window.
	This is a hard minimum, windows will never become smaller.
	When set to zero, windows may be "squashed" to zero lines (i.e. just a
	status bar) if necessary.  They will return to at least one line when
	they become active (since the cursor has to have somewhere to go.)
	Use 'winheight' to set the minimal height of the current window.
	This option is only checked when making a window smaller.  Don't use a
	large number, it will cause errors when opening more than a few
	windows.  A value of 0 to 3 is reasonable.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

カレントウィンドウではないウィンドウの高さの最小値。これは絶対的な最小値であり、ウィンドウは決してこれより低くはならない。

0 に設定すると、ウィンドウは必要に応じて高さゼロに「潰される」 (つまり、ステータス行のみになる)。ウィンドウがアクティブになると、高さは最低 1 行にはなる (カーソルの居場所が必要なため)。

カレントウィンドウの高さの最小値の設定には、'@option{winheight}' を使うこと。このオプションの効果があるのは、ウィンドウを小さくするときだけである。大きな値を使わないこと。そうするとウィンドウを幾つも開いたときにエラーになる。値は 0 から 3 までが適当である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winminwidth'* *'wmw'*
'winminwidth' 'wmw'	number	(default 1)
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winminwidth'}
@anchor{'wmw'}
@cindex 'winminwidth'
@cindex 'wmw'
@item 'winminwidth' 'wmw'
数値 (既定では 1) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The minimal width of a window, when it's not the current window.
	This is a hard minimum, windows will never become smaller.
	When set to zero, windows may be "squashed" to zero columns (i.e. just
	a vertical separator) if necessary.  They will return to at least one
	line when they become active (since the cursor has to have somewhere
	to go.)
	Use 'winwidth' to set the minimal width of the current window.
	This option is only checked when making a window smaller.  Don't use a
	large number, it will cause errors when opening more than a few
	windows.  A value of 0 to 12 is reasonable.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

カレントウィンドウではないウィンドウの幅の最小値。これは絶対的な最小値であり、ウィンドウは決してこれより狭くはならない。

0 に設定すると、ウィンドウは必要に応じて幅ゼロに「潰される」 (つまり、垂直分割の区切りのみになる)。ウィンドウがアクティブになると、幅は最低 1 列にはなる (カーソルの居場所が必要なため)。

カレントウィンドウの幅の最小値の設定には、'@option{winwidth}' を使うこと。このオプションの効果があるのは、ウィンドウを小さくするときだけである。大きな値を使わないこと。そうするとウィンドウを幾つも開いたときにエラーになる。値は 0 から 12 までが適当である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winptydll'*
'winptydll'		string	(default "winpty32.dll" or "winpty64.dll")
			global
			{not in Vi}
			{only available when compiled with the |terminal|
			feature on MS-Windows}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winptydll'}
@cindex 'winptydll'
@item 'winptydll'
文字列 (既定では "winpty32.dll" または "winpty64.dll") @*
グローバル @*
@{Vi にはない@} @*
@{Vim が MS-Windows 上で |terminal| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Specifies the name of the winpty shared library, used for the
	|:terminal| command. The default depends on whether was build as a
	32-bit or 64-bit executable.  If not found, "winpty.dll" is tried as
	a fallback.
	Environment variables are expanded |:set_env|.
	This option cannot be set from a |modeline| or in the |sandbox|, for
	security reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

|:terminal| コマンドで使われる winpty 共有ライブラリの名前を指定する。デフォルトは 32-bit 用もしくは 64-bit 用向けにビルドされているかどうかに依存する。もしも見つからなければ、"winpty.dll" にフォールバックしようとする。

環境変数は |:set_env| で展開される。

このオプションはセキュリティ上の理由により、モードライン |modeline| やサンドボックス |sandbox| から設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'winwidth'* *'wiw'* *E592*
'winwidth' 'wiw'	number	(default 20)
			global
			{not in Vi}
			{not available when compiled without the |+vertsplit|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'winwidth'}
@anchor{'wiw'}
@anchor{E592}
@cindex 'winwidth'
@cindex 'wiw'
@cindex E592
@item 'winwidth' 'wiw'
数値 (既定では 20) @*
グローバル @*
@{Vi にはない@} @*
@{Vim が |+vertsplit| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Minimal number of columns for the current window.  This is not a hard
	minimum, Vim will use fewer columns if there is not enough room.  If
	the current window is smaller, its size is increased, at the cost of
	the width of other windows.  Set it to 999 to make the current window
	always fill the screen.  Set it to a small number for normal editing.
	The width is not adjusted after one of the commands to change the
	width of the current window.
	'winwidth' applies to the current window.  Use 'winminwidth' to set
	the minimal width for other windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

カレントウィンドウの列数の最小値。これは絶対的な最小値ではなく、余裕のないときには列数はこれよりも少なくなる。カレントウィンドウの列数が指定したものより少ないときは、他のウィンドウの列数を減らしてそれを増やす。

カレントウィンドウが常に画面を埋めるようにするには、999 に設定すること。普通の編集時には小さい値に設定すること。カレントウィンドウの幅を変更するコマンドの後では、ウィンドウの幅は調整されない。

'@option{winwidth}' はカレントウィンドウに適用される。他のウィンドウの幅の最小値の設定には、'@option{winminwidth}' を使うこと。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wrap'* *'nowrap'*
'wrap'			boolean	(default on)
			local to window
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wrap'}
@anchor{'nowrap'}
@cindex 'wrap'
@cindex 'nowrap'
@item 'wrap'
切替 (既定ではオン) @*
ウィンドウについてローカル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	This option changes how text is displayed.  It doesn't change the text
	in the buffer, see 'textwidth' for that.
	When on, lines longer than the width of the window will wrap and
	displaying continues on the next line.  When off lines will not wrap
	and only part of long lines will be displayed.  When the cursor is
	moved to a part that is not shown, the screen will scroll
	horizontally.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

このオプションは、テキストの表示方法を変える。これはバッファ内のテキストには変更を与えない。それについてはオプション '@option{textwidth}' を参照。

オンのときは、ウィンドウの幅より長い行は折り返され、次の行に続けて表示される。オフのときは、折り返しは行われず、長い行は一部のみが表示される。カーソルが表示されていない部分に移動すると、画面は水平スクロールする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The line will be broken in the middle of a word if necessary.  See
	'linebreak' to get the break at a word boundary.
	To make scrolling horizontally a bit more useful, try this: >
		:set sidescroll=5
		:set listchars+=precedes:<,extends:>
<	See 'sidescroll', 'listchars' and |wrap-off|.
	This option can't be set from a |modeline| when the 'diff' option is
	on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

行の分割は、必要であれば単語の中ででも行われる。折り返しを単語の境界で行うには、'@option{linebreak}' を参照。

水平スクロールをもっと便利にするには、次のようにしてみるとよい。
@example
:set sidescroll=5
:set listchars+=precedes:<,extends:>
@end example
'@option{sidescroll}', '@option{listchars}' や |wrap-off| を参照。

オプション '@option{diff}' がオンの場合、モードライン |modeline| からこのオプションを設定することはできない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'wrapmargin'* *'wm'*
'wrapmargin' 'wm'	number	(default 0)
			local to buffer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wrapmargin'}
@anchor{'wm'}
@cindex 'wrapmargin'
@cindex 'wm'
@item 'wrapmargin' 'wm'
数値 (既定では 0) @*
バッファについてローカル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Number of characters from the right window border where wrapping
	starts.  When typing text beyond this limit, an <EOL> will be inserted
	and inserting continues on the next line.
	Options that add a margin, such as 'number' and 'foldcolumn', cause
	the text width to be further reduced.  This is Vi compatible.
	When 'textwidth' is non-zero, this option is not used.
	This option is set to 0 when 'paste' is set and restored when 'paste'
	is reset.
	See also 'formatoptions' and |ins-textwidth|.  {Vi: works differently
	and less usefully}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ウィンドウの右端からこの文字数だけ離れたところで折り返しが始まる。この境界を超えてテキストを入力すると、<EOL> が挿入され、挿入は次行に続く。

'@option{number}' や '@option{foldcolumn}' など幅をとるオプションを使用していると、テキストの幅がこの値より少なくなる。これはVi互換の動作である。

オプション '@option{textwidth}' が非 0 のときは、このオプションは使われない。このオプションは '@option{paste}' オプションがオンになった時には 0 が設定され、'@option{paste}' オプションがリセットされた際には復元される。

'@option{formatoptions}' と |ins-textwidth| も参照。

@{Vi: 少し不便な、違った動作をする@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'wrapscan'* *'ws'* *'nowrapscan'* *'nows'*
'wrapscan' 'ws'		boolean	(default on)			*E384* *E385*
			global
	Searches wrap around the end of the file.  Also applies to |]s| and
	|[s|, searching for spelling mistakes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'wrapscan'}
@anchor{'ws'}
@anchor{'nowrapscan'}
@anchor{'nows'}
@cindex 'wrapscan'
@cindex 'ws'
@cindex 'nowrapscan'
@cindex 'nows'
@anchor{E384}
@anchor{E385}
@cindex E384
@cindex E385
@item 'wrapscan' 'ws'
切替 (既定ではオン) @*
グローバル @*

検索がファイル末尾まで進んだら、ファイル先頭から再び検索する。スペリングミスを検索する |]s| と |[s| にも適用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						   *'write'* *'nowrite'*
'write'			boolean	(default on)
			global
			{not in Vi}
	Allows writing files.  When not set, writing a file is not allowed.
	Can be used for a view-only mode, where modifications to the text are
	still allowed.  Can be reset with the |-m| or |-M| command line
	argument.  Filtering text is still possible, even though this requires
	writing a temporary file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'write'}
@anchor{'nowrite'}
@cindex 'write'
@cindex 'nowrite'
@item 'write'
切替 (既定ではオン) @*
グローバル @*
@{Vi にはない@}

ファイルの書き込みを有効にする。オフのときは、書き込みができない。読込専用モードに使える。ただしファイルの編集は可能である。コマンドライン引数 |-m| や |-M| を使ってオフに設定できる。テキストをフィルタにかけることも可能であり、一時ファイルの書き込みも可能である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
				   *'writeany'* *'wa'* *'nowriteany'* *'nowa'*
'writeany' 'wa'		boolean	(default off)
			global
	Allows writing to any file with no need for "!" override.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'writeany'}
@anchor{'wa'}
@anchor{'nowriteany'}
@anchor{'nowa'}
@cindex 'writeany'
@cindex 'wa'
@cindex 'nowriteany'
@cindex 'nowa'
@item 'writeany' 'wa'
切替 (既定ではオフ) @*
グローバル

いかなるファイルも "!" なしに書き込みができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			     *'writebackup'* *'wb'* *'nowritebackup'* *'nowb'*
'writebackup' 'wb'	boolean	(default on with |+writebackup| feature, off
					otherwise)
			global
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'writebackup'}
@anchor{'wb'}
@anchor{'nowritebackup'}
@anchor{'nowb'}
@cindex 'writebackup'
@cindex 'wb'
@cindex 'nowritebackup'
@cindex 'nowb'
@item 'writebackup' 'wb'
切替 (|+writebackup| 機能付きでコンパイルされたなら既定値はオン、そうでないなら既定値はオフ) @*
グローバル @*
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Make a backup before overwriting a file.  The backup is removed after
	the file was successfully written, unless the 'backup' option is
	also on.
	WARNING: Switching this option off means that when Vim fails to write
	your buffer correctly and then, for whatever reason, Vim exits, you
	lose both the original file and what you were writing.  Only reset
	this option if your file system is almost full and it makes the write
	fail (and make sure not to exit Vim until the write was successful).
	See |backup-table| for another explanation.
	When the 'backupskip' pattern matches, a backup is not made anyway.
	NOTE: This option is set to the default value when 'compatible' is
	set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ファイルの上書きの前にバックアップを作る。オプション '@option{backup}' がオンでない限り、バックアップは上書きに成功した後削除される。
@quotation
@strong{WARNING:} @*
このオプションをオフにするということは、すなわち、何らかの理由で Vim がバッファを正しく保存できなかったときに、そのまま Vim を終了してしまうと、あなたは元のファイルと新しく書いた内容の両方を失うということを意味する。例えばファイルシステムが一杯で書き込みができないような場合のみこのオプションをオフにすること (そして、保存が成功するまで Vim を終了してはならない)。
@end quotation
他の説明は |backup-table| を参照。

'@option{backupskip}' のパターンがマッチしたら、バックアップは作られない。
@quotation
@strong{Note:} @*
このオプションは、'@option{compatible}' がオンのときは既定値になるので注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*'writedelay'* *'wd'*
'writedelay' 'wd'	number	(default 0)
			global
			{not in Vi}
	The number of milliseconds to wait for each character sent to the
	screen.  When non-zero, characters are sent to the terminal one by
	one.  For MS-DOS pcterm this does not work.  For debugging purposes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'writedelay'}
@anchor{'wd'}
@cindex 'writedelay'
@cindex 'wd'
@item 'writedelay' 'wd'
数値 (既定では 0) @*
グローバル @*
@{Vi にはない@}

打ち込まれた文字が画面に送られるまでの遅延時間を、ミリ秒単位で指定する。非 0 のときは、文字は画面に 1 つ 1 つ送られる。MS-DOS の pcterm では動作しない。これはデバッグ用のオプションである。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
