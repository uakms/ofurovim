@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_22.txt, usr_23.txt, usr_21.txt, 目次
@unnumbered ファイルを探す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_22.txt*	For Vim version 8.0.  Last change: 2016 Dec 13

		     VIM USER MANUAL - by Bram Moolenaar

			   Finding the file to edit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_22.txt
@verbatim
*usr_22.txt*	For Vim バージョン 8.0.  Last change: 2016 Dec 13

		     VIM USER MANUAL - by Bram Moolenaar

				ファイルを探す
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Files can be found everywhere.  So how do you find them?  Vim offers various
ways to browse the directory tree.  There are commands to jump to a file that
is mentioned in another.  And Vim remembers which files have been edited
before.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルはどこにでもありますが、どうやって目的のファイルを見つければいいのでしょうか。Vim ではさまざまな方法でディレクトリツリーをブラウズできます。ファイルにジャンプするコマンドもあります。開いたことのあるファイルは後から参照できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|22.1|	The file browser
|22.2|	The current directory
|22.3|	Finding a file
|22.4|	The buffer list

     Next chapter: |usr_23.txt|  Editing other files
 Previous chapter: |usr_21.txt|  Go away and come back
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{22.1, , 22.1}| @tab ファイルブラウザー
@item |@ref{22.2, , 22.2}| @tab カレントディレクトリ
@item |@ref{22.3, , 22.3}| @tab ファイルを探す
@item |@ref{22.4, , 22.4}| @tab バッファリスト
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*22.1*	The file browser
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{22.1}
@section ファイルブラウザー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim has a plugin that makes it possible to edit a directory.  Try this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ディレクトリを編集するためのプラグインがあります。試してみましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit .
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit .
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Through the magic of autocommands and Vim scripts, the window will be filled
with the contents of the directory.  It looks like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自動コマンドと Vim script の魔法により、ディレクトリの内容がウィンドウに表示されます。例えばこんな具合です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
" ============================================================================ ~
" Netrw Directory Listing                                        (netrw v109) ~
"   Sorted by      name ~
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~
" ============================================================================ ~
../ ~
./ ~
check/ ~
Makefile ~
autocmd.txt ~
change.txt ~
eval.txt~ ~
filetype.txt~ ~
help.txt.info ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
" ============================================================================
" Netrw Directory Listing                                        (netrw v109)
"   Sorted by      name
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec
" ============================================================================
../
./
check/
Makefile
autocmd.txt
change.txt
eval.txt~
filetype.txt~
help.txt.info
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can see these items:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の項目が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1.  The name of the browsing tool and its version number
2.  The name of the browsing directory
3.  The method of sorting (may be by name, time, or size)
4.  How names are to be sorted (directories first, then *.h files,
    *.c files, etc)
5.  How to get help (use the <F1> key), and an abbreviated listing
    of available commands
6.  A listing of files, including "../", which allows one to list
    the parent directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item ブラウジングツールの名前とバージョン番号
@item 表示しているディレクトリ
@item ソート方法 (name、time、size など)
@item 名前のソート方法 (最初はディレクトリで、続いて *.h、*.c、などなど)
@item ヘルプの表示方法 (<F1>キーを使ってください)。利用可能なコマンド抜粋。
@item ファイル一覧。"../" は親ディレクトリを示す。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have syntax highlighting enabled, the different parts are highlighted
so as to make it easier to spot them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
構文強調表示が有効な場合は各項目が別々の色で表示され、視認性が上がります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use Normal mode Vim commands to move around in the text.  For example,
move the cursor atop a file and press <Enter>; you will then be editing that
file.  To go back to the browser use ":edit ." again, or use ":Explore".
CTRL-O also works.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一覧の中はノーマルモードコマンドで移動できます。ファイル名の上にカーソルを動かして @key{<Enter>} を押すとファイルが開きます。もう一度 "@command{:edit .}" と入力すればエクスプローラーに戻れます。@kbd{CTRL-O} で戻ることもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Try using <Enter> while the cursor is atop a directory name.  The result is
that the file browser moves into that directory and displays the items found
there.  Pressing <Enter> on the first directory "../" moves you one level
higher.  Pressing "-" does the same thing, without the need to move to the
"../" item first.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ディレクトリ名の上にカーソルを動かして @key{<Enter>} を押すと、ファイルブラウザーがそのディレクトリに移動し、新たなファイル一覧が表示されます。"../" ディレクトリの上で @key{<Enter>} を押すと上の階層に移動できます。あるいは、"../" までカーソルを移動しなくても、"@key{-}" を押すだけで上の階層に移動できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can press <F1> to get help on the things you can do in the netrw file
browser.  This is what you get: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<F1>} を押すと netrw ファイルブラウザーのヘルプが表示されます。表示は次のようなものです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    9. Directory Browsing	 netrw-browse   netrw-dir   netrw-list   netrw-help 

    MAPS								 netrw-maps 
     	 <F1>.............Help.......................................|netrw-help|
     	 <cr>.............Browsing...................................|netrw-cr|
     	 <del>............Deleting Files or Directories..............|netrw-delete|
     	 -................Going Up...................................|netrw--|
     	 a................Hiding Files or Directories................|netrw-a|
     	 mb...............Bookmarking a Directory....................|netrw-mb|
     	 gb...............Changing to a Bookmarked Directory.........|netrw-gb|
     	 c................Make Browsing Directory The Current Dir....|netrw-c|
     	 d................Make A New Directory.......................|netrw-d|
     	 D................Deleting Files or Directories..............|netrw-D|
     	 <c-h>............Edit File/Directory Hiding List............|netrw-ctrl-h|
     	 i................Change Listing Style.......................|netrw-i|
     	 <c-l>............Refreshing the Listing.....................|netrw-ctrl-l|
     	 o................Browsing with a Horizontal Split...........|netrw-o|
     	 p................Use Preview Window.........................|netrw-p|
     	 P................Edit in Previous Window....................|netrw-p|
     	 q................Listing Bookmarks and History..............|netrw-qb|
     	 r................Reversing Sorting Order....................|netrw-r|
<    	(etc)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
9. Directory Browsing        netrw-browse   netrw-dir   netrw-list   netrw-help

MAPS                                                                 netrw-maps
     <F1>.............ヘルプ.....................................|netrw-help|
     <cr>.............ブラウジング...............................|netrw-cr|
     <del>............ファイル/ディレクトリを削除................|netrw-delete|
     -................親ディレクトリに移動.......................|netrw--|
     a................ファイル/ディレクトリを隠す................|netrw-a|
     mb...............ディレクトリをブックマークする.............|netrw-mb|
     gb...............ブックマークしたディレクトリに移動.........|netrw-gb|
     c................表示ディレクトリをカレントディレクトリに...|netrw-c|
     d................ディレクトリ作成...........................|netrw-d|
     D................ファイル/ディレクトリを削除................|netrw-D|
     <c-h>............ファイル/ディレクトリ隠し設定編集..........|netrw-ctrl-h|
     i................表示スタイル変更...........................|netrw-i|
     <c-l>............最新情報に更新.............................|netrw-ctrl-l|
     o................水平分割してファイルを開く.................|netrw-o|
     p................プレビューウィンドウを使う.................|netrw-p|
     P................プレビューウィンドウで開く.................|netrw-p|
     q................ブックマークと履歴を表示する...............|netrw-qb|
     r................ソート順序を逆にする.......................|netrw-r|
@end verbatim
     (etc)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The <F1> key thus brings you to a netrw directory browsing contents help page.
It's a regular help page; use the usual |CTRL-]| to jump to tagged help items
and |CTRL-O| to jump back.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{<F1>} キーを押すと netrw プラグインのヘルプに飛びます。これは通常のヘルプページです。|CTRL-]| でタグジャンプして |CTRL-O| で戻ることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To select files for display and editing: (with the cursor is atop a filename)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを選択してファイルを開きます: (カーソルをファイル名の上に移動してから)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	<enter>		Open the file in the current window.	   |netrw-cr|
	o		Horizontally split window and display file |netrw-o|
	v		Vertically split window and display file   |netrw-v|
	p		Use the |preview-window| 		   |netrw-p|
	P		Edit in the previous window		   |netrw-P|
	t		Open file in a new tab			   |netrw-t|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .65 .20
@item <enter> @tab カレントウィンドウでファイルを開く @tab |netrw-cr|
@item o @tab ウィンドウを水平分割してファイルを表示する @tab |netrw-o|
@item v @tab ウィンドウを垂直分割してファイルを表示する @tab |netrw-v|
@item p @tab |preview-window| を使う @tab |netrw-p|
@item P @tab 直前のウィンドウで開く @tab |netrw-P|
@item t @tab 新しいタブページで開く @tab |netrw-t|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following normal-mode commands may be used to control the browser display:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードでは次のコマンドを使ってブラウザーの表示をコントロールできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	i		Controls listing style (thin, long, wide, and tree).
			The long listing includes size and date information.
	s		Repeatedly pressing s will change the way the files
			are sorted; one may sort on name, modification time,
			or size.
	r		Reverse the sorting order.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item i @tab 表示スタイルを変更する (thin, long, wide, tree)。long ではファイルのサイズと日付が表示されます。
@item s @tab ファイルのソート方法を切り替える。名前、更新時間、サイズでソート可。
@item r @tab ソート順序を逆にする。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As a sampling of extra normal-mode commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のようなコマンドもあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	c		Change Vim's notion of the current directory to be
			the same as the browser directory.  (see
			|g:netrw_keepdir| to control this, too)
	R		Rename the file or directory under the cursor; a
			prompt will be issued for the new name.
	D		Delete the file or directory under the cursor; a
			confirmation request will be issued.
	mb gb		Make bookmark/goto bookmark
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item c @tab 表示しているディレクトリをカレントディレクトリにする。(|g:netrw_keepdir| で動作を変更できます)
@item R @tab カーソルの下のファイル/ディレクトリの名前を変更する。表示されるプロンプトに新しい名前を入力してください。
@item D @tab カーソルの下のファイル/ディレクトリを削除する。確認ダイアログが表示されます。
@item mb gb @tab ブックマークを設定/ブックマークに移動
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
One may also use command mode; again, just a sampling:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような Ex コマンドもあります (他にもあります):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:Explore [directory]	Browse specified/current directory
	:NetrwSettings		A comprehensive list of your current netrw
				settings with help linkage.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item :Explore [directory] @tab カレントディレクトリ、または指定したディレクトリをブラウズする。
@item :NetrwSettings @tab netrw の現在の設定一覧。ヘルプリンク付き。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The netrw browser is not limited to just your local machine; one may use
urls such as:    (that trailing / is important)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
netrw ブラウザーの機能はローカルマシンに限定されません。次のように url を使うこともできます: (末尾の @samp{/} は重要)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:Explore ftp://somehost/path/to/dir/
	:e scp://somehost/path/to/dir/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:Explore ftp://somehost/path/to/dir/
:e scp://somehost/path/to/dir/
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |netrw-browse| for more.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は |netrw-browse| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*22.2*	The current directory
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{22.2}
@section カレントディレクトリ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Just like the shell, Vim has the concept of a current directory.  Suppose you
are in your home directory and want to edit several files in a directory
"VeryLongFileName".  You could do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シェルと同じように Vim にもカレントディレクトリという概念があります。例えば、ホームディレクトリにいるときに "VeryLongFileName" ディレクトリにあるファイルを開きたい場合、そのまま実行することもできますが:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit VeryLongFileName/file1.txt
:edit VeryLongFileName/file2.txt
:edit VeryLongFileName/file3.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To avoid much of the typing, do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のようにすれば、入力が簡単です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:cd VeryLongFileName
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:cd VeryLongFileName
:edit file1.txt
:edit file2.txt
:edit file3.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":cd" command changes the current directory.  You can see what the current
directory is with the ":pwd" command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:cd}" コマンドでカレントディレクトリを変更できます。現在のカレントディレクトリを確認するには "@command{:pwd}" コマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:pwd
	/home/Bram/VeryLongFileName
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:pwd
/home/Bram/VeryLongFileName
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim remembers the last directory that you used.  Use "cd -" to go back to it.
Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
直前のカレントディレクトリは記録されているので "@command{:cd -}" で元の場所に戻れます。
例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:pwd
/home/Bram/VeryLongFileName
:cd /etc
:pwd
/etc
:cd -
:pwd
/home/Bram/VeryLongFileName
:cd -
:pwd
/etc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WINDOW LOCAL DIRECTORY
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ウィンドウローカルディレクトリ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you split a window, both windows use the same current directory.  When
you want to edit a number of files somewhere else in the new window, you can
make it use a different directory, without changing the current directory in
the other window.  This is called a local directory. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを分割した直後、2 つのウィンドウは同じカレントディレクトリを使っています。カレントディレクトリはウィンドウ毎に設定できるので、新しいウィンドウだけカレントディレクトリを変更して別の場所で作業できます。これを、ローカルディレクトリといいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:pwd
/home/Bram/VeryLongFileName
:split
:lcd /etc
:pwd
/etc
CTRL-W w
:pwd
/home/Bram/VeryLongFileName
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
So long as no ":lcd" command has been used, all windows share the same current
directory.  Doing a ":cd" command in one window will also change the current
directory of the other window.
   For a window where ":lcd" has been used a different current directory is
remembered.  Using ":cd" or ":lcd" in other windows will not change it.
   When using a ":cd" command in a window that uses a different current
directory, it will go back to using the shared directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:lcd}" コマンドを使うまでは、すべてのウィンドウが共通のカレントディレクトリを使っています。1 つのウィンドウで "@command{:cd}" コマンドを実行すると、他のウィンドウのカレントディレクトリも変更されます。

"@command{:lcd}" を使ってカレントディレクトリを変更したウィンドウは、固有のカレントディレクトリを持ちます。固有のカレントディレクトリは、他のウィンドウで "@command{:cd}" または "@command{:lcd}" を使っても変更されません。

固有のカレントディレクトリを持っているウィンドウで "@command{:cd}" コマンドを使うと、再び共通のカレントディレクトリを使うようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*22.3*	Finding a file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{22.3}
@section ファイルを探す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You are editing a C program that contains this line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
C 言語のファイルを編集していて、次のような行があったとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	#include "inits.h" ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
#include "inits.h"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You want to see what is in that "inits.h" file.  Move the cursor on the name
of the file and type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@file{inits.h}" を開いて内容を確認したい場合は、カーソルをファイル名の上に動かして、次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	gf
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
gf
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will find the file and edit it.
   What if the file is not in the current directory?  Vim will use the 'path'
option to find the file.  This option is a list of directory names where to
look for your file.
   Suppose you have your include files located in "c:/prog/include".  This
command will add it to the 'path' option: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルが検索され、開かれます。

ファイルがカレントディレクトリにない場合は '@option{path}' オプションが使われます。このオプションはディレクトリ名のリストです。指定されたディレクトリからファイルが検索されます。

例えば、"c:/prog/include" にインクルードファイルがある場合は次のコマンドでディレクトリを追加できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set path+=c:/prog/include
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set path+=c:/prog/include
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This directory is an absolute path.  No matter where you are, it will be the
same place.  What if you have located files in a subdirectory, below where the
file is?  Then you can specify a relative path name.  This starts with a dot:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ディレクトリを絶対パスで指定した場合は、どこで作業していても同じディレクトリが参照されます。開いているファイル以下のサブディレクトリにインクルードファイルがある場合は相対パスを指定してください。相対パスの先頭はドットです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:set path+=./proto
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set path+=./proto
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This tells Vim to look in the directory "proto", below the directory where the
file in which you use "gf" is.  Thus using "gf" on "inits.h" will make Vim
look for "proto/inits.h", starting in the directory of the file.
   Without the "./", thus "proto", Vim would look in the "proto" directory
below the current directory.  And the current directory might not be where the
file that you are editing is located.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この場合、ファイルが保存されているディレクトリの "proto" ディレクトリからファイルが検索されます。つまり、"inits.h" の上で "gf" を使うと、同じディレクトリの "inits.h" が検索された後に、"proto/inits.h" が検索されます。

"./" を付けなかった場合、つまり "proto" と指定した場合は、カレントディレクトリの "proto" ディレクトリが検索されます。ファイルのディレクトリとカレントディレクトリは意味が異なるので注意してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'path' option allows specifying the directories where to search for files
in many more ways.  See the help on the 'path' option.
   The 'isfname' option is used to decide which characters are included in the
file name, and which ones are not (e.g., the " character in the example
above).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ディレクトリの指定方法は他にもあります。'@option{path}' オプションのヘルプを参照してください。
'@option{isfname}' オプションには、ファイル名として使える文字、あるいは使えない文字を設定できます (例えば上の例では @samp{"} 文字がファイル名に含まれてませんね)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you know the file name, but it's not to be found in the file, you can
type it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの名前がわかっている場合は、その名前がファイル内で使われていなくても、検索することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:find inits.h
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:find inits.h
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will then use the 'path' option to try and locate the file.  This is the
same as the ":edit" command, except for the use of 'path'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{path}' オプションを使ってファイルが検索されます。'@option{path}' が使われる以外は "@command{:edit}" コマンドと同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To open the found file in a new window use CTRL-W f instead of "gf", or use
":sfind" instead of ":find".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
検索したファイルを新しいウィンドウで開くには、"@command{gf}" "@command{:find}" ではなく "@kbd{CTRL-W f}" "@command{:sfind}" を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
A nice way to directly start Vim to edit a file somewhere in the 'path': >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動して '@option{path}' の中からファイルを開くには、次の方法が便利です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim "+find stdio.h"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim "+find stdio.h"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This finds the file "stdio.h" in your value of 'path'.  The quotes are
necessary to have one argument |-+c|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{path}' 内の "@file{stdio.h}" が検索されます。引数はクォート (@samp{"}) で囲む必要があります |-+c|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*22.4*	The buffer list
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{22.4}
@section バッファリスト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Vim editor uses the term buffer to describe a file being edited.
Actually, a buffer is a copy of the file that you edit.  When you finish
changing the buffer, you write the contents of the buffer to the file.
Buffers not only contain file contents, but also all the marks, settings, and
other stuff that goes with it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim では編集中のファイルのことをバッファといいます。バッファはファイルのコピーです。編集を終えて保存したときに、バッファの内容がファイルに書き込まれます。バッファにはファイルのテキストの他に、マークやオプション設定などのファイルに関連した情報も記録されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
HIDDEN BUFFERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 隠れバッファ (HIDDEN BUFFERS)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you are editing the file one.txt and need to edit the file two.txt.
You could simply use ":edit two.txt", but since you made changes to one.txt
that won't work.  You also don't want to write one.txt yet.  Vim has a
solution for you: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、@file{one.txt} を編集しているときに @file{two.txt} を編集したくなったとします。@file{one.txt} は変更されているので "@command{:edit two.txt}" は使えません。しかも、あなたはまだ @file{one.txt} を保存したくはありません。次のコマンドで解決できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:hide edit two.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:hide edit two.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The buffer "one.txt" disappears from the screen, but Vim still knows that you
are editing this buffer, so it keeps the modified text.  This is called a
hidden buffer: The buffer contains text, but you can't see it.
   The argument of ":hide" is another command.  ":hide" makes that command
behave as if the 'hidden' option was set.  You could also set this option
yourself.  The effect is that when any buffer is abandoned, it becomes hidden.
   Be careful!  When you have hidden buffers with changes, don't exit Vim
without making sure you have saved all the buffers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"one.txt" というバッファは画面から消えます。しかしバッファの内容が失われるわけではありません。未保存のテキストはまだ残っています。このようなバッファを隠れバッファといいます。

"@command{:hide}" コマンドの引数はコマンドです。指定されたコマンドは、'@option{hidden}' オプションがオンに設定されているかのように動作します。もちろん、自分で '@option{hidden}' オプションを設定しても構いません。バッファが破棄されたとき、'@option{hidden}' がオンなら、そのバッファは隠れバッファになります。

隠れバッファを使ったときは、すべてのバッファが保存されたのを確認してから Vim を終了してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
INACTIVE BUFFERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 休眠バッファ (INACTIVE BUFFERS)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
   When a buffer has been used once, Vim remembers some information about it.
When it is not displayed in a window and it is not hidden, it is still in the
buffer list.  This is called an inactive buffer.  Overview:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バッファを閉じてもいくつかの情報は失われずに残ります。バッファリストに入っているバッファの内、画面に表示されず、隠れバッファでもないバッファのことを休眠バッファといいます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
   Active		Appears in a window, text loaded.
   Hidden		Not in a window, text loaded.
   Inactive		Not in a window, no text loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item アクティブバッファ @tab ウィンドウに表示されている。テキストはメモリの中。
@item 隠れバッファ @tab 表示されていない。テキストはメモリの中。
@item 休眠バッファ @tab 表示されていない。テキストは保持されていない。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The inactive buffers are remembered, because Vim keeps information about them,
like marks.  And remembering the file name is useful too, so that you can see
which files you have edited.  And edit them again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
休眠バッファにはファイル名やマークなどの情報が保存されています。ファイル名が保存されているので、編集したことのあるファイルを確認し、それを再び開くことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LISTING BUFFERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec バッファリストの表示
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
View the buffer list with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでバッファリストを表示できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:buffers
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:buffers
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A command which does the same, is not so obvious to list buffers, but is much
shorter to type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドも同じです。コマンドの名前と機能が連想しずらいかもしれませんが、入力は簡単です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:ls
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:ls
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The output could look like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドの出力例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  1 #h   "help.txt"			line 62 ~
  2 %a + "usr_21.txt"			line 1 ~
  3      "usr_toc.txt"			line 1 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
1 #h   "help.txt"                     line 62
2 %a + "usr_21.txt"                   line 1
3      "usr_toc.txt"                  line 1
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first column contains the buffer number.  You can use this to edit the
buffer without having to type the name, see below.
   After the buffer number come the flags.  Then the name of the file
and the line number where the cursor was the last time.
   The flags that can appear are these (from left to right):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行頭の数字はバッファ番号です。バッファを開くときに名前の代わりにバッファ番号を指定することもできます。下記参照。

バッファ番号に続いてフラグ、ファイル名、最後にカーソルが位置していた行番号、が表示されます。

フラグ部分には以下の文字が (左から右へ) 表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	u	Buffer is unlisted |unlisted-buffer|.
	 %	Current buffer.
	 #	Alternate buffer.
	  a	Buffer is loaded and displayed.
	  h	Buffer is loaded but hidden.
	   =	Buffer is read-only.
	   -	Buffer is not modifiable, the 'modifiable' option is off.
	    +	Buffer has been modified.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item u @tab 非列挙バッファ (|unlisted-buffer|)。
@item @ % @tab カレントバッファ。
@item @ # @tab オルタネートバッファ。
@item @ @ a @tab テキストを持っている。表示されている。
@item @ @ h @tab テキストを持っている。隠れバッファ。
@item @ @ @ = @tab 読み込み専用。
@item @ @ @ - @tab 変更不可 ('@option{modifiable}' オプションがオフ)。
@item @ @ @ @ + @tab 変更あり。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
EDITING A BUFFER
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec バッファを開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can edit a buffer by its number.  That avoids having to type the file
name: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バッファ番号を指定してバッファを開くことができます。ファイル名を入力する必要はありません:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:buffer 2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:buffer 2
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
But the only way to know the number is by looking in the buffer list.  You can
use the name, or part of it, instead: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかし、バッファ番号を知るためにはバッファリストを表示しなければなりません。名前の一部分だけを指定して開くこともできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:buffer help
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:buffer help
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will find the best match for the name you type.  If there is only one
buffer that matches the name, it will be used.  In this case "help.txt".
   To open a buffer in a new window: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定された名前に近いバッファが検索され、名前が一致したバッファが一つだけなら、そのバッファが使われます。この例なら "help.txt" など。

バッファを新しいウィンドウで開くには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:sbuffer 3
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:sbuffer 3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This works with a name as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もちろん名前も指定できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING THE BUFFER LIST
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec バッファリストを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can move around in the buffer list with these commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでバッファリストの中を移動できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:bnext		go to next buffer
	:bprevious	go to previous buffer
	:bfirst		go to the first buffer
	:blast		go to the last buffer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item :bnext @tab 次のバッファを開く
@item :bprevious @tab 前のバッファを開く
@item :bfirst @tab 最初のバッファを開く
@item :blast @tab 最後のバッファを開く
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To remove a buffer from the list, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでバッファリストからバッファを削除できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:bdelete 3
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:bdelete 3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Again, this also works with a name.
   If you delete a buffer that was active (visible in a window), that window
will be closed.  If you delete the current buffer, the current window will be
closed.  If it was the last window, Vim will find another buffer to edit.  You
can't be editing nothing!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もちろん名前も指定できます。

アクティブバッファ (ウィンドウに表示されているバッファ) を削除すると、表示していたウィンドウも閉じます。カレントバッファを削除するば、カレントウィンドウが閉じます。ウィンドウが一つしかなかった場合は、他のバッファに切り替わります。何もないを開くことはできません！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Even after removing the buffer with ":bdelete" Vim still remembers it.
	It's actually made "unlisted", it no longer appears in the list from
	":buffers".  The ":buffers!" command will list unlisted buffers (yes,
	Vim can do the impossible).  To really make Vim forget about a buffer,
	use ":bwipe".  Also see the 'buflisted' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"@command{:bdelete}" でバッファを削除してもバッファの情報は失われません。バッファが "unlisted" 状態になり、"@command{:buffers}" コマンドで表示されなくなるだけです。"@command{:buffers!}" コマンドを使えば unlisted バッファも表示されます (そう、Vim は不可能を可能にするのです)。バッファの情報を完全に消去するには "@command{:bwipe}" を使ってください。'@option{buflisted}' オプション参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_23.txt|  Editing other files

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
