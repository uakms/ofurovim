@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node various.txt, , , 目次
@unnumbered その他の様々なコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*various.txt*   For Vim version 8.1.  Last change: 2018 Mar 29


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*various.txt*   For Vim バージョン 8.1.  Last change: 2018 Mar 29


		  VIM リファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Various commands					*various*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{various}
@cindex various
様々なコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Various commands		|various-cmds|
2. Using Vim like less or more	|less|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .6 .4
@item 1. 様々なコマンド @tab |@ref{various-cmds}|
@item 2. less、more の代わりに Vim を使う @tab |@ref{less}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Various commands					*various-cmds*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{various-cmds}
@cindex various-cmds
@cindex 様々なコマンド
@section 1. 様々なコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*CTRL-L*
CTRL-L			Clear and redraw the screen.  The redraw may happen
			later, after processing typeahead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-L}
@kindex CTRL-L
@table @asis
@item @kbd{CTRL-L}
画面を消去して再描画します。すでに入力されているキーをすべて処理してから再描画します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:redr* *:redraw*
:redr[aw][!]		Redraw the screen right now.  When ! is included it is
			cleared first.
			Useful to update the screen halfway executing a script
			or function.  Also when halfway a mapping and
			'lazyredraw' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:redr}
@anchor{:redraw}
@pindex :redr
@pindex :redraw
@item :redr[aw][!]
画面をすぐに再描画します。! を付けたときは、画面を消去してから再描画します。

スクリプトや関数を実行している途中で画面を更新するのに便利です。マップの実行中や、'@option{lazyredraw}' がオンに設定されているときでも更新できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:redraws* *:redrawstatus*
:redraws[tatus][!]	Redraw the status line of the current window.  When !
			is included all status lines are redrawn.
			Useful to update the status line(s) when 'statusline'
			includes an item that doesn't cause automatic
			updating.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:redraws}
@anchor{:redrawstatus}
@pindex :redraws
@pindex :redrawstatus
@item :redraws[tatus][!]
カレントウィンドウのステータスラインを再描画します。! を付けたときは、すべてのステータスラインを再描画します。

'@option{statusline}' に自動更新されない項目が含まれている場合に、ステータスラインを更新するのに便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*N<Del>*
<Del>			When entering a number: Remove the last digit.
			Note: if you like to use <BS> for this, add this
			mapping to your .vimrc: >
				:map CTRL-V <BS>   CTRL-V <Del>
<			See |:fixdel| if your <Del> key does not do what you
			want.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{N<Del>}
@kindex N<Del>
@item @key{<Del>}
ノーマルモードで数値 (|@ref{count}|) を入力しているときは、数字の最後の桁を削除します。
@quotation
@strong{Note:} @*
同じことをするのに @key{<BS>} を使いたい場合は、次のマップを .vimrc に追加してください:
@example
:map CTRL-V <BS>   CTRL-V <Del>
@end example
@key{<Del>} が望みどおりに機能しない場合には |@ref{:fixdel}| を参照。

@{訳注: "CTRL-V <BS>"は @kbd{CTRL-V} を押してから @key{<BS>} を押す。@}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:as[cii]	or					*ga* *:as* *:ascii*
ga			Print the ascii value of the character under the
			cursor in decimal, hexadecimal and octal.
			Mnemonic: Get Ascii value.

			For example, when the cursor is on a 'R':
				<R>  82,  Hex 52,  Octal 122 ~
			When the character is a non-standard ASCII character,
			but printable according to the 'isprint' option, the
			non-printable version is also given.
			
			When the character is larger than 127, the <M-x> form
			is also printed.  For example:
				<~A>  <M-^A>  129,  Hex 81,  Octal 201 ~
				<p>  <|~>  <M-~>  254,  Hex fe,  Octal 376 ~
			(where <p> is a special character)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ga}
@anchor{:as}
@anchor{:ascii}
@kindex ga
@pindex :as
@pindex :ascii
@item :as[cii] または
@itemx ga
カーソル位置の文字の文字コードを、10/16/8 進数で表示します。

覚え方: Get Ascii value (ASCII コードを取得)

カーソルが 'R' の上にあるときは次のように表示されます:
@verbatim
<R>  82,  Hex 52,  Octal 122
@end verbatim
ASCII 以外の文字がオプション '@option{isprint}' に設定されていて、表示可能になっている場合には、特殊な表示形式もいっしょに表示されます。

文字コードが 127 より大きいときには <M-x> という形式も表示されます。例:
@verbatim
<~A>  <M-^A>  129,  Hex 81,  Octal 201
<p>  <|~>  <M-~>  254,  Hex fe,  Octal 376
@end verbatim
(<p> には実際の特殊文字が表示されます。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The <Nul> character in a file is stored internally as
			<NL>, but it will be shown as:
				<^@>  0,  Hex 00,  Octal 000 ~

			If the character has composing characters these are
			also shown.  The value of 'maxcombine' doesn't matter.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル中の <Nul> 文字は内部的には <NL> として保存されていますが、次のように表示されます:
@verbatim
<^@>  0,  Hex 00,  Octal 000
@end verbatim
合成文字も表示されます。'@option{maxcombine}' の設定は影響しません。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If the character can be inserted as a digraph, also
			output the two characters that can be used to create
			the character:
			    <ö> 246, Hex 00f6, Oct 366, Digr o: ~
			This shows you can type CTRL-K o : to insert ö.

			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字がダイグラフとして入力されている場合、その文字を生成するために使用できる 2 文字も出力します:
@example
<ö> 246, Hex 00f6, Oct 366, Digr o:
@end example
これは、@samp{ö} を入力するために @kbd{CTRL-K o :} とタイプすればよいことを意味しています。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*g8*
g8			Print the hex values of the bytes used in the
			character under the cursor, assuming it is in |UTF-8|
			encoding.  This also shows composing characters.  The
			value of 'maxcombine' doesn't matter.
			Example of a character with two composing characters:
				e0 b8 81 + e0 b8 b9 + e0 b9 89 ~
			{not in Vi} {only when compiled with the |+multi_byte|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g8}
@kindex g8
@item g8
カーソル位置の文字のバイト列を 16 進数で表示します。エンコーディングが |@ref{UTF-8}| の場合のみ正しく機能します。合成文字も表示されます。'@option{maxcombine}' の設定は影響しません。

2 文字の合成文字が結合されている文字の表示例:
@verbatim
e0 b8 81 + e0 b8 b9 + e0 b9 89
@end verbatim

@{Vi にはない@}

@{|@ref{+multi_byte}| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*8g8*
8g8			Find an illegal UTF-8 byte sequence at or after the
			cursor.  This works in two situations:
			1. when 'encoding' is any 8-bit encoding
			2. when 'encoding' is "utf-8" and 'fileencoding' is
			   any 8-bit encoding
			Thus it can be used when editing a file that was
			supposed to be UTF-8 but was read as if it is an 8-bit
			encoding because it contains illegal bytes.
			Does not wrap around the end of the file.
			Note that when the cursor is on an illegal byte or the
			cursor is halfway a multi-byte character the command
			won't move the cursor.
			{not in Vi} {only when compiled with the |+multi_byte|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{8g8}
@kindex 8g8
@item 8g8
カーソル以降の不正な UTF-8 バイト列を検索します。次の 2 つの状況で機能します。
@enumerate
@item '@option{encoding}' が 8-bit エンコーディングの場合。
@item '@option{encoding}' が "@var{utf-8}" で、'@option{fileencoding}' が 8-bit エンコーディングの場合。
@end enumerate
UTF-8 のファイルを開いたはずが、不正なバイト列が含まれていて、別の 8-bit エンコーディングとして開かれてしまった場合などに使ってください。

検索がファイル末尾に達しても、ファイル先頭に戻って検索を継続しません。
@quotation
@strong{Note:} @*
カーソルがすでに不正なバイト列の上にある場合は、カーソルは移動しません。
@end quotation

@{Vi にはない@}

@{|@ref{+multi_byte}| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:p* *:pr* *:print* *E749*
:[range]p[rint] [flags]
			Print [range] lines (default current line).
			Note: If you are looking for a way to print your text
			on paper see |:hardcopy|.  In the GUI you can use the
			File.Print menu entry.
			See |ex-flags| for [flags].
			The |:filter| command can be used to only show lines
			matching a pattern.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:p}
@anchor{:pr}
@anchor{:print}
@anchor{E749}
@pindex :p
@pindex :pr
@pindex :print
@erindex E749
@item :[range]p[rint] [flags]
範囲 [range] の行を表示します (省略時は現在行を表示)。
@quotation
@strong{Note:} @*
テキストファイルを印刷する方法については |@ref{:hardcopy}| を参照してください。GUI を使用している場合は、メニューの File.Print から印刷できます。
@end quotation
[flags] については |@ref{ex-flags}| を参照してください。|@ref{:filter}| コマンドを、パターンにマッチした行だけを表示するのに、使うことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[range]p[rint] {count} [flags]
			Print {count} lines, starting with [range] (default
			current line |cmdline-ranges|).
			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :[range]p[rint] @{count@} [flags]
[range] の開始行から @{count@} 行を表示します ([range] を省略した場合は現在行から開始 |@ref{cmdline-ranges}|)。[flags] については |@ref{ex-flags}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:P* *:Print*
:[range]P[rint] [count] [flags]
			Just as ":print".  Was apparently added to Vi for
			people that keep the shift key pressed too long...
			Note: A user command can overrule this command.
			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:P}
@anchor{:Print}
@pindex :P
@pindex :Print
@item :[range]P[rint] [count] [flags]
:print と同じです。シフトキーを長く押し続けてしまう人のために追加されました。
@quotation
@strong{Note:} @*
ユーザーコマンドでこのコマンドを上書きできます。[flags] については |@ref{ex-flags}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:l* *:list*
:[range]l[ist] [count] [flags]
			Same as :print, but display unprintable characters
			with '^' and put $ after the line.  This can be
			further changed with the 'listchars' option.
			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:l}
@anchor{:list}
@pindex :l
@pindex :list
@item :[range]l[ist] [count] [flags]
:print と同じですが、表示できない文字は '^' を付けて表示し、行末に $ を置きます。表示は '@option{listchars}' オプションの設定で変更できます。[flags] については |@ref{ex-flags}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:nu* *:number*
:[range]nu[mber] [count] [flags]
			Same as :print, but precede each line with its line
			number.  (See also 'highlight' and 'numberwidth'
			option).
			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:nu}
@anchor{:number}
@pindex :nu
@pindex :number
@item :[range]nu[mber] [count] [flags]
:print と同じですが、先頭に行番号を付加します。(オプション '@option{highlight}' と '@option{numberwidth}' も参照) [flags] については |@ref{ex-flags}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:#*
:[range]# [count] [flags]
			synonym for :number.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:#}
@pindex :#
@item :[range]# [count] [flags]
:number と同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:#!*
:#!{anything}		Ignored, so that you can start a Vim script with: >
				#!vim -S
				echo "this is a Vim script"
				quit
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:#!}
@pindex :#!
@item :#!@{anything@}
無視されます。そのため、次のようにして Vim script を実行することができます:
@example
#!vim -S
echo "this is a Vim script"
quit
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*:z* *E144*
:{range}z[+-^.=]{count}	Display several lines of text surrounding the line
			specified with {range}, or around the current line
			if there is no {range}.  If there is a {count}, that's
			how many lines you'll see; if there is only one window
			then twice the value of the 'scroll' option is used,
			otherwise the current window height minus 3 is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:z}
@anchor{E144}
@pindex :z
@erindex E144
@item :@{range@}z[+-^.=]@{count@}
@{range@} に指定した行の周辺を表示します。@{range@} を省略した場合は現在行の周辺を表示します。行の範囲をどれだけ表示するかは @{count@} に指定します。@{count@} を省略した場合、ウィンドウが 1 つだけなら '@option{scroll}' オプションの 2 倍の数が、そうでなければカレントウィンドウの高さから 3 を引いた数が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If there is a {count} the 'window' option is set to
			its value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{count@} が指定された場合は '@option{window}' オプションがその値に設定される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			:z can be used either alone or followed by any of
			several punctuation marks.  These have the following
			effect:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
:z は修飾マークを付加して使うこともできます。次の効果があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			mark   first line    last line      new cursor line ~
			----   ----------    ---------      ------------
			+      current line  1 scr forward  1 scr forward
			-      1 scr back    current line   current line
			^      2 scr back    1 scr back     1 scr back
			.      1/2 scr back  1/2 scr fwd    1/2 scr fwd
			=      1/2 scr back  1/2 scr fwd    current line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .25 .25 .35
@headitem 記号 @tab 開始行 @tab 終了行 @tab 新しいカーソル位置
@item + @tab 現在行 @tab 1 画面先 @tab 1 画面先
@item - @tab 1 画面前 @tab 現在行 @tab 現在行
@item ^ @tab 2 画面前 @tab 1 画面前 @tab 1 画面前
@item . @tab 半画面前 @tab 半画面先 @tab 半画面先
@item = @tab 半画面前 @tab 半画面先 @tab 現在行
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Specifying no mark at all is the same as "+".
			If the mark is "=", a line of dashes is printed
			around the current line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マークを省略した場合は、"+" が使われます。マークが "=" の場合は、現在行の周りにマイナス記号で作った線が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{range}z#[+-^.=]{count}				*:z#*
			Like ":z", but number the lines.
			{not in all versions of Vi, not with these arguments}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:z#}
@pindex :z#
@item :@{range@}z#[+-^.=]@{count@}
":z" と同じですが、行番号も表示します。

@{Vi クローンによってはこの機能が使えないことがあります。引数が違う場合もあります@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:=*
:= [flags]		Print the last line number.
			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:=}
@pindex :=
@item := [flags]
最終行の行番号を表示します。[flags] については |@ref{ex-flags}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{range}= [flags]	Prints the last line number in {range}.  For example,
			this prints the current line number: >
				:.=
<			See |ex-flags| for [flags].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :@{range@}= [flags]
@{range@} で指定した範囲の最終行の行番号を表示します。たとえば、次のコマンドは現在行の行番号を表示します。
@example
:.=
@end example
[flags] については |@ref{ex-flags}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:norm[al][!] {commands}					*:norm* *:normal*
			Execute Normal mode commands {commands}.  This makes
			it possible to execute Normal mode commands typed on
			the command-line.  {commands} are executed like they
			are typed.  For undo all commands are undone together.
			Execution stops when an error is encountered.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:norm}
@anchor{:normal}
@pindex :norm
@pindex :normal
@item :norm[al][!] @{commands@}
ノーマルモードコマンド @{commands@} を実行します。コマンドラインからノーマルモードのコマンドを実行できます。@{commands@} は、ノーマルモードで入力されたときと同じように実行されます。@{commands@} による変更は、1 回のアンドゥで取り消されます。エラーが発生すると実行停止します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If the [!] is given, mappings will not be used.
			Without it, when this command is called from a
			non-remappable mapping (|:noremap|), the argument can
			be mapped anyway.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
[!] を付けた場合はマップは適用されません。付けなかった場合、このコマンドが非再帰マップ (|@ref{:noremap}|) 内で使われたとしても、引数は再マップされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			{commands} should be a complete command.  If
			{commands} does not finish a command, the last one
			will be aborted as if <Esc> or <C-C> was typed.
			This implies that an insert command must be completed
			(to start Insert mode, see |:startinsert|).  A ":"
			command must be completed as well.  And you can't use
			"Q" or "gQ" to start Ex mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{commands@} は実行を完了する (ノーマルモードに戻る) 必要があります。@{commands@} が完了しない場合は、最後のコマンドが <Esc> や <C-C> で終了したのと同じように動作します。

挿入モードも必ず完了します (挿入モードを開始するには |@ref{:startinsert}| を参照)。"@command{:}" コマンドも必ず完了します。"Q" や "gQ" を使って Ex モードを開始することはできません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The display is not updated while ":normal" is busy.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:normal}" の実行中は画面は更新されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			{commands} cannot start with a space.  Put a count of
			1 (one) before it, "1 " is one space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{commands@} の最初にスペースは置けません。そうしたい場合はスペースの前にカウント指定の 1 (数字の 1) を置いてください。"1 " は 1 つのスペースになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The 'insertmode' option is ignored for {commands}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{command@} の実行ではオプション '@option{insertmode}' は無視されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			This command cannot be followed by another command,
			since any '|' is considered part of the command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'|' は :normal コマンドの一部として処理されるので、このコマンドの後に他のコマンドを続けて書けません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			This command can be used recursively, but the depth is
			limited by 'maxmapdepth'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{:normal} コマンドは '@option{maxmapdepth}' の制限内で再帰的に呼び出すことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			An alternative is to use |:execute|, which uses an
			expression as argument.  This allows the use of
			printable characters to represent special characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:execute}| コマンドには Vim script の式を指定できるので、印字可能文字を使って制御文字を入力することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Example: >
				:exe "normal \<c-w>\<c-w>"
<			{not in Vi, of course}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@example
:exe "normal \<c-w>\<c-w>"
@end example
@{Vi には、もちろんない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:{range}norm[al][!] {commands}				*:normal-range*
			Execute Normal mode commands {commands} for each line
			in the {range}.  Before executing the {commands}, the
			cursor is positioned in the first column of the range,
			for each line.  Otherwise it's the same as the
			":normal" command without a range.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:normal-range}
@cindex :normal-range
@item :@{range@}norm[al][!] @{commands@}
@{range@} の各行に対してノーマルモードコマンド @{commands@} を実行します。@{commands@} はカーソルが行頭にある状態で実行されます。その他は範囲指定の無い "@command{:normal}" コマンドと同じです。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:sh* *:shell* *E371*
:sh[ell]		This command starts a shell.  When the shell exits
			(after the "exit" command) you return to Vim.  The
			name for the shell command comes from 'shell' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sh}
@anchor{:shell}
@anchor{E371}
@pindex :sh
@pindex :shell
@erindex E371
@item :sh[ell]
シェルを起動します。シェルを終了 ("exit" コマンドを実行) すると Vim に戻ってきます。オプション '@option{shell}' に設定されているシェルコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E360*
			Note: This doesn't work when Vim on the Amiga was
			started in QuickFix mode from a compiler, because the
			compiler will have set stdin to a non-interactive
			mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E360}
@erindex E360
@quotation
@strong{Note:} @*
Amiga では、コンパイラから QuickFix モードで Vim が起動された場合には、コンパイラが標準入力を非対話型モードにしてしまうので使用できません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:!cmd* *:!* *E34*
:!{cmd}			Execute {cmd} with the shell.  See also the 'shell'
			and 'shelltype' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:!cmd}
@anchor{:!}
@anchor{E34}
@pindex :!cmd
@pindex :!
@erindex E34
@item :!@{cmd@}
シェルで @{cmd@} を実行します。'@option{shell}' と '@option{shelltype}' も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Any '!' in {cmd} is replaced with the previous
			external command (see also 'cpoptions').  But not when
			there is a backslash before the '!', then that
			backslash is removed.  Example: ":!ls" followed by
			":!echo ! \! \\!" executes "echo ls ! \!".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{cmd@} の中の '!' は以前使用した外部プログラムに置き換えられます ('@option{cpoptions}' も参照)。'!' の前にバックスラッシュがある場合はバックスラッシュが削除され '!' は置き換えられません。例: ":!ls" を実行後の ":!echo !\! \\!" は "echo ls ! \!" と解釈、実行されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			A '|' in {cmd} is passed to the shell, you cannot use
			it to append a Vim command.  See |:bar|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{cmd@} の中の '|' はシェルに渡されます。'|' を使って Vim コマンドを続けて書くことはできません。(|@ref{:bar}| 参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If {cmd} contains "%" it is expanded to the current
			file name.  Special characters are not escaped, use
			quotes to avoid their special meaning: >
				:!ls "%"
<			If the file name contains a "$" single quotes might
			work better (but a single quote causes trouble): >
				:!ls '%'
<			This should always work, but it's more typing: >
				:exe "!ls " . shellescape(expand("%"))
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{cmd@} が "%" を含んでいたらそれは現在のファイル名に展開されます。特殊文字はエスケープされないので、特殊文字の特殊な意味を打ち消すにはクォートを使います:
@example
:!ls "%"
@end example
ファイル名が "$" を含んでいるならシングルクォートを使うといいでしょう (ただしシングルクォートは問題がある場合もある):
@example
:!ls '%'
@end example
次の例は常に機能します。ただし長い:
@example
:exe "!ls " . shellescape(expand("%"))
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			A newline character ends {cmd}, what follows is
			interpreted as a following ":" command.  However, if
			there is a backslash before the newline it is removed
			and {cmd} continues.  It doesn't matter how many
			backslashes are before the newline, only one is
			removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{cmd@} の終わりを示す改行文字 (newline) 以降の文字は、次の ":" コマンドとして解釈されます。改行文字の前にバックスラッシュがある場合は、バックスラッシュは削除され、改行文字は @{cmd@} の一部として解釈されます。改行文字の前にバックスラッシュがいくつあっても、1 つだけが削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			On Unix the command normally runs in a non-interactive
			shell.  If you want an interactive shell to be used
			(to use aliases) set 'shellcmdflag' to "-ic".
			For Win32 also see |:!start|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix ではシェルを非対話型モードで起動します。対話型モードで起動したい場合 (aliasを使いたい場合など) は、'@option{shellcmdflag}' に "@var{-ic}" を設定してください。Win32 の場合は |@ref{:!start}| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			After the command has been executed, the timestamp and
			size of the current file is checked |timestamp|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
外部プログラムを実行した後で、開いているファイルのタイムスタンプとサイズがチェックされます |@ref{timestamp}|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Vim redraws the screen after the command is finished,
			because it may have printed any text.  This requires a
			hit-enter prompt, so that you can read any messages.
			To avoid this use: >
				:silent !{cmd}
<			The screen is not redrawn then, thus you have to use
			CTRL-L or ":redraw!" if the command did display
			something.
			Also see |shell-window|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
外部プログラムはメッセージを出力するかもしれないので、外部プログラムを実行した後にスクリーンが再描画されます。そのため、プログラムの出力を見逃してしまわないように、hit-enter プロンプトが表示されます。プロンプトを表示したくない場合は、次のようにします:
@example
:silent! !@{cmd@}
@end example
これでスクリーンは再描画されません。外部プログラムが何かを出力した場合は @kbd{CTRL-L} や "@command{:redraw!}" で再描画できます。|@ref{shell-window}| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:!!*
:!!			Repeat last ":!{cmd}".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:!!}
@pindex :!!
@item :!!
最後の ":!@{cmd@}" を繰り返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:ve* *:version*
:ve[rsion]		Print the version number of the editor.  If the
			compiler used understands "__DATE__" the compilation
			date is mentioned.  Otherwise a fixed release-date is
			shown.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ve}
@anchor{:version}
@pindex :ve
@pindex :version
@item :ve[rsion]
エディタのバージョンを表示します。コンパイル時に "__DATE__" が利用可能だった場合には、コンパイルされた日時も表示されます。利用不可だった場合は、リリースの最終修正日時が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The following lines contain information about which
			features were enabled when Vim was compiled.  When
			there is a preceding '+', the feature is included,
			when there is a '-' it is excluded.  To change this,
			you have to edit feature.h and recompile Vim.
			To check for this in an expression, see |has()|.
			Here is an overview of the features.
			The first column shows the smallest version in which
			they are included:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の、どの機能が有効になっているかも表示されます。機能名の前に '+' があれば、その機能は有効になっています。'-' のときは無効になっています。機能の有無を変えるには @file{features.h} を編集して、Vim をコンパイルし直す必要があります。

Vim script から機能の有無を確認するには |@ref{has()}| を使います。以下に、機能の概要を示します。

行頭の文字はその機能が含まれる最小構成です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			   T	tiny (always)
			   S	small
			   N	normal
			   B	big
			   H	huge
			   m	manually enabled or depends on other features
			 (none) system dependent
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item T @tab tiny (常に含まれる)
@item S @tab small
@item N @tab normal
@item B @tab big
@item H @tab huge
@item m @tab 手動で組み込むか他の機能に依存
@item (none) @tab システム依存
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Thus if a feature is marked with "N", it is included
			in the normal, big and huge versions of Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば "N" と書いてあれば、その機能は normal、big、huge バージョンの Vim に含まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*+feature-list*
   *+acl*		|ACL| support included
   *+ARP*		Amiga only: ARP support included
B  *+arabic*		|Arabic| language support
T  *+autocmd*		|:autocmd|, automatic commands
H  *+autoservername*	Automatically enable |clientserver|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+feature-list}
@vindex +feature-list
@multitable @columnfractions .05 .3 .65
@anchor{+acl}
@vindex +acl
@item @tab +acl @tab |@ref{ACL}| サポートを含む
@anchor{+ARP}
@vindex +ARP
@item @tab +ARP @tab Amiga のみ: ARP サポートを含む
@anchor{+arabic}
@vindex +arabic
@item B @tab +arabic @tab |@ref{Arabic}| 言語サポート
@anchor{+autocmd}
@vindex +autocmd
@item N @tab +autocmd @tab |@ref{:autocmd}|, 自動コマンド実行
@anchor{+autoservername}
@vindex +autoservername
@item H @tab +autoservername @tab 自動的に |@ref{clientserver}| を有効にする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+balloon_eval*	|balloon-eval| support in the GUI. Included when
			compiling with supported GUI (Motif, GTK, GUI) and
			either Netbeans/Sun Workshop integration or |+eval|
			feature.
H  *+balloon_eval_term*	|balloon-eval| support in the terminal,
			'balloonevalterm'
N  *+browse*		|:browse| command
N  *+builtin_terms*	some terminals builtin |builtin-terms|
B  *++builtin_terms*	maximal terminals builtin |builtin-terms|
N  *+byte_offset*	support for 'o' flag in 'statusline' option, "go"
			and ":goto" commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+balloon_eval}
@vindex +balloon_eval
@item m @tab +balloon_eval @tab GUI での |@ref{balloon-eval}| サポート。GUI が有効で、Netbeans/Sun Workshop (|@ref{+sun_workshop}|) または |@ref{+eval}| が有効な場合に利用できます。
@anchor{+balloon_eval_term}
@vindex +balloon_eval_term
@item H @tab +balloon_eval_term @tab ターミナルでの |@ref{balloon-eval}| サポート。'@option{balloonevalterm}'
@anchor{+browse}
@vindex +browse
@item N @tab +browse @tab |@ref{:browse}| コマンド
@anchor{+builtin_terms}
@vindex +builtin_terms
@item N @tab +builtin_terms @tab 幾つかの組み込み端末 |@ref{builtin-terms}|
@anchor{++builtin_terms}
@vindex ++builtin_terms
@item B @tab ++builtin_terms @tab 全部の組み込み端末 |@ref{builtin-terms}|
@anchor{+byte_offset}
@vindex +byte_offset
@item N @tab +byte_offset @tab '@option{statusline}' の 'o' フラグ、|@ref{go}|, |@ref{:goto}| をサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+channel*		inter process communication |channel|
N  *+cindent*		|'cindent'|, C indenting
N  *+clientserver*	Unix and Win32: Remote invocation |clientserver|
   *+clipboard*		|clipboard| support
N  *+cmdline_compl*	command line completion |cmdline-completion|
S  *+cmdline_hist*	command line history |cmdline-history|
N  *+cmdline_info*	|'showcmd'| and |'ruler'|
N  *+comments*		|'comments'| support
B  *+conceal*		"conceal" support, see |conceal| |:syn-conceal| etc.
N  *+cryptv*		encryption support |encryption|
B  *+cscope*		|cscope| support
T  *+cursorbind*	|'cursorbind'| support
m  *+cursorshape*	|termcap-cursor-shape| support
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+channel}
@vindex +channel
@item m @tab +channel @tab プロセス間通信 |@ref{channel}|
@anchor{+cindent}
@vindex +cindent
@item N @tab +cindent @tab |@ref{'cindent'}|, C 言語インデント
@anchor{+clientserver}
@vindex +clientserver
@item N @tab +clientserver @tab Unix と Win32: リモート呼び出し |@ref{clientserver}|
@anchor{+clipboard}
@vindex +clipboard
@item @tab +clipboard @tab |@ref{clipboard}| サポート
@anchor{+cmdline_compl}
@vindex +cmdline_compl
@item N @tab +cmdline_compl @tab コマンドライン補完 |@ref{cmdline-completion}|
@anchor{+cmdline_hist}
@vindex +cmdline_hist
@item S @tab +cmdline_hist @tab コマンドライン履歴 |@ref{cmdline-history}|
@anchor{+cmdline_info}
@vindex +cmdline_info
@item N @tab +cmdline_info @tab |@ref{'showcmd'}| と |@ref{'ruler'}|
@anchor{+comments}
@vindex +comments
@item N @tab +comments @tab |@ref{'comments'}| サポート
@anchor{+conceal}
@vindex +conceal
@item B @tab +conceal @tab "conceal" サポート。|@ref{conceal}| |@ref{:syn-conceal}| 他参照。
@anchor{+cryptv}
@vindex +cryptv
@item N @tab +cryptv @tab 暗号化サポート |@ref{encryption}|
@anchor{+cscope}
@vindex +cscope
@item B @tab +cscope @tab |@ref{cscope}| サポート
@anchor{+cursorbind}
@vindex +cursorbind
@item m @tab +cursorbind @tab |@ref{'cursorbind'}| サポート
@anchor{+cursorshape}
@vindex +cursorshape
@item m @tab +cursorshape @tab |@ref{termcap-cursor-shape}| サポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+debug*		Compiled for debugging.
N  *+dialog_gui*	Support for |:confirm| with GUI dialog.
N  *+dialog_con*	Support for |:confirm| with console dialog.
N  *+dialog_con_gui*	Support for |:confirm| with GUI and console dialog.
N  *+diff*		|vimdiff| and 'diff'
N  *+digraphs*		|digraphs| *E196*
   *+directx*		Win32 GUI only: DirectX and |'renderoptions'|
   *+dnd*		Support for DnD into the "~ register |quote_~|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+debug}
@vindex +debug
@item m @tab +debug @tab Vim がデバッグ用にコンパイルされた
@anchor{+dialog_gui}
@vindex +dialog_gui
@item N @tab +dialog_gui @tab |@ref{:confirm}| の GUI ダイアログをサポート
@anchor{+dialog_con}
@vindex +dialog_con
@item N @tab +dialog_con @tab |@ref{:confirm}| のコンソールダイアログをサポート
@anchor{+dialog_con_gui}
@vindex +dialog_con_gui
@item N @tab +dialog_con_gui @tab |@ref{:confirm}| GUI とコンソールダイアログをサポート
@anchor{+diff}
@vindex +diff
@item N @tab +diff @tab |@ref{vimdiff}| と '@option{diff}'
@anchor{+digraphs}
@vindex +digraphs
@anchor{E196}
@erindex E196
@item N @tab +digraphs @tab |@ref{digraphs}|
@anchor{+directx}
@vindex +directx
@item @tab +directx @tab Win32 GUI のみ: DirectX と |@ref{'renderoptions'}|
@anchor{+dnd}
@vindex +dnd
@item @tab +dnd @tab "~ レジスタ |@ref{quote_~}| を使った DnD のサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
B  *+emacs_tags*	|emacs-tags| files
N  *+eval*		expression evaluation |eval.txt|
N  *+ex_extra*		always on now, used to be for Vim's extra Ex commands
N  *+extra_search*	|'hlsearch'| and |'incsearch'| options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+emacs_tags}
@vindex +emacs_tags
@item B @tab +emacs_tags @tab |@ref{emacs-tags}| ファイル
@anchor{+eval}
@vindex +eval
@item N @tab +eval @tab 式評価 @{訳注: Vim script@} |@ref{eval.txt}|
@anchor{+ex_extra}
@vindex +ex_extra
@item N @tab +ex_extra @tab 今は常にオン、かつて Vim の拡張 Ex コマンドのためにあった
@anchor{+extra_search}
@vindex +extra_search
@item N @tab +extra_search @tab |@ref{'hlsearch'}| と |@ref{'incsearch'}| オプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
B  *+farsi*		|farsi| language
N  *+file_in_path*	|gf|, |CTRL-W_f| and |<cfile>|
N  *+find_in_path*	include file searches: |[I|, |:isearch|,
			|CTRL-W_CTRL-I|, |:checkpath|, etc.
N  *+folding*		|folding|
   *+footer*		|gui-footer|
   *+fork*		Unix only: |fork| shell commands
   *+float*		Floating point support
m  *+fullscreen*        MacVim only: edit in full-screen
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+farsi}
@vindex +farsi
@item B @tab +farsi @tab |@ref{farsi}| 言語
@anchor{+file_in_path}
@vindex +file_in_path
@item N @tab +file_in_path @tab |@ref{gf}|, |@ref{CTRL-W_f}| と |@ref{<cfile>}|
@anchor{+find_in_path}
@vindex +find_in_path
@item N @tab +find_in_path @tab include ファイル検索: |@ref{[I}|, |@ref{:isearch}|, |@ref{CTRL-W_CTRL-I}|, |@ref{:checkpath}|, その他
@anchor{+folding}
@vindex +folding
@item N @tab +folding @tab |@ref{folding}|
@anchor{+footer}
@vindex +footer
@item @tab +footer @tab |@ref{gui-footer}|
@anchor{+fork}
@vindex +fork
@item @tab +fork @tab Unix のみ: |@ref{fork}| シェルコマンド
@anchor{+float}
@vindex +float
@item @tab +float @tab 浮動小数点数サポート
@anchor{+fullscreen}
@vindex +fullscreen
@item m @tab +fullscreen @tab MacVim のみ: フルスクリーンで編集する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+gettext*		message translations |multi-lang|
   *+GUI_Athena*	Unix only: Athena |GUI|
   *+GUI_neXtaw*	Unix only: neXtaw |GUI|
   *+GUI_GTK*		Unix only: GTK+ |GUI|
   *+GUI_Motif*		Unix only: Motif |GUI|
   *+GUI_Photon*	QNX only:  Photon |GUI|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+gettext}
@vindex +gettext
@item N @tab +gettext @tab メッセージの翻訳 |@ref{multi-lang}|
@anchor{+GUI_Athena}
@vindex +GUI_Athena
@item @tab +GUI_Athena @tab Unix のみ: Athena |@ref{GUI}|
@anchor{+GUI_neXtaw}
@vindex +GUI_neXtaw
@item @tab +GUI_neXtaw @tab Unix のみ: neXtaw |@ref{GUI}|
@anchor{+GUI_GTK}
@vindex +GUI_GTK
@item @tab +GUI_GTK @tab Unix のみ: GTK+ |@ref{GUI}|
@anchor{+GUI_Motif}
@vindex +GUI_Motif
@item @tab +GUI_Motif @tab Unix のみ: Motif |@ref{GUI}|
@anchor{+GUI_Photon}
@vindex +GUI_Photon
@item @tab +GUI_Photon @tab QNX  のみ: Photon |@ref{GUI}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+hangul_input*	Hangul input support |hangul|
   *+iconv*		Compiled with the |iconv()| function
   *+iconv/dyn*		Likewise |iconv-dynamic| |/dyn|
N  *+insert_expand*	|insert_expand| Insert mode completion
m  *+job*		starting and stopping jobs |job|
S  *+jumplist*		|jumplist|
B  *+keymap*		|'keymap'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+hangul_input}
@vindex +hangul_input
@item m @tab +hangul_input @tab ハングル入力サポート |@ref{hangul}|
@anchor{+iconv}
@vindex +iconv
@item @tab +iconv @tab iconv() 関数が組み込まれている
@anchor{+iconv/dyn}
@vindex +iconv/dyn
@item @tab +iconv/dyn @tab |@ref{iconv-dynamic}| |@ref{/dyn}| と同じ
@anchor{+insert_expand}
@vindex +insert_expand
@item N @tab +insert_expand @tab |@ref{insert_expand}| 挿入モード補完
@anchor{+job}
@vindex +job
@item m @tab +job @tab job の開始と停止 |@ref{job}|
@anchor{+jumplist}
@vindex +jumplist
@item S @tab +jumplist @tab |@ref{jumplist}|
@anchor{+keymap}
@vindex +keymap
@item B @tab +keymap @tab |@ref{'keymap'}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+lambda*		|lambda| and |closure|
B  *+langmap*		|'langmap'|
N  *+libcall*		|libcall()|
N  *+linebreak*		|'linebreak'|, |'breakat'| and |'showbreak'|
N  *+lispindent*	|'lisp'|
T  *+listcmds*		Vim commands for the list of buffers |buffer-hidden|
			and argument list |:argdelete|
N  *+localmap*		Support for mappings local to a buffer |:map-local|
m  *+lua*		|Lua| interface
m  *+lua/dyn*		|Lua| interface |/dyn|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+lambda}
@vindex +lambda
@item N @tab +lambda @tab |@ref{lambda}| と |@ref{closure}|
@anchor{+langmap}
@vindex +langmap
@item B @tab +langmap @tab |@ref{'langmap'}|
@anchor{+libcall}
@vindex +libcall
@item N @tab +libcall @tab |@ref{libcall()}|
@anchor{+linebreak}
@vindex +linebreak
@item N @tab +linebreak @tab |@ref{'linebreak'}|, |@ref{'breakat'}| と |@ref{'showbreak'}|
@anchor{+lispindent}
@vindex +lispindent
@item N @tab +lispindent @tab |@ref{'lisp'}|
@anchor{+listcmds}
@vindex +listcmds
@item N @tab +listcmds @tab バッファリストや引数リストに対する Vim コマンド |@ref{buffer-hidden}| |@ref{:argdelete}|
@anchor{+localmap}
@vindex +localmap
@item N @tab +localmap @tab バッファローカルなマップのサポート |@ref{:map-local}|
@anchor{+lua}
@vindex +lua
@item m @tab +lua @tab |@ref{Lua}| インターフェイス
@anchor{+lua/dyn}
@vindex +lua/dyn
@item m @tab +lua/dyn @tab |@ref{Lua}| インターフェイス |@ref{/dyn}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+menu*		|:menu|
N  *+mksession*		|:mksession|
N  *+modify_fname*	|filename-modifiers|
N  *+mouse*		Mouse handling |mouse-using|
N  *+mouseshape*	|'mouseshape'|
B  *+mouse_dec*		Unix only: Dec terminal mouse handling |dec-mouse|
N  *+mouse_gpm*		Unix only: Linux console mouse handling |gpm-mouse|
N  *+mouse_jsbterm*	JSB mouse handling |jsbterm-mouse|
B  *+mouse_netterm*	Unix only: netterm mouse handling |netterm-mouse|
N  *+mouse_pterm*	QNX only: pterm mouse handling |qnx-terminal|
N  *+mouse_sysmouse*	Unix only: *BSD console mouse handling |sysmouse|
B  *+mouse_sgr*		Unix only: sgr mouse handling |sgr-mouse|
B  *+mouse_urxvt*	Unix only: urxvt mouse handling |urxvt-mouse|
N  *+mouse_xterm*	Unix only: xterm mouse handling |xterm-mouse|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+menu}
@vindex +menu
@item N @tab +menu @tab |@ref{:menu}|
@anchor{+mksession}
@vindex +mksession
@item N @tab *+mksession @tab |@ref{:mksession}|
@anchor{+modify_fname}
@vindex +modify_fname
@item N @tab +modify_fname @tab |@ref{filename-modifiers}|
@anchor{+mouse}
@vindex +mouse
@item N @tab +mouse @tab マウス操作 |@ref{mouse-using}|
@anchor{+mouseshape}
@vindex +mouseshape
@item N @tab +mouseshape @tab |@ref{'mouseshape'}|
@anchor{+mouse_dec}
@vindex +mouse_dec
@item B @tab +mouse_dec @tab Unix のみ: Dec 端末マウス操作 |@ref{dec-mouse}|
@anchor{+mouse_gpm}
@vindex +mouse_gpm
@item N @tab +mouse_gpm @tab Unix のみ: Linux コンソールマウス操作 |@ref{gpm-mouse}|
@anchor{+mouse_jsbterm}
@vindex +mouse_jsbterm
@item N @tab +mouse_jsbterm @tab JSB マウスサポート |@ref{jsbterm-mouse}|
@anchor{+mouse_netterm}
@vindex +mouse_netterm
@item B @tab +mouse_netterm @tab Unix のみ: netterm マウス操作 |@ref{netterm-mouse}|
@anchor{+mouse_pterm}
@vindex +mouse_pterm
@item N @tab +mouse_pterm @tab QNX  のみ: pterm マウス操作 |qnx-terminal|
@anchor{+mouse_sysmouse}
@vindex +mouse_sysmouse
@item N @tab +mouse_sysmouse @tab Unix のみ: *BSD コンソールマウス操作 |@ref{sysmouse}|
@anchor{+mouse_sgr}
@vindex +mouse_sgr
@item B @tab +mouse_sgr @tab Unix のみ: sgr マウス操作 |@ref{sgr-mouse}|
@anchor{+mouse_urxvt}
@vindex +mouse_urxvt
@item N @tab +mouse_urxvt @tab Unix のみ: urxvt マウス操作 |@ref{urxvt-mouse}|
@anchor{+mouse_xterm}
@vindex +mouse_xterm
@item N @tab +mouse_xterm @tab Unix のみ: xterm マウス操作 |@ref{xterm-mouse}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+multi_byte*	16 and 32 bit characters |multibyte|
   *+multi_byte_ime*	Win32 input method for multibyte chars |multibyte-ime|
N  *+multi_lang*	non-English language support |multi-lang|
m  *+mzscheme*		Mzscheme interface |mzscheme|
m  *+mzscheme/dyn*	Mzscheme interface |mzscheme-dynamic| |/dyn|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+multi_byte}
@vindex +multi_byte
@item N @tab +multi_byte @tab 16 ビット、32 ビット文字 |@ref{multibyte}|
@anchor{+multi_byte_ime}
@vindex +multi_byte_ime
@item @tab +multi_byte_ime @tab Win32 IME サポート
@anchor{+multi_lang}
@vindex +multi_lang
@item N @tab +multi_lang @tab 多言語サポート |@ref{multi-lang}|
@anchor{+mzscheme}
@vindex +mzscheme
@item m @tab +mzscheme @tab Mzscheme インターフェイス |@ref{mzscheme}|
@anchor{+mzscheme/dyn}
@vindex +mzscheme/dyn
@item m @tab +mzscheme/dyn @tab Mzscheme インターフェイス |@ref{mzscheme-dynamic}| |@ref{/dyn}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+netbeans_intg*	|netbeans|
   *+num64*		64-bit Number support |Number|
m  *+odbeditor*		MacVim only: ODB Editor Protocol support |odbeditor|
m  *+ole*		Win32 GUI only: |ole-interface|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+netbeans_intg}
@vindex +netbeans_intg
@item m @tab +netbeans_intg @tab |@ref{netbeans}|
@anchor{+num64}
@vindex +num64
@item @tab +num64 @tab 64 ビットの数値をサポート |@ref{Number}|
@anchor{+odbeditor}
@vindex +odbeditor
@item m @tab +odbeditor @tab MacVim のみ: ODB エディタプロトコールのサポート |@ref{odbeditor}|
@anchor{+ole}
@vindex +ole
@item m @tab +ole @tab Win32 GUI のみ: |@ref{ole-interface}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+packages*		Loading |packages|
N  *+path_extra*	Up/downwards search in 'path' and 'tags'
m  *+perl*		Perl interface |perl|
m  *+perl/dyn*		Perl interface |perl-dynamic| |/dyn|
N  *+persistent_undo*	Persistent undo |undo-persistence|
   *+postscript*	|:hardcopy| writes a PostScript file
N  *+printer*		|:hardcopy| command
H  *+profile*		|:profile| command
m  *+python*		Python 2 interface |python|
m  *+python/dyn*	Python 2 interface |python-dynamic| |/dyn|
m  *+python3*		Python 3 interface |python|
m  *+python3/dyn*	Python 3 interface |python-dynamic| |/dyn|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+packages}
@vindex +packages
@item N @tab +packages @tab |@ref{packages}| の読み込み
@anchor{+path_extra}
@vindex +path_extra
@item N @tab +path_extra @tab '@option{path}' や '@option{tags}' での上下階の検索
@anchor{+perl}
@vindex +perl
@item m @tab +perl @tab Perl インターフェイス |@ref{perl}|
@anchor{+perl/dyn}
@vindex +perl/dyn
@item m @tab +perl/dyn @tab Perl インターフェイス |@ref{perl-dynamic}| |@ref{/dyn}|
@anchor{+persistent_undo}
@vindex +persistent_undo
@item N @tab +persistent_undo @tab 永続 undo |@ref{undo-persistence}|
@anchor{+postscript}
@vindex +postscript
@item @tab +postscript @tab |@ref{:hardcopy}| で PostScript ファイルの書き出し
@anchor{+printer}
@vindex +printer
@item N @tab +printer @tab |@ref{:hardcopy}| コマンド
@anchor{+profile}
@vindex +profile
@item H @tab +profile @tab |@ref{:profile}| コマンド
@anchor{+python}
@vindex +python
@item m @tab +python @tab Python 2 インターフェイス |@ref{python}|
@anchor{+python/dyn}
@vindex +python/dyn
@item m @tab +python/dyn @tab Python 2 インターフェイス |@ref{python-dynamic}| |@ref{/dyn}|
@anchor{+python3}
@vindex +python3
@item m @tab +python3 @tab Python 3 インターフェイス |@ref{python}|
@anchor{+python3/dyn}
@vindex +python3/dyn
@item m @tab +python3/dyn @tab Python 3 インターフェイス |@ref{python-dynamic}| |@ref{/dyn}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+quickfix*		|:make| and |quickfix| commands
N  *+reltime*		|reltime()| function, 'hlsearch'/'incsearch' timeout,
			'redrawtime' option
B  *+rightleft*		Right to left typing |'rightleft'|
m  *+ruby*		Ruby interface |ruby|
m  *+ruby/dyn*		Ruby interface |ruby-dynamic| |/dyn|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+quickfix}
@vindex +quickfix
@item N @tab +quickfix @tab |@ref{:make}| と |@ref{quickfix}| コマンド
@anchor{+reltime}
@vindex +reltime
@item N @tab +reltime @tab |@ref{reltime()}| 関数, '@option{hlsearch}'/'@option{incsearch}' タイムアウト, '@option{redrawtime}' オプション
@anchor{+rightleft}
@vindex +rightleft
@item B @tab +rightleft @tab 右から左へタイプ |@ref{'rightleft'}|
@anchor{+ruby}
@vindex +ruby
@item m @tab +ruby @tab Ruby インターフェイス |@ref{ruby}|
@anchor{+ruby/dyn}
@vindex +ruby/dyn
@item m @tab +ruby/dyn @tab Ruby インターフェイス |@ref{ruby-dynamic}| |@ref{/dyn}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
T  *+scrollbind*	|'scrollbind'|
B  *+signs*		|:sign|
N  *+smartindent*	|'smartindent'|
N  *+startuptime*	|--startuptime| argument
N  *+statusline*	Options 'statusline', 'rulerformat' and special
			formats of 'titlestring' and 'iconstring'
m  *+sun_workshop*	|workshop|
N  *+syntax*		Syntax highlighting |syntax|
   *+system()*		Unix only: opposite of |+fork|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+scrollbind}
@vindex +scrollbind
@item T @tab +scrollbind @tab |@ref{'scrollbind'}|
@anchor{+signs}
@vindex +signs
@item B @tab +signs @tab |@ref{:sign}|
@anchor{+smartindent}
@vindex +smartindent
@item N @tab +smartindent @tab |@ref{'smartindent'}|
@anchor{+startuptime}
@vindex +startuptime
@item N @tab +startuptime @tab |@ref{--startuptime}| 引数
@anchor{+statusline}
@vindex +statusline
@item N @tab +statusline @tab オプション '@option{statusline}', '@option{rulerformat}' と '@option{titlestring}' と '@option{iconstring}' の特殊フォーマット
@anchor{+sun_workshop}
@vindex +sun_workshop
@item m @tab +sun_workshop @tab |@ref{workshop}|
@anchor{+syntax}
@vindex +syntax
@item N @tab +syntax @tab 構文強調 |@ref{syntax}|
@anchor{+system()}
@vindex +system()
@item @tab +system() @tab Unix のみ: |@ref{+fork}| の反対
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
T  *+tag_binary*	binary searching in tags file |tag-binary-search|
N  *+tag_old_static*	old method for static tags |tag-old-static|
m  *+tag_any_white*	any white space allowed in tags file |tag-any-white|
m  *+tcl*		Tcl interface |tcl|
m  *+tcl/dyn*		Tcl interface |tcl-dynamic| |/dyn|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+tag_binary}
@vindex +tag_binary
@item T @tab +tag_binary @tab タグファイル内の高速 (二分探索) 検索 |@ref{tag-binary-search}|
@anchor{+tag_old_static}
@vindex +tag_old_static
@item N @tab +tag_old_static @tab 静的タグの古い方法 |@ref{tag-old-static}|
@anchor{+tag_any_white}
@vindex +tag_any_white
@item m @tab +tag_any_white @tab tags ファイル内で空白文字を許す |@ref{tag-any-white}|
@anchor{+tcl}
@vindex +tcl
@item m @tab +tcl @tab Tcl インターフェイス |@ref{tcl}|
@anchor{+tcl/dyn}
@vindex +tcl/dyn
@item m @tab +tcl/dyn @tab Tcl インターフェイス |@ref{tcl-dynamic}| |@ref{/dyn}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+terminal*		Support for terminal window |terminal|
   *+terminfo*		uses |terminfo| instead of termcap
N  *+termresponse*	support for |t_RV| and |v:termresponse|
B  *+termguicolors*	24-bit color in xterm-compatible terminals support
N  *+textobjects*	|text-objects| selection
   *+tgetent*		non-Unix only: able to use external termcap
N  *+timers*		the |timer_start()| function
N  *+title*		Setting the window 'title' and 'icon'
N  *+toolbar*		|gui-toolbar|
m  *+transparency*      MacVim only: window background transparency
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+terminal}
@vindex +terminal
@item m @tab +terminal @tab ターミナルウィンドウのサポート |@ref{terminal}|
@anchor{+terminfo}
@vindex +terminfo
@item @tab +terminfo @tab |@ref{terminfo}| で termcap を代替
@anchor{+termresponse}
@vindex +termresponse
@item N @tab +termresponse @tab |@ref{t_RV}| と |@ref{v:termresponse}| のサポート
@anchor{+termguicolors}
@vindex +termguicolors
@item B @tab +termguicolors @tab xterm 互換端末での 24 ビット色のサポート
@anchor{+textobjects}
@vindex +textobjects
@item N @tab +textobjects @tab |@ref{text-objects}| 選択
@anchor{+tgetent}
@vindex +tgetent
@item @tab +tgetent @tab 非 Unix のみ: 外部 termcap を使用可能
@anchor{+timers}
@vindex +timers
@item N @tab +timers @tab |@ref{timer_start()}| 関数
@anchor{+title}
@vindex +title
@item N @tab +title @tab ウィンドウタイトルとアイコン設定 |@ref{'title'}| |@ref{'icon'}|
@anchor{+toolbar}
@vindex +toolbar
@item N @tab +toolbar @tab |@ref{gui-toolbar}|
@anchor{+transparency}
@vindex +transparency
@item m @tab +transparency  @tab MacVim のみ: ウィンドウ背景の透明度
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+user_commands*	User-defined commands. |user-commands|
B  *+vartabs*		Variable-width tabstops. |'vartabstop'|
N  *+viminfo*		|'viminfo'|
   *+vertsplit*		Vertically split windows |:vsplit|; Always enabled
			since 8.0.1118.
			in sync with the |+windows| feature
N  *+virtualedit*	|'virtualedit'|
S  *+visual*		Visual mode |Visual-mode| Always enabled since 7.4.200.
N  *+visualextra*	extra Visual mode commands |blockwise-operators|
N  *+vreplace*		|gR| and |gr|
   *+vtp*		on MS-Windows console: support for 'termguicolors'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+user_commands}
@vindex +user_commands
@item N @tab +user_commands @tab ユーザー定義コマンド |@ref{user-commands}|
@anchor{+vartabs}
@vindex +vartabs
@item B @tab +vartabs @tab タブストップの可変幅 |@ref{'vartabstop'}|
@anchor{+viminfo}
@vindex +viminfo
@item N @tab +viminfo @tab |@ref{'viminfo'}|
@anchor{+vertsplit}
@vindex +vertsplit
@item @tab +vertsplit @tab ウィンドウの垂直分割 |@ref{:vsplit}|。8.0.1118 からは常に有効。|@ref{+windows}| 機能と同調。
@anchor{+virtualedit}
@vindex +virtualedit
@item N @tab +virtualedit @tab |@ref{'virtualedit'}|
@anchor{+visual}
@vindex +visual
@item S @tab +visual @tab ビジュアルモード |@ref{Visual-mode}| 7.4.200からは常に有効
@anchor{+visualextra}
@vindex +visualextra
@item N @tab +visualextra @tab 拡張ビジュアルモードコマンド |@ref{blockwise-operators}|
@anchor{+vreplace}
@vindex +vreplace
@item N @tab +vreplace @tab |@ref{gR}| と |@ref{gr}|
@anchor{+vtp}
@vindex +vtp
@item @tab +vtp @tab MS-Windows のコンソール上での '@option{termguicolors}' のサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
N  *+wildignore*	|'wildignore'|
N  *+wildmenu*		|'wildmenu'|
   *+windows*		more than one window; Always enabled since 8.0.1118.
m  *+writebackup*	|'writebackup'| is default on
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+wildignore}
@vindex +wildignore
@item N @tab +wildignore @tab |@ref{'wildignore'}|
@anchor{+wildmenu}
@vindex +wildmenu
@item N @tab +wildmenu @tab |@ref{'wildmenu'}|
@anchor{+windows}
@vindex +windows
@item @tab +windows @tab 複数ウィンドウ。8.0.1118 からは常に有効
@anchor{+writebackup}
@vindex +writebackup
@item m @tab +writebackup @tab |@ref{'writebackup'}| がデフォルトで有効
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
m  *+xim*		X input method |xim|
   *+xfontset*		X fontset support |xfontset|
   *+xpm*		pixmap support
m  *+xpm_w32*		Win32 GUI only: pixmap support |w32-xpm-support|
   *+xsmp*		XSMP (X session management) support
   *+xsmp_interact*	interactive XSMP (X session management) support
N  *+xterm_clipboard*	Unix only: xterm clipboard handling
m  *+xterm_save*	save and restore xterm screen |xterm-screens|
N  *+X11*		Unix only: can restore window title |X11|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{+xim}
@vindex +xim
@item m @tab +xim @tab X インプットメソッド |@ref{xim}|
@anchor{+xfontset}
@vindex +xfontset
@item @tab +xfontset @tab X フォントセットサポート |@ref{xfontset}|
@anchor{+xpm}
@vindex +xpm
@item @tab +xpm @tab pixmap サポート
@anchor{+xpm_w32}
@vindex +xpm_w32
@item m @tab +xpm_w32 @tab Win32 GUI のみ: pixmap サポート |@ref{w32-xpm-support}|
@anchor{+xsmp}
@vindex +xsmp
@item @tab +xsmp @tab XSMP (X session management) サポート
@anchor{+xsmp_interact}
@vindex +xsmp_interact
@item @tab +xsmp_interact @tab 対話型 XSMP (X session management) サポート
@anchor{+xterm_clipboard}
@vindex +xterm_clipboard
@item N @tab +xterm_clipboard @tab Unix のみ: xterm クリップボード操作
@anchor{+xterm_save}
@vindex +xterm_save
@item m @tab +xterm_save @tab xterm のスクリーンを保存と復帰 |@ref{xterm-screens}|
@anchor{+X11}
@vindex +X11
@item N @tab +X11 @tab Unix のみ: ウィンドウタイトルを復帰可能 |@ref{X11}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*/dyn* *E370* *E448*
			To some of the features "/dyn" is added when the
			feature is only available when the related library can
			be dynamically loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{/dyn}
@anchor{E370}
@anchor{E448}
@vindex /dyn
@erindex E370
@erindex E448
機能が動的ライブラリを利用する場合には機能名に "/dyn" が付加されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:ve[rsion] {nr}		Is now ignored.  This was previously used to check the
			version number of a .vimrc file.  It was removed,
			because you can now use the ":if" command for
			version-dependent behavior.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :ve[rsion] @{nr@}
現在は無視されます。これはかつて .vimrc の中でバージョン番号をチェックするために使われていました。現在は ":if" コマンドを使ってバージョン依存の振る舞いを記述できるので、削除されています。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:redi* *:redir*
:redi[r][!] > {file}	Redirect messages to file {file}.  The messages which
			are the output of commands are written to that file,
			until redirection ends.  The messages are also still
			shown on the screen.  When [!] is included, an
			existing file is overwritten.  When [!] is omitted,
			and {file} exists, this command fails.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:redi}
@anchor{:redir}
@pindex :redi
@pindex :redir
@item :redi[r][!] > @{file@}
コマンドの出力 (メッセージ) を @{file@} にリダイレクトします。メッセージは、リダイレクトを終了するまで、ファイルに出力されます。メッセージは画面にも表示されます。[!] を付けたときは、既存のファイルが上書きされます。[!] を省略した場合は、すでに @{file@} が存在していると、コマンドは失敗します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Only one ":redir" can be active at a time.  Calls to
			":redir" will close any active redirection before
			starting redirection to the new target.  For recursive
			use check out |execute()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@option{:redir}" を同時に複数使用することはできません。"@option{:redir}" を実行すると、新しいリダイレクトを開始する前に、すでに実行されている他のリダイレクトは閉じられます。再帰的に実行するには |@ref{execute()}| を調べてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			To stop the messages and commands from being echoed to
			the screen, put the commands in a function and call it
			with ":silent call Function()".
			An alternative is to use the 'verbosefile' option,
			this can be used in combination with ":redir".
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
実行中のコマンドやメッセージがスクリーンに表示されないようにするには、コマンドを関数の中に書き、その関数を "@samp{:silent call Function()}" と実行してください。このコマンドの代わりに、オプション '@option{verbosefile}' を使うこともできます。"@option{:redir}" と同時に使うこともできます。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] >> {file}	Redirect messages to file {file}.  Append if {file}
			already exists.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] >> @{file@}
メッセージを @{file@} にリダイレクトします。@{file@} が既に存在する場合は追記します。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] @{a-zA-Z}
:redi[r] @{a-zA-Z}>	Redirect messages to register {a-z}.  Append to the
			contents of the register if its name is given
			uppercase {A-Z}.  The ">" after the register name is
			optional. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@@{a-zA-Z@}
@itemx :redi[r] @@@{a-zA-Z@}>
メッセージをレジスタ @{a-z@} にリダイレクトします。レジスタ名が大文字 @{A-Z@} の場合は、そのレジスタに追記されます。レジスタ名の後ろの ">" は省略可能です。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:redi[r] @{a-z}>>	Append messages to register {a-z}. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@@{a-z@}>>
メッセージをレジスタ @{a-z@} に追記します。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] @*>		
:redi[r] @+>		Redirect messages to the selection or clipboard. For
			backward compatibility, the ">" after the register
			name can be omitted. See |quotestar| and |quoteplus|.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@*>
@itemx :redi[r] @@+>
メッセージをセレクションまたはクリップボードにリダイレクトします。互換性のため、レジスタ名の後ろの ">" は省略できます。|@ref{quotestar}| と |@ref{quoteplus}| を参照。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:redi[r] @*>>		
:redi[r] @+>>		Append messages to the selection or clipboard.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@*>>
@itemx :redi[r] @@+>>
メッセージをクリップボードに追記します。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] @">		Redirect messages to the unnamed register. For
			backward compatibility, the ">" after the register
			name can be omitted. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@">
メッセージを無名レジスタにリダイレクトします。互換性のため、レジスタ名の後ろの ">" は省略できます。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:redi[r] @">>		Append messages to the unnamed register. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] @@">>
メッセージを無名レジスタに追記します。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] => {var}	Redirect messages to a variable.  If the variable
			doesn't exist, then it is created.  If the variable
			exists, then it is initialized to an empty string.
			The variable will remain empty until redirection ends.
			Only string variables can be used.  After the
			redirection starts, if the variable is removed or
			locked or the variable type is changed, then further
			command output messages will cause errors. {not in Vi}
			To get the output of one command the |execute()|
			function can be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] => @{var@}
メッセージを変数にリダイレクトします。変数が存在しない場合は、作成されます。変数がすでにある場合は、空文字列で初期化されます。

リダイレクトが終了するまでは、変数は空のままです。文字列変数のみ使えます。リダイレクトを開始した後で変数を変更したり、ロックしたり、変数タイプを変更したりすると、それ以降のコマンドがメッセージを出力するときにエラーが起こります。

@{Vi にはない@}

コマンド 1 つの出力を取得するのには |@ref{execute()}| 関数を使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] =>> {var}	Append messages to an existing variable.  Only string
			variables can be used. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] =>> @{var@}
メッセージを変数に追記します。文字列変数のみ使えます。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:redi[r] END		End redirecting messages.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :redi[r] END
メッセージのリダイレクトを終了します。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:filt* *:filter*
:filt[er][!] {pat} {command}
:filt[er][!] /{pat}/ {command}
			Restrict the output of {command} to lines matching
			with {pat}.  For example, to list only xml files: >
				:filter /\.xml$/ oldfiles
<			If the [!] is given, restrict the output of {command}
			to lines that do NOT match {pat}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:filt}
@anchor{:filter}
@pindex :filt
@pindex :filter
@item :filt[er][!] @{pat@} @{command@}
@itemx :filt[er][!] /@{pat@}/ @{command@}
コマンドの出力を @{pat@} に一致する行に制限します。例として xml ファイルだけを一覧する場合には以下のようにします:
@example
:filter /\.xml$/ oldfiles
@end example
[!] を付けたときは、コマンドの出力を @{pat@} に一致しない行に制限します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			{pat} is a Vim search pattern.  Instead of enclosing
			it in / any non-ID character (see |'isident'|) can be
			used, so long as it does not appear in {pat}.  Without
			the enclosing character the pattern cannot include the
			bar character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{pat@} は Vim の検索パターンです。パターンを囲む "/" は、@{pat@} 内に使われない限り、非 ID 文字 (|@ref{'isident'}|) で代用できます。パターンを囲む文字を省略した場合は、パターンにバー文字 @{訳注: "|"@} を含むことはできなくなります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The pattern is matched against the relevant part of
			the output, not necessarily the whole line. Only some
			commands support filtering, try it out to check if it
			works.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パターンは出力に部分一致でマッチするので、行全体にマッチするパターンを指定する必要はありません。一部のコマンドだけがフィルタリングをサポートしているので、サポートしているかどうかは実際に試してみてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Only normal messages are filtered, error messages are
			not.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常のメッセージだけがフィルタリングされ、エラーメッセージはされません。@{訳注: 常に出力されます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:sil* *:silent* *:silent!*
:sil[ent][!] {command}	Execute {command} silently.  Normal messages will not
			be given or added to the message history.
			When [!] is added, error messages will also be
			skipped, and commands and mappings will not be aborted
			when an error is detected.  |v:errmsg| is still set.
			When [!] is not used, an error message will cause
			further messages to be displayed normally.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sil}
@anchor{:silent}
@anchor{:silent!}
@pindex :sil
@pindex :silent
@pindex :silent!
@item :sil[ent][!] @{command@}
@{command@} を静かに実行します。メッセージは表示されず、メッセージ履歴にも残りません。[!] を付けた場合は、エラーが起きたときでもエラーメッセージは表示されず、コマンドやマップは中断されません。その場合でも |@ref{v:errmsg}| はセットされます。[!] を付けない場合は、エラーメッセージは通常どおりに表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Redirection, started with |:redir|, will continue as
			usual, although there might be small differences.
			This will allow redirecting the output of a command
			without seeing it on the screen.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:redir}| によるリダイレクトは通常どおり機能します。|@ref{:silent}| を使うとコマンドの出力をスクリーンに表示することなくリダイレクトすることができます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			    :redir >/tmp/foobar
			    :silent g/Aap/p
			    :redir END
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:redir >/tmp/foobar
:silent g/Aap/p
:redir END
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			To execute a Normal mode command silently, use the
			|:normal| command.  For example, to search for a
			string without messages: >
			    :silent exe "normal /path\<CR>"
<			":silent!" is useful to execute a command that may
			fail, but the failure is to be ignored.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードコマンドを静かに実行するには |@ref{:normal}| コマンドを使用します。例えばメッセージを表示することなく文字列を検索するには:
@example
:silent exe "normal /path\<CR>"
@end example
"@command{:silent!}" は失敗するかもしれないコマンドを実行するときには便利ですが、エラーが無視されてしまいます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			    :let v:errmsg = ""
			    :silent! /^begin
			    :if v:errmsg != ""
			    : ... pattern was not found
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:let v:errmsg = ""
:silent! /^begin
:if v:errmsg != ""
: ... パターンは見つかりませんでした
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			":silent" will also avoid the hit-enter prompt.  When
			using this for an external command, this may cause the
			screen to be messed up.  Use |CTRL-L| to clean it up
			then.
			":silent menu ..." defines a menu that will not echo a
			Command-line command.  The command will still produce
			messages though.  Use ":silent" in the command itself
			to avoid that: ":silent menu .... :silent command".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:silent}" は hit-enter プロンプトも抑制します。外部プログラムを実行したとき、その出力は表示されたままになってしまいます。その場合は |@ref{CTRL-L}| でスクリーンをきれいにできます。

":silent menu ..." はコマンドをコマンドラインにエコーしないメニューを定義できます。しかしメニューに割り当てたコマンドのメッセージは表示されます。表示しないようにするにはそのコマンド自身に "@command{:silent}" を付けてください:
@example
":silent menu .... :silent command"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:uns* *:unsilent*
:uns[ilent] {command}	Execute {command} not silently.  Only makes a
			difference when |:silent| was used to get to this
			command.
			Use this for giving a message even when |:silent| was
			used.  In this example |:silent| is used to avoid the
			message about reading the file and |:unsilent| to be
			able to list the first line of each file. >
    		:silent argdo unsilent echo expand('%') . ": " . getline(1)
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:uns}
@anchor{:unsilent}
@pindex :uns
@pindex :unsilent
@item :uns[ilent] @{command@}
@{command@} を静かでなく実行します。|@ref{:silent}| コマンドが使用されているときのみ違いがでます。|@ref{:silent}| が使われていてもメッセージを表示したいときに使用します。次の例では、|@ref{:silent}| を使ってファイル読み込みに関するメッセージを抑制しつつ、|@ref{:unsilent}| を使って各ファイルの最初の行を表示できるようにしています:
@example
:silent argdo unsilent echo expand('%') . ": " . getline(1)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
						*:verb* *:verbose*
:[count]verb[ose] {command}
			Execute {command} with 'verbose' set to [count].  If
			[count] is omitted one is used. ":0verbose" can be
			used to set 'verbose' to zero.
			The additional use of ":silent" makes messages
			generated but not displayed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:verb}
@anchor{:verbose}
@pindex :verb
@pindex :verbose
@item :[count]verb[ose] @{command@}
'@option{verbose}' に [count] を設定した状態で @{command@} を実行します。[count] を省略した場合は 1 が設定されます。"@command{:0verbose}" として '@option{verbose}' をゼロにすることもできます。

"@command{:silent}" と一緒に使用すると、メッセージは生成されますが、表示はされません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The combination of ":silent" and ":verbose" can be
			used to generate messages and check them with
			|v:statusmsg| and friends.  For example: >
				:let v:statusmsg = ""
				:silent verbose runtime foobar.vim
				:if v:statusmsg != ""
				:  " foobar.vim could not be found
				:endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:silent}" と "@command{:verbose}" を一緒に使用するとメッセージを生成して |@ref{v:statusmsg}| を確認することができます。例:
@example
:let v:statusmsg = ""
:silent verbose runtime foobar.vim
:if v:statusmsg != ""
:  " foobar.vim が見付からない
:endif
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			When concatenating another command, the ":verbose"
			only applies to the first one: >
				:4verbose set verbose | set verbose
<				  verbose=4 ~
				  verbose=0 ~
			For logging verbose messages in a file use the
			'verbosefile' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドを連続させた場合は、":verbose" は最初のコマンドだけに適用されます:
@example
:4verbose set verbose | set verbose
@end example
@verbatim
verbose=4
verbose=0
@end verbatim
メッセージをログファイルに出力するには '@option{verbosefile}' を使ってください。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:verbose-cmd*
When 'verbose' is non-zero, listing the value of a Vim option or a key map or
an abbreviation or a user-defined function or a command or a highlight group
or an autocommand will also display where it was last defined.  If it was
defined manually then there will be no "Last set" message.  When it was
defined while executing a function, user command or autocommand, the script in
which it was defined is reported.
{not available when compiled without the |+eval| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:verbose-cmd}
@pindex :verbose-cmd
Vim のオプション、マップ、短縮入力、ユーザー定義関数、ユーザー定義コマンド、強調グループ、オートコマンド、を表示するとき、'@option{verbose}' がゼロ以外だと、それが設定された場所も表示されます。手動で設定したときは "Last set" メッセージは表示されません。関数、ユーザーコマンド、オートコマンド、を実行中に設定された場合には、そのコマンドを定義したスクリプトが表示されます。

@{|@ref{+eval}| が有効な場合のみ利用できます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*K*
K			Run a program to lookup the keyword under the
			cursor.  The name of the program is given with the
			'keywordprg' (kp) option (default is "man").  The
			keyword is formed of letters, numbers and the
			characters in 'iskeyword'.  The keyword under or
			right of the cursor is used.  The same can be done
			with the command >
				:!{program} {keyword}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{K}
@kindex K
@table @asis
@item K
カーソル位置のキーワードを調べるためのプログラムを実行します。プログラムの名前はオプション '@option{keywordprg}' (kp) で設定します (初期設定は "man")。キーワードはアルファベット、数字、'@option{iskeyword}' に設定された文字から構成されます。

カーソルの下、もしくは右側のキーワード使用されます。次のコマンドで同じことができます:
@example
:!@{program@} @{keyword@}
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			There is an example of a program to use in the tools
			directory of Vim.  It is called "ref" and does a
			simple spelling check.
			Special cases:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の tools ディレクトリにサンプルプログラムがあります。"ref" という簡易スペルチェックプログラムです。

特別なケース:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- If 'keywordprg' begins with ":" it is invoked as
			  a Vim Ex command with [count].
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item '@option{keywordprg}' が "@var{:}" で始まるならば、それは Vim の Ex コマンドとして [count] を伴って実行されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- If 'keywordprg' is empty, the ":help" command is
			  used.  It's a good idea to include more characters
			  in 'iskeyword' then, to be able to find more help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{keywordprg}' が空の場合は、"@command{:help}" コマンドが使われます。検索しやすくするために '@option{iskeyword}' に文字を追加すると良いでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- When 'keywordprg' is equal to "man" or starts with
			  ":", a [count] before "K" is inserted after
			  keywordprg and before the keyword.  For example,
			  using "2K" while the cursor is on "mkdir", results
			  in: >
				!man 2 mkdir
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{keywordprg}' が @var{"man}" もしくは "@var{:}" で始まる場合は、"K" の前に入力されたカウントが "man" とキーワードの間に挿入されます。例えば、"mkdir" にカーソルがあって、"2K" を実行すると、結果はこのようになります:
@verbatim
!man 2 mkdir
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			- When 'keywordprg' is equal to "man -s", a count
			  before "K" is inserted after the "-s".  If there is
			  no count, the "-s" is removed.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{keywordprg}' が "man -s" の場合は、"K" の前に入力されたカウントは "-s" の後に挿入されます。カウントを省略した場合は、"-s" は除去されます。
@end itemize
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*v_K*
{Visual}K		Like "K", but use the visually highlighted text for
			the keyword.  Only works when the highlighted text is
			not more than one line.  {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{v_K}
@kindex v_K
@item @{Visual@}K
"K" と同じですが、キーワードにはビジュアル選択されたテキストが使用されます。複数行を選択したときは機能しません。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
[N]gs							*gs* *:sl* *:sleep*
:[N]sl[eep] [N]	[m]	Do nothing for [N] seconds.  When [m] is included,
			sleep for [N] milliseconds.  The count for "gs" always
			uses seconds.  The default is one second. >
			     :sleep	     "sleep for one second
			     :5sleep	     "sleep for five seconds
			     :sleep 100m     "sleep for a hundred milliseconds
			     10gs	     "sleep for ten seconds
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gs}
@anchor{:sl}
@anchor{:sleep}
@kindex gs
@pindex :sl
@pindex :sleep
@item [N]gs
@itemx :[N]sl[eep] [N] [m]
[N] 秒間何もしません。[m] を付けると、[N] ミリ秒間スリープします。"gs" に指定する数値は常に秒単位です。省略時は 1 秒間スリープします。
@verbatim
:sleep          " 1 秒スリープ
:5sleep         " 5 秒スリープ
:sleep 100m     " 100 ミリ秒スリープ
10gs            " 10 秒スリープ
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			Can be interrupted with CTRL-C (CTRL-Break on MS-DOS).
			"gs" stands for "goto sleep".
			While sleeping the cursor is positioned in the text,
			if at a visible position.  {not in Vi}
			Also process the received netbeans messages. {only
			available when compiled with the |+netbeans_intg|
			feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-C} で割り込むことができます (MS-DOS では @kbd{CTRL-Break})。"gs" は "goto sleep" の略です。カーソルが表示可能な位置にある場合は、スリープしている間、カーソルはテキスト中に表示されます。

@{Vi にはない@}

スリープ中に受信した netbeans メッセージは処理されます。

@{|@ref{+netbeans_intg}| 機能つきでコンパイルされたときのみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
							*g_CTRL-A*
g CTRL-A		Only when Vim was compiled with MEM_PROFILING defined
			(which is very rare): print memory usage statistics.
			Only useful for debugging Vim.
			For incrementing in Visual mode see |v_g_CTRL-A|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g_CTRL-A}
@kindex g_CTRL-A
@item g @kbd{CTRL-A}
MEM_PROFILING を define して Vim をコンパイルしたときみ使えます (通常は使いません)。メモリ使用量の統計を表示します。Vim をデバッグするときなどに使います。ビジュアルモード時のインクリメントは |@ref{v_g_CTRL-A}| を参照。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Using Vim like less or more					*less*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{less}
@cindex less
@cindex less, more の代わりに Vim を使う
@section 2. less、more の代わりに Vim を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you use the less or more program to view a file, you don't get syntax
highlighting.  Thus you would like to use Vim instead.  You can do this by
using the shell script "$VIMRUNTIME/macros/less.sh".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
less や more ではファイルを構文強調表示できません。代わりに、Vim を使うことができます。それには、シェルスクリプト "$VIMRUNTIME/macros/less.sh" を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This shell script uses the Vim script "$VIMRUNTIME/macros/less.vim".  It sets
up mappings to simulate the commands that less supports.  Otherwise, you can
still use the Vim commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このシェルスクリプトは Vim script "$VIMRUNTIME/macros/less.vim" を使って、less のコマンドをシミュレートするためのマップを設定します。less コマンド以外は通常どおり、Vim のコマンドを使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This isn't perfect.  For example, when viewing a short file Vim will still use
the whole screen.  But it works good enough for most uses, and you get syntax
highlighting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
完璧に同じ動作ではありません。例えば、短いファイルを表示する場合でも、Vim はスクリーンを占有します。しかし、ほとんどの場合は満足に機能します。それにとにかく、構文強調表示することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "h" key will give you a short overview of the available commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"h" キーを押すと使用できるコマンドのショートヘルプが表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to set options differently when using less, define the
LessInitFunc in your vimrc, for example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もし less を使っていて異なるオプションを設定したい場合は vimrc に LessInitFunc を定義します。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	func LessInitFunc()
	  set nocursorcolumn nocursorline
	endfunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
func LessInitFunc()
  set nocursorcolumn nocursorline
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
