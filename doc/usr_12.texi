@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_12.txt, usr_20.txt, usr_11.txt, 目次
@unnumbered 便利な小技
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_12.txt*	For Vim version 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

				Clever tricks
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_12.txt
@verbatim
*usr_12.txt*	For Vim バージョン 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

				便利な小技
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
By combining several commands you can make Vim do nearly everything.  In this
chapter a number of useful combinations will be presented.  This uses the
commands introduced in the previous chapters and a few more.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドを組み合わせれば、ほとんど何でもこなすことができます。この章では、便利なコマンドの組み合わせをいくつか紹介します。今までに紹介したコマンドを主に使いますが、まだ紹介していないコマンドも少し登場します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|12.1|	Replace a word
|12.2|	Change "Last, First" to "First Last"
|12.3|	Sort a list
|12.4|	Reverse line order
|12.5|	Count words
|12.6|	Find a man page
|12.7|	Trim blanks
|12.8|	Find where a word is used

     Next chapter: |usr_20.txt|  Typing command-line commands quickly
 Previous chapter: |usr_11.txt|  Recovering from a crash
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{12.1}| @tab 単語を置換する
@item |@ref{12.2}| @tab "Last, First" を "First Last" に変更する
@item |@ref{12.3}| @tab リストをソートする
@item |@ref{12.4}| @tab 行を逆順に並べ替える
@item |@ref{12.5}| @tab 単語を数える
@item |@ref{12.6}| @tab マニュアルを引く
@item |@ref{12.7}| @tab 空白を取り除く
@item |@ref{12.8}| @tab 単語が使われている場所を検索する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.1*	Replace a word
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.1}
@section 単語を置換する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The substitute command can be used to replace all occurrences of a word with
another word: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
置換コマンドを使うと、文章中に現れる単語を別の単語に置換することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/four/4/g
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/four/4/g
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "%" range means to replace in all lines.  The "g" flag at the end causes
all words in a line to be replaced.
   This will not do the right thing if your file also contains "thirtyfour".
It would be replaced with "thirty4".  To avoid this, use the "\<" item to
match the start of a word: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@samp{%}" はすべての行を処理するための範囲指定です。末尾の "@samp{g}" は、行のすべての単語を置換するための指定です。

上記のコマンドは正しく動作しません。例えば、"thirtyfour" という単語がファイルに含まれていた場合、"thirty4" に置換されてしまいます。これを防ぐには、"@samp{\<}" を使って単語の先頭にヒットさせます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/\<four/4/g
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\<four/4/g
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Obviously, this still goes wrong on "fourteen".  Use "\>" to match the end of
a word: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これでもまだ、"fourteen" のような単語が間違って置換されてしまいます。"@samp{\>}" を使って単語の末尾にヒットさせましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/\<four\>/4/g
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\<four\>/4/g
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are programming, you might want to replace "four" in comments, but not
in the code.  Since this is difficult to specify, add the "c" flag to have the
substitute command prompt you for each replacement: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プログラムを書いているなら、コメントの中にある "four" だけを置換したい場合もあるでしょう。コメントの中かどうかを区別するのは難しいので、置換コマンドに "c" フラグを指定して、確認しながら置換してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
	:%s/\<four\>/4/gc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\<four\>/4/gc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REPLACING IN SEVERAL FILES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 複数のファイル内で置換する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you want to replace a word in more than one file.  You could edit each
file and type the command manually.  It's a lot faster to use record and
playback.
   Let's assume you have a directory with C++ files, all ending in ".cpp".
There is a function called "GetResp" that you want to rename to "GetAnswer".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複数のファイル内で置換したい場合を考えます。ファイルを1つずつ開いて、その都度コマンドを入力することもできますが、操作の記録と再実行を使えば、はるかに素早く置換できます。

拡張子が ".cpp" の C++ ファイルが入ったディレクトリがあるとします。"GetResp" という関数を "GetAnswer" に置換してみましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim *.cpp		Start Vim, defining the argument list to
				contain all the C++ files.  You are now in the
				first file.
	qq			Start recording into the q register
	:%s/\<GetResp\>/GetAnswer/g
				Do the replacements in the first file.
	:wnext			Write this file and move to the next one.
	q			Stop recording.
	@q			Execute the q register.  This will replay the
				substitution and ":wnext".  You can verify
				that this doesn't produce an error message.
	999@q			Execute the q register on the remaining files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item vim *.cpp @tab Vim を起動して、すべての C++ ファイルを引数リストに加える。Vim が起動すると、最初のファイルが表示されます。
@item qq @tab レジスタ "q" に記録を開始する。
@item :%s/\<GetResp\>/GetAnswer/g @tab 最初のファイルで置換コマンドを実行する。
@item :wnext @tab ファイルを保存し、次のファイルに移動する。
@item q @tab 記録を終了する。
@item @@q @tab レジスタ "q" を実行する。置換コマンドと "@command{:wnext}" が再実行されます。エラーメッセージが表示されたりしないか確認してください。
@item 999@@q @tab レジスタ "q" を繰り返し実行し、残りのファイルをすべて処理します。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At the last file you will get an error message, because ":wnext" cannot move
to the next file.  This stops the execution, and everything is done.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最後のファイルを処理したとき、もうそれ以上ファイルがないので、"@command{:wnext}" コマンドがエラーメッセージを表示します。それにより、実行が中断され、すべてが完了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	When playing back a recorded sequence, an error stops the execution.
	Therefore, make sure you don't get an error message when recording.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
記録されたコマンドの実行中にエラーが発生すると、実行は中断されます。ですから、エラーが出ないように注意して操作を記録してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is one catch: If one of the .cpp files does not contain the word
"GetResp", you will get an error and replacing will stop.  To avoid this, add
the "e" flag to the substitute command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まだ問題が 1 つ残っています。もしも、"GetResp" を含んでいないファイルがあった場合、置換コマンドがエラーを発生し、そこで処理が停止してしまいます。それを避けるには、置換コマンドに "e" フラグを指定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/\<GetResp\>/GetAnswer/ge
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\<GetResp\>/GetAnswer/ge
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "e" flag tells ":substitute" that not finding a match is not an error.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"e" フラグは、パターンが見つからなくてもエラーを発生させないための指定です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.2*	Change "Last, First" to "First Last"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.2}
@section "Last, First" を "First Last" に変更する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You have a list of names in this form:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のような形式で名前の一覧があるとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Doe, John ~
	Smith, Peter ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Doe, John
Smith, Peter
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You want to change that to:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これを次のように変更したいとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	John Doe ~
	Peter Smith ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
John Doe
Peter Smith
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This can be done with just one command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはたった 1 つのコマンドでできてしまいます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/\([^,]*\), \(.*\)/\2 \1/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\([^,]*\), \(.*\)/\2 \1/
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Let's break this down in parts.  Obviously it starts with a substitute
command.  The "%" is the line range, which stands for the whole file.  Thus
the substitution is done in every line in the file.
   The arguments for the substitute command are "/from/to/".  The slashes
separate the "from" pattern and the "to" string.  This is what the "from"
pattern contains:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つずつ説明しましょう。これが置換コマンドであることはわかりますよね。"%" はすべての行を示す範囲指定です。つまり、ファイルのすべての行で置換が実行されます。

置換コマンドには "/from/to/" という形式で引数を指定します。スラッシュ (@samp{/}) は "from" パターンと "to" 文字列の区切りです。"from" パターンは次のようになっています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							\([^,]*\), \(.*\) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
\([^,]*\), \(.*\)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The first part between \( \) matches "Last"	\(     \)
	    match anything but a comma			  [^,]
	    any number of times				      *
	matches ", " literally					 ,
	The second part between \( \) matches "First"		   \(  \)
	    any character					     .
	    any number of times					      *
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .9 .1
@item 1 つ目の \( \) で囲まれた部分は "Last" です @tab \(@ @ @ @ @ \)
@item コンマ (,) 以外の文字が @tab [^,]
@item 何文字でもマッチする @tab *
@item ", " という文字にそのままマッチ @tab ,
@item 2 つ目の \( \) で囲まれた部分は "First" です @tab \(@ @ \)
@item どんな文字でも @tab .
@item 何文字でもマッチする @tab *
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the "to" part we have "\2" and "\1".  These are called backreferences.
They refer to the text matched by the "\( \)" parts in the pattern.  "\2"
refers to the text matched by the second "\( \)", which is the "First" name.
"\1" refers to the first "\( \)", which is the "Last" name.
   You can use up to nine backreferences in the "to" part of a substitute
command.  "\0" stands for the whole matched pattern.  There are a few more
special items in a substitute command, see |sub-replace-special|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"to" の部分には "\2" と "\1" が指定されています。これは後方参照というものです。"\( \)" で囲まれた部分にマッチしたテキストを参照しています。"\2" は 2 つ目の "\( \)" で囲まれた部分にマッチしたテキスト ("First" name) を参照しています。"\1" は 1 つ目の "\( \)" ("Last" name) を参照しています。

置換コマンドの "to" 部分には最大で 9 個の後方参照を指定できます。"\0" はパターンがマッチしたテキスト全体になります。置換コマンドには他にもいくつか特殊なアイテムがあります。|@ref{sub-replace-special}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.3*	Sort a list
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.3}
@section リストをソートする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In a Makefile you often have a list of files.  For example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Makefile ではよく、ファイルのリストが使われます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	OBJS = \ ~
		version.o \ ~
		pch.o \ ~
		getopt.o \ ~
		util.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		backup.o ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
OBJS = \
    version.o \
    pch.o \
    getopt.o \
    util.o \
    getopt1.o \
    inp.o \
    patch.o \
    backup.o
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To sort this list, filter the text through the external sort command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このリストをソートするには、外部コマンドの sort を使ってテキストをフィルタリングします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/^OBJS
	j
	:.,/^$/-1!sort
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/^OBJS
j
:.,/^$/-1!sort
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This goes to the first line, where "OBJS" is the first thing in the line.
Then it goes one line down and filters the lines until the next empty line.
You could also select the lines in Visual mode and then use "!sort".  That's
easier to type, but more work when there are many lines.
   The result is this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストの先頭 (行頭が "OBJS" で始まる行) に移動してから、一行下に移動、その行から次の空行までの範囲をフィルタに通しています。ビジュアルモードで範囲を選択してから "@command{!sort}" を実行する方法でも構いません。その方が入力は簡単です。行がたくさんある場合は少し面倒かもしれませんが。

結果は、次のようになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	OBJS = \ ~
		backup.o ~
		getopt.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		pch.o \ ~
		util.o \ ~
		version.o \ ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
OBJS = \
    backup.o
    getopt.o \
    getopt1.o \
    inp.o \
    patch.o \
    pch.o \
    util.o \
    version.o \
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Notice that a backslash at the end of each line is used to indicate the line
continues.  After sorting, this is wrong!  The "backup.o" line that was at
the end didn't have a backslash.  Now that it sorts to another place, it
must have a backslash.
   The simplest solution is to add the backslash with "A \<Esc>".  You can
keep the backslash in the last line, if you make sure an empty line comes
after it.  That way you don't have this problem again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
各行の末尾に行結合のためのバックスラッシュ (\) が使われている点に注意して下さい。並べ替えたために、これが壊れてしまいました。"backup.o" はリストの最後にあったので行末にバックスラッシュが付いていませんでしたが、並べ替えによって別の場所に移動したため、バックスラッシュが必要になったのです。

一番簡単な解決方法は "@command{A \@key{<Esc>}}" でバックスラッシュを追加することです。最後の行にあるバックスラッシュは次の行を空白行にしておけば削除しなくても問題ありません。これで同じ問題は二度と起きないでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.4*	Reverse line order
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.4}
@section 行を逆順に並べ替える
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The |:global| command can be combined with the |:move| command to move all the
lines before the first line, resulting in a reversed file.  The command is: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:global}| コマンドと |@ref{:move}| コマンドを組み合せて、全ての行を 1 行目の上に移動することで、行を逆順に並べ替えたファイルを作ることができます。コマンドは次の通りです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:global/^/m 0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:global/^/m 0
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Abbreviated: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
短縮して書くこともできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:g/^/m 0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:g/^/m 0
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "^" regular expression matches the beginning of the line (even if the line
is blank).  The |:move| command moves the matching line to after the mythical
zeroth line, so the current matching line becomes the first line of the file.
As the |:global| command is not confused by the changing line numbering,
|:global| proceeds to match all remaining lines of the file and puts each as
the first.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"^" という正規表現は行の先頭に (それが空行であっても) マッチします。|@ref{:move}| コマンドはマッチした行を 0 行目 (実際には存在しない仮想的な行) の下に移動します。つまり、マッチした行がファイルの先頭行になります。|@ref{:global}| コマンドは行番号が変更されても処理を継続できます。そして、マッチしたすべての行が、順番にファイルの先頭に移動していきます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This also works on a range of lines.  First move to above the first line and
mark it with "mt".  Then move the cursor to the last line in the range and
type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ある一定の範囲だけ並べ替えることもできます。まず、並べ替えたい範囲の 1 行上に移動し、"mt" でマークします。そして、範囲の末尾に移動し、次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:'t+1,.g/^/m 't
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:'t+1,.g/^/m 't
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.5*	Count words
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.5}
@section 単語を数える
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Sometimes you have to write a text with a maximum number of words.  Vim can
count the words for you.
   When the whole file is what you want to count the words in, use this
command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ときには、単語数に制限のある文章を書かなければならない場合もあるでしょう。Vim には単語を数えるための機能があります。

ファイル全体の単語数を数えるには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	g CTRL-G
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
g CTRL-G
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Do not type a space after the g, this is just used here to make the command
easy to read.
   The output looks like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{g}" の後の空白は入力しないでください。この空白はコマンドを読み易く表記するためのものです。

次のような結果が出力されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Col 1 of 0; Line 141 of 157; Word 748 of 774; Byte 4489 of 4976 ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
列 1 / 0; 行 141 / 157; 単語 748 / 774; バイト 4489 / 4976
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can see on which word you are (748), and the total number of words in the
file (774).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これを見れば、何番目の単語 (748) にカーソルがあり、ファイル全体でいくつの単語 (774) があるのかがわかります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the text is only part of a file, you could move to the start of the text,
type "g CTRL-G", move to the end of the text, type "g CTRL-G" again, and then
use your brain to compute the difference in the word position.  That's a good
exercise, but there is an easier way.  With Visual mode, select the text you
want to count words in.  Then type g CTRL-G.  The result:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの一部の文章についてのみ単語を数えたい場合は、テキストの先頭に移動して"@kbd{g CTRL-G}" を入力し、テキストの末尾に移動して "@kbd{g CTRL-G}" をもう一度入力し、そして、表示された単語の位置を引き算して単語数を求めます…これは頭の体操にはなりますが簡単な方法とは言えませんね。ビジュアルモードを使えば、テキストを選択してから "@kbd{g CTRL-G}" を入力するだけです。次のような結果が表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Selected 5 of 293 Lines; 70 of 1884 Words; 359 of 10928 Bytes ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
選択 5 / 293 行; 70 / 1884 単語; 359 / 10928 バイト
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For other ways to count words, lines and other items, see |count-items|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
単語や行などを数える他の方法については |@ref{count-items}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.6*	Find a man page					*find-manpage*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.6}
@anchor{find-manpage}
@cindex find-manpage
@section マニュアルを引く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
While editing a shell script or C program, you are using a command or function
that you want to find the man page for (this is on Unix).  Let's first use a
simple way: Move the cursor to the word you want to find help on and press >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シェルスクリプトや C プログラムを書いているときに、コマンドや関数のマニュアルを引きたいことがあると思います (Unix での話です)。まずは簡単な方法でやってみましょう。ヘルプを引きたい単語の上にカーソルを移動して、次のコマンドを入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	K
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
K
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will run the external "man" program on the word.  If the man page is
found, it is displayed.  This uses the normal pager to scroll through the text
(mostly the "more" program).  When you get to the end pressing <Enter> will
get you back into Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
単語を引数として "man" プログラムが実行され、マニュアルが見つかった場合は、それが表示されます。テキストをスクロール表示するために、標準設定のページャ (おそらく "more" プログラム) が使われます。マニュアルを最後まで表示したら、@key{<Enter>} を押して Vim に戻ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A disadvantage is that you can't see the man page and the text you are working
on at the same time.  There is a trick to make the man page appear in a Vim
window.  First, load the man filetype plugin: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この方法の欠点は編集中のテキストとマニュアルを同時に表示できないことです。しかし、Vim ウィンドウの中にマニュアルを表示する方法もあります。最初に、man ファイルタイププラグインをロードしてください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:runtime! ftplugin/man.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:runtime! ftplugin/man.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Put this command in your vimrc file if you intend to do this often.  Now you
can use the ":Man" command to open a window on a man page: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドを @file{vimrc} ファイルに書いておけばいつでも使えるようになります。さて、"@command{:Man}" コマンドが使えるようになりました。新しいウィンドウにマニュアルを表示できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:Man csh
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:Man csh
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can scroll around and the text is highlighted.  This allows you to find
the help you were looking for.  Use CTRL-W w to jump to the window with the
text you were working on.
   To find a man page in a specific section, put the section number first.
For example, to look in section 3 for "echo": >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カラー表示されたテキストをスクロールして表示することができます。これで、調べたい説明を見つけることができますね。@kbd{CTRL-W w} を使えば、元のウィンドウにジャンプできます。

特定のセクションのマニュアルを表示したいときは、セクション番号を指定してください。例えば、セクション 3 にある "echo" を調べるなら、次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:Man 3 echo
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:Man 3 echo
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To jump to another man page, which is in the text with the typical form
"word(1)", press CTRL-] on it.  Further ":Man" commands will use the same
window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マニュアルの中で "word(1)" のような形式で示されている他のマニュアルにジャンプするには @kbd{CTRL-]} を押してください。"@command{:Man}" コマンドが続けて使われた場合は、同じウィンドウが使用されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To display a man page for the word under the cursor, use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソル下の単語のマニュアルを表示するには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	\K
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
\K
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(If you redefined the <Leader>, use it instead of the backslash).
For example, you want to know the return value of "strstr()" while editing
this line:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(自分で <Leader> を再定義している場合は、"@samp{\}" ではなく、それを使ってください) 例えば、次の行を編集中に "strstr()" の戻り値を知りたくなったら:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	if ( strstr (input, "aap") == ) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if ( strstr (input, "aap") == )
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move the cursor to somewhere on "strstr" and type "\K".  A window will open
to display the man page for strstr().
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"strstr" の上にカーソルを移動し、"\K" と入力してください。ウィンドウが開いて strstr() のマニュアルが表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.7*	Trim blanks
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.7}
@section 空白を取り除く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some people find spaces and tabs at the end of a line useless, wasteful, and
ugly.  To remove whitespace at the end of every line, execute the following
command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行末の空白は無用であり、浪費であり、見苦しいものであると考える人々がいます。すべての行末から空白を取り除くには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:%s/\s\+$//
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:%s/\s\+$//
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The line range "%" is used, thus this works on the whole file.  The pattern
that the ":substitute" command matches with is "\s\+$".  This finds white
space characters (\s), 1 or more of them (\+), before the end-of-line ($).
Later will be explained how you write patterns like this, see |usr_27.txt|.
   The "to" part of the substitute command is empty: "//".  Thus it replaces
with nothing, effectively deleting the matched white space.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"%" を使ってすべての行を範囲指定しています。"@command{:substitute}" コマンドに指定されているパターンは "\s\+$" です。これは、空白文字 (\s) が一文字以上続き (\+)、行末($) で終わる文字列にマッチします。このようなパターンの書き方は |@ref{usr_27.txt}| で説明されています。

"to" の部分は空 ("//") になっています。空文字列で置き換える、つまり、マッチした空白を削除するという意味になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another wasteful use of spaces is placing them before a tab.  Often these can
be deleted without changing the amount of white space.  But not always!
Therefore, you can best do this manually.  Use this search command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もう 1 つの浪費パターンとして、tab の直前にスペースが使われている場合があります。たいていは、そのスペースを削除しても見た目の空白の量は変わりませんが、いつも大丈夫というわけではありません。ですから、手作業で削除するのがベストです。次の検索コマンドを使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/ 	
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
/
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You cannot see it, but there is a space before a tab in this command.  Thus
it's "/<Space><Tab>".   Now use "x" to delete the space and check that the
amount of white space doesn't change.  You might have to insert a tab if it
does change.  Type "n" to find the next match.  Repeat this until no more
matches can be found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何も見えないかもしれませんが、Tab 文字の直前にスペースがあります。つまりこれは "@key{/}@key{<Space>}@key{<Tab>}" です。検索したら、"@command{x}" コマンドを使ってスペースを削除し、見た目の変化がないことを確認してください。変化があった場合は、tab 文字を挿入して調整しましょう。"n" を押して次の場所を検索します。マッチするものがなくなるまで同じ操作を繰り返してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*12.8*	Find where a word is used
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{12.8}
@section 単語が使われている場所を検索する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are a UNIX user, you can use a combination of Vim and the grep command
to edit all the files that contain a given word.  This is extremely useful if
you are working on a program and want to view or edit all the files that
contain a specific variable.
   For example, suppose you want to edit all the C program files that contain
the word "frame_counter".  To do this you use the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX を使っているなら、Vim と grep コマンドを組み合わせれば、指定した単語が含まれているすべてのファイルを開くことができます。これは、プログラムを書いているときに、特定の変数が使われているファイルを表示または編集したい場合にとても便利です。

例えば、"frame_counter" という単語が含まれているすべての C 言語ファイルを開くには、次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim `grep -l frame_counter *.c`
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim `grep -l frame_counter *.c`
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Let's look at this command in detail.  The grep command searches through a set
of files for a given word.  Because the -l argument is specified, the command
will only list the files containing the word and not print the matching lines.
The word it is searching for is "frame_counter".  Actually, this can be any
regular expression.  (Note: What grep uses for regular expressions is not
exactly the same as what Vim uses.)
   The entire command is enclosed in backticks (`).  This tells the UNIX shell
to run this command and pretend that the results were typed on the command
line.  So what happens is that the grep command is run and produces a list of
files, these files are put on the Vim command line.  This results in Vim
editing the file list that is the output of grep.  You can then use commands
like ":next" and ":first" to browse through the files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドを詳しく見てみましょう。"@command{grep}" コマンドは、指定されたファイルの中から単語を検索します。"-l" 引数が指定されているので、単語が含まれているファイルの名前だけが表示されます。マッチした行は表示されません。検索される単語は "frame_counter" です。単語の指定には正規表現が使えます。
@quotation
@strong{Note:} @*
grep で使える正規表現は Vim の正規表現と完全に同じではありません。
@end quotation
コマンドはバッククォート (@samp{`}) で囲まれています。これは、コマンドを実行し、その出力を、コマンドラインに入力されたものとして扱うように UNIX シェルに指示しています。つまり、grep コマンドが実行され、出力されたファイルの一覧が Vim の引数に渡されます。Vim が起動した後は、"@command{:next}" や "@command{:first}" などのコマンドでそれらのファイルを切り替えられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
FINDING EACH LINE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 単語が使われている行を検索する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The above command only finds the files in which the word is found.  You still
have to find the word within the files.
   Vim has a built-in command that you can use to search a set of files for a
given string.  If you want to find all occurrences of "error_string" in all C
program files, for example, enter the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上述のコマンドは単語が含まれているファイルを見つけるだけなので、単語が使われている行は自分で検索する必要がありました。

Vim には、指定された文字列を複数のファイルの中から検索するための組み込みコマンドがあります。例えば、"error_string" という文字列をすべての C 言語ファイルの中から検索するには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:grep error_string *.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:grep error_string *.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This causes Vim to search for the string "error_string" in all the specified
files (*.c).  The editor will now open the first file where a match is found
and position the cursor on the first matching line.  To go to the next
matching line (no matter in what file it is), use the ":cnext" command.  To go
to the previous match, use the ":cprev" command.  Use ":clist" to see all the
matches and where they are.
   The ":grep" command uses the external commands grep (on Unix) or findstr
(on Windows).  You can change this by setting the option 'grepprg'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定されたファイル (*.c) の中から、"error_string" という文字列が検索されます。コマンドを実行すると、文字列が含まれている最初のファイルが開き、検索にヒットした最初の行にカーソルが移動します。文字列が現れる次の場所 (同じファイルとは限りません) に移動するには、"@command{:cnext}" コマンドを使います。1 つ前に戻るには "@command{:cprev}" コマンドを使います。"@command{:clist}" コマンドを使うと、検索結果の一覧と現在位置が表示されます。

"@command{:grep}" コマンドの実行には、外部プログラムの grep (Unix) または findstr (Windows) が使われます。使われるプログラムは '@option{grepprg}' オプションで変更できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_20.txt|  Typing command-line commands quickly

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
