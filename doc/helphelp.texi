@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node helphelp.txt, , , 目次
@unnumbered ヘルプの使い方
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*helphelp.txt*	For Vim version 8.0.  Last change: 2017 Mar 19


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex helphelp.txt
@verbatim
*helphelp.txt*	For Vim バージョン 8.0.  Last change: 2017 Mar 19


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Help on help files					*helphelp*

1. Help commands		|online-help|
2. Translated help files	|help-translated|
3. Writing help files		|help-writing|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{helphelp}
@cindex helphelp
@section ヘルプのヘルプ

@multitable @columnfractions .5 .5
@item |@ref{online-help, , online-help}| @tab ヘルプコマンド
@item |@ref{help-translated, , help-translated}| @tab 翻訳ヘルプ
@item |@ref{help-writing, , help-writing}| @tab ヘルプファイルの書き方
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Help commands					*online-help*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{online-help}
@cindex online-help
@section ヘルプコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*help* *<Help>* *:h* *:help* *<F1>* *i_<F1>* *i_<Help>*
<Help>		or
:h[elp]			Open a window and display the help file in read-only
			mode.  If there is a help window open already, use
			that one.  Otherwise, if the current window uses the
			full width of the screen or is at least 80 characters
			wide, the help window will appear just above the
			current window.  Otherwise the new window is put at
			the very top.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{help}
@anchor{<Help>}
@anchor{:h}
@anchor{:help}
@anchor{<F1>}
@anchor{i_<F1>}
@anchor{i_<Help>}
@cindex help
@cindex <Help>
@cindex :h
@cindex :help
@cindex <F1>
@cindex i_<F1>
@cindex i_<Help>
@table @asis
@item @key{<Help>} または
@itemx :h[elp]
新しいウィンドウを作成し、ヘルプファイルを読み込み専用で開きます。ヘルプウィンドウがすでに開いているときはそのウィンドウを使います。カレントウィンドウの幅がスクリーンと同じか、80 文字分以上のときにはヘルプウィンドウはカレントウィンドウのすぐ上に作成されます。そうでないときには、ヘルプウィンドウは最上部に作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The 'helplang' option is used to select a language, if
			the main help file is available in several languages.
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

複数言語のヘルプが利用可能なときは、言語を選択するために、オプション '@option{helplang}' が参照されます。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*{subject}* *E149* *E661*
:h[elp] {subject}	Like ":help", additionally jump to the tag {subject}.
			For example:  >
				:help options
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@{subject@}}
@anchor{E149}
@anchor{E661}
@cindex @{subject@}
@cindex E149
@cindex E661
@item :h[elp] @{subject@}
"@command{:help}" と同じですが、加えて、@{subject@} へタグジャンプします。例えば:
@example
:help options
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<			{subject} can include wildcards such as "*", "?" and
			"[a-z]":
			   :help z?	jump to help for any "z" command
			   :help z.	jump to the help for "z."
			But when a tag exists it is taken literally:
			   :help :?	jump to help for ":?"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{subject@} には "*", "?"、"[a-z]" といったワイルドカードも指定できます。
@multitable @columnfractions .3 .7
@item :help z? @tab "z" コマンドのいずれかのヘルプを開く
@item :help z. @tab "z." のヘルプを開く
@end multitable
ですが、タグが存在するときは、文字通りにとられます。
@multitable @columnfractions .4 .6
@item :help :? @tab ":?" のヘルプを開く
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			If there is no full match for the pattern, or there
			are several matches, the "best" match will be used.
			A sophisticated algorithm is used to decide which
			match is better than another one.  These items are
			considered in the computation:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パターンに完全に一致する項目が無かった場合、または、複数の項目が一致した場合には、"最善" の一致が選択されます。洗練されたアルゴリズムで最善な項目が決定されます。次のような優先順位が使われます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- A match with same case is much better than a match
			  with different case.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 大小文字が一致したほうが、しない時よりも良い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- A match that starts after a non-alphanumeric
			  character is better than a match in the middle of a
			  word.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 非英数字のあとにマッチするほうが、単語の真ん中にマッチするものよりも良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- A match at or near the beginning of the tag is
			  better than a match further on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item タグ名の先頭でマッチするか、なるべく先頭に近いほうが、そうでないものよりも良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- The more alphanumeric characters match, the better.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item より多くの英数字がマッチするほうが良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- The shorter the length of the match, the better.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 短いマッチが良い。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The 'helplang' option is used to select a language, if
			the {subject} is available in several languages.
			To find a tag in a specific language, append "@ab",
			where "ab" is the two-letter language code.  See
			|help-translated|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{subject@} のヘルプが複数の言語にある場合には、言語を選択するために、オプション '@option{helplang}' が参照されます。言語を指定してタグを検索するには @{subject@} に "@@ab" を付加します。"ab" は 2 文字の言語コードです。|@ref{help-translated}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			Note that the longer the {subject} you give, the less
			matches will be found.  You can get an idea how this
			all works by using commandline completion (type CTRL-D
			after ":help subject" |c_CTRL-D|).
			If there are several matches, you can have them listed
			by hitting CTRL-D.  Example: >
				:help cont<Ctrl-D>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
長い @{subject@} を与えても、より短いものにマッチすることもあります。この動作はコマンドラインの補完を考えるとわかりやすいでしょう ("@command{:help subject}" の後で @kbd{CTRL-D} をタイプしてみてください |@ref{c_CTRL-D}|)。

複数の候補がある場合には、@kbd{CTRL-D} を押すことで一覧を見ることができます。例:
@example
:help cont<Ctrl-D>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<			Instead of typing ":help CTRL-V" to search for help
			for CTRL-V you can type: >
				:help ^V
<			This also works together with other characters, for
			example to find help for CTRL-V in Insert mode: >
				:help i^V
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば @kbd{CTRL-V} のヘルプを引くときに "@command{:help CTRL-V}" とタイプする代わりに次のようにすることもできます:
@example
:help ^V
@end example
これは他の文字付きでも機能します。例えば挿入モードの @kbd{CTRL-V} の動作を調べるには次のようにします:
@example
:help i^V
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<
			It is also possible to first do ":help" and then
			use ":tag {pattern}" in the help window.  The
			":tnext" command can then be used to jump to other
			matches, "tselect" to list matches and choose one. >
				:help index
				:tselect /.*mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まず "@command{:help}" を実行し、その後、ヘルプウィンドウで "@command{:tag @{pattern@}}" を実行することもできます。"@command{:tnext}" コマンドでその他の項目へ移動することができ、"@command{:tselect}" でマッチした候補の一覧から選択することができます。
@example
:help index
:tselect /.*mode
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<			When there is no argument you will see matches for
			"help", to avoid listing all possible matches (that
			would be very slow).
			The number of matches displayed is limited to 300.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
引数が指定されていない場合は "help" にマッチするものが表示されます (すべての候補にマッチしてしまうのを防ぐため。そのような処理は時間がかかります)。

マッチした候補は最大で 300 件まで表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The `:help` command can be followed by '|' and another
			command, but you don't need to escape the '|' inside a
			help command.  So these both work: >
				:help |
				:help k| only
<			Note that a space before the '|' is seen as part of
			the ":help" argument.
			You can also use <LF> or <CR> to separate the help
			command from a following command.  You need to type
			CTRL-V first to insert the <LF> or <CR>.  Example: >
				:help so<C-V><CR>only
<			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
`@command{:help}` コマンドの後ろには '|' で他のコマンドを続けることができます。しかし、'|' のヘルプを引くのに '|' をエスケープする必要はありません。したがって、次の例はどちらも正しく機能します:
@example
:help |
:help k| only
@end example
@quotation
@strong{Note:} @*
'|' の直前の空白があると "@command{:help}" コマンドの引数の一部として解釈されてしまいます。

ヘルプコマンドと続くコマンドを区切るには <LF> と <CR> も使えます。<LF> や <CR> を入力するには、@kbd{CTRL-V} を使います。例:
@example
:help so<C-V><CR>only
@end example
@end quotation
@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:h[elp]! [subject]	Like ":help", but in non-English help files prefer to
			find a tag in a file with the same language as the
			current file.  See |help-translated|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :h[elp]! [subject]
"@command{:help}" と同じですが、非英語のヘルプファイルを開いているときには、それと同じ言語を優先します。|@ref{help-translated}|も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						 	*:helpc* *:helpclose*
:helpc[lose]            Close one help window, if there is one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:helpc}
@anchor{:helpclose}
@cindex :helpc
@cindex :helpclose
@item :helpc[lose]
ヘルプウィンドウがあれば、1 つ閉じます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:helpg* *:helpgrep*
:helpg[rep] {pattern}[@xx]
			Search all help text files and make a list of lines
			in which {pattern} matches.  Jumps to the first match.
			The optional [@xx] specifies that only matches in the
			"xx" language are to be found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:helpg}
@anchor{:helpgrep}
@cindex :helpg
@cindex :helpgrep
@item :helpg[rep] @{pattern@}[@@xx]
すべてのヘルプファイルから @{pattern@} を検索して、マッチした行の一覧を作成します。そして最初にマッチした行へジャンプします。[@@xx] を指定した場合は、言語 "xx" のヘルプのみマッチします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			You can navigate through the matches with the
			|quickfix| commands, e.g., |:cnext| to jump to the
			next one.  Or use |:cwindow| to get the list of
			matches in the quickfix window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

|@ref{quickfix}| コマンドを使ってマッチした行の一覧を順に移動できます。例えば、|@ref{:cnext}| で次の項目へジャンプしたり、|@ref{:cwindow}| でマッチした行の一覧をクイックフィックスウィンドウに表示できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			{pattern} is used as a Vim regexp |pattern|.
			'ignorecase' is not used, add "\c" to ignore case.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@{pattern@} には Vim の正規表現を使用できます |@ref{pattern}|。'@option{ignorecase}' は影響しません。大文字と小文字を区別するには "@var{\c}" を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Example for case sensitive search: >
				:helpgrep Uganda
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

大文字と小文字を区別して検索する例:
@example
:helpgrep Uganda
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			Example for case ignoring search: >
				:helpgrep uganda\c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

区別しない例:
@example
:helpgrep uganda\c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			Example for searching in French help: >
				:helpgrep backspace@fr
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

フランス語のヘルプを検索:
@example
:helpgrep backspace@@fr
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<			The pattern does not support line breaks, it must
			match within one line.  You can use |:grep| instead,
			but then you need to get the list of help files in a
			complicated way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

改行を含むパターンはサポートされていません。1 行内でマッチするようにしてください。代わりに |@ref{:grep}| を使用することもできますが、その場合は、どうにかして検索結果からヘルプファイルの一覧を取得する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Cannot be followed by another command, everything is
			used as part of the pattern.  But you can use
			|:execute| when needed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

他のコマンドを後ろに続けることはできません。すべての文字はパターンの一部として解釈されます。必要なら |@ref{:execute}| を使ってコマンドを並べることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Compressed help files will not be searched (Fedora
			compresses the help files).
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
圧縮されたヘルプファイルは検索されません (Fedora はヘルプファイルを圧縮します)。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:lh* *:lhelpgrep*
:lh[elpgrep] {pattern}[@xx]
			Same as ":helpgrep", except the location list is used
			instead of the quickfix list.  If the help window is
			already opened, then the location list for that window
			is used.  Otherwise, a new help window is opened and
			the location list for that window is set.  The
			location list for the current window is not changed
			then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:lh}
@anchor{:lhelpgrep}
@cindex :lh
@cindex :lhelpgrep
@item :lh[elpgrep] @{pattern@}[@@xx]
"@command{:helpgrep}" と同じですが、クイックフィックスリストではなく、ロケーションリストを使います。ヘルプウィンドウがすでに開いている場合は、そのウィンドウのロケーションリストを使います。開いていない場合は、新しいヘルプウィンドウを作成し、そのウィンドウのロケーションリストをセットします。その時にカレントウィンドウのロケーションリストは変更されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:exu* *:exusage*
:exu[sage]		Show help on Ex commands.  Added to simulate the Nvi
			command. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:exu}
@anchor{:exusage}
@cindex :exu
@cindex :exusage
@item :exu[sage]
Ex コマンドのヘルプを表示します。Nvi との互換性のため追加されました。

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:viu* *:viusage*
:viu[sage]		Show help on Normal mode commands.  Added to simulate
			the Nvi command. {not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:viu}
@anchor{:viusage}
@cindex :viu
@cindex :viusage
@item :viu[sage]
ノーマルモードコマンドのヘルプを表示します。Nvi との互換性のため追加されました。

@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When no argument is given to |:help| the file given with the 'helpfile' option
will be opened.  Otherwise the specified tag is searched for in all "doc/tags"
files in the directories specified in the 'runtimepath' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:help}| に引数を指定しなかった場合には '@option{helpfile}' に設定されたファイルが開かれます。引数を与えた場合には '@option{runtimepath}' に設定されたすべてのディレクトリの "doc/@file{tags}" から検索されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The initial height of the help window can be set with the 'helpheight' option
(default 20).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプウィンドウの高さの初期値は '@option{helpheight}' で設定できます (標準設定: 20)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Jump to specific subjects by using tags.  This can be done in two ways:
- Use the "CTRL-]" command while standing on the name of a command or option.
  This only works when the tag is a keyword.  "<C-Leftmouse>" and
  "g<LeftMouse>" work just like "CTRL-]".
- use the ":ta {subject}" command.  This also works with non-keyword
  characters.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ある項目へジャンプするにはタグを使います。これには2つの方法があります:
@itemize
@item オプションやコマンド名にカーソルをあわせて "@command{CTRL-]}" コマンド使う。これはタグがキーワードの時にだけ使用できます。"<C-Leftmouse>" と "g<LeftMouse>" は "@command{CTRL-]}" と同じ動作をします。
@item "@command{:ta @{subject@}}" コマンドを使う。これはどのような文字でも使用できます。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Use CTRL-T or CTRL-O to jump back.
Use ":q" to close the help window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ジャンプ先から戻るには @kbd{CTRL-T} か @kbd{CTRL-O} を使います。

ヘルプウィンドウを閉じるには "@command{:q}" を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If there are several matches for an item you are looking for, this is how you
can jump to each one of them:
1. Open a help window
2. Use the ":tag" command with a slash prepended to the tag.  E.g.: >
	:tag /min
3. Use ":tnext" to jump to the next matching tag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
探しているものが複数の項目にマッチする場合には、次のようにして各項目にジャンプできます:
@enumerate
@item ヘルプウィンドウを開く
@item 調べるタグにスラッシュを付けて "@command{:tag}" コマンドを実行する。例:
@example
:tag /min
@end example
@item "@command{:tnext}" を実行してマッチした次の項目へジャンプする。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is possible to add help files for plugins and other items.  You don't need
to change the distributed help files for that.  See |add-local-help|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインなどのために、ヘルプを追加できます。そのために、配布されているヘルプファイルに変更を加える必要はありません。|@ref{add-local-help}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To write a local help file, see |write-local-help|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ローカルヘルプファイルを書くには |@ref{write-local-help}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the title lines from the local help files are automagically added to
the "LOCAL ADDITIONS" section in the "help.txt" help file |local-additions|.
This is done when viewing the file in Vim, the file itself is not changed.  It
is done by going through all help files and obtaining the first line of each
file.  The files in $VIMRUNTIME/doc are skipped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
ローカルヘルプファイルのタイトル行 (1 行目) は自動的にヘルプファイル "@file{help.txt}" のセクション "LOCAL ADDITIONS" に追加されます |@ref{local-additions}|。これは Vim でファイルを開いたときに追加されるので、ヘルプファイル自体は変更されません。すべてのヘルプファイルの 1 行目が "LOCAL ADDITIONS" に追加されますが、@env{$VIMRUNTIME}/docにあるファイルは対象外です。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*help-xterm-window*
If you want to have the help in another xterm window, you could use this
command: >
	:!xterm -e vim +help &
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{help-xterm-window}
@cindex help-xterm-window
他の xterm ウィンドウでヘルプを表示するには、このコマンドを使ってください:
@example
:!xterm -e vim +help &
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*:helpfind* *:helpf*
:helpf[ind]		Like |:help|, but use a dialog to enter the argument.
			Only for backwards compatibility.  It now executes the
			ToolBar.FindHelp menu entry instead of using a builtin
			dialog.  {only when compiled with |+GUI_GTK|}
			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:helpfind}
@anchor{:helpf}
@cindex :helpfind
@cindex :helpf
@table @asis
@item :helpf[ind]
|@ref{:help}| と同じですが、引数を入力するためのダイアログを使います。後方互換性のために残されています。現在は組み込みのダイアログを使用せず、メニューの ToolBar.FindHelp を使います。@{|@ref{+GUI_GTK}| が有効な場合のみ利用できます@}

@{Vi にはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*:helpt* *:helptags*
				*E154* *E150* *E151* *E152* *E153* *E670*
:helpt[ags] [++t] {dir}
			Generate the help tags file(s) for directory {dir}.
			When {dir} is ALL then all "doc" directories in
			'runtimepath' will be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:helpt}
@anchor{:helptags}
@anchor{E154}
@anchor{E150}
@anchor{E151}
@anchor{E152}
@anchor{E153}
@anchor{E670}
@cindex :helpt
@cindex :helptags
@cindex E154
@cindex E150
@cindex E151
@cindex E152
@cindex E153
@cindex E670
@item :helpt[ags] [++t] @{dir@}
ディレクトリ @{dir@} のヘルプタグファイルを作成します。@{dir@} が ALL なら '@option{runtimepath}' 内の全ての "doc" ディレクトリが対象となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			All "*.txt" and "*.??x" files in the directory and
			sub-directories are scanned for a help tag definition
			in between stars.  The "*.??x" files are for
			translated docs, they generate the "tags-??" file, see
			|help-translated|.  The generated tags files are
			sorted.
			When there are duplicates an error message is given.
			An existing tags file is silently overwritten.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定されたディレクトリとそのサブディレクトリの "*.txt" と "*.??x" というファイルがスキャンされ、スター (*) で囲まれたタグ定義が検索されます。"*.??x" というファイルは翻訳ヘルプです。"tags-??" というタグファイルが生成されます。|@ref{help-translated}| を参照。作成されたタグファイルはソートされます。

タグの重複があるときはエラーメッセージが表示されます。すでにあるタグファイルは警告なしに上書きされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			The optional "++t" argument forces adding the
			"help-tags" tag.  This is also done when the {dir} is
			equal to $VIMRUNTIME/doc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"++t" 引数を指定すると "help-tags" タグが強制的に追加されます。これは、@{dir@} が @env{$VIMRUNTIME}/doc と等しいときにも同様にタグが追加されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			To rebuild the help tags in the runtime directory
			(requires write permission there): >
				:helptags $VIMRUNTIME/doc
<			{not in Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ランタイムディレクトリのヘルプタグファイルを作成し直すには次のようにします (ファイルの書き込み権限が必要):
@example
:helptags $VIMRUNTIME/doc
@end example
@{Vi にはない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
2. Translated help files				*help-translated*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{help-translated}
@cindex help-translated
@section 翻訳ヘルプ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is possible to add translated help files, next to the original English help
files.  Vim will search for all help in "doc" directories in 'runtimepath'.
This is only available when compiled with the |+multi_lang| feature.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
翻訳ヘルプを追加し、英語のヘルプファイルと共存させることができます。'@option{runtimepath}' の "doc" ディレクトリにあるすべてのヘルプが検索対象になります。|@ref{+multi_lang}| が有効な場合のみ利用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At this moment translations are available for:
	Chinese  - multiple authors
	French   - translated by David Blanchet
	Italian  - translated by Antonio Colombo
	Japanese - multiple authors
	Polish   - translated by Mikolaj Machowski
	Russian  - translated by Vassily Ragosin
See the Vim website to find them: http://www.vim.org/translations.php
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
今のところ、以下の翻訳が利用可能です:
@multitable @columnfractions .4 .6
@item Chinese @tab 共同翻訳
@item French @tab 翻訳者 David Blanchet
@item Italian @tab 翻訳者 Antonio Colombo
@item Japanese @tab 共同翻訳
@item Polish @tab 翻訳者 Mikolaj Machowski
@item Russian @tab 翻訳者 Vassily Ragosin
@end multitable
詳しくは Vim のウェブサイトを参照してください:

@url{http://www.vim.org/translations.php}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A set of translated help files consists of these files:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
翻訳ヘルプファイルの名前は次のようになってます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	help.abx
	howto.abx
	...
	tags-ab
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
help.abx
howto.abx
...
tags-ab
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"ab" is the two-letter language code.  Thus for Italian the names are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"ab" は 2 文字の言語コードです。例えばイタリア語なら次のような名前になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	help.itx
	howto.itx
	...
	tags-it
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
help.itx
howto.itx
...
tags-it
@end verbatim
@{訳注: 日本語の言語コードは ja です。@file{help.jax}@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'helplang' option can be set to the preferred language(s).  The default is
set according to the environment.  Vim will first try to find a matching tag
in the preferred language(s).  English is used when it cannot be found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{helplang}' に言語の優先順位を指定できます。初期設定は環境から自動的に設定されます。ヘルプを検索するときはまず、優先の高い言語からタグが検索されます。見つからなかった場合は、英語のヘルプが使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To find a tag in a specific language, append "@ab" to a tag, where "ab" is the
two-letter language code.  Example: >
	:he user-manual@it
	:he user-manual@en
The first one finds the Italian user manual, even when 'helplang' is empty.
The second one finds the English user manual, even when 'helplang' is set to
"it".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
言語を指定してタグを検索するには "@@ab" をタグ名に付け加えます。"ab" は 2 文字
の言語コードです。例:
@example
:he user-manual@@it
:he user-manual@@en
@end example
最初の例は、'@option{helplang}' が未設定の場合でも、イタリア語のユーザーマニュアルを検索します。2 番目の例は、'@option{helplang}' が "it" に設定されている場合でも、英語のユーザーマニュアルを検索します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using command-line completion for the ":help" command, the "@en"
extension is only shown when a tag exists for multiple languages.  When the
tag only exists for English "@en" is omitted.  When the first candidate has an
"@ab" extension and it matches the first language in 'helplang' "@ab" is also
omitted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:help}" コマンドでコマンドライン補完をするとき、複数の言語でタグが見つかった場合には "@@en" が付加されます。タグが英語だけにある場合には、"@@en" は省略されます。1 番目の候補が "@@ab" 拡張子を持ち、'@option{helplang}' の 1 番目の言語とも一致するなら、"@@ab" も同様に省略されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using |CTRL-]| or ":help!" in a non-English help file Vim will try to
find the tag in the same language.  If not found then 'helplang' will be used
to select a language.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
翻訳ヘルプで |@ref{CTRL-]}| や "@command{:help!}" を使うと、同じ言語のタグが検索されます。見つからなかった場合は、言語を選択するために '@option{helplang}' が参照されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Help files must use latin1 or utf-8 encoding.  Vim assumes the encoding is
utf-8 when finding non-ASCII characters in the first line.  Thus you must
translate the header with "For Vim version".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプファイルのエンコーディングは latin1 か utf-8 にしてください。非 ASCII 文字が 1 行目にある場合、そのヘルプファイルは utf-8 であると判断されます。ヘッダーの "For Vim version" を翻訳しておくとよいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The same encoding must be used for the help files of one language in one
directory.  You can use a different encoding for different languages and use
a different encoding for help files of the same language but in a different
directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つのディレクトリの 1 つの言語のヘルプファイルはすべて同じエンコーディングを使ってください。別の言語なら別のエンコーディングを使用できます。ディレクトリを分けた場合は、同じ言語で別のエンコーディングを使用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Hints for translators:
- Do not translate the tags.  This makes it possible to use 'helplang' to
  specify the preferred language.  You may add new tags in your language.
- When you do not translate a part of a file, add tags to the English version,
  using the "tag@en" notation.
- Make a package with all the files and the tags file available for download.
  Users can drop it in one of the "doc" directories and start use it.
  Report this to Bram, so that he can add a link on www.vim.org.
- Use the |:helptags| command to generate the tags files.  It will find all
  languages in the specified directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
翻訳のヒント:
@itemize
@item タグは翻訳しない。そうすれば '@option{helplang}' を使って言語の優先順位を指定できます。言語用の新しいタグを追加するのは構いません。
@item ファイルの一部を翻訳しない場合は、英語のままタグを追加し、"tag@@en" 表記を使えるようしてください。
@item ヘルプファイルとタグファイルをまとめてダウンロードできるようにしてください。そうすれば、ユーザーはそれを "doc" ディレクトリにコピーするだけで使えます。@url{www.vim.org} からリンクしたいので、Bram に連絡してください。
@item タグファイルを作成するには |@ref{:helptags}| を使います。指定したディレクトリのすべての言語のファイルが処理されます。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Writing help files					*help-writing*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{help-writing}
@cindex help-writing
@section ヘルプファイルの書き方
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For ease of use, a Vim help file for a plugin should follow the format of the
standard Vim help files.  If you are writing a new help file it's best to copy
one of the existing files and use it as a template.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインのヘルプファイルは Vim の標準のヘルプファイルと同じ書式で書かれていると便利です。あなたが新しいヘルプファイルを書くときは、既存のファイルをコピーしてそれをテンプレートとして使用するといいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first line in a help file should have the following format:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプファイルの 1 行目は次のように書きます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
*helpfile_name.txt*	For Vim version 7.3	Last change: 2010 June 4
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*helpfile_name.txt*    For Vim version 7.3    Last change: 2010 June 4
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first field is a link to the help file name.  The second field describes
the applicable Vim version.  The last field specifies the last modification
date of the file.  Each field is separated by a tab.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初のフィールドはヘルプファイル名へのリンクです。2 つめのフィールドは対応している Vim のバージョンを説明しています。最後のフィールドはファイルの最終更新日です。それぞれのフィールドはタブ文字で区切られます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At the bottom of the help file, place a Vim modeline to set the 'textwidth'
and 'tabstop' options and the 'filetype' to "help".  Never set a global option
in such a modeline, that can have consequences undesired by whoever reads that
help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの末尾には Vim のモードラインを書いて '@option{textwidth}' オプションと '@option{tabstop}' オプションを設定し、'@option{filetype}' を "@var{help}" に設定します。モードラインでグローバルオプションを設定しないでください。そのヘルプを読んだ人に望ましくない結果をもたらします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
TAGS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec タグ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To define a help tag, place the name between asterisks (*tag-name*).  The
tag-name should be different from all the Vim help tag names and ideally
should begin with the name of the Vim plugin.  The tag name is usually right
aligned on a line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプタグを定義するには、名前をアスタリスクで挟みます (*tag-name*)。tag-name は他のすべての Vim ヘルプのタグ名とは違う名前になっていて、プラグインの名前で始まっているのが理想的です。タグ名は普通は右寄せで書きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When referring to an existing help tag and to create a hot-link, place the
name between two bars (|) eg. |help-writing|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
既存のヘルプタグに言及してそのタグへのリンクを作成するには、名前をバー (|) で挟みます。例: |@ref{help-writing}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When referring to a Vim command and to create a hot-link, place the
name between two backticks, eg. inside `:filetype`.  You will see this is
highlighted as a command, like a code block (see below).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim コマンドに言及してそのコマンドへのリンクを作成するには、コマンド名をバッククォートで囲みます。 例: `@command{:filetype}` の中。これはコードブロックのようにコマンドとしてハイライトされて見えるでしょう (下を参照)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When referring to a Vim option in the help file, place the option name between
two single quotes, eg. 'statusline'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim オプションについて言及するときは、オプション名をシングルクォートで囲みます。例: '@option{statusline}'
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
HIGHLIGHTING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ハイライト表示
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To define a column heading, use a tilde character at the end of the line.
This will highlight the column heading in a different color.  E.g.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
列見出しを定義するにはチルダ文字を行末に付けます。チルダを付けると列見出しが別の色で表示されます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Column heading~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
列見出し
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To separate sections in a help file, place a series of '=' characters in a
line starting from the first column.  The section separator line is highlighted
differently.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプファイルを節 (section) で区切るときは、'=' 文字を 1 列目から連続して書きます。節区切り行は別の色でハイライトされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To quote a block of ex-commands verbatim, place a greater than (>) character
at the end of the line before the block and a less than (<) character as the
first non-blank on a line following the block.  Any line starting in column 1
also implicitly stops the block of ex-commands before it.  E.g. >
    function Example_Func()
	echo "Example"
    endfunction
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Ex コマンドのブロックを例示するときは、大なり記号 (>) をその直前のブロックの行末に書き、小なり記号 (<) をその後ろのブロックの前の最初の非空白文字として書きます。テキストが 1 列目から始まっている行があると、Ex コマンドのブロックはその直前で暗黙的に終了となります。例:
@verbatim
function Example_Func()
echo "Example"
endfunction
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following are highlighted differently in a Vim help file:
  - a special key name expressed either in <> notation as in <PageDown>, or
    as a Ctrl character as in CTRL-X
  - anything between {braces}, e.g. {lhs} and {rhs}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim ヘルプファイルでは以下のものがそれぞれハイライトされます:
@itemize
@item 特殊キーの名前。<PageDown> のような <> 表記で書かれたものと、@kbd{CTRL-X} のように書かれた制御文字。
@item @{braces@} で囲まれた文字。例: @{lhs@} と @{rhs@}
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The word "Note", "Notes" and similar automagically receive distinctive
highlighting.  So do these:
	*Todo	something to do
	*Error	something wrong
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"Note" や "Notes" などの単語もそれぞれハイライトされます。次のような表示もあります:
@verbatim
*Todo	something to do
*Error	something wrong
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find the details in $VIMRUNTIME/syntax/help.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は @env{$VIMRUNTIME}/syntax/@file{help.vim} を見てください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
