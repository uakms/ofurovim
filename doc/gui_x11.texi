@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node gui_x11.txt, , , 目次
@unnumbered X11 GUI
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*gui_x11.txt*   For Vim version 8.0.  Last change: 2017 Jul 28


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*gui_x11.txt*   For Vim バージョン 8.0.  Last change: 2017 Jul 28


                  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim's Graphical User Interface				*gui-x11* *GUI-X11*
							*Athena* *Motif*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11}
@anchor{GUI-X11}
@anchor{Athena}
@anchor{Motif}
@cindex gui-x11
@cindex GUI-X11
@cindex Athena
@cindex Motif
Vim のグラフィカルユーザーインターフェイス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Starting the X11 GUI		|gui-x11-start|
2. GUI Resources		|gui-resources|
3. Shell Commands		|gui-pty|
4. Various			|gui-x11-various|
5. GTK version			|gui-gtk|
6. GNOME version		|gui-gnome|
7. KDE version			|gui-kde|
8. Compiling			|gui-x11-compiling|
9. X11 selection mechanism	|x11-selection|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. X11 GUI の開始 @tab |@ref{gui-x11-start, , gui-x11-start}|
@item 2. GUI リソース @tab |@ref{gui-resources, , gui-resources}|
@item 3. シェルコマンド @tab |@ref{gui-pty, , gui-pty}|
@item 4. 各種事項 @tab |@ref{gui-x11-various, , gui-x11-various}|
@item 5. GTK バージョン @tab |@ref{gui-gtk, , gui-gtk}|
@item 6. GNOME バージョン @tab |@ref{gui-gnome, , gui-gnome}|
@item 7. KDE バージョン @tab |@ref{gui-kde, , gui-kde}|
@item 8. コンパイル @tab |@ref{gui-x11-compiling, , gui-x11-compiling}|
@item 9. X11 セレクション @tab |@ref{x11-selection, , x11-selection}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Other relevant documentation:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他の重要なドキュメント:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|gui.txt|	For generic items of the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{gui.txt, , gui.txt}| @tab GUI の一般的な項目について。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{Vi does not have any of these commands}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi にはこれらのコマンドはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Starting the X11 GUI					*gui-x11-start* *E665*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-start}
@anchor{E665}
@cindex gui-x11-start
@cindex E665
@section 1. X11 GUI の開始
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then you can run the GUI version of Vim in either of these ways:
    gvim [options] [files...]
    vim -g [options] [files...]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのどちらの方法でも Vim の GUI バージョンを実行することができる:
@verbatim
gvim [options] [files...]
vim -g [options] [files...]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
So if you call the executable "gvim", or make "gvim" a link to the executable,
then the GUI version will automatically be used.  Additional characters may be
added after "gvim", for example "gvim-5".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
であるから、実行可能な "gvim" を呼ぶか、あるいは "gvim" を実行可能なものとしてリンクさせるならば、GUI バージョンが自動的に使用されるだろう。例えば "gvim-5" のように、追加の文字が "gvim" の後に追加されてもよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You may also start up the GUI from within the terminal version by using one of
these commands:
	:gui [++opt] [+cmd] [-f|-b] [files...]			*:gu* *:gui*
	:gvim [++opt] [+cmd] [-f|-b] [files...]			*:gv* *:gvim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドの1つを使用してターミナルバージョンの中から GUI を起動してもよい:
@anchor{:gu}
@anchor{:gui}
@anchor{:gv}
@anchor{:gvim}
@cindex :gu
@cindex :gui
@cindex :gv
@cindex :gvim
@verbatim
:gui [++opt] [+cmd] [-f|-b] [files...]
:gvim [++opt] [+cmd] [-f|-b] [files...]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The "-f" option runs Vim in the foreground.
The "-b" option runs Vim in the background (this is the default).
Also see |++opt| and |+cmd|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"-f" オプションはフォアグラウンドで実行する。 @*
"-b" オプションはバックグラウンドで実行する (これがデフォルト)。 @*
|++opt| と |+cmd| も参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-fork*
When the GUI is started, it does a fork() and exits the current process.
When gvim was started from a shell this makes the shell accept further
commands.  If you don't want this (e.g. when using gvim for a mail program
that waits for gvim to exit), start gvim with "gvim -f", "vim -gf" or use
":gui -f".  Don't use "vim -fg", because "-fg" specifies the foreground
color.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-fork}
@cindex gui-fork
GUI が開始されるときには、fork() して現在のプロセスを終了する。gvim がシェルから開始されたときには、これでシェルが更にコマンドを受け入れられるようになる。これを望まない (例えば、メールプログラムで gvim を使用しているときに gvim が終了するのを待つ) ならば、"gvim -f", "vim -gf" でかあるいは ":gui -f" を使用して開始する。"-fg" は前景色の指定に用いられるので、"vim -fg" を使用してはならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using "gvim -f" and then ":gui", Vim will run in the foreground.  The
"-f" argument will be remembered.  To force running Vim in the background use
":gui -b".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"gvim -f" と ":gui" を使用するときには、Vim はフォアグラウンドで実行されるだろう。"-f" 引数は記憶されているだろう。Vim を強制的にバックグラウンドで実行するには、":gui -b" を使用するとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"gvim --nofork" does the same as "gvim -f".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"gvim --nofork" と "gvim -f" は同じである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*E851* *E852*
When starting the GUI fails Vim will try to continue running in the terminal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E851}
@anchor{E852}
@cindex E851
@cindex E852
GUI の初期化に失敗した場合、Vim は現在の端末で実行を継続しようとする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want the GUI to run in the foreground always, include the 'f'
flag in 'guioptions'.  |-f|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI をいつもフォアグラウンドで実行したければ、'@option{guioptions}' の中に '@var{f}' フラグを含めるとよい |-f|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. GUI Resources			*gui-resources* *.Xdefaults*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-resources}
@anchor{.Xdefaults}
@cindex gui-resources
@cindex .Xdefaults
@section 2. GUIリソース
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If using the Motif or Athena version of the GUI (not for the KDE, GTK+ or Win32
version), a number of X resources are available.  You should use Vim's class
"Vim" when setting these.  They are as follows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI の Motif かあるいは Athena バージョン (KDE, GTK+ やあるいは Win32 バージョンについてではない) を使用しているならば、多くの X のリソースが有効である。これらを設定するときには、Vim のクラス "Vim" を使用すべきである。それらは以下のようなものである:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    Resource name	Meaning		~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@headitem リソース名 @tab 意味
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    reverseVideo	Boolean: should reverse video be used?
    background		Color of background.
    foreground		Color of normal text.
    scrollBackground	Color of trough portion of scrollbars.
    scrollForeground	Color of slider and arrow portions of scrollbars.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item reverseVideo @tab ブール値: reverse video が用いられるべきか?
@item background @tab 背景色。
@item foreground @tab 通常のテキストの色。
@item scrollBackground @tab スクロールバーのくぼみ部分の色。
@item scrollForeground @tab スクロールバーのスライダと矢印部分の色。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    menuBackground	Color of menu backgrounds.
    menuForeground	Color of menu foregrounds.
    tooltipForeground	Color of tooltip and balloon foreground.
    tooltipBackground	Color of tooltip and balloon background.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item menuBackground @tab メニューの背景色。
@item menuForeground @tab メニューの前景色。
@item tooltipForeground @tab ツールチップとバルーンの前景色。
@item tooltipBackground @tab ツールチップとバルーンの背景色。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    font		Name of font used for normal text.
    boldFont		Name of font used for bold text.
    italicFont		Name of font used for italic text.
    boldItalicFont	Name of font used for bold, italic text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item font @tab 通常のテキストに使用されるフォント名。
@item boldFont @tab ボールドのテキストに使用されるフォント名。
@item italicFont @tab イタリックのテキストに使用されるフォント名。
@item boldItalicFont @tab ボールド、イタリックのテキストに使用されるフォント名。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    menuFont		Name of font used for the menus, used when compiled
			without the |+xfontset| feature
    menuFontSet		Name of fontset used for the menus, used when compiled
			with the |+xfontset| feature
    tooltipFont		Name of the font used for the tooltip and balloons.
			When compiled with the |+xfontset| feature this is a
			fontset name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item menuFond @tab |+xfontset| が無効なときに使われるメニューのフォント名。
@item menuFontSet @tab |+xfontset| が有効なときに使われるメニューのフォントセット名。
@item tooltipFont @tab ツールチップとバルーンに使われるフォント名。|+xfontset| が有効なときはこれはフォントセット名である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    geometry		Initial geometry to use for gvim's window (default
			is same size as terminal that started it).
    scrollbarWidth	Thickness of scrollbars.
    borderWidth		Thickness of border around text area.
    menuHeight		Height of the menu bar (only for Athena).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item geometry @tab gvim のウィンドウに用いられる初期サイズ (デフォルトはそれを開始したターミナルと同じサイズ)。
@item scrollbarWidth @tab スクロールバーの厚さ。
@item borderWidth @tab テキストエリアの周りのボーダの厚さ。
@item menuHeight @tab メニューバーの高さ (Athena のみ)。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A special font for italic, bold, and italic-bold text will only be used if
the user has specified one via a resource.  No attempt is made to guess what
fonts should be used for these based on the normal text font.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
イタリック、ボールド、イタリック・ボールドのテキスト用の特別なフォントはユーザーがリソースを通して指定されたものを持っている場合にだけ用いられるだろう。通常のテキストのフォントに基づいたこれらのためにどのフォントが用いられるべきであるかを推測しようとは試みない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the colors can also be set with the ":highlight" command, using the
"Normal", "Menu", "Tooltip", and "Scrollbar" groups.  Example: >
	:highlight Menu guibg=lightblue
	:highlight Tooltip guibg=yellow
	:highlight Scrollbar guibg=lightblue guifg=blue
	:highlight Normal guibg=grey90
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"Normal", "Menu", "Tooltip" と "Scrollbar" グループを使用して、"@command{:highlight}" コマンドで色を設定することもできることを覚えておくとよい。
@example
:highlight Menu guibg=lightblue
:highlight Tooltip guibg=yellow
:highlight Scrollbar guibg=lightblue guifg=blue
:highlight Normal guibg=grey90
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*font-sizes*
Note: All fonts (except for the menu and tooltip) must be of the same size!!!
If you don't do this, text will disappear or mess up the display.  Vim does
not check the font sizes.  It's the size in screen pixels that must be the
same.  Note that some fonts that have the same point size don't have the same
pixel size!  Additionally, the positioning of the fonts must be the same
(ascent and descent).  You can check this with "xlsfonts -l {fontname}".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{font-sizes}
@cindex font-sizes
@quotation
@strong{Note:} @*
(メニューとツールチップ以外では) 全てのフォントは同じサイズでなければならない！！！こうしなければ、テキストは表示されないか、あるいはめちゃくちゃに表示されるだろう。Vim はフォントサイズをチェックしない。同じでなければならないのはスクリーンのピクセルにおけるサイズである。いくつかのフォントが同じポイントサイズを持っていても、同じピクセルサイズを持っているとは限らないということに注意しなくてはならない！さらにフォントの配置は同じ (アセントとディセント) でなければならない。"xlsfonts -l @{fontname@}" でこれをチェックすることができる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If any of these things are also set with Vim commands, e.g. with
":set guifont=Screen15", then this will override the X resources (currently
'guifont' is the only option that is supported).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのことはいずれも Vim コマンド、例えば "@command{:set guifont=Screen15}" で設定されるならば、X のリソースを無視するだろう (現在 '@option{guifont}' がサポートされる唯一のオプションである)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here is an example of what you might put in your ~/.Xdefaults file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あなたの @file{~/.Xdefaults} ファイルに付加したいかもしれないものを例としてここに挙げる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Vim*useSchemes:			all
	Vim*sgiMode:			true
	Vim*useEnhancedFSB:		true
	Vim.foreground:			Black
	Vim.background:			Wheat
	Vim*fontList:			7x13
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
Vim*useSchemes:                 all
Vim*sgiMode:                    true
Vim*useEnhancedFSB:             true
Vim.foreground:                 Black
Vim.background:                 Wheat
Vim*fontList:                   7x13
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first three of these are standard resources on Silicon Graphics machines
which make Motif applications look even better, highly recommended!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの内の始めの 3 つは Motif アプリケーションをもっとよく見せるシリコングラフィックス製マシンにおける標準リソースであり、大いに推奨されている！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "Vim*fontList" is to set the menu font for Motif.  Example: >
	Vim*menuBar*fontList:	     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"Vim*fontList" は Motif 用のメニューフォントを設定するためのものである。例:
@example
Vim*menuBar*fontList:        -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
With Athena: >
	Vim*menuBar*SmeBSB*font:     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
	Vim*menuBar*MenuButton*font: -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Athena では:
@example
Vim*menuBar*SmeBSB*font:     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
Vim*menuBar*MenuButton*font: -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
NOTE: A more portable, and indeed more correct, way to specify the menu font
in either Motif or Athena is through the resource: >
	Vim.menuFont:	     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Motif か Athena でメニューのフォントを決めるのに、移植性が高く、本当に正しいのは、リソースを使うことである。
@example
Vim.menuFont:        -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Or, when compiled with the |+xfontset| feature: >
	Vim.menuFontSet:     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|+xfontset| が有効にされているときは
@example
Vim.menuFontSet:     -*-courier-medium-r-*-*-10-*-*-*-*-*-*-*
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Don't use "Vim*geometry" in the defaults.  This will break the menus.  Use
"Vim.geometry" instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
defaults の中で "Vim*geometry" を使用してはならない。これはメニューを壊すだろう。代わりに "Vim.geometry" を使用するとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you get an error message "Cannot allocate colormap entry for "gray60",
try adding this to your Vim resources (change the colors to your liking): >

	Vim*scrollBackground:		Black
	Vim*scrollForeground:		Blue
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"Cannot allocate colormap entry for "gray60" のエラーメッセージを受け取ったならば、Vim リソースにこれを (色は好みに変更して) 追加してみるとよい。
@example
Vim*scrollBackground:           Black
Vim*scrollForeground:           Blue
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The resources can also be set with arguments to Vim:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リソースは vim への引数で設定することもできる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    argument		meaning	~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@headitem 引数 @tab 意味
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-gui*
   -display {display}	Run vim on {display}		*-display*
   -iconic		Start vim iconified		*-iconic*
   -background {color}	Use {color} for the background	*-background*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-gui}
@cindex -gui
@anchor{-display}
@cindex -display
@item -display @{display@} @tab @{display@} 上で vim を実行する
@anchor{-iconic}
@cindex -iconic
@item -iconic @tab vim をアイコン化して開始する
@anchor{-background}
@cindex -background
@item -background @{color@} @tab 背景に @{color@} を使用する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -bg {color}		idem				*-bg*
   -foreground {color}	Use {color} for normal text	*-foreground*
   -fg {color}		idem				*-fg*
   -ul {color}		idem				*-ul*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-bg}
@cindex -bg
@item -bg @{color@} @tab 同上
@anchor{-foreground}
@cindex -foreground
@item -foreground @{color@} @tab 通常のテキストに @{color@} を使用する
@anchor{-fg}
@cindex -fg
@item -fg @{color@} @tab 同上
@anchor{-ul}
@cindex -ul
@item -ul @{color@} @tab 同上
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -font {font}		Use {font} for normal text	*-font*
   -fn {font}		idem				*-fn*
   -boldfont {font}	Use {font} for bold text	*-boldfont*
   -italicfont {font}	Use {font} for italic text	*-italicfont*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-font}
@cindex -font
@item -font @{font@} @tab 通常のテキストに @{font@} を使用する
@anchor{-fn}
@cindex -fn
@item -fn @{font@} @tab 同上
@anchor{-boldfont}
@cindex -boldfont
@item -boldfont @{font@} @tab 太字テキストに @{font@} を使用する
@anchor{-italicfont}
@cindex -italicfont
@item -italicfont @{font@} @tab 斜体のテキストに @{font@} を使用する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -menufont {font}	Use {font} for menu items	*-menufont*
   -menufontset {fontset} Use {fontset} for menu items	*-menufontset*
   -mf {font}		idem				*-mf*
   -geometry {geom}	Use {geom} for initial geometry	*-geometry*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-menufont}
@cindex -menufont
@item -menufont @{font@} @tab メニュー項目に @{font@} を使用する
@anchor{-menufontset}
@cindex -menufontset
@item -menufontset @{fontset@} @tab メニュー項目に @{fontset@} を使用する
@anchor{-mf}
@cindex -mf
@item -mf @{font@} @tab 同上
@anchor{-geometry}
@cindex -geometry
@item -geometry @{geom@} @tab 初期サイズに @{geom@} を使用する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -geom {geom}		idem, see |-geometry-example|	*-geom*
   -borderwidth {width}	Use a border width of {width}	*-borderwidth*
   -bw {width}		idem				*-bw*
							*-scrollbarwidth*
   -scrollbarwidth {width}	Use a scrollbar width of {width}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-geom}
@cindex -geom
@item -geom @{geom@} @tab 同上。|-geometry-example| を参照
@anchor{-borderwidth}
@cindex -borderwidth
@item -borderwidth @{width@} @tab @{width@} のボーダ幅を使用する
@anchor{-bw}
@cindex -bw
@item -bw @{width@} @tab 同上
@anchor{-scrollbarwidth}
@cindex -scrollbarwidth
@item -scrollbarwidth @{width@} @tab @{width@} のスクロールバー幅を使用する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -sw {width}		idem				*-sw*
   -menuheight {height}	Use a menu bar height of {height} *-menuheight*
   -mh {height}		idem				*-mh*
			NOTE: On Motif the value is ignored, the menu height
			is computed to fit the menus.
   -reverse		Use reverse video		*-reverse*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-sw}
@cindex -sw
@item -sw @{width@} @tab 同上
@anchor{-menuheight}
@cindex -menuheight
@item -menuheight @{height@} @tab @{height@} のメニューバー高を使用する
@anchor{-mh}
@cindex -mh
@item -mh @{height@} @tab 同上
@quotation
@strong{Note:} @*
Motif ではこの値は無視される。メニューの高さはちょうど収まるように計算される。
@end quotation
@anchor{-reverse}
@cindex -reverse
@item -reverse @tab reverse video を使用する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   -rv			idem				*-rv*
   +reverse		Don't use reverse video		*-+reverse*
   +rv			idem				*-+rv*
   -xrm {resource}	Set the specified resource	*-xrm*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-rv}
@cindex -rv
@item -rv @tab 同上
@anchor{-+reverse}
@cindex -+reverse
@item +reverse @tab reverse video を使用しない
@anchor{-+rv}
@cindex -+rv
@item +rv @tab 同上
@anchor{-xrm}
@cindex -xrm
@item -xrm @{resource@} @tab 指定されたリソースを設定する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note about reverse video: Vim checks that the result is actually a light text
on a dark background.  The reason is that some X11 versions swap the colors,
and some don't.  These two examples will both give yellow text on a blue
background:
    gvim -fg Yellow -bg Blue -reverse
    gvim -bg Yellow -fg Blue -reverse
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
reverse video についての注意: Vim は実際に暗い背景に明るいテキストになるか結果をチェックする。X11 のあるバージョンは色を交換し、あるバージョンはしないからである。これらの 2 つの例はどちらも青い背景に黄色のテキストを提供するだろう:
@verbatim
gvim -fg Yellow -bg Blue -reverse
gvim -bg Yellow -fg Blue -reverse
@end verbatim
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-geometry-example*
An example for the geometry argument: >
	gvim -geometry 80x63+8+100
This creates a window with 80 columns and 63 lines at position 8 pixels from
the left and 100 pixels from the top of the screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-geometry-example}
@cindex -geometry-example
geometry 引数の例:
@verbatim
gvim -geometry 80x63+8+100
@end verbatim
これはウィンドウを 80 カラム、63 行で作り、左から 8 ピクセル、上から 100 ピクセルの位置に置く。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Shell Commands					*gui-pty*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-pty}
@cindex gui-pty
@section 3. シェルコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
WARNING: Executing an external command from the GUI will not always work.
"normal" commands like "ls", "grep" and "make" mostly work fine.  Commands
that require an intelligent terminal like "less" and "ispell" won't work.
Some may even hang and need to be killed from another terminal.  So be
careful!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告: } @*
GUI からの外部コマンドの実行は常に動作するとは限らないだろう。"ls", "grep" とか "make" のような "normal" コマンドはたいていうまく動作する。"less" とか "ispell" のような知的ターミナルを要求するコマンドは動作しないだろう。あるものはハングさえするかもしれないし、他のターミナルから kill される必要があるかもしれない。だから気をつけなくてはならない！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are two ways to do the I/O with a shell command: Pipes and a pseudo-tty.
The default is to use a pseudo-tty.  This should work best on most systems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シェルコマンドで入出力するには 2 つの方法がある: パイプと仮想端末 (pseudo-tty) である。デフォルトは仮想端末を使用する。これは大抵のシステムで最も良く動作するだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Unfortunately, the implementation of the pseudo-tty is different on every Unix
system.  And some systems require root permission.  To avoid running into
problems with a pseudo-tty when you least expect it, test it when not editing
a file.  Be prepared to "kill" the started command or Vim.  Commands like
":r !cat" may hang!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
不幸にも、仮想端末の実装は Unix システム毎に異なっている。そしていくつかのシステムは root 権限を要求する。一番予期しないときに仮想端末における問題に出くわすのを避けるには、ファイルを編集していないときにそれをテストをするとよい。開始したコマンドあるいは Vim を "kill" する準備をしなくてはならない。":r !cat" のようなコマンドはハングするかもしれない！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If using a pseudo-tty does not work for you, reset the 'guipty' option: >

	:set noguipty
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
仮想端末を使用して動作しないならば、'@option{guipty}' オプションをリセットするとよい:
@example
:set noguipty
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using a pipe should work on any Unix system, but there are disadvantages:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パイプの使用はいくつかの Unix システムで動作するだろうが、いくつか不都合がある:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Some shell commands will notice that a pipe is being used and behave
  differently.  E.g., ":!ls" will list the files in one column.
- The ":sh" command won't show a prompt, although it will sort of work.
- When using ":make" it's not possible to interrupt with a CTRL-C.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item いくつかのシェルコマンドはパイプが使用されていることを通知し、異なった振る舞いをするだろう。例えば、":!ls" はファイルの一覧を1桁で出力するだろう。
@item "@command{:sh}" コマンドは、多少動作するだろうが、プロンプトを表示しないだろう。
@item "@command{:make}" を使用するときには、@kbd{CTRL-C} で中断できない。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Typeahead while the external command is running is often lost.  This happens
both with a pipe and a pseudo-tty.  This is a known problem, but it seems it
can't be fixed (or at least, it's very difficult).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
外部コマンドを実行している間、先行入力された文字はしばしば失われる。これはパイプと仮想端末の両方で起こる。これは既知の問題だが、修正できない (かあるいは少なくとも非常に難しい) と思われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-pty-erase*
When your erase character is wrong for an external command, you should fix
this in your "~/.cshrc" file, or whatever file your shell uses for
initializations.  For example, when you want to use backspace to delete
characters, but hitting backspaces produces "^H" instead, try adding this to
your "~/.cshrc": >
	stty erase ^H
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-pty-erase}
@cindex gui-pty-erase
削除文字が外部コマンドに不適当であるときには、あなたの "@file{~/.cshrc}" ファイル、あるいはあなたのシェルを初期化するために用いるどんなファイルででもこれを修正すべきである。例えば、文字を削除するためにバックスペースを使用したいが、バックスペースを打ち込むことで代わりに "^H" が作り出されるときには、これをあなたの "@file{~/.cshrc}" に追加してみるとよい:
@example
stty erase ^H
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The ^H is a real CTRL-H, type it as CTRL-V CTRL-H.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
^H は本当の @kbd{CTRL-H} であり、@kbd{CTRL-V CTRL-H} とタイプする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Various						*gui-x11-various*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-various}
@cindex gui-x11-various
@section 4. 各種事項
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-printing*
The "File/Print" menu simply sends the current buffer to "lpr".  No options or
whatever.  If you want something else, you can define your own print command.
For example: >

  :10amenu File.Print :w !lpr -Php3
  :10vmenu File.Print :w !lpr -Php3
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-printing}
@cindex gui-x11-printing
"File/Print" @{訳注: 日本語化されたメニューでは、ファイル／印刷@} メニューは単に現在のバッファを "lpr" に送る。オプションや何かは何もない。他に何かしたければ、あなた自身の印刷コマンドを定義することができる。例えば:
@example
:10amenu File.Print :w !lpr -Php3
:10vmenu File.Print :w !lpr -Php3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*X11-icon*
Vim uses a black&white icon by default when compiled with Motif or Athena.  A
colored Vim icon is included as $VIMRUNTIME/vim32x32.xpm.  For GTK+, this is
the builtin icon used.  Unfortunately, how you should install it depends on
your window manager.  When you use this, remove the 'i' flag from
'guioptions', to remove the black&white icon: >
  :set guioptions-=i
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{X11-icon}
@cindex X11-icon
Motif あるいは Athena でコンパイルされたときには、Vim はデフォルトで白黒のアイコンを用いる。色付きの Vim アイコンは $VIMRUNTIME/vim32x32.xpm として含まれる。GTK+ については、組み込みのアイコンが用いられる。不幸にも、どのようにしてそれをインストールするかは、あなたのウィンドウマネージャーに依存する。これを使用するときには、白黒のアイコンを取り除くために、'@option{guioptions}' から '@var{i}' フラグを取り除くとよい:
@example
:set guioptions-=i
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you use one of the fvwm* family of window managers simply add this line to
your .fvwm2rc configuration file: >

  Style "vim"		Icon vim32x32.xpm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
fvwm* ファミリのウィンドウマネージャーの 1 つを使用するならば、単にあなたの @file{.fvwm2rc} 構成ファイルにこの行を追加するとよい:
@example
Style "vim"             Icon vim32x32.xpm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Make sure the icon file's location is consistent with the window manager's
ImagePath statement.  Either modify the ImagePath from within your .fvwm2rc or
drop the icon into one the pre-defined directories: >

  ImagePath /usr/X11R6/include/X11/pixmaps:/usr/X11R6/include/X11/bitmaps
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アイコンファイルの場所がウィンドウマネージャーの ImagePath 文と一致することを確かめなくてはならない。あなたの @file{.fvwm2rc} を修正するか、あるいは事前に定義されたディレクトリの1つにアイコンをドロップするとよい。
@example
ImagePath /usr/X11R6/include/X11/pixmaps:/usr/X11R6/include/X11/bitmaps
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: older versions of fvwm use "IconPath" instead of "ImagePath".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
古いバージョンの fvwm では "ImagePath" ではなく "IconPath" を使う。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For CDE "dtwm" (a derivative of Motif) add this line in the .Xdefaults: >
   Dtwm*Vim*iconImage: /usr/local/share/vim/vim32x32.xpm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
CDE "dtwm" (Motif から派生) については、@file{.Xdefaults} にこの行を追加するとよい:
@example
Dtwm*Vim*iconImage: /usr/local/share/vim/vim32x32.xpm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For "mwm" (Motif window manager) the line would be: >
   Mwm*Vim*iconImage: /usr/local/share/vim/vim32x32.xpm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"mwm" (Motif ウィンドウマネージャー) については、その行はこうなるだろう:
@example
Mwm*Vim*iconImage: /usr/local/share/vim/vim32x32.xpm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Mouse Pointers Available in X11 ~
						*X11_mouse_shapes*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{X11_mouse_shapes}
@cindex X11_mouse_shapes
@unnumberedsubsec X11 で利用できるマウスポインタ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
By using the |'mouseshape'| option, the mouse pointer can be automatically
changed whenever Vim enters one of its various modes (e.g., Insert or
Command).  Currently, the available pointers are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|'mouseshape'| オプションを使うと、Vim がモード (挿入モードやコマンドモードなど) を変更するたびに自動的にマウスポインタを変更できる。現在、利用できるポインタは次の通り:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	arrow			an arrow pointing northwest
	beam			a I-like vertical bar
	size			an arrow pointing up and down
	busy			a wristwatch
	blank			an invisible pointer
	crosshair		a thin "+" sign
	hand1			a dark hand pointing northeast
	hand2			a light hand pointing northwest
	pencil			a pencil pointing southeast
	question		question_arrow
	right_arrow		an arrow pointing northeast
	up_arrow		an arrow pointing upwards
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item arrow @tab 左上向きの矢印
@item beam @tab 「I」のような垂直の棒
@item size @tab 上下を指す矢印
@item busy @tab 腕時計
@item blank @tab 透明なポインタ
@item crosshair @tab 細い "+" 印
@item hand1 @tab 左上向きの暗い手のポインタ
@item hand2 @tab 左右向きの明るい手のポインタ
@item pencil @tab 右下向きのペン型のポインタ
@item question @tab クエスチョンマーク (?)
@item right_arrow @tab 右上向きの矢印
@item up_arrow @tab 上向きの矢印
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additionally, any of the mouse pointers that are built into X11 may be
used by specifying an integer from the X11/cursorfont.h include file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さらに、インクルードファイルの X11/cursorfont.h で定義された整数を指定して、X11 に組み込まれたポインタを使うことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If a name is used that exists on other systems, but not in X11, the default
"arrow" pointer is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のシステムでは使えても、X11 にない名前を指定すると、デフォルトの "arrow" ポインタが使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. GTK version					*gui-gtk* *GTK+* *GTK* *GTK3*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-gtk}
@anchor{GTK+}
@anchor{GTK}
@anchor{GTK3}
@cindex gui-gtk
@cindex GTK+
@cindex GTK
@cindex GTK3
@section 5. GTK バージョン
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GTK version of the GUI works a little bit different.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI の GTK バージョンはほんの少し異なった動作をする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
GTK does _not_ use the traditional X resource settings.  Thus items in your
~/.Xdefaults or app-defaults files are not used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK は従来のXのリソース設定を使＿わない＿。したがって、@file{~/.Xdefaults} や app-defaults は使われない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Many of the traditional X command line arguments are not supported.  (e.g.,
stuff like -bg, -fg, etc).  The ones that are supported are:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

伝統的な X コマンドの引数はサポートされない。(例えば -bg, -fg, などの要素)。サポートされているのは:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
    command line argument   resource name	meaning ~
    -fn  or  -font	    .font		font name for the text
    -geom  or  -geometry    .geometry		size of the gvim window
    -rv  or  -reverse	    *reverseVideo	white text on black background
    -display					display to be used
    -fg -foreground {color}			foreground color
    -bg -background {color}			background color
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .3 .3
@headitem コマンドライン引数 @tab リソース名 @tab 意味
@item -fn  or  -font @tab .font @tab テキストのフォント名
@item -geom  or  -geometry @tab .geometry @tab gvim ウィンドウのサイズ
@item -rv  or  -reverse @tab *reverseVideo @tab 黒い背景に白いテキスト
@item -display @tab @tab 使用されるディスプレイ
@item -fg -foreground @{color@} @tab @tab 前景色
@item -bg -background @{color@} @tab @tab 背景色
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To set the font, see |'guifont'|.  For GTK, there's also a menu option that
does this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フォントを設定するには、|'guifont'| を参照。GTK については、これをするメニューオプションもある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additionally, there are these command line arguments, which are handled by GTK
internally.  Look in the GTK documentation for how they are used:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さらに、GTK の内部で扱われるこれらのコマンドライン引数がある。それらがどのように用いられるかは GTK のドキュメントを見るとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	--sync
	--gdk-debug
	--gdk-no-debug
	--no-xshm	(not in GTK+ 2)
	--xim-preedit	(not in GTK+ 2)
	--xim-status	(not in GTK+ 2)
	--gtk-debug
	--gtk-no-debug
	--g-fatal-warnings
	--gtk-module
	--display	(GTK+ counterpart of -display; works the same way.)
	--screen	(The screen number; for GTK+ 2.2 multihead support.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
--sync
--gdk-debug
--gdk-no-debug
--no-xshm       (GTK+ 2 では使われない)
--xim-preedit   (GTK+ 2 では使われない)
--xim-status    (GTK+ 2 では使われない)
--gtk-debug
--gtk-no-debug
--g-fatal-warnings
--gtk-module
--display       (GTK+ の -display に対応; 同じように動作する。)
--screen        (スクリーン番号: GTK+ 2.2 ではマルチスレッド対応)
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These arguments are ignored when the |+netbeans_intg| feature is used:
	-xrm
	-mf
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの引数は |+netbeans_intg| が有効なときは使われない。
@example
-xrm
-mf
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
As for colors, Vim's color settings (for syntax highlighting) is still
done the traditional Vim way.  See |:highlight| for more help.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
色については、Vim の (構文強調表示についての) 色の設定はまだ従来の Vim の方法でなされている。より多くのヘルプについては |:highlight| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to set the colors of remaining gui components (e.g., the
menubar, scrollbar, whatever), those are GTK specific settings and you
need to set those up in some sort of gtkrc file.  You'll have to refer
to the GTK documentation, however little there is, on how to do this.
See http://developer.gnome.org/doc/API/2.0/gtk/gtk-Resource-Files.html
for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
残りの gui コンポーネント (例えば、メニューバー、スクロールバー、どんなものでも) の色を設定したければ、GTK 特有の設定があり、何か @file{gtkrc} ファイルの類にそれらを設定する必要がある。どのようにこれをすべきかについて、どんなに小さなものしかなくても、GTK ドキュメントを参照しなければならないだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Tooltip Colors ~
							*gtk-tooltip-colors*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gtk-tooltip-colors}
@cindex gtk-tooltip-colors
@unnumberedsubsec ツールチップの色
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Example, which sets the tooltip colors to black on light-yellow: >

	style "tooltips"
	{
		bg[NORMAL] = "#ffffcc"
		fg[NORMAL] = "#000000"
	}

	widget "gtk-tooltips*"		style "tooltips"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ツールチップの色を明るい黄色の背景に黒のテキストに設定する例:
@verbatim
style "tooltips"
{
        bg[NORMAL] = "#ffffcc"
        fg[NORMAL] = "#000000"
}

widget "gtk-tooltips*"          style "tooltips"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Write this in the file ~/.gtkrc and it will be used by GTK+.  For GTK+ 2
you might have to use the file ~/.gtkrc-2.0 instead, depending on your
distribution.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{~/.gtkrc} ファイルの中にこれを書くと GTK で用いられるだろう。GTK+ 2 では @file{~/.gtkrc-2.0} を使わなければいけないかも知れない。環境による。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For GTK+ 3, an effect similar to the above can be obtained by adding the
following snippet of CSS code to $XDG_HOME_DIR/gtk-3.0/gtk.css (usually,
$HOME/.config/gtk-3.0/gtk.css):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 3 でも、以下の CSS コードのスニペットを $XDG_HOME_DIR/gtk-3.0/gtk.css (通常 $HOME/.config/gtk-3.0/gtk.css) に追加する事で上記と同様の効果が得られる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For GTK+ 3 < 3.20: >

	.tooltip {
		background-color: #ffffcc;
		color: #000000;
	}
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 3 < 3.20 向け:
@verbatim
.tooltip {
        background-color: #ffffcc;
        color: #000000;
}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
For GTK+ 3 >= 3.20: >

	tooltip {
	    background-color: #ffffcc;
	    text-shadow: none;
	}

	tooltip label {
	    color: #2e3436;
	}
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 3 >= 3.20 向け:
@verbatim
tooltip {
    background-color: #ffffcc;
    text-shadow: none;
}

tooltip label {
    color: #2e3436;
}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A Quick Look at GTK+ CSS ~
							*gtk-css*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gtk-css}
@cindex gtk-css
@unnumberedsubsec GTK+ CSS について簡潔に
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The contents of this subsection apply to GTK+ 3.20 or later which provides
stable support for GTK+ CSS:

	https://developer.gnome.org/gtk3/stable/theming.html
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この節の内容は、GTK+ CSS をしっかりとサポートしている GTK+ 3.20 以降に適用される:

@url{https://developer.gnome.org/gtk3/stable/theming.html}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
GTK+ uses CSS for styling and layout of widgets.  In this subsection, we'll
have a quick look at GTK+ CSS through simple, illustrative examples.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ は CSS をウィジェットのレイアウトとスタイルに使用する。この節では、シンプルで説明的な例を通して、GTK+ CSS について簡潔に見ていく。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example 1.  Empty Space Adjustment ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsubsec 例 1. 空白の調整
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default, the toolbar and the tabline of the GTK+ 3 GUI are somewhat larger
than those of the GTK+ 2 GUI.  Some people may want to make them look similar
to the GTK+ 2 GUI in size.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは、GTK+ 3 GUI のツールバーとタブ行は、GTK+ 2 GUI のものよりも、いくらか長い。GTK+ 2 GUI でのサイズと同じように見えるようにしたいと思うひとがいるに違いない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To do that, we'll try reducing empty space around icons and labels that looks
apparently superfluous.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そのために、どうやら余分らしいアイコンやラベル回りの空白を減らしてみよう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Add the following lines to $XDG_HOME_DIR/gtk-3.0/gtk.css (usually,
$HOME/.config/gtk-3.0/gtk.css): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
$XDG_HOME_DIR/gtk-3.0/gtk.css (たいていは $HOME/.config/gtk-3.0/gtk.css) に以下の行を追加する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	toolbar button {
	    margin-top: -2px;
	    margin-right: 0px;
	    margin-bottom: -2px;
	    margin-left: 0px;

	    padding-top: 0px;
	    padding-right: 0px;
	    padding-bottom: 0px;
	    padding-left: 0px
	}

	notebook tab {
	    margin-top: -1px;
	    margin-right: 3px;
	    margin-bottom: -1px;
	    margin-left: 3px;

	    padding-top: 0px;
	    padding-right: 0px;
	    padding-bottom: 0px;
	    padding-left: 0px
	}
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
toolbar button {
    margin-top: -2px;
    margin-right: 0px;
    margin-bottom: -2px;
    margin-left: 0px;

    padding-top: 0px;
    padding-right: 0px;
    padding-bottom: 0px;
    padding-left: 0px
}

notebook tab {
    margin-top: -1px;
    margin-right: 3px;
    margin-bottom: -1px;
    margin-left: 3px;

    padding-top: 0px;
    padding-right: 0px;
    padding-bottom: 0px;
    padding-left: 0px
}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Since it's a CSS, they can be rewritten using shorthand: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは CSS なので、簡略表記を使って次のように書き換えることができる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	toolbar button {
	    margin: -2px 0px;
	    padding: 0px;
	}

	notebook tab {
	    margin: -1px 3px;
	    padding: 0px
	}
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
toolbar button {
    margin: -2px 0px;
    padding: 0px;
}

notebook tab {
    margin: -1px 3px;
    padding: 0px
}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note: You might want to use 'toolbariconsize' to adjust the icon size, too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{toolbariconsize}' を使ってアイコンのサイズも調節したいに違いない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: Depending on the icon theme and/or the font in use, some extra tweaks
may be needed for a satisfactory result.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
アイコンのテーマと、もしくは使用中のフォントに応じて、満足する結果のためには、いくつかの特別な微調整が必要かもしれない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: In addition to margin and padding, you can use border.  For details,
refer to the box model of CSS, e.g.,

	https://www.w3schools.com/css/css_boxmodel.asp
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
マージンとパディングに加えて、ボーダーを使うこともできる。詳細については、CSS のボックスモデルを参照のこと。例えば

@url{https://www.w3schools.com/css/css_boxmodel.asp}
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example 2.  More Than Just Colors ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsubsec 例 2. ただの色ではない
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
GTK+ CSS supports gradients as well: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ CSS はグラディエントもサポートしている:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	tooltip {
	    background-image: -gtk-gradient(linear,
					    0 0, 0 1,
					    color-stop(0, #344752),
					    color-stop(0.5, #546772),
					    color-stop(1, #243742));
	}

	tooltip label {
	    color: #f3f3f3;
	}
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
tooltip {
    background-image: -gtk-gradient(linear,
                                    0 0, 0 1,
                                    color-stop(0, #344752),
                                    color-stop(0.5, #546772),
                                    color-stop(1, #243742));
}

tooltip label {
    color: #f3f3f3;
}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Gradients can be used to make a GUI element visually distinguishable from
others without relying on high contrast. Accordingly, effective use of them is
a useful technique to give a theme a sense of unity in color and luminance.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
グラディエントは他の高いコンストラストに頼らずに、視覚的に区別可能な GUI 要素を作るのに使うことができる。したがって、これらを有効に使うことは、テーマに色と高度の統一性あるセンスを与えるのに有用なテクニックになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: Theming can be difficult since it must make every application look
equally good; making a single application more charming often gets others
unexpectedly less attractive or even deteriorates their usability.  Keep this
in mind always when you try improving a theme.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
テーマを作るということは、すべてのアプリケーションの見た目を同じように良いものにしなければならないので困難である。単一のアプリケーションをより魅力的なものにすることは、しばしば、他人の予想外な不評を受けたり、有用性を低下させたりもする。テーマを改良しようとするなら、常にこれを心しておけ。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Using Vim as a GTK+ plugin ~
							*gui-gtk-socketid*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-gtk-socketid}
@cindex gui-gtk-socketid
@unnumberedsubsubsec GTK+ プラグインとして Vim を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
When the GTK+ version of Vim starts up normally, it creates its own top level
window (technically, a 'GtkWindow').  GTK+ provides an embedding facility with
its GtkSocket and GtkPlug widgets.  If one GTK+ application creates a
GtkSocket widget in one of its windows, an entirely different GTK+ application
may embed itself into the first application by creating a top-level GtkPlug
widget using the socket's ID.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 版の Vim を普通に起動すると、Vim は自身のトップレベルウィンドウを作成する (技術的には 'GtkWindow')。GTK+ は GtkSocket, GtkPlug ウィジェットを使った埋め込み機能を提供している。ある GTK+ アプリケーションが自分のウィンドウに GtkSocket ウィジェットを作成していると、別のアプリケーションはトップレベルの GtkPlug ウィジェットをソケット ID を使って作成し、先のアプリケーションに自身を組み込める。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you pass Vim the command-line option '--socketid' with a decimal or
hexadecimal value, Vim will create a GtkPlug widget using that value instead
of the normal GtkWindow.  This enables Vim to act as a GTK+ plugin.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のコマンドラインオプションに '--socketid' と 10 進数や 16 進数の値を指定すると、Vim は通常の GtkWindow を使わず、指定された値を使い GtkPlug ウィジェットを作成する。これは Vim が GTK+ プラグインとして振る舞うことを可能にする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This really is a programmer's interface, and is of no use without a supporting
application to spawn the Vim correctly.  For more details on GTK+ sockets, see
http://www.gtk.org/api/
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはプログラマ向けのインターフェイスであり、それをサポートするアプリケーション無しではまったく役に立たない。GTK+ ソケットについての詳細は次の URL を参考にすること。

@url{http://www.gtk.org/api/}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that this feature requires the latest GTK version.  GTK 1.2.10 still has
a small problem.  The socket feature has not yet been tested with GTK+ 2 --
feel free to volunteer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
この機能は最新バージョンの GTK を必要とする。GTK 1.2.10 はまだ若干問題がある。ソケットの機能はまだ GTK+ 2 ではテストされていない、自己責任でどうぞ。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. GNOME version				*gui-gnome* *Gnome* *GNOME*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-gnome}
@anchor{Gnome}
@anchor{GNOME}
@cindex gui-gnome
@cindex Gnome
@cindex GNOME
@section 6. GNOME バージョン
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GNOME GUI works just like the GTK+ version.  See |GTK+| above for how it
works.  It looks a bit different though, and implements one important feature
that's not available in the plain GTK+ GUI:  Interaction with the session
manager. |gui-gnome-session|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GNOME GUI は GTK+ バージョンと同じように機能する。どのように動作するかは上述の |GTK+| を参照。しかし若干の違いがあり、素の GTK+ GUI では利用できない重要な機能が 1 つ実装されている。それはセッションマネージャーとの相互作用である。|gui-gnome-session|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These are the different looks:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
見た目の違い:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Uses GNOME dialogs (GNOME 1 only).  The GNOME 2 GUI uses the same nice
  dialogs as the GTK+ 2 version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item GNOME ダイアログを使う (GNOME 1 だけ)。GNOME 2 GUI は同じく素敵な GTK+ 2 バージョンのダイアログを使う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Uses the GNOME dock, so that the toolbar and menubar can be moved to
  different locations other than the top (e.g., the toolbar can be placed on
  the left, right, top, or bottom).  The placement of the menubar and
  toolbar is only saved in the GNOME 2 version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item GNOME ドックを使う。したがって、ツールバーとメニューバーは上以外の別の場所に移動することができる (例えばツールバーを左や右、上、もしくは下に置ける)。メニューバーとツールバーの位置は GNOME 2 バージョンでのみ記憶される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- That means the menubar and toolbar handles are back!  Yeah!  And the
  resizing grid still works too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item これはメニューバーとツールバーのハンドルが戻ってきたということだ！やった！もちろんサイズ変更グリッドもまだ使える。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
GNOME is compiled with if it was found by configure and the
--enable-gnome-check argument was used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GNOME バージョンは configure が GNOME を認識し、引数 @samp{--enable-gnome-check} が指定されていればコンパイルされる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: Avoid use of --enable-gnome-check with GTK+ 3 GUI build.  The
functionality mentioned above is consolidated in GTK+ 3.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
GTK+ 3 GUI ビルドで @samp{--enable-gnome-check} を使用しない。上記で述べた機能は GTK+ 3で統合されている。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
GNOME session support ~
					*gui-gnome-session* *gnome-session*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-gnome-session}
@anchor{gnome-session}
@cindex gui-gnome-session
@cindex gnome-session
@unnumberedsubsec GNOME セッションサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
On logout, Vim shows the well-known exit confirmation dialog if any buffers
are modified.  Clicking [Cancel] will stop the logout process.  Otherwise the
current session is stored to disk by using the |:mksession| command, and
restored the next time you log in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ログアウト時、Vim はバッファのどれかが変更されていると、よく知られた終了確認ダイアログを表示する。[Cancel] をクリックするとログアウトが取り止めになる。そうしなかった場合は、現在のセッションが |:mksession| コマンドを使ってディスクに保存され、次回のログオン時に復元される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GNOME session support should also work with the KDE session manager.
If you are experiencing any problems please report them as bugs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GNOME セッションサポートはおそらく KDE セッションマネージャーでも機能する。もしあなたが何かの問題に直面したらバグレポートを彼らに送っていただきたい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: The automatic session save works entirely transparent, in order to
avoid conflicts with your own session files, scripts and autocommands.  That
means in detail:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
自動的なセッションの保存はあなたのセッションファイルやスクリプト、オートコマンドの衝突を避けるために実に適切に働く。その手段としては:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The session file is stored to a separate directory (usually $HOME/.gnome2).
- 'sessionoptions' is ignored, and a hardcoded set of appropriate flags is
  used instead: >
	blank,curdir,folds,globals,help,options,tabpages,winsize
- The internal variable |v:this_session| is not changed when storing the
  session.  Also, it is restored to its old value when logging in again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item セッションファイルは別のディレクトリに保存される (普通は $HOME/.gnome2)。
@item '@option{sessionoptions}' は無視される。代わりにハードコードされた適切なフラグが使用される:
@example
blank,curdir,folds,globals,help,options,tabpages,winsize
@end example
@item 内部変数の |v:this_session| はセッションの保存で変更されない。さらに、再びログインしたときに元の値に復元される。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The position and size of the GUI window is not saved by Vim since doing so
is the window manager's job.  But if compiled with GTK+ 2 support, Vim helps
the WM to identify the window by restoring the window role (using the |--role|
command line argument).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI ウィンドウの位置とサイズは保存されない、それはウィンドウマネージャーの仕事である。しかし、GTK+ 2 サポートを有効にしてコンパイルされていると、Vim はウィンドウの役目を復元して WM がウィンドウを識別するのを補佐する (コマンドライン引数の |--role| を使う)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. KDE version					*gui-kde* *kde* *KDE* *KVim*
							*gui-x11-kde*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-kde}
@anchor{kde}
@anchor{KDE}
@anchor{KVim}
@anchor{gui-x11-kde}
@cindex gui-kde
@cindex kde
@cindex KDE
@cindex KVim
@cindex gui-x11-kde
@section 7. KDE バージョン
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
There is no KDE version of Vim.  There has been some work on a port using the
Qt toolkit, but it never worked properly and it has been abandoned.  Work
continues on Yzis: https://github.com/chrizel/Yzis.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
KDE バージョンの Vim は存在しない。Qt ツールキットを使って移植する作業が行われていたが、ちゃんと動かなかったので、今は放棄されている。作業は Yzis で継続されている: @url{https://github.com/chrizel/Yzis}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. Compiling						*gui-x11-compiling*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-compiling}
@cindex gui-x11-compiling
@section 8. コンパイル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If using X11, Vim's configure will by default first try to find the necessary
GTK+ files on your system.  When both GTK+ 2 and GTK+ 3 are available, GTK+ 2
will be chosen unless --enable-gui=gtk3 is passed explicitly to configure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X11 を使用しているならば、Vim の configure はデフォルトでは最初にシステム上の必要となる GTK+ ファイルを見つけようとするだろう。GTK+ 2 と GTK+ 3 の両方のファイルがシステムで見つかった場合は、configure に明示的に @samp{--enable-gui=gtk3} が指定されていない限り GTK+ 2 が使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the GTK+ files cannot be found, then the Motif files will be searched for.
Finally, if this fails, the Athena files will be searched for.  If all three
fail, the GUI will be disabled.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ のファイルが見つからなかった場合は、Motif ファイルが検索されるだろう。最終的に、これが失敗するならば、Athena ファイルが検索されるだろう。3 つとも全て失敗するならば、GUI は無効になるだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For GTK+, Vim's configuration process uses pkg-config(1) to check if the
GTK+ required for a specified build is properly installed and usable.
Accordingly, it is a good idea to make sure before running configure that
your system has a working pkg-config together with the .pc file of the
required GTK+.  For that, say, run the following on the command line to see if
your pkg-config works with your GTK+ 2: >

    $ pkg-config --modversion gtk+-2.0
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ については、Vim のコンフィギュレーションプロセスは必要な GTK+ が適切にインストールされ、使用可能であるかをチェックする為に pkg-config(1) が使われる。したがって configure を実行する前に必要とされる GTK+ の .pc ファイルで pkg-config がシステムで動作する事を確認するのは良い事である。例えば GTK+ 2 の pkg-config であれば以下のコマンドラインを実行する:
@verbatim
$ pkg-config --modversion gtk+-2.0
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Replace gtk+-2.0 with gtk+-3.0 for GTK+ 3. If you get the correct version
number of your GTK+, you can proceed; if not, you probably need to do some
system administration chores to set up pkg-config and GTK+ correctly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 3 であれば gtk+-2.0 を gtk+-3.0 で置換しなさい。もし GTK+ のバージョン番号が正しいのであれば、実行できるはずだ: もしできないのならば、おそらくシステム管理者に正しい pkg-config と GTK+ にセットアップして貰う必要がある。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GTK+ 2 GUI is built by default.  Therefore, you usually don't need to pass
any options such as --enable-gui=gtk2 to configure and build that.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 2 GUI がデフォルトでビルドされる。したがって通常 @samp{--enable-gui=gtk2} の様なオプションを configure に渡してビルドする必要はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Optionally, the GTK+ 2 GUI can consolidate the GNOME 2 support.  This support
is enabled by passing --enable-gnome-check to configure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
補足として GTK+ 2 GUI は GNOME 2 のサポートと統合可能である。これは configure に @samp{--enable-gnome-check} を渡す事で有効になる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to build the GTK+ 3 GUI, you have to pass --enable-gui=gtk3
explicitly to configure, and avoid passing --enable-gnome-check to that, as
the functionality of the GNOME 2 support has already been consolidated in
GTK+ 3.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もし GTK+ 3 GUI でビルドしたいならば、@samp{--enable-gui=gtk3} を明示的に configure に渡す必要がある。GTK+ 3 では既にサポート済みの GNOME 2 サポートを有効にするのに @samp{--enable-gnome-check} を渡す事を避けるべきである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Otherwise, if you are using Motif or Athena, when you have the Motif or Athena
files in a directory where configure doesn't look, edit the Makefile to enter
the names of the directories.  Search for "GUI_INC_LOC" for an example to set
the Motif directories, "CONF_OPT_X" for Athena.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そうではなくて、Motif あるいは Athena を使用しているならば、configure が見に行かないないディレクトリに Motif あるいは Athena ファイルがあるときには、ディレクトリ名を記入するために Makefile を編集しなくてはならない。Motif のディレクトリを設定する例については "GUI_INC_LOC"、Athena については "CONF_OPT_X" を検索するとよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-gtk*
Currently, Vim supports both GTK+ 2 and GTK+ 3.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-gtk}
@cindex gui-x11-gtk
現在、Vim は GTK+ 2 と GTK+ 3 の両方をサポートしている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GTK+ 2 GUI requires GTK+ 2.2 or later.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 2 GUI を使うときは GTK+ 2.2 シリーズ以降の最新版を使うことが要求される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Although the GTK+ 3 GUI is written in such a way that the source code can be
compiled against all versions of the 3.x series, we recommend GTK+ 3.10 or
later because of its substantial implementation changes in redraw done at
that version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GTK+ 3 GUI は 3.x シリーズのすべてのバージョンに対してコンパイルすることができるようなソースコードとして書かれているけれども、GTK+ 3.10 以降を使うことを推奨する。なぜなら、再描画その実際の実装がこのバージョンになっているからだ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-motif*
For Motif, you need at least Motif version 1.2 and/or X11R5.  Motif 2.0 and
X11R6 are OK.  Motif 1.1 and X11R4 might work, no guarantee (there may be a
few problems, but you might make it compile and run with a bit of work, please
send me the patches if you do).  The newest releases of LessTif have been
reported to work fine too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-motif}
@cindex gui-x11-motif
Motif については、少なくとも Motif バージョン 1.2 と、あるいは X11R5 が必要である。Motif 2.0 と X11R6 は OK である。Motif 1.1 と X11R4 は動作するかもしれないが保証しない (多少の問題があるかもしれないが、少しの作業でそれをコンパイルし実行させられるかもしれない、もしあなたがそうするなら、どうか私にパッチを送って欲しい)。LessTif の最新リリースも問題なく動作すると報告を受けている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-athena*
The Athena version uses the Xaw widget set by default.  If you have the 3D
version, you might want to link with Xaw3d instead.  This will make the
menus look a bit better.  Edit the Makefile and look for "XAW_LIB".  The
scrollbars will remain the same, because Vim has its own, which are already
3D (in fact, they look more like Motif).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-athena}
@cindex gui-x11-athena
Athena バージョンはデフォルトで Xaw ウィジェットセットを用いる。3D バージョンを持っているならば、代わりに Xaw3d でリンクしたいかもしれない。これはメニューを少しよく見せるかもしれない。Makefile を編集して、"XAW_LIB" を見に行くようにするとよい。スクロールバーは、Vim は既に 3D のそれ自体を持っているので (実際には、それらはもっと Motif のように見える)、同じままだろう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-neXtaw*
The neXtaw version is mostly like Athena, but uses different widgets.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-neXtaw}
@cindex gui-x11-neXtaw
neXtaw バージョンについては、異なるウィジェットを使うだけでほとんど Athena と変わらない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-x11-misc*
In general, do not try to mix files from different GTK+, Motif, Athena and X11
versions.  This will cause problems.  For example, using header files for
X11R5 with a library for X11R6 probably doesn't work (although the linking
won't give an error message, Vim will crash later).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-x11-misc}
@cindex gui-x11-misc
一般的には、異なった GTK+, Motif, Athena と X11 のバージョンからのファイルを混ぜようとしてはならない。これは問題を引き起こすだろう。例えば、X11R6 用のライブラリで X11R5 用のヘッダーファイルを使用しても動作しないだろう (リンクがエラーメッセージを出さないとしても、Vim は後でクラッシュするだろう)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
9. X11 selection mechanism				*x11-selection*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{x11-selection}
@cindex x11-selection
@section 9. X11 セレクション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If using X11, in either the GUI or an xterm with an X11-aware Vim, then Vim
provides varied access to the X11 selection and clipboard.  These are accessed
by using the two selection registers "* and "+.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X11 を使っている場合、GUI や xterm で Vim が X11 を認識している状態のとき、Vim から X11 のセレクションやクリップボードを扱える。それらは "* レジスタと "+ レジスタを使用して取り扱う。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
X11 provides two basic types of global store, selections and cut-buffers,
which differ in one important aspect: selections are "owned" by an
application, and disappear when that application (e.g., Vim) exits, thus
losing the data, whereas cut-buffers, are stored within the X-server itself
and remain until written over or the X-server exits (e.g., upon logging out).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X11 は 2 つの基本的な共通記憶域、セレクションとカットバッファを提供している。これらは重要な点が異なっている。セレクションはアプリケーションが所有し、Vim などのアプリケーションが終了するとなくなる、すなわちデータは失われる。一方、カットバッファは、X サーバーが記憶し、上書きされるか、ログアウトするなどして X サーバーが終了するまで保存される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The contents of selections are held by the originating application (e.g., upon
a copy), and only passed on to another application when that other application
asks for them (e.g., upon a paste).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
セレクションの内容はそのアプリケーションによって保存され (コピー)、別のアプリケーションがそれを求めたときに渡される (ペースト)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The contents of cut-buffers are immediately written to, and are then
accessible directly from the X-server, without contacting the originating
application.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カットバッファの内容はすぐに上書きされ、その元のアプリケーションを介さずに、X サーバーから直接読み込まれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*quoteplus* *quote+*
There are three documented X selections: PRIMARY (which is expected to
represent the current visual selection - as in Vim's Visual mode), SECONDARY
(which is ill-defined) and CLIPBOARD (which is expected to be used for
cut, copy and paste operations).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{quoteplus}
@anchor{quote+}
@cindex quoteplus
@cindex quote+
文書化された 3 つの X セレクションがある。プライマリ (Vim のビジュアルモードでの選択のような、現在の選択範囲を表す)、セカンダリ (不明瞭である)、クリップボード (カット、コピー、ペーストに使われる)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Of these three, Vim uses PRIMARY when reading and writing the "* register
(hence when the X11 selections are available, Vim sets a default value for
|'clipboard'| of "autoselect"), and CLIPBOARD when reading and writing the "+
register.  Vim does not access the SECONDARY selection.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この 3 つの内、Vim は "* レジスタを読み書きするときにはプライマリを使う (X11 セレクションが利用可能なとき、Vim は |'clipboard'| にデフォルトとして "autoselect" を設定する)。"+ レジスタを読み書きするときにはクリップボードを使う。Vim はセカンダリを使わない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Examples: (assuming the default option values)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例: (オプションが標準設定のとき)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Select a URL in Visual mode in Vim.  Go to your browser and click the
  middle mouse button in the URL text field.  The selected text will be
  inserted (hopefully!).  Note: in Firefox you can set the
  middlemouse.contentLoadURL preference to true in about:config, then the
  selected URL will be used when pressing middle mouse button in most places
  in the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item Vim のビジュアルモードで URL を選択する。ブラウザーの URL 入力欄でマウスのミドルボタンをクリックする。選択したテキストが入力される (うまくいけば!)。
@quotation
@strong{Note:} @*
Firefox では、about:config を開き、middlemouse.contentLoadURL を true にすれば、ウィンドウ内をミドルクリックすることで、この URL を開くことができる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Select some text in your browser by dragging with the mouse.  Go to Vim and
  press the middle mouse button: The selected text is inserted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ブラウザーでマウスをドラッグしてテキストを選択する。Vim でマウスのミドルボタンをクリックすると選択したテキストが入力される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Select some text in Vim and do "+y.  Go to your browser, select some text in
  a textfield by dragging with the mouse.  Now use the right mouse button and
  select "Paste" from the popup menu.  The selected text is overwritten by the
  text from Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Vim でテキストを選択して "+y を実行する。ブラウザーのテキストエリアでマウスをドラッグしてテキストを選択する。そのまま右クリックしてポップアップメニューから "Paste" を選択する。選択したテキストは Vim で選択したテキストに置き換わる。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Note that the text in the "+ register remains available when making a Visual
selection, which makes other text available in the "* register.  That allows
overwriting selected text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"+ レジスタのテキストはビジュアル選択しただけで変更されない。"* レジスタは変更される。つまり選択したテキストを上書きできる。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*x11-cut-buffer*
There are, by default, 8 cut-buffers: CUT_BUFFER0 to CUT_BUFFER7.  Vim only
uses CUT_BUFFER0, which is the one that xterm uses by default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{x11-cut-buffer}
@cindex x11-cut-buffer
既定では 8 つのカットバッファがある。CUT_BUFFER0 から CUT_BUFFER7 まで。Vim は CUTBUFFER0 のみを使う。これは xterm が標準的に使っているものである。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Whenever Vim is about to become unavailable (either via exiting or becoming
suspended), and thus unable to respond to another application's selection
request, it writes the contents of any owned selection to CUT_BUFFER0.  If the
"+ CLIPBOARD selection is owned by Vim, then this is written in preference,
otherwise if the "* PRIMARY selection is owned by Vim, then that is written.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が利用不可能な状態 (終了やサスペンド) になり、他のアプリケーションのセレクションの要求に応答できなくなるときはいつでも、Vim は選択されている内容を CUT_BUFFER0 に書き込む。"+ クリップボードセレクションが Vim のものであるとき、それが優先して書き込まれる。そうでなければ、 "* プライマリセレクションが Vim のものであるときに、それが書き込まれる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Similarly, when Vim tries to paste from "* or "+ (either explicitly, or, in
the case of the "* register, when the middle mouse button is clicked), if the
requested X selection is empty or unavailable, Vim reverts to reading the
current value of the CUT_BUFFER0.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同様に、Vim が "* や "+ からペーストしようとするとき (明示的、もしくはマウスのミドルボタンをクリックしたときの暗黙的な "* レジスタの使用)、要求した X セレクションが空もしくは利用不可能なら、Vim は CUT_BUFFER0 の現在の値を読み込む。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that when text is copied to CUT_BUFFER0 in this way, the type of
selection (character, line or block) is always lost, even if it is a Vim which
later pastes it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
これによってテキストが CUT_BUFFER0 にコピーされるときは、セレクションの型情報 (文字、行、矩形) は常に失われる。後にそれをペーストするのが Vim であっても。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Xterm, by default, always writes visible selections to both PRIMARY and
CUT_BUFFER0.  When it pastes, it uses PRIMARY if this is available, or else
falls back upon CUT_BUFFER0.  For this reason, when cutting and pasting
between Vim and an xterm, you should use the "* register.  Xterm doesn't use
CLIPBOARD, thus the "+ doesn't work with xterm.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、Xterm は、選択したものをプライマリと CUT_BUFFER0 の両方に書き込む。ペースト時には、利用可能であればプライマリが使われ、それができなければ CUT_BUFFER0 が使用される。このため、Vim と xterm の間でのカットやペーストには "* レジスタを使わなければならない。Xterm はクリップボードを使わないので"+ レジスタは使えない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most newer applications will provide their current selection via PRIMARY ("*)
and use CLIPBOARD ("+) for cut/copy/paste operations.  You thus have access to
both by choosing to use either of the "* or "+ registers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最近のほとんどのアプリケーションでは範囲選択でプライマリ ("*) を、カット、コピー、ペーストの操作でクリップボード ("+) を使用するようになっている。そのため "* レジスタか "+ レジスタを選択して使用することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
 vim:tw=78:sw=4:ts=8:ft=help:norl:
@end ifset
