@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_08.txt, usr_09.txt, usr_07.txt, 目次
@unnumbered ウィンドウの分割
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_08.txt*	For Vim version 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

			      Splitting windows
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex usr_08.txt
@verbatim
*usr_08.txt*	For Vim バージョン 8.0.  Last change: 2017 Aug 11

		     VIM USER MANUAL - by Bram Moolenaar

			      ウィンドウの分割
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Display two different files above each other.  Or view two locations in the
file at the same time.  See the difference between two files by putting them
side by side.  All this is possible with split windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
関係のない 2 つの違ったファイルを表示したい。1 つのファイルの 2 個所を同時に見たい。2 つのファイルを横に並べて差分を見てみたい。

ウィンドウ分割を使えばどれもできてしまいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|08.1|	Split a window
|08.2|	Split a window on another file
|08.3|	Window size
|08.4|	Vertical splits
|08.5|	Moving windows
|08.6|	Commands for all windows
|08.7|	Viewing differences with vimdiff
|08.8|	Various
|08.9|	Tab pages

     Next chapter: |usr_09.txt|  Using the GUI
 Previous chapter: |usr_07.txt|  Editing more than one file
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{08.1}| @tab ウィンドウの 分割
@item |@ref{08.2}| @tab ウィンドウを分割してファイルを開く
@item |@ref{08.3}| @tab ウィンドウのサイズ
@item |@ref{08.4}| @tab 縦分割
@item |@ref{08.5}| @tab ウィンドウの移動
@item |@ref{08.6}| @tab 全ウィンドウを対象とするコマンド
@item |@ref{08.7}| @tab vimdiff で差分を表示する
@item |@ref{08.8}| @tab その他
@item |@ref{08.9}| @tab タブページ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.1*	Split a window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.1}
@section ウィンドウの 分割
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The easiest way to open a new window is to use the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいウィンドウを開く一番簡単なコマンドはこれです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:split
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:split
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This command splits the screen into two windows and leaves the cursor in the
top one:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
画面が上下2つのウィンドウに分割されます。カーソルは上側のウィンドウに置かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------+
|/* file one.c */                  |
|~                                 |
|~                                 |
|one.c=============================|
|/* file one.c */                  |
|~                                 |
|one.c=============================|
|                                  |
+----------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
What you see here is two windows on the same file.  The line with "====" is
the status line.  It displays information about the window above it.  (In
practice the status line will be in reverse video.)
   The two windows allow you to view two parts of the same file.  For example,
you could make the top window show the variable declarations of a program, and
the bottom one the code that uses these variables.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 つのウィンドウに同じファイルが表示されています。"@samp{====}" のラインはステータス行です。各ウィンドウの一番下にあってそのウィンドウの情報を表示します。(実際にはステータス行は反転表示になります)

各ウィンドウには同じファイルの違う場所を表示できます。例えば、上側のウィンドウにはプログラムの変数宣言部を表示し、下の方にはその変数を使っている箇所を表示させる、といったことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The CTRL-W w command can be used to jump between the windows.  If you are in
the top window, CTRL-W w jumps to the window below it.  If you are in the
bottom window it will jump to the first window.  (CTRL-W CTRL-W does the same
thing, in case you let go of the CTRL key a bit later.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{CTRL-W w} コマンドでウィンドウ間をジャンプできます。上側のウィンドウにカーソルがある時に @command{CTRL-W w} を押すとその下のウィンドウにジャンプします。一番下のウィンドウにカーソルがある時は一番上のウィンドウに戻ります。(@kbd{CTRL-W} @kbd{CTRL-W} も同じ動作をするので、@key{CTRL} キーを離すのがちょっと遅れても大丈夫です)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CLOSE THE WINDOW
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ウィンドウを閉じる
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To close a window, use the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを閉じるのは次のコマンドです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:close
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:close
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Actually, any command that quits editing a file works, like ":quit" and "ZZ".
But ":close" prevents you from accidentally exiting Vim when you close the
last window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:quit}" や "@command{ZZ}" のようなファイルを閉じるコマンドでもウィンドウを閉じることができますが、"@command{:close}" を使えば、最後のウィンドウを閉じて Vim を終了してしまうような間違いを防げます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CLOSING ALL OTHER WINDOWS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 他ウィンドウを全部閉じる
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have opened a whole bunch of windows, but now want to concentrate on
one of them, this command will be useful: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウをたくさん開いたときに、どれか 1 つのウィンドウに集中したいと思った場合は、次のコマンドが便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:only
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:only
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This closes all windows, except for the current one.  If any of the other
windows has changes, you will get an error message and that window won't be
closed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルのあるウィンドウを残して全てのウィンドウが閉じます。他のウィンドウに保存されていない変更がある場合には、エラーメッセージが表示され、そのウィンドウは閉じません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.2*	Split a window on another file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.2}
@section ウィンドウを分割してファイルを開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The following command opens a second window and starts editing the given file:
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドを実行すると、2つ目のウィンドウが開き、指定されたファイルの編集が開始されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:split two.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:split two.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you were editing one.c, then the result looks like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、@file{one.c} を編集していたなら、結果は次のようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------+
|/* file two.c */                  |
|~                                 |
|~                                 |
|two.c=============================|
|/* file one.c */                  |
|~                                 |
|one.c=============================|
|                                  |
+----------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To open a window on a new, empty file, use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいウィンドウに新規ファイルを開くには、次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:new
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:new
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can repeat the ":split" and ":new" commands to create as many windows as
you like.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:split}" や "@command{:new}" コマンドを使って好きなだけウィンドウを作成できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.3*	Window size
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.3}
@section ウィンドウのサイズ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":split" command can take a number argument.  If specified, this will be
the height of the new window.  For example, the following opens a new window
three lines high and starts editing the file alpha.c: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:split}" コマンドは数値を引数として取れます。その値は新しいウィンドウの高さとなります。例えば、次のコマンドは 3 行分の高さのウィンドウを作成し、@file{alpha.c} を開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:3split alpha.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:3split alpha.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For existing windows you can change the size in several ways.  When you have a
working mouse, it is easy: Move the mouse pointer to the status line that
separates two windows, and drag it up or down.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウのサイズを変更する方法はいくつかあります。マウスが使えれば話は簡単です。ウィンドウを分割しているステータス行にマウスを動かし、上下にドラッグしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To increase the size of a window: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを大きくするには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-W +
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
CTRL-W +
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To decrease it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
小さくするには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-W -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
CTRL-W -
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Both of these commands take a count and increase or decrease the window size
by that many lines.  Thus "4 CTRL-W +" make the window four lines higher.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
どちらのコマンドも数値を引数として取り、その行数分、ウィンドウサイズを増減します。つまり、"@command{4 CTRL-W +}" ならウィンドウが 4 行分大きくなります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To set the window height to a specified number of lines: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの高さを明示的に指定するには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	{height}CTRL-W _
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
@{height@}CTRL-W _
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That's: a number {height}, CTRL-W and then an underscore (the - key with Shift
on English-US keyboards).
   To make a window as high as it can be, use the CTRL-W _ command without a
count.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{height@} に数値を指定し、@kbd{CTRL-W} と @samp{_} (アンダースコア) を入力します。ウィンドウを最大まで大きくするには、@command{CTRL-W _} コマンドを数値指定なしで実行してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING THE MOUSE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec マウスを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vim you can do many things very quickly from the keyboard.  Unfortunately,
the window resizing commands require quite a bit of typing.  In this case,
using the mouse is faster.  Position the mouse pointer on a status line.  Now
press the left mouse button and drag.  The status line will move, thus making
the window on one side higher and the other smaller.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim では様々なことをキーボードから極めて素早く操作できますが、残念ながら、ウィンドウサイズを変更するのは少し面倒です。この場合、マウスを使う方が簡単です。マウスポインタをステータス行に合せてから左ボタンを押してドラッグしてください。ステータス行が動き、片方のウィンドウが大きくなり、もう片方は小さくなります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
OPTIONS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec オプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'winheight' option can be set to a minimal desired height of a window and
'winminheight' to a hard minimum height.
   Likewise, there is 'winwidth' for the minimal desired width and
'winminwidth' for the hard minimum width.
   The 'equalalways' option, when set, makes Vim equalize the windows sizes
when a window is closed or opened.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{winheight}' オプションにはウィンドウの最小の高さ (それ以上は小さくならない) の希望値を、'@option{winminheight}' には最小の高さの強制値を設定できます。

同様に、'@option{winwidth}' オプションにはウィンドウの最小の幅の希望値を、'@option{winminwidth}' には最小の幅の強制値を設定できます。

'@option{equalalways}' オプションが設定されていると、ウィンドウを閉じたり開いたりするたびに、全てのウィンドウのサイズが同じになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.4*	Vertical splits
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.4}
@section 縦分割
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":split" command creates the new window above the current one.  To make
the window appear at the left side, use: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:split}" コマンドは現在のウィンドウの上側に新しいウィンドウを作ります。ウィンドウを左側に作るには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:vsplit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:vsplit
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
or: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるいは、
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:vsplit two.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:vsplit two.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The result looks something like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
実行後は次のようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+--------------------------------------+
|/* file two.c */   |/* file one.c */  |
|~                  |~                 |
|~                  |~                 |
|~                  |~                 |
|two.c===============one.c=============|
|                                      |
+--------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Actually, the | lines in the middle will be in reverse video.  This is called
the vertical separator.  It separates the two windows left and right of it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
中央の縦棒 (@samp{|}) は実際には反転表示されます。これは縦セパレータと呼ばれ、これによって左右のウィンドウが区切られます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is also the ":vnew" command, to open a vertically split window on a new,
empty file.  Another way to do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを縦分割して新しい空ファイルを作成する "@command{:vnew}" コマンドもあります。次のコマンドでも同じことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:vertical new
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:vertical new
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":vertical" command can be inserted before another command that splits a
window.  This will cause that command to split the window vertically instead
of horizontally.  (If the command doesn't split a window, it works
unmodified.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:vertical}" コマンドは、ウィンドウを分割する他のコマンドにも適用できます。これを指定すると、ウィンドウは横ではなく、縦に分割されるようになります。(ウィンドウを分割しないコマンドの場合は何も変わりません)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MOVING BETWEEN WINDOWS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のウィンドウへの移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since you can split windows horizontally and vertically as much as you like,
you can create almost any layout of windows.  Then you can use these commands
to move between them:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
横でも縦でも好きなようにウィンドウを分割できるので、自在にウィンドウを配置できます。他のウィンドウへ移動するには次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-W h	move to the window on the left
	CTRL-W j	move to the window below
	CTRL-W k	move to the window above
	CTRL-W l	move to the window on the right

	CTRL-W t	move to the TOP window
	CTRL-W b	move to the BOTTOM window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item @kbd{CTRL-W h} @tab 左側のウィンドウに移動
@item @kbd{CTRL-W j} @tab 下側のウィンドウに移動
@item @kbd{CTRL-W k} @tab 上側のウィンドウに移動
@item @kbd{CTRL-W l} @tab 右側のウィンドウに移動
@item
@item @kbd{CTRL-W t} @tab 一番上のウィンドウに移動
@item @kbd{CTRL-W b} @tab 一番下のウィンドウに移動
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will notice the same letters as used for moving the cursor.  And the
cursor keys can also be used, if you like.
   More commands to move to other windows: |Q_wi|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソル移動と同じ文字を使っていることに注目してください。もちろん、矢印キーも使うことができます。

他のウィンドウへ移動するためのコマンドは他にもあります: |@ref{Q_wi}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.5*	Moving windows
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.5}
@section ウィンドウの移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You have split a few windows, but now they are in the wrong place.  Then you
need a command to move the window somewhere else.  For example, you have three
windows like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを分割したが、配置が好ましくなかった場合、ウィンドウをどこか別の場所に動かしたいと思うしょう。例えば、次のように 3 つのウィンドウがあるとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------+
|/* file two.c */                  |
|~                                 |
|~                                 |
|two.c=============================|
|/* file three.c */                |
|~                                 |
|~                                 |
|three.c===========================|
|/* file one.c */                  |
|~                                 |
|one.c=============================|
|                                  |
+----------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Clearly the last one should be at the top.  Go to that window (using CTRL-W w)
and the type this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
明らかに一番下のウィンドウが一番上にくるべきです。一番下のウィンドウに移動して (@kbd{CTRL-W w} を使用)、次のコマンドを入力してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-W K
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
CTRL-W K
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This uses the uppercase letter K.  What happens is that the window is moved to
the very top.  You will notice that K is again used for moving upwards.
   When you have vertical splits, CTRL-W K will move the current window to the
top and make it occupy the full width of the Vim window.  If this is your
layout:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここでは大文字の K を使います。これを実行すると、ウィンドウが一番上に移動します。上への移動に K が使われていることに注目してください。

縦分割しているときに @kbd{CTRL-W K} を使うと、ウィンドウが一番上に移動し、Vim ウィンドウと同じ幅になります。例えば、次のようなレイアウトになっているとします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------------------+
|/* two.c */  |/* three.c */  |/* one.c */  |
|~            |~              |~            |
|~            |~              |~            |
|~            |~              |~            |
|~            |~              |~            |
|~            |~              |~            |
|two.c=========three.c=========one.c========|
|                                           |
+-------------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then using CTRL-W K in the middle window (three.c) will result in:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
中央のウィンドウ (@file{three.c}) で @kbd{CTRL-W K} を実行すると、次のような結果になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------------------+
|/* three.c */                              |
|~                                          |
|~                                          |
|three.c====================================|
|/* two.c */           |/* one.c */         |
|~                     |~                   |
|two.c==================one.c===============|
|                                           |
+-------------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The other three similar commands (you can probably guess these now):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他に同じようなコマンドが 3 つあります。(説明する必要はありませんね)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-W H	move window to the far left
	CTRL-W J	move window to the bottom
	CTRL-W L	move window to the far right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item CTRL-W H @tab ウィンドウを左端に移動
@item CTRL-W J @tab ウィンドウを下端に移動
@item CTRL-W L @tab ウィンドウを右端に移動
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.6*	Commands for all windows
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.6}
@section 全ウィンドウを対象とするコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you have several windows open and you want to quit Vim, you can close
each window separately.  A quicker way is using this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を終了しようと思ったときに、複数のウィンドウが開いていた場合、ウィンドウを 1 つずつ閉じていけば Vim を終了できますが、次のコマンドを使えばもっと速く終了できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:qall
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:qall
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This stands for "quit all".  If any of the windows contain changes, Vim will
not exit.  The cursor will automatically be positioned in a window with
changes.  You can then either use ":write" to save the changes, or ":quit!" to
throw them away.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは "@samp{quit all}" (すべて閉じる) という意味です。まだ保存していないファイルがある場合は、Vim は終了しません。保存していないファイルを表示しているウィンドウにカーソルが自動的に移動するので、"@command{:write}" で保存するか "@command{:quit!}" で変更を破棄するかしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you know there are windows with changes, and you want to save all these
changes, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
未保存のファイルを全て保存するには、次のコマンドを使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:wall
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:wall
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This stands for "write all".  But actually, it only writes files with
changes.  Vim knows it doesn't make sense to write files that were not
changed.
   And then there is the combination of ":qall" and ":wall": the "write and
quit all" command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは "@samp{write all}" (すべて保存) という意味です。とはいっても、実際に保存されるのは変更のあったファイルだけです。変更していないファイルを上書きしても意味がないことを Vim はわかってますから。

"@command{:qall}" と "@command{:wall}" を組み合わせた "@samp{write and quit all}" (すべて保存して終了) コマンドもあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:wqall
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:wqall
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This writes all modified files and quits Vim.
   Finally, there is a command that quits Vim and throws away all changes: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドは、変更されたファイルをすべて保存して Vim を終了します。

最後に、次のコマンドは、すべての変更を破棄して Vim を終了するコマンドです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:qall!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:qall!
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Be careful, there is no way to undo this command!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドはアンドゥできないので、使う時には慎重に！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
OPENING A WINDOW FOR ALL ARGUMENTS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 引数で指定したすべてのファイルをウィンドウで開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To make Vim open a window for each file, start it with the "-o" argument: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それぞれのファイルごとにウィンドウを開くには、起動パラメーターに "-o" を指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -o one.txt two.txt three.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim -o one.txt two.txt three.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This results in:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
結果はこうなります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------+
|file one.txt                   |
|~                              |
|one.txt========================|
|file two.txt                   |
|~                              |
|two.txt========================|
|file three.txt                 |
|~                              |
|three.txt======================|
|                               |
+-------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "-O" argument is used to get vertically split windows.
   When Vim is already running, the ":all" command opens a window for each
file in the argument list.  ":vertical all" does it with vertical splits.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
起動パラメーター "-O" を使えば、ウィンドウが縦分割になります。

Vim が既に起動している場合、"@command{:all}" コマンドを使うと引数リストの各ファイルごとにウィンドウを開くことができます。"@command{:vertical all}" だと縦分割になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.7*	Viewing differences with vimdiff
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.7}
@section vimdiff で差分を表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is a special way to start Vim, which shows the differences between two
files.  Let's take a file "main.c" and insert a few characters in one line.
Write this file with the 'backup' option set, so that the backup file
"main.c~" will contain the previous version of the file.
   Type this command in a shell (not in Vim): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特別な方法で Vim を起動すると、2 つのファイルの差分を表示することができます。例えば、"@file{main.c}" というファイルを開き、どこかの行に文字を挿入したとします。そして、オプション '@option{backup}' を有効にしてファイルを保存しました。バックアップファイル "@file{main.c~}" には変更前のファイルが保存されています。

シェルで (Vim 上ではありません) 次のコマンドを入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vimdiff main.c~ main.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vimdiff main.c~ main.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will start, with two windows side by side.  You will only see the line
in which you added characters, and a few lines above and below it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 つのウィンドウを左右に並べた状態で Vim が起動します。画面には先ほど文字を挿入した行とその前後の数行が表示されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- fold
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- changed line
	|  text		     |	text		  |
	|  text		     |	------------------|  <- deleted line
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- fold
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
 VV           VV
+-----------------------------------------+
|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- 折り畳み
|  text              |  text              |
|  text              |  text              |
|  text              |  text              |
|  text              |  changed text      |  <- 変更された行
|  text              |  text              |
|  text              |  ------------------|  <- 削除された行
|  text              |  text              |
|  text              |  text              |
|  text              |  text              |
|+ +--432 lines: text|+ +--432 lines: text|  <- 折り畳み
|  ~                 |  ~                 |
|  ~                 |  ~                 |
|main.c~==============main.c==============|
|                                         |
+-----------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(This picture doesn't show the highlighting, use the vimdiff command for a
better look.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(上の図は強調表示されてないので、ちゃんと見たければ、@command{vimdiff} コマンドを実行してみてください)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The lines that were not modified have been collapsed into one line.  This is
called a closed fold.  They are indicated in the picture with "<- fold".  Thus
the single fold line at the top stands for 123 text lines.  These lines are
equal in both files.
   The line marked with "<- changed line" is highlighted, and the inserted
text is displayed with another color.  This clearly shows what the difference
is between the two files.
   The line that was deleted is displayed with "---" in the main.c window.
See the "<- deleted line" marker in the picture.  These characters are not
really there.  They just fill up main.c, so that it displays the same number
of lines as the other window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
変更のない行は一行に折り畳まれて表示されます。これを閉じた折り畳みと呼びます。上の図では "@samp{<- 折り畳み}" とある行がそうです。最初の折り畳みは 123 行を折り畳んでいます。それらの行は両方のファイルで一致しています。

"<- 変更された行" とある行は強調表示されていて、挿入した文字列が別の色で表示されています。強調表示されているので、どこが違うのかが一目でわかります。

削除された行は @file{main.c} のウィンドウにあるように "@samp{---}" と表示されます。上の図の、"@samp{<- 削除された行}" とある行を見てください。実際には、そこに文字はありません。その行は、@file{main.c} を別のウィンドウと同じ行数で表示するために使われています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
THE FOLD COLUMN
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 折り畳み表示列
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Each window has a column on the left with a slightly different background.  In
the picture above these are indicated with "VV".  You notice there is a plus
character there, in front of each closed fold.  Move the mouse pointer to that
plus and click the left button.  The fold will open, and you can see the text
that it contains.
   The fold column contains a minus sign for an open fold.  If you click on
this -, the fold will close.
   Obviously, this only works when you have a working mouse.  You can also use
"zo" to open a fold and "zc" to close it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
各ウィンドウの左側に色の違う列があります。上の図では "VV" で示されています。その列の、閉じた折り畳みのある行に、"@samp{+}" 記号が表示されています。マウスポインタをその "@samp{+}" 記号に合わせて、左ボタンをクリックしてください。折り畳みが開き、折り畳まれていたテキストが表示されます。

開いた折り畳みは "@samp{-}" 記号で表示されます。"@samp{-}" 記号をクリックすると折り畳みは閉じます。

当り前ですが、これはマウスが利用できる場合のみ機能します。キーボードの場合は "@command{zo}" で折り畳みを開いたり、"@command{zc}" で閉じたりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DIFFING IN VIM
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Vim の中で差分を取る
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another way to start in diff mode can be done from inside Vim.  Edit the
"main.c" file, then make a split and show the differences: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の中から差分モードを開始する方法もあります。"@file{main.c}" を開いて、ウィンドウを分割し差分を表示するには、次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit main.c
	:vertical diffsplit main.c~ 
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit main.c
:vertical diffsplit main.c~
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":vertical" command is used to make the window split vertically.  If you
omit this, you will get a horizontal split.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:vertical}" コマンドはウィンドウを縦分割するために使用します。使わなかった場合は横分割になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have a patch or diff file, you can use the third way to start diff
mode.  First edit the file to which the patch applies.  Then tell Vim the name
of the patch file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パッチ、または diff ファイルがある場合は、3つめの方法で差分モードを開始できます。最初に、パッチを適用するファイルを開き、次に、Vim にパッチファイルの名前を教えてやります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit main.c
	:vertical diffpatch main.c.diff
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit main.c
:vertical diffpatch main.c.diff
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
WARNING: The patch file must contain only one patch, for the file you are
editing.  Otherwise you will get a lot of error messages, and some files might
be patched unexpectedly.
   The patching will only be done to the copy of the file in Vim.  The file on
your harddisk will remain unmodified (until you decide to write the file).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
パッチファイルは、開いているファイル用のパッチが 1 つだけ含まれているものでなければなりません。そうでない場合は、大量のエラーメッセージが表示されたり、予期せずに、他のファイルにパッチが適用されてしまう場合があります。

パッチ処理は Vim 内部の、ファイルのコピーに対して実行されます。ハードディスク上のファイルは (それを上書きしない限り) 変更されません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
SCROLL BINDING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 同期スクロール
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the files have more changes, you can scroll in the usual way.  Vim will
try to keep both the windows start at the same position, so you can easily see
the differences side by side.
   When you don't want this for a moment, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル間の差分がたくさんある場合、通常どおりスクロールすればそれらを表示できます。もう一方のウィンドウも同じ場所を表示するように自動的にスクロールされるので、簡単に差分を並べて表示できます。

同期スクロールを無効にするには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set noscrollbind
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set noscrollbind
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
JUMPING TO CHANGES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 変更された場所にジャンプする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you have disabled folding in some way, it may be difficult to find the
changes.  Use this command to jump forward to the next change: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みを無効にしている場合、変更された場所を見つけるのは簡単ではありません。次のコマンドを使うと、前方の変更にジャンプできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	]c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
]c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To go the other way use: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
逆方向にジャンプするには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	[c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
[c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Prepended a count to jump further away.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
回数指定を使えば、さらに遠くまでジャンプできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REMOVING CHANGES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 変更を取り除く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can move text from one window to the other.  This either removes
differences or adds new ones.  Vim doesn't keep the highlighting updated in
all situations.  To update it use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウからウィンドウへテキストを移動できます。これによって、差分が増えたり減ったりします。強調表示は自動的に更新されません。更新するには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:diffupdate
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:diffupdate
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To remove a difference, you can move the text in a highlighted block from one
window to another.  Take the "main.c" and "main.c~" example above.  Move the
cursor to the left window, on the line that was deleted in the other window.
Now type this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
差分を取り除くには、強調表示された範囲のテキストをもう一方のウィンドウに移動します。上述の "@file{main.c}" と "@file{main.c~}" の例を使って説明します。左ウィンドウに移動して、もう一方のウィンドウでは削除されている行に移動します。そして、次のコマンドを入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	dp
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
dp
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The change will be removed by putting the text of the current window in the
other window.  "dp" stands for "diff put".
   You can also do it the other way around.  Move the cursor to the right
window, to the line where "changed" was inserted.  Now type this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントウィンドウのテキストがもう一方のウィンドウにプットされ、変更がなくなります。"@command{dp}" は "@samp{diff put}" の意味です。

別の方法でも同じことができます。右のウィンドウに移動して、"changed" が挿入された行に移動します。そして、次のコマンドを入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	do
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
do
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The change will now be removed by getting the text from the other window.
Since there are no changes left now, Vim puts all text in a closed fold.
"do" stands for "diff obtain".  "dg" would have been better, but that already
has a different meaning ("dgg" deletes from the cursor until the first line).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もう一方のファイルからテキストがコピーされ、変更はなくなります。これで変更がなくなってしまったので、すべてのテキストが折り畳まれて表示されます。"@command{do}" は "@samp{diff obtain}" の意味です。意味的には "@command{dg}" の方が良いのですが、それはすでに他で使われています ("dgg" でカーソル位置から最初の行まで削除されます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For details about diff mode, see |vimdiff|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
差分モードの詳細は |@ref{vimdiff}| をご覧ください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*08.8*	Various
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.8}
@section その他
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'laststatus' option can be used to specify when the last window has a
statusline:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{laststatus}' オプションを使うと、最後のウィンドウにステータスラインを表示するかどうかを設定できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	0	never
	1	only when there are split windows (the default)
	2	always
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .9
@item 0 @tab 表示しない
@item 1 @tab 分割ウィンドウがある時だけ表示 (初期設定)
@item 2 @tab 常に表示
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Many commands that edit another file have a variant that splits the window.
For Command-line commands this is done by prepending an "s".  For example:
":tag" jumps to a tag, ":stag" splits the window and jumps to a
tag.
   For Normal mode commands a CTRL-W is prepended.  CTRL-^ jumps to the
alternate file, CTRL-W CTRL-^ splits the window and edits the alternate file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ほとんどの、ファイルを開くコマンドには、ウィンドウを分割するバージョンが存在します。Ex コマンドの場合、先頭に "@samp{s}" が付いています。例えば、"@command{:tag}" はタグジャンプですが、"@command{:stag}" はウィンドウを分割してからタグジャンプします。

ノーマルモードコマンドの場合、@kbd{CTRL-W} を前置します。例えば、@kbd{CTRL-^} はオルタネートファイルへのジャンプですが、@kbd{CTRL-W} @kbd{CTRL-^} はウィンドウを分割してからオルタネートファイルを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'splitbelow' option can be set to make a new window appear below the
current window.  The 'splitright' option can be set to make a vertically split
window appear right of the current window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{splitbelow}' オプションを設定すると、カレントウィンドウの下に新しいウィンドウが作られるようになります。'@option{splitright}' オプションを設定すると、縦分割したときに、カレントウィンドウの右に新しいウィンドウが作られるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When splitting a window you can prepend a modifier command to tell where the
window is to appear:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを分割するときに、次の修飾コマンドを使うと、ウィンドウの位置を指定できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:leftabove {cmd}	left or above the current window
	:aboveleft {cmd}	idem
	:rightbelow {cmd}	right or below the current window
	:belowright {cmd}	idem
	:topleft {cmd}		at the top or left of the Vim window
	:botright {cmd}		at the bottom or right of the Vim window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item :leftabove @{cmd@} @tab カレントウィンドウの左、または上
@item :aboveleft @{cmd@} @tab 同上
@item :rightbelow @{cmd@} @tab カレントウィンドウの右、または下
@item :belowright @{cmd@} @tab 同上
@item :topleft @{cmd@} @tab 上、または左の端
@item :botright @{cmd@} @tab 下、または右の端
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
*08.9*	Tab pages
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{08.9}
@section タブページ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will have noticed that windows never overlap.  That means you quickly run
out of screen space.  The solution for this is called Tab pages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウは重ねることができないので、画面がすぐにいっぱいになってしまいます。それを解決するために、タブページ、というものが用意されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Assume you are editing "thisfile".  To create a new tab page use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@file{thisfile}" というファイルを開いているとしましょう。新しいタブページを作成するために次のコマンドを実行します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:tabedit thatfile
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tabedit thatfile
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will edit the file "thatfile" in a window that occupies the whole Vim
window.  And you will notice a bar at the top with the two file names:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@file{thatfile}" が開かれ、Vim ウィンドウ全体を占める大きさのウィンドウに表示されます。そして、上部にバーが表示され、ファイル名が2つ表示されているのが確認できると思います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------+
	| thisfile | /thatfile/ __________X|    (thatfile is bold)
	|/* thatfile */			   |
	|that				   |
	|that				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------+
| thisfile | /thatfile/ __________X|    (thatfile は太字)
|/* thatfile */                    |
|that                              |
|that                              |
|~                                 |
|~                                 |
|~                                 |
|                                  |
+----------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You now have two tab pages.  The first one has a window for "thisfile" and the
second one a window for "thatfile".  It's like two pages that are on top of
each other, with a tab sticking out of each page showing the file name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは2つのタブページがある状態です。1 つ目のタブページには "@file{thisfile}" を開いているウィンドウが、2つ目のタブページには "@file{thatfile}" を開いているウィンドウが入っています。これは、紙が2枚重なっていて、それぞれの紙にファイル名が書かれたラベルが付いているようなものです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now use the mouse to click on "thisfile" in the top line.  The result is
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスを使って "@file{thisfile}" をクリックしてみましょう。次のようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+----------------------------------+
	| /thisfile/ | thatfile __________X|    (thisfile is bold)
	|/* thisfile */			   |
	|this				   |
	|this				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+----------------------------------+
| /thisfile/ | thatfile __________X|    (thisfile は太字)
|/* thisfile */                    |
|this                              |
|this                              |
|~                                 |
|~                                 |
|~                                 |
|                                  |
+----------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Thus you can switch between tab pages by clicking on the label in the top
line.  If you don't have a mouse or don't want to use it, you can use the "gt"
command.  Mnemonic: Goto Tab.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上部のラベルをクリックすると、タブページを切替えることができます。マウスがない、あるいは使いたくない場合には、"@command{gt}" コマンドでも切替えられます。"@command{gt}" は Goto Tab の略です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now let's create another tab page with the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドを実行し、タブページをもう 1 つ作成してみましょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:tab split
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tab split
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This makes a new tab page with one window that is editing the same buffer as
the window we were in:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウを 1 つもったタブページが作成され、そのウィンドウには、さっきまで開いていたのと同じバッファが表示されています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X|   (thisfile is bold)
	|/* thisfile */			      |
	|this				      |
	|this				      |
	|~				      |
	|~				      |
	|~				      |
	|				      |
	+-------------------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+-------------------------------------+
| thisfile | /thisfile/ | thatfile __X|   (thisfile は太字)
|/* thisfile */                       |
|this                                 |
|this                                 |
|~                                    |
|~                                    |
|~                                    |
|                                     |
+-------------------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can put ":tab" before any Ex command that opens a window.  The window will
be opened in a new tab page.  Another example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:tab}" コマンドは、ウィンドウを開く Ex コマンドと組み合わせて使います。そうすると、ウィンドウは新しいタブページで開かれます。もう 1 つ例をあげます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:tab help gt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:tab help gt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Will show the help text for "gt" in a new tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドを実行すると、"@command{gt}" についてのヘルプが新しいタブページで開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A few more things you can do with tab pages:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページの操作には、他にも次のようなものがあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- click with the mouse in the space after the last label
	The next tab page will be selected, like with "gt".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item 上部バーの最後のラベルより右 (ラベルのないとこ) をマウスでクリック
"@command{gt}" と同じように、次のタブページを選択します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- click with the mouse on the "X" in the top right corner
	The current tab page will be closed.  Unless there are unsaved
	changes in the current tab page.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 上部右端の "X" をクリック
現在のタブページを閉じます。ただし、そのタブページ内に未保存の変更がある場合は閉じません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- double click with the mouse in the top line
	A new tab page will be created.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 上部バーをダブルクリック
新しいタブページを作成します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- the "tabonly" command
	Closes all tab pages except the current one.  Unless there are unsaved
	changes in other tab pages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item "tabonly" コマンド
現在のタブページ以外を閉じます。ただし、それらのタブページ内に未保存の変更がある場合は閉じません。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For more information about tab pages see |tab-page|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タブページについての詳細は |@ref{tab-page}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_09.txt|  Using the GUI

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
