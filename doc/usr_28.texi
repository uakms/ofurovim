@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_28.txt, usr_29.txt, usr_27.txt, 目次
@unnumbered 折り畳み
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_28.txt*	For Vim version 8.0.  Last change: 2008 Jun 14

		     VIM USER MANUAL - by Bram Moolenaar

				   Folding
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*usr_28.txt*	For Vim バージョン 8.0.  Last change: 2008 Jun 14

		     VIM USER MANUAL - by Bram Moolenaar

				   折り畳み
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Structured text can be separated in sections.  And sections in sub-sections.
Folding allows you to display a section as one line, providing an overview.
This chapter explains the different ways this can be done.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
構造化されたテキストはいくつかのセクションから構成され、セクションはさらにサブセクションに分かれています。折り畳みを使うとセクションを 1 行で表示できます。折り畳まれた行にはセクションの概要が表示されます。この章では折り畳みの使い方を説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|28.1|	What is folding?
|28.2|	Manual folding
|28.3|	Working with folds
|28.4|	Saving and restoring folds
|28.5|	Folding by indent
|28.6|	Folding with markers
|28.7|	Folding by syntax
|28.8|	Folding by expression
|28.9|	Folding unchanged lines
|28.10|	Which fold method to use?

     Next chapter: |usr_29.txt|  Moving through programs
 Previous chapter: |usr_27.txt|  Search commands and patterns
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{28.1}| @tab 折り畳みとは
@item |@ref{28.2}| @tab 手動で折り畳む
@item |@ref{28.3}| @tab 折り畳みを使って作業する
@item |@ref{28.4}| @tab 折り畳みの保存と復元
@item |@ref{28.5}| @tab インデントで折り畳む
@item |@ref{28.6}| @tab マーカーで折り畳む
@item |@ref{28.7}| @tab 構文で折り畳む
@item |@ref{28.8}| @tab スクリプトで折り畳む
@item |@ref{28.9}| @tab 変更のない行を折り畳む
@item |@ref{28.10}| @tab どれを使えばいいの？
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.1*	What is folding?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.1}
@cindex 折り畳みとは
@section 折り畳みとは
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folding is used to show a range of lines in the buffer as a single line on the
screen.  Like a piece of paper which is folded to make it shorter:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みとは、バッファ中の複数の行を画面上で 1 行に表示するための機能です。紙を折り畳んで短くするような感じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	+------------------------+
	| line 1		 |
	| line 2		 |
	| line 3		 |
	|_______________________ |
	\			 \
	 \________________________\
	 / folded lines		  /
	/________________________/
	| line 12		 |
	| line 13		 |
	| line 14		 |
	+------------------------+
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
+------------------------+
| line 1                 |
| line 2                 |
| line 3                 |
|_______________________ |
\                        \
 \________________________\
 / folded lines           /
/________________________/
| line 12                |
| line 13                |
| line 14                |
+------------------------+
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The text is still in the buffer, unchanged.  Only the way lines are displayed
is affected by folding.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バッファ内のテキストが消えるわけではありません。折り畳みが影響するのは画面の表示だけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The advantage of folding is that you can get a better overview of the
structure of text, by folding lines of a section and replacing it with a line
that indicates that there is a section.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みを使うと文章構成を把握するのが簡単になります。折り畳まれたセクションは 1 行で表示され、その行にはセクションの概要が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.2*	Manual folding
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.2}
@cindex 手動で折り畳む
@section 手動で折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Try it out: Position the cursor in a paragraph and type: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
実際に試してみましょう。どこかの段落にカーソルを動かして次のように入力します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zfap
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zfap
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will see that the paragraph is replaced by a highlighted line.  You have
created a fold.  |zf| is an operator and |ap| a text object selection.  You
can use the |zf| operator with any movement command to create a fold for the
text that it moved over.  |zf| also works in Visual mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
段落が、ハイライトされた一行に置き換わります。それが折り畳みです。|@ref{zf}| はオペレータです。|@ref{ap}| はテキストオブジェクトによる範囲指定です。|@ref{zf}| はどのカーソル移動コマンドとも組み合わせることができます。カーソルが移動した範囲が折り畳みの対象になります。|@ref{zf}| はビジュアルモードでも使えます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To view the text again, open the fold by typing: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
再びテキストを表示するには、次のコマンドで折り畳みを開きます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zo
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zo
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
And you can close the fold again with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドで折り畳みを閉じることができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zc
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
All the folding commands start with "z".  With some fantasy, this looks like a
folded piece of paper, seen from the side.  The letter after the "z" has a
mnemonic meaning to make it easier to remember the commands:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳み関連のコマンドはすべて "z" で始まります。この文字は、紙を折り畳んで横から見た図に見えますよね。"z" の後ろにはコマンドが連想しやすいような文字が割り当てられています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zf	F-old creation
	zo	O-pen a fold
	zc	C-lose a fold
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item zf @tab 折り畳む (Fold)
@item zo @tab 折り畳みを開く (Open)
@item zc @tab 折り畳みを閉じる (Close)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folds can be nested: A region of text that contains folds can be folded
again.  For example, you can fold each paragraph in this section, and then
fold all the sections in this chapter.  Try it out.  You will notice that
opening the fold for the whole chapter will restore the nested folds as they
were, some may be open and some may be closed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みは入れ子にできます。折り畳まれた行を含んだ範囲をさらに折り畳むことができます。例えば、このセクションの段落をそれぞれ折り畳み、そして、この章のセクション全体を折り畳むということができます。実際に試してください。折り畳みを開いたとき、その中にある折り畳みは、閉じたときと同じ開閉状態のままになっています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have created several folds, and now want to view all the text.
You could go to each fold and type "zo".  To do this faster, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかの折り畳みを作ったときに、すべての折り畳みを開きたくなった場合、それぞれの折り畳みを "zo" で開いていくこともできますが、次のコマンドでもっと簡単にできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zr
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zr
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will R-educe the folding.  The opposite is: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みが減少 (Reduce) します。その逆は "zm" です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zm
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zm
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This folds M-ore.  You can repeat "zr" and "zm" to open and close nested folds
of several levels.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みが増加 (More) します。"zr" と "zm" は入れ子になった折り畳みを一階層ずつ開閉できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have nested several levels deep, you can open all of them with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
入れ子になった折り畳みをいっぺんに開きたい場合は次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zR
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zR
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This R-educes folds until there are none left.  And you can close all folds
with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべての折り畳みが開くまで、折り畳みが減少 (Reduce) します。すべての折り畳みを閉じるには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	zM
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
zM
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This folds M-ore and M-ore.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みが次々と (More and More) 閉じます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can quickly disable the folding with the |zn| command.  Then |zN| brings
back the folding as it was.  |zi| toggles between the two.  This is a useful
way of working:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{zn}| コマンドで折り畳みを無効にできます。無効になった折り畳みは |@ref{zN}| で元に戻ります。|@ref{zi}| で無効と有効を交互に切り替えられます。次のように使うと便利です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- create folds to get overview on your file
- move around to where you want to do your work
- do |zi| to look at the text and edit it
- do |zi| again to go back to moving around
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item ファイルの構造を確認するために折り畳みを作成する
@item 作業したい場所に移動する
@item |@ref{zi}| で折り畳みを無効にして編集作業をする
@item |@ref{zi}| で折り畳みを有効にして別の場所に移動する
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about manual folding in the reference manual: |fold-manual|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
手作業で折り畳みを作成するための詳しい説明はリファレンスマニュアルを参照してください: |@ref{fold-manual}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.3*	Working with folds
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.3}
@cindex 折り畳みを使って作業する
@section 折り畳みを使って作業する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When some folds are closed, movement commands like "j" and "k" move over a
fold like it was a single, empty line.  This allows you to quickly move around
over folded text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みが閉じているとき、"j" や "k" などのコマンドでその上を移動できます。閉じた折り畳みは 1 行の空行のように扱われます。つまり折り畳まれたテキストの上を素早く移動できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can yank, delete and put folds as if it was a single line.  This is very
useful if you want to reorder functions in a program.  First make sure that
each fold contains a whole function (or a bit less) by selecting the right
'foldmethod'.  Then delete the function with "dd", move the cursor and put it
with "p".  If some lines of the function are above or below the fold, you can
use Visual selection:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳まれたテキストは、それが 1 つの行であるかのように、ヤンクしたり削除したりできます。これは例えばプログラムの関数を並べ替えたりするときに便利です。まず '@option{foldmethod}' を正しく設定し、それぞれの関数が適切に折り畳まれるようにします。そして、"dd" で関数を削除し、カーソルを移動して、"p" でプットします。関数の一部が折り畳みからはみ出している場合はビジュアルモードを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- put the cursor on the first line to be moved
- hit "V" to start Visual mode
- put the cursor on the last line to be moved
- hit "d" to delete the selected lines.
- move the cursor to the new position and "p"ut the lines there.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 移動させたい範囲の最初の行に移動
@item "V" でビジュアルモードを開始
@item 移動させたい範囲の最後の行に移動
@item "d" で選択範囲を削除
@item カーソルを移動して、"p" でテキストをプットする
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is sometimes difficult to see or remember where a fold is located, thus
where a |zo| command would actually work.  To see the defined folds: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みを設定した場所 (つまり |@ref{zo}| コマンドが機能する場所) を覚えておくのは大変です。次のコマンドで折り畳みの場所を確認できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldcolumn=4
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldcolumn=4
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will show a small column on the left of the window to indicate folds.
A "+" is shown for a closed fold.  A "-" is shown at the start of each open
fold and "|" at following lines of the fold.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの左側に折り畳みの場所が表示されます。閉じた折り畳みは "+" で表示されます。開いた折り畳みは、1 行目が "-" で表示され、それ以降は "|" で表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use the mouse to open a fold by clicking on the "+" in the foldcolumn.
Clicking on the "-" or a "|" below it will close an open fold.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスで "+" の部分をクリックすると折り畳みが開きます。"-" や "|" の部分をクリックすると折り畳みが閉じます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To open all folds at the cursor line use |zO|.
To close all folds at the cursor line use |zC|.
To delete a fold at the cursor line use |zd|.
To delete all folds at the cursor line use |zD|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item 現在行の折り畳みをすべて開くには |@ref{zO}| を使います。
@item 現在行の折り畳みをすべて閉じるには |@ref{zC}| を使います。
@item 現在行の折り畳みを削除するには |@ref{zd}| を使います。
@item 現在行の折り畳みをすべて削除するには |@ref{zD}| を使います。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When in Insert mode, the fold at the cursor line is never closed.  That allows
you to see what you type!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
挿入モードでは現在行の折り畳みは絶対に閉じません。入力した文字は必ず表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folds are opened automatically when jumping around or moving the cursor left
or right.  For example, the "0" command opens the fold under the cursor
(if 'foldopen' contains "hor", which is the default).  The 'foldopen' option
can be changed to open folds for specific commands.  If you want the line
under the cursor always to be open, do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルをジャンプさせたり左右に動かしたりしたとき、折り畳みは自動的に開きます。例えば "0" コマンドを使うと現在行の折り畳みが開きます ('@option{foldopen}' に "hor" が含まれている場合のみ。初期設定では含まれています)。どのコマンドを使うと折り畳みが開くかは '@option{foldopen}' オプションで設定できます。カーソルが乗っている行の折り畳みを常に開いておきたい場合は次のように設定します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldopen=all
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldopen=all
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Warning: You won't be able to move onto a closed fold then.  You might want to
use this only temporarily and then set it back to the default: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
閉じた折り畳みの上に移動することはできなくなります。この設定を一時的に使い、元に戻したくなったら次のようにします:
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldopen&
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldopen&
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can make folds close automatically when you move out of it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みを自動的に閉じたい場合は次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldclose=all
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldclose=all
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will re-apply 'foldlevel' to all folds that don't contain the cursor.
You have to try it out if you like how this feels.  Use |zm| to fold more and
|zr| to fold less (reduce folds).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルが乗っていないすべての折り畳みに '@option{foldlevel}' が適用されます。このような動作は好き嫌いがあるので実際に試してみてください。折り畳みを増加させたい場合は |@ref{zm}| を、減少させたい場合は |@ref{zr}| を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The folding is local to the window.  This allows you to open two windows on
the same buffer, one with folds and one without folds.  Or one with all folds
closed and one with all folds open.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
折り畳みはウィンドウローカルな設定です。同じファイルを 2 つのウィンドウで表示して、片方では折り畳みを使い、もう片方では普通に表示するということができます。あるいは、片方ですべての折り畳みを閉じ、もう片方ですべての折り畳みを開くこともできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.4*	Saving and restoring folds
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.4}
@cindex 折り畳みの保存と復元
@section 折り畳みの保存と復元
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you abandon a file (starting to edit another one), the state of the folds
is lost.  If you come back to the same file later, all manually opened and
closed folds are back to their default.  When folds have been created
manually, all folds are gone!  To save the folds use the |:mkview| command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを破棄すると折り畳みの情報は失われてしまいます。後で同じファイルを開いたとき、折り畳みの開閉状態は初期状態に戻っています。手動で作成した折り畳みは失われます。折り畳みを保存するには |@ref{:mkview}| コマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:mkview
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:mkview
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will store the settings and other things that influence the view on the
file.  You can change what is stored with the 'viewoptions' option.
When you come back to the same file later, you can load the view again: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの表示に関する設定が保存されます。保存される情報の種類は '@option{viewoptions}' オプションで設定できます。後で同じファイルを開いたときに保存したビューを復元できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:loadview
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:loadview
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can store up to ten views on one file.  For example, to save the current
setup as the third view and load the second view: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つのファイルにつき 10 個までのビューを保存できます。例えば、現在の設定を 3 番に保存して 2 番の設定をロードするには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:mkview 3
	:loadview 2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:mkview 3
:loadview 2
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that when you insert or delete lines the views might become invalid.
Also check out the 'viewdir' option, which specifies where the views are
stored.  You might want to delete old views now and then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
行を挿入したり削除したりすると保存していたビューが使えなくなるかもしれません。ビューの保存場所は '@option{viewdir}' オプションで決まります。必要な場合は自分でビューを削除してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.5*	Folding by indent
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.5}
@cindex インデントで折り畳む
@section インデントで折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Defining folds with |zf| is a lot of work.  If your text is structured by
giving lower level items a larger indent, you can use the indent folding
method.  This will create folds for every sequence of lines with the same
indent.  Lines with a larger indent will become nested folds.  This works well
with many programming languages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{zf}| を使って折り畳みを定義するのは大変です。テキストが階層的にインデントされている場合は、それを使って折り畳むことができます。インデントの深さにしたがって折り畳みが作成され、大きくインデントされた部分は折り畳みが入れ子になります。この方法は多くのプログラミング言語で使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Try this by setting the 'foldmethod' option: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{foldmethod}' オプションを次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldmethod=indent
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldmethod=indent
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Then you can use the |zm| and |zr| commands to fold more and reduce folding.
It's easy to see on this example text:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{zm}| や |@ref{zr}| を使って折り畳みを増減できるようになりました。以下の例文を使うと簡単に確認できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This line is not indented
	This line is indented once
		This line is indented twice
		This line is indented twice
	This line is indented once
This line is not indented
	This line is indented once
	This line is indented once
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
この行はインデントされていない
        この行は一段インデントされている
                この行は二段インデントされている
                この行は二段インデントされている
        この行は一段インデントされている
この行はインデントされていない
        この行は一段インデントされている
        この行は一段インデントされている
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the relation between the amount of indent and the fold depth depends
on the 'shiftwidth' option.  Each 'shiftwidth' worth of indent adds one to the
depth of the fold.  This is called a fold level.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
インデントの量と折り畳みの深さの対応は '@option{shiftwidth}' オプションで決まります。'@option{shiftwidth}' の幅を単位としてインデントが深くなると折り畳みが深くなります。これを折り畳みレベルと呼びます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you use the |zr| and |zm| commands you actually increase or decrease the
'foldlevel' option.  You could also set it directly: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{zr}| や |@ref{zm}| コマンドを使ったとき、実際には '@option{foldlevel}' の値を増減させているのです。自分で設定することもできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldlevel=3
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldlevel=3
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This means that all folds with three times a 'shiftwidth' indent or more will
be closed.  The lower the foldlevel, the more folds will be closed.  When
'foldlevel' is zero, all folds are closed.  |zM| does set 'foldlevel' to zero.
The opposite command |zR| sets 'foldlevel' to the deepest fold level that is
present in the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{shiftwidth}' の幅を単位として、インデントが三段より深い階層の折り畳みが閉じます。設定した値より深い階層の折り畳みが閉じる仕組みです。'@option{foldlevel}' を 0 に設定するとすべての折り畳みが閉じます。|@ref{zM}| を使うと '@option{foldlevel}' が 0 に設定されます。|@ref{zR}| を使うと '@option{foldlevel}' がファイル内の最も深い折り畳みレベルに設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Thus there are two ways to open and close the folds:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
つまり、折り畳みを開閉する方法は 2 つあります
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
(A) By setting the fold level.
    This gives a very quick way of "zooming out" to view the structure of the
    text, move the cursor, and "zoom in" on the text again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item (A) 折り畳みレベルを設定する方法。
この方法は、テキストを "ズームアウト" して文章の構成を眺め、カーソルを動かし、テキストに "ズームイン" するような使い方ができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(B) By using |zo| and |zc| commands to open or close specific folds.
    This allows opening only those folds that you want to be open, while other
    folds remain closed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item (B) |@ref{zo}| や |@ref{zc}| を使って個々の折り畳みを開閉する方法。
他の折り畳みは閉じたままで、必要な折り畳みだけを開くことができます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This can be combined: You can first close most folds by using |zm| a few times
and then open a specific fold with |zo|.  Or open all folds with |zR| and
then close specific folds with |zc|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2 つの方法を組み合わせることもできます。|@ref{zm}| で全体的に折り畳みを閉じてから |@ref{zo}| で特定の折り畳みだけを開く。あるいは、|@ref{zR}| ですべての折り畳みを開いてから |@ref{zc}| で特定の折り畳みを閉じるなど。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
But you cannot manually define folds when 'foldmethod' is "indent", as that
would conflict with the relation between the indent and the fold level.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{foldmethod}' が "@var{indent}" に設定されている場合は手動で折り畳みを定義できません。インデントと折り畳みレベルの関係を保つためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about folding by indent in the reference manual: |fold-indent|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
インデントによる折り畳みの詳しい説明はリファレンスマニュアルを参照してください: |@ref{fold-indent}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.6*	Folding with markers
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.6}
@cindex マーカーで折り畳む
@section マーカーで折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Markers in the text are used to specify the start and end of a fold region.
This gives precise control over which lines are included in a fold.  The
disadvantage is that the text needs to be modified.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストにマーカーを書いて、折り畳みの始点と終点を指定できます。この方法を使うと折り畳みの範囲を明示的に指定できます。ただし、テキストに変更を加える必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Try it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldmethod=marker
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldmethod=marker
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example text, as it could appear in a C program:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
C 言語を使った例文:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/* foobar () {{{ */
	int foobar()
	{
		/* return a value {{{ */
		return 42;
		/* }}} */
	}
	/* }}} */
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/* foobar () {{{ */
int foobar()
{
        /* return a value {{{ */
        return 42;
        /* }}} */
}
/* }}} */
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice that the folded line will display the text before the marker.  This is
very useful to tell what the fold contains.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マーカーの直前に書かれたテキストが折り畳まれた行に表示されるので、折り畳まれたテキストがどのような内容なのかを知ることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It's quite annoying when the markers don't pair up correctly after moving some
lines around.  This can be avoided by using numbered markers.  Example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストを移動したときなどにマーカーの対応がずれてしまうと面倒です。番号付きマーカーを使うと手間が省けます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	/* global variables {{{1 */
	int varA, varB;

	/* functions {{{1 */
	/* funcA() {{{2 */
	void funcA() {}

	/* funcB() {{{2 */
	void funcB() {}
	/* }}}1 */
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
/* global variables {{{1 */
int varA, varB;

/* functions {{{1 */
/* funcA() {{{2 */
void funcA() {}

/* funcB() {{{2 */
void funcB() {}
/* }}}1 */
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At every numbered marker a fold at the specified level begins.  This will make
any fold at a higher level stop here.  You can just use numbered start markers
to define all folds.  Only when you want to explicitly stop a fold before
another starts you need to add an end marker.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
番号付きマーカーを書いた場所から指定レベルの折り畳みが開始します。指定レベルより高いレベルの折り畳みをその場所で区切るという効果もあります。番号付きマーカーは開始マーカーを指定するだけで折り畳みを定義できます。折り畳みを明示的に止めたい場合は終了マーカーを設定する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about folding with markers in the reference manual: |fold-marker|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マーカーによる折り畳みの詳しい説明はリファレンスマニュアルを参照してください: |@ref{fold-marker}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.7*	Folding by syntax
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.7}
@cindex 構文で折り畳む
@section 構文で折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For each language Vim uses a different syntax file.  This defines the colors
for various items in the file.  If you are reading this in Vim, in a terminal
that supports colors, the colors you see are made with the "help" syntax file.
   In the syntax files it is possible to add syntax items that have the "fold"
argument.  These define a fold region.  This requires writing a syntax file
and adding these items in it.  That's not so easy to do.  But once it's done,
all folding happens automatically.
   Here we'll assume you are using an existing syntax file.  Then there is
nothing more to explain.  You can open and close folds as explained above.
The folds will be created and deleted automatically when you edit the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを表示するとき、ファイルの種類に応じた構文ファイルが使われます。構文ファイルにはファイルをカラー表示するための定義が書かれています。例えばこのヘルプファイルは "help" 構文ファイルを使ってカラー表示されています (カラー端末を使っているなら)。

構文ファイルで構文を定義するときに "fold" 属性を指定して折り畳み領域を定義することができます。構文ファイルを書くのは大変ですが、一度作ってしまえば、後は自動的に折り畳みが作成されるようになります。

自分で構文ファイルを作成することはほとんどないと思うので、詳しい説明は省きます。折り畳みを開いたり閉じたりする方法は他と変わりません。ファイルを開くと自動的に折り畳みが作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about folding by syntax in the reference manual: |fold-syntax|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
構文による折り畳みの詳しい説明はリファレンスマニュアルを参照してください: |@ref{fold-syntax}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.8*	Folding by expression
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.8}
@cindex スクリプトで折り畳む
@section スクリプトで折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is similar to folding by indent, but instead of using the indent of a
line a user function is called to compute the fold level of a line.  You can
use this for text where something in the text indicates which lines belong
together.  An example is an e-mail message where the quoted text is indicated
by a ">" before the line.  To fold these quotes use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはインデントによる折り畳みと似ていますが、インデントではなくユーザーが定義した関数を使って折り畳みレベルを計算します。テキストの内容から折り畳みレベルを判断するようなことができます。例えば、メールでは引用したテキストの前に ">" を付けます。それを折り畳むには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldmethod=expr
	:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\s','',\"g\"),'[^>].*','',''))
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@ifnottex
@example
:set foldmethod=expr
:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\s','',\"g\"),'[^>].*','',''))
@end example
@end ifnottex
@iftex
@example
:set foldmethod=expr
:set foldexpr=strlen(substitute(substitute(getline(v:lnum),
\    '\\s','',\"g\"),'[^>].*','',''))
@end example
@end iftex
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can try it out on this text:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のようなテキストが折り畳まれます。試してみてください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
> quoted text he wrote
> quoted text he wrote
> > double quoted text I wrote
> > double quoted text I wrote
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
> 相手が書いた文章
> 相手が書いた文章
> > 相手が引用した私の文章
> > 相手が引用した私の文章
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Explanation for the 'foldexpr' used in the example (inside out):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上記の 'foldexpr' の設定を説明します (呼び出しの深い順番):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   getline(v:lnum)			gets the current line
   substitute(...,'\\s','','g')		removes all white space from the line
   substitute(...,'[^>].*','','')	removes everything after leading '>'s
   strlen(...)				counts the length of the string, which
					is the number of '>'s found
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item getline(v:lnum) @tab 現在行を取得
@item substitute(...,'\\s','','g') @tab 行から空白を削除
@item substitute(...,'[^>].*','','') @tab 先頭の '>' 以降を全て削除
@item strlen(...) @tab 文字の長さ('>' の数)を数える
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that a backslash must be inserted before every space, double quote and
backslash for the ":set" command.  If this confuses you, do >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
":set" コマンドでは、空白とダブルクォートとバックスラッシュのすべてに対してバックスラッシュを前置する必要があります。よくわからないときは:
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldexpr
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldexpr
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
to check the actual resulting value.  To correct a complicated expression, use
the command-line completion: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドで実際に設定された値を確認してください。複雑な式を書いていてそれを修正したい場合は、コマンドライン補完を使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set foldexpr=<Tab>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set foldexpr=<Tab>
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Where <Tab> is a real Tab.  Vim will fill in the previous value, which you can
then edit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
<Tab> は実際の Tab キーです。現在の設定値が入力されるので、それを編集できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the expression gets more complicated you should put it in a function and
set 'foldexpr' to call that function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複雑な式を使いたい場合はその処理を関数にして、'@option{foldexpr}' からはその関数を呼ぶように設定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More about folding by expression in the reference manual: |fold-expr|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
スクリプトにより折り畳みの詳しい説明はリファレンスマニュアルを参照してください: |@ref{fold-expr}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.9*	Folding unchanged lines
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.9}
@cindex 変更のない行を折り畳む
@section 変更のない行を折り畳む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is useful when you set the 'diff' option in the same window.  The
|vimdiff| command does this for you.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{diff}' オプションと合わせて使うと便利です。|@ref{vimdiff}| コマンドを使ったときもこの設定が適用されます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Do this in every window that shows a different version of the same file.  You
will clearly see the differences between the files, while the text that didn't
change is folded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同じファイルの別バージョンを表示しているすべてのウィンドウでこの設定を実行してください。同じ部分は折り畳まれ、違いのある行だけが表示されるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For more details see |fold-diff|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
詳細は |@ref{fold-diff}| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*28.10* Which fold method to use?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{28.10}
@cindex どれを使えばいいの？
@section どれを使えばいいの？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
All these possibilities make you wonder which method you should choose.
Unfortunately, there is no golden rule.  Here are some hints.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いろんな方法があるのでどれを使えばいいか悩んでしまいますね。残念ながら完璧な答えはありません。いくつかヒントを示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If there is a syntax file with folding for the language you are editing, that
is probably the best choice.  If there isn't one, you might try to write it.
This requires a good knowledge of search patterns.  It's not easy, but when
it's working you will not have to define folds manually.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
編集したい言語の構文ファイルが折り畳みに対応している場合は、それを使うのがおそらくベストです。あるいは自分で書いてみるのもいいかもしれません。構文ファイルの作成には検索パターンの詳しい知識が必要です。簡単な仕事ではありませんが、それが動作するようになれば、手動で折り畳みを定義する必要がなくなります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Typing commands to manually fold regions can be used for unstructured text.
Then use the |:mkview| command to save and restore your folds.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストのフォーマットが不定な場合は手動で折り畳みを定義してください。|@ref{:mkview}| を使えば折り畳みを保存したり復元したりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The marker method requires you to change the file.  If you are sharing the
files with other people or you have to meet company standards, you might not
be allowed to add them.
   The main advantage of markers is that you can put them exactly where you
want them.  That avoids that a few lines are missed when you cut and paste
folds.  And you can add a comment about what is contained in the fold.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マーカーを使う方法はファイルにマーカーを書き込む必要があります。他の人とファイルを共有したり、社内のコーディング規約に従う必要がある場合は使えないかもしれません。

マーカーの利点は折り畳みを明示的に設置できることです。折り畳みをカット＆ペーストしたときに前後の不要な行が変更されたりしません。折り畳まれた行に表示されるコメントを指定することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folding by indent is something that works in many files, but not always very
well.  Use it when you can't use one of the other methods.  However, it is
very useful for outlining.  Then you specifically use one 'shiftwidth' for
each nesting level.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
インデントによる折り畳みはたいていのファイルで機能しますが、うまく機能しない場合もあります。他の方法が使えない場合に使ってください。しかしアウトラインを表示する方法としては非常に便利です。'@option{shiftwidth}' の幅ずつインデントを付けて折り畳みレベルを指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folding with expressions can make folds in almost any structured text.  It is
quite simple to specify, especially if the start and end of a fold can easily
be recognized.
   If you use the "expr" method to define folds, but they are not exactly how
you want them, you could switch to the "manual" method.  This will not remove
the defined folds.  Then you can delete or add folds manually.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
スクリプトを使った方法はほとんどの構造化されたテキストを折り畳むことができます。設定方法もシンプルです。折り畳みの開始と終了を認識するのが容易な場合は特に簡単です。

この方法で折り畳みを定義したときに思ったとおりの折り畳みが作成されなかった場合は "manual" に切り替えてみてください。設定を変更しても折り畳みは削除されないので、そのまま手動で折り畳みを削除したり追加したりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_29.txt|  Moving through programs

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
