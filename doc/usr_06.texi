@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_06.txt, usr_07.txt, usr_06.txt, 目次
@unnumbered 構文強調表示
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_06.txt*	For Vim version 8.1.  Last change: 2009 Oct 28

		     VIM USER MANUAL - by Bram Moolenaar

			  Using syntax highlighting
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*usr_06.txt*	For Vim バージョン 8.1.  Last change: 2009 Oct 28

		     VIM USER MANUAL - by Bram Moolenaar

			  構文強調表示
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Black and white text is boring.  With colors your file comes to life.  This
not only looks nice, it also speeds up your work.  Change the colors used for
the different sorts of text.  Print your text, with the colors you see on the
screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
白黒だけのテキストは退屈です。カラー表示すればファイルも生き生き見えてきます。これは単に見た目が良いだけではなく、作業のスピードアップにもつながります。意味のある文字列は違う色で表示しましょう。そして、画面と同じ色で印刷しましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|06.1|	Switching it on
|06.2|	No or wrong colors?
|06.3|	Different colors
|06.4|	With colors or without colors
|06.5|	Printing with colors
|06.6|	Further reading

     Next chapter: |usr_07.txt|  Editing more than one file
 Previous chapter: |usr_05.txt|  Set your settings
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{06.1}| @tab 構文強調表示を有効にする
@item |@ref{06.2}| @tab 色がつかない？変な色になる？
@item |@ref{06.3}| @tab 色を変える
@item |@ref{06.4}| @tab カラーを使う？使わない？
@item |@ref{06.5}| @tab カラー印刷
@item |@ref{06.6}| @tab 詳しい情報
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*06.1*	Switching it on
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.1}
@cindex 構文強調表示を有効にする
@section 構文強調表示を有効にする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It all starts with one simple command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の簡単なコマンドで全てが始まります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:syntax enable
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:syntax enable
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
That should work in most situations to get color in your files.  Vim will
automagically detect the type of file and load the right syntax highlighting.
Suddenly comments are blue, keywords brown and strings red.  This makes it
easy to overview the file.  After a while you will find that black&white text
slows you down!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで、カラー表示になるはずです。ファイルタイプが自動的に特定され、適切な構文強調がロードされます。すると、コメントは青、キーワードは茶色、文字列は赤、といった具合にカラー表示になります。ファイルが見やすくなりましたね。しばらくすると、白黒のテキストがあなたの足を引っ張っていたことに気づくでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you always want to use syntax highlighting, put the ":syntax enable"
command in your |vimrc| file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
常に構文強調表示を使いたい場合は、"@command{:syntax enable}" コマンドを |@ref{vimrc}| ファイルに追加してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want syntax highlighting only when the terminal supports colors, you
can put this in your |vimrc| file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カラー端末のときだけ使いたい場合は、次のコマンドを |@ref{vimrc}| ファイルに追加してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	if &t_Co > 1
	   syntax enable
	endif
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
if &t_Co > 1
   syntax enable
endif
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want syntax highlighting only in the GUI version, put the ":syntax
enable" command in your |gvimrc| file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI バージョンのときだけ使いたい場合は、":syntax enable" を |@ref{gvimrc}| ファイルに追加してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*06.2*	No or wrong colors?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.2}
@cindex 色がつかない？変な色になる？
@section 色がつかない？変な色になる？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There can be a number of reasons why you don't see colors:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カラー表示がうまくいかない理由はいろいろあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Your terminal does not support colors.
	Vim will use bold, italic and underlined text, but this doesn't look
	very nice.  You probably will want to try to get a terminal with
	colors.  For Unix, I recommend the xterm from the XFree86 project:
	|xfree-xterm|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item カラー端末じゃない。
Vim は、太字やイタリック、下線も使えます。でもそれだけではあまりカッコ良くはできません。カラー対応の端末を入手するのがいいでしょう。 Unix なら、XFree86 プロジェクト (|@ref{xfree-xterm}|) の xterm がお勧めです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Your terminal does support colors, but Vim doesn't know this.
	Make sure your $TERM setting is correct.  For example, when using an
	xterm that supports colors: >

		setenv TERM xterm-color
<
	or (depending on your shell): >

		TERM=xterm-color; export TERM

<	The terminal name must match the terminal you are using.  If it
	still doesn't work, have a look at |xterm-color|, which shows a few
	ways to make Vim display colors (not only for an xterm).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item カラー端末であることを Vim が認識できない。
$TERM の設定が正しいかどうかを確認してください。例えば、カラー対応の xterm なら次のように設定します:

@example
setenv TERM xterm-color
@end example

シェルによってはこうかもしれません:

@example
TERM=xterm-color; export TERM
@end example

端末名と実際に使っている端末名は同じでないといけません。それでもうまく動かない場合は、|@ref{xterm-color}| を参照してください。この文書には Vim をカラー表示にする方法がいくつか書いてあります。(xterm に限った文書ではありません)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- The file type is not recognized.
	Vim doesn't know all file types, and sometimes it's near to impossible
	to tell what language a file uses.  Try this command: >

		:set filetype
<
	If the result is "filetype=" then the problem is indeed that Vim
	doesn't know what type of file this is.  You can set the type
	manually: >

		:set filetype=fortran

<	To see which types are available, look in the directory
	$VIMRUNTIME/syntax.  For the GUI you can use the Syntax menu.
	Setting the filetype can also be done with a |modeline|, so that the
	file will be highlighted each time you edit it.  For example, this
	line can be used in a Makefile (put it near the start or end of the
	file): >

		# vim: syntax=make

<	You might know how to detect the file type yourself.  Often the file
	name extension (after the dot) can be used.
	See |new-filetype| for how to tell Vim to detect that file type.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ファイルタイプが識別できなかった。
いくら Vim でも古今東西のファイルタイプをすべて知っているわけではありません。ファイルがどの言語で書かれているかを特定するのが困難な場合もあります。このコマンドを使ってみてください。

@example
:set filetype
@end example

この結果が "filetype=" ならば、ファイルタイプが認識できなかったということです。手動でファイルタイプを指定することもできます。

@example
:set filetype=fortran
@end example

どんなタイプが使えるかは、$VIMRUNTIME/syntax のディレクトリを見てください。GUI なら、[シンタックス]メニューも使えます。

ファイルタイプの設定はモード行 (|@ref{modeline}|) でもできます。モード行で指定すれば、そのファイルを開いたときにカラー表示が必ず設定されます。例えば、@file{Makefile} なら次のように書きます。(ファイルの最初か最後に近い場所に書いてください):

@example
# vim: syntax=make
@end example

あなたはファイルタイプの判定方法を知っているかもしれませんね。ほとんどのファイルは拡張子を見ればファイルタイプがわかります。ファイルタイプを検出して設定する方法については |@ref{new-filetype}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- There is no highlighting for your file type.
	You could try using a similar file type by manually setting it as
	mentioned above.  If that isn't good enough, you can write your own
	syntax file, see |mysyntaxfile|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ファイルタイプ用の構文定義がない。
似ているファイルタイプを手動で設定して使ってみてください。それでも不満な場合は、自分で構文定義ファイルを書くこともできます。詳しくは |@ref{mysyntaxfile}| を参照してください。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Or the colors could be wrong:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
色がおかしい場合:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- The colored text is very hard to read.
	Vim guesses the background color that you are using.  If it is black
	(or another dark color) it will use light colors for text.  If it is
	white (or another light color) it will use dark colors for text.  If
	Vim guessed wrong the text will be hard to read.  To solve this, set
	the 'background' option.  For a dark background: >

		:set background=dark

<	And for a light background: >

		:set background=light

<	Make sure you put this _before_ the ":syntax enable" command,
	otherwise the colors will already have been set.  You could do
	":syntax reset" after setting 'background' to make Vim set the default
	colors again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item 色付きの文字が非常に読みづらい
Vim は使われている背景色を推測します。黒 (もしくは同様の暗色) なら、明るい色で文字を表示します。白 (もしくは同様の明るい色) なら、暗い色で文字を表示します。Vim の予想がはずれると、文字は読みづらくなります。これは '@option{background}' オプションを設定することで解決できます。暗い背景色を使っている場合は、次のように設定してください:

@example
:set background=dark
@end example

明るい背景色なら次のように設定してください:

@example
:set background=light
@end example

このコマンドは "@command{:syntax enable}" より ＊前＊ に実行してください。色が設定された後では意味がありません。後から '@option{background}' を設定した場合は、"@command{:syntax reset}" を実行すると、標準色に戻すことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- The colors are wrong when scrolling bottom to top.
	Vim doesn't read the whole file to parse the text.  It starts parsing
	wherever you are viewing the file.  That saves a lot of time, but
	sometimes the colors are wrong.  A simple fix is hitting CTRL-L.  Or
	scroll back a bit and then forward again.
	For a real fix, see |:syn-sync|.  Some syntax files have a way to make
	it look further back, see the help for the specific syntax file.  For
	example, |tex.vim| for the TeX syntax.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 上に向ってスクロールしたときに色が間違っている
構文解析は、ファイル全体を読んでるわけではありません。画面に表示されているところから、解析は始まります。これだと時間を大幅に節約できるのですが、時には色を間違ってしまいます。直すには単に @kbd{CTRL-L} を押してください。あるいは、少し多めに上スクロールしてから戻ると直ります。

根本的に解決するには、|@ref{:syn-sync}| を参照してください。一部の構文ファイルは、ずっと上の方まで戻って解析をしています。詳しくは個々の構文定義ファイルのヘルプを参照してください。例えば、TeX 用の定義ファイル |@ref{tex.vim}| がそれを行っています。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*06.3*	Different colors				*:syn-default-override*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.3}
@anchor{:syn-default-override}
@cindex 色を変える
@cindex :syn-default-override
@section 色を変える
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you don't like the default colors, you can select another color scheme.  In
the GUI use the Edit/Color Scheme menu.  You can also type the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
標準色が好みでなければ、他の色テーマを使うことができます。GUI ならメニューの [編集]-[色テーマ] が使えます。コマンドで指定することもできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:colorscheme evening
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:colorscheme evening
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"evening" is the name of the color scheme.  There are several others you might
want to try out.  Look in the directory $VIMRUNTIME/colors.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"evening" というのは色テーマの名前です。色テーマは他にもたくさんあります。ディレクトリ $VIMRUNTIME/colors をご覧ください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you found the color scheme that you like, add the ":colorscheme" command
to your |vimrc| file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
好みの色テーマを見つけたら、"@command{:colorscheme}" コマンドを |@ref{vimrc}| ファイルに追加してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You could also write your own color scheme.  This is how you do it:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自分で色テーマを作ることもできます。その手順は次の通りです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Select a color scheme that comes close.  Copy this file to your own Vim
   directory.  For Unix, this should work: >

	!mkdir ~/.vim/colors
	!cp $VIMRUNTIME/colors/morning.vim ~/.vim/colors/mine.vim
<
   This is done from Vim, because it knows the value of $VIMRUNTIME.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
作りたいテーマに近い色テーマを選び、それを自分の Vim ディレクトリにコピーします。Unix なら次のとおりです:

@example
!mkdir ~/.vim/colors
!cp $VIMRUNTIME/colors/morning.vim ~/.vim/colors/mine.vim
@end example

@env{$VIMRUNTIME} は Vim が設定する環境変数なので、このコマンドは Vim から実行してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
2. Edit the color scheme file.  These entries are useful:

	term		attributes in a B&W terminal
	cterm		attributes in a color terminal
	ctermfg		foreground color in a color terminal
	ctermbg		background color in a color terminal
	gui		attributes in the GUI
	guifg		foreground color in the GUI
	guibg		background color in the GUI

   For example, to make comments green: >

	:highlight Comment ctermfg=green guifg=green
<
   Attributes you can use for "cterm" and "gui" are "bold" and "underline".
   If you want both, use "bold,underline".  For details see the |:highlight|
   command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
色テーマファイルを編集します。この一覧が役に立つでしょう:

@multitable @columnfractions .4 .6
@item term
@tab 白黒端末での属性
@item cterm
@tab カラー端末での属性
@item ctermfg
@tab カラー端末での文字色
@item ctermbg
@tab カラー端末での背景色
@item gui
@tab GUI での属性
@item guifg
@tab GUI での文字色
@item guibg
@tab GUI での背景色
@end multitable

例えば、コメントを緑にするにはこのようにします。

@example
:highlight Comment ctermfg=green guifg=green
@end example

"cterm" と "gui" の属性には、"bold" と "underline" が指定できます。両方を指定したい場合は、"bold,underline" のように指定します。詳しくは |@ref{:highlight}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
3. Tell Vim to always use your color scheme.  Put this line in your |vimrc|: >

	colorscheme mine
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
作った色テーマが使われるように設定します。この行を |@ref{vimrc}| に追加してください:

@example
colorscheme mine
@end example
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to see what the most often used color combinations look like, use
this command: >

	:runtime syntax/colortest.vim

You will see text in various color combinations.  You can check which ones are
readable and look nice.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドで、よく使われる色の組み合わせを表示して、見栄えを確認できます:

@example
:runtime syntax/colortest.vim
@end example

いろんな色の組み合せが表示されます。どれが読みやすくて見た目が良いかチェックしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*06.4*	With colors or without colors
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.4}
@cindex カラーを使う？使わない？
@section カラーを使う？使わない？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Displaying text in color takes a lot of effort.  If you find the displaying
too slow, you might want to disable syntax highlighting for a moment: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストをカラーで表示するには、たくさんの計算が必要です。表示が遅すぎると感じたときは、構文強調表示を一時的に止めてみてください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:syntax clear
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:syntax clear
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When editing another file (or the same one) the colors will come back.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のファイル (又は同じファイル) を開くと、再びカラー表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:syn-off*
If you want to stop highlighting completely use: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:syn-off}
@cindex :syn-off
構文強調表示を完全に無効にするには、このようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:syntax off
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:syntax off
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will completely disable syntax highlighting and remove it immediately for
all buffers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで、構文強調表示が無効になり、すべてのバッファが白黒表示になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:syn-manual*
If you want syntax highlighting only for specific files, use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:syn-manual}
@cindex :syn-manual
特定のファイルだけ構文強調表示するには、このようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:syntax manual
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:syntax manual
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will enable the syntax highlighting, but not switch it on automatically
when starting to edit a buffer.  To switch highlighting on for the current
buffer, set the 'syntax' option: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
構文強調表示は有効になりますが、ファイルを開いても、自動的にはカラー表示になりません。'@option{syntax}' オプションを設定すると、カレントバッファがカラー表示になります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set syntax=ON
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set syntax=ON
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
==============================================================================
*06.5*	Printing with colors				*syntax-printing*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.5}
@anchor{syntax-printing}
@cindex カラー印刷
@cindex syntax-printing
@section カラー印刷
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the MS-Windows version you can print the current file with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-Windows では、次のコマンドでファイルを印刷できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:hardcopy
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:hardcopy
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will get the usual printer dialog, where you can select the printer and a
few settings.  If you have a color printer, the paper output should look the
same as what you see inside Vim.  But when you use a dark background the
colors will be adjusted to look good on white paper.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常の印刷ダイアログが表示されるので、プリンタを選択し、設定してください。カラープリンタを使っている場合は、画面に表示されているのと同じように印刷されます。ただし、背景色を暗い色にしている場合は、白い紙に適した色に変更されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are several options that change the way Vim prints:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
印刷方法を変更するには、以下のオプションを設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'printdevice'
	'printheader'
	'printfont'
	'printoptions'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
'@option{printdevice}'
'@option{printheader}'
'@option{printfont}'
'@option{printoptions}'
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To print only a range of lines,  use Visual mode to select the lines and then
type the command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一部の範囲だけ印刷するには、ビジュアルモードで印刷したい範囲を選択し、印刷コマンドを実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	v100j:hardcopy
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
v100j:hardcopy
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"v" starts Visual mode.  "100j" moves a hundred lines down, they will be
highlighted.  Then ":hardcopy" will print those lines.  You can use other
commands to move in Visual mode, of course.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{v}" でビジュアルモードを開始して、"@command{100j}" で 100 行下まで移動すると、その範囲が選択されます。"@command{:hardcopy}" で選択範囲が印刷されます。もちろん、ビジュアルモードでは他のコマンドを使って移動することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This also works on Unix, if you have a PostScript printer.  Otherwise, you
will have to do a bit more work.  You need to convert the text to HTML first,
and then print it from a web browser.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
PostScript プリンタを使っている場合は Unix でも同様に印刷できます。PostScript を印刷できない場合は多少の手間がかかります。テキストを HTML に変換してから Web ブラウザーで印刷してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Convert the current file to HTML with this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のファイルを HTML に変換するには次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:TOhtml
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:TOhtml
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In case that doesn't work: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
動かない場合は次のコマンドを試してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:source $VIMRUNTIME/syntax/2html.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:source $VIMRUNTIME/syntax/2html.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will see it crunching away, this can take quite a while for a large file.
Some time later another window shows the HTML code.  Now write this somewhere
(doesn't matter where, you throw it away later):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カリカリと音を立て処理が開始します。巨大なファイルの変換にはしばらく時間がかかります。しばらくすると別ウィンドウに HTMLコードが表示されるので、どこかに保存してください (後で削除するファイルなので、適当な場所に保存してください):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
>
	:write main.c.html
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:write main.c.html
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Open this file in your favorite browser and print it from there.  If all goes
well, the output should look exactly as it does in Vim.  See |2html.vim| for
details.  Don't forget to delete the HTML file when you are done with it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このファイルをお好みのブラウザーで開いて印刷してください。うまくいけば、Vim の画面での表示と全く同じものが印刷されます。詳しくは |@ref{2html.vim}| を参照してください。全てが終わったら、HTML ファイルは削除してしまいましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Instead of printing, you could also put the HTML file on a web server, and let
others look at the colored text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
印刷する代わりに、HTML ファイルを Web サーバーに置いて、他の人にカラー付きの文書として提供することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*06.6*	Further reading
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{06.6}
@cindex 詳しい情報
@section 詳しい情報
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|usr_44.txt|  Your own syntax highlighted.
|syntax|      All the details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item |@ref{usr_44.txt}| @tab 構文定義の自作
@item |@ref{syntax}| @tab 全ての詳細
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_07.txt|  Editing more than one file

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
