@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@node 言語を選択する, Vim のインストール, 構文ファイルを作成する, 目次
@unnumbered 言語を選択する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_45.txt*	For Vim version 8.0.  Last change: 2008 Nov 15

		     VIM USER MANUAL - by Bram Moolenaar

			     Select your language
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{usr_45.txt}
@cindex usr_45.txt
@verbatim
*usr_45.txt*	For Vim バージョン 8.0.  Last change: 2008 Nov 15

		     VIM USER MANUAL - by Bram Moolenaar

				言語を選択する
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The messages in Vim can be given in several languages.  This chapter explains
how to change which one is used.  Also, the different ways to work with files
in various languages is explained.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のメッセージは言語を変更できます。本章では、言語を変更する方法を説明します。様々な言語で書かれたファイルを取り扱う方法も説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|45.1|	Language for Messages
|45.2|	Language for Menus
|45.3|	Using another encoding
|45.4|	Editing files with a different encoding
|45.5|	Entering language text

     Next chapter: |usr_90.txt|  Installing Vim
 Previous chapter: |usr_44.txt|  Your own syntax highlighted
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@menu
* メッセージの言語::                           45.1
* メニューの言語::                             45.2
* 他のエンコーディングを使う::                 45.3
* 異なるエンコーディングのファイルを編集する:: 45.4
* 言語のテキストを入力する::                   45.5
@end menu
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*45.1*	Language for Messages
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{45.1}
@node メッセージの言語
@section メッセージの言語
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you start Vim, it checks the environment to find out what language you
are using.  Mostly this should work fine, and you get the messages in your
language (if they are available).  To see what the current language is, use
this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動すると、あなたが使っている言語を知るために環境がチェックされます。ほとんどの場合、この処理はうまく動作します。そして、メッセージはあなたの言語で表示されます (それが利用可能なら)。現在の言語を確認するには、次のコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:language
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:language
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If it replies with "C", this means the default is being used, which is
English.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"C" と表示された場合は、デフォルト (英語) が使われています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Using different languages only works when Vim was compiled to handle
	it.  To find out if it works, use the ":version" command and check the
	output for "+gettext" and "+multi_lang".  If they are there, you are
	OK.  If you see "-gettext" or "-multi_lang" you will have to find
	another Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
異なる言語を扱えるのは、Vim のコンパイル時にその機能が有効にされた場合だけです。機能の有無は、"@command{:version}" コマンドを実行し、"@var{+gettext}" と "@var{+multi_lang}" の表示を確認してください。それが表示されていれば問題ありません。"@var{-gettext}" か "@var{-multi_lang}" と表示された場合は他の Vim を探してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
What if you would like your messages in a different language?  There are
several ways.  Which one you should use depends on the capabilities of your
system.
   The first way is to set the environment to the desired language before
starting Vim.  Example for Unix: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
異なる言語でメッセージを表示する方法はいくつかあります。どの方法を使うかはシステムによって違います。
一つ目は、Vim を起動する前に使用したい言語を環境変数に設定する方法です。Unix の場合の例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	env LANG=de_DE.ISO_8859-1  vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
env LANG=de_DE.ISO_8859-1  vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This only works if the language is available on your system.  The advantage is
that all the GUI messages and things in libraries will use the right language
as well.  A disadvantage is that you must do this before starting Vim.  If you
want to change language while Vim is running, you can use the second method: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この方法は、指定した言語がシステムでサポートされている場合のみ使えます。この方法の利点は、GUI や何かのライブラリのメッセージも適切な言語で表示されることです。欠点は、Vim を起動する前に環境変数を設定しなければならないことです。Vim の実行中に言語を変更したい場合は、2 つ目の方法を使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:language fr_FR.ISO_8859-1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:language fr_FR.ISO_8859-1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This way you can try out several names for your language.  You will get an
error message when it's not supported on your system.  You don't get an error
when translated messages are not available.  Vim will silently fall back to
using English.
   To find out which languages are supported on your system, find the
directory where they are listed.  On my system it is "/usr/share/locale".  On
some systems it's in "/usr/lib/locale".  The manual page for "setlocale"
should give you a hint where it is found on your system.
   Be careful to type the name exactly as it should be.  Upper and lowercase
matter, and the '-' and '_' characters are easily confused.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この方法では言語の名前をいくつか試すことになるかもしれません。システムでサポートされていない名前を使うとエラーメッセージが表示されます。翻訳されたメッセージが利用可能でない場合はエラーメッセージは表示されません。Vim は静かに英語を選択します。
利用可能な言語の一覧を調べるには、その一覧が入っているディレクトリを探してください。私のシステムでは "/usr/share/locale" にあります。"/usr/lib/locale" に入っているシステムもあります。"setlocale" のマニュアルページにディレクトリの場所を示すヒントがあるかもしれません。
言語の名前は正確に入力してください。大文字と小文字の違いは重要です。"-" と "_" は間違えやすいので注意してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can also set the language separately for messages, edited text and the
time format.  See |:language|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メッセージ、編集するテキスト、時間の書式など、それぞれに別の言語を設定できます。|:language| 参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DO-IT-YOURSELF MESSAGE TRANSLATION
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 自分でメッセージを翻訳する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If translated messages are not available for your language, you could write
them yourself.  To do this, get the source code for Vim and the GNU gettext
package.  After unpacking the sources, instructions can be found in the
directory src/po/README.txt.
   It's not too difficult to do the translation.  You don't need to be a
programmer.  You must know both English and the language you are translating
to, of course.
   When you are satisfied with the translation, consider making it available
to others.  Upload it at vim-online (http://vim.sf.net) or e-mail it to
the Vim maintainer <maintainer@vim.org>.  Or both.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あなたの言語の翻訳メッセージが用意されていない場合、自分で翻訳することもできます。それには、Vim のソースコードと GNU gettext パッケージを入手してください。ソースを展開すると、@file{src/po/README.txt} に説明が入っています。
翻訳作業はそれほど難しくありません。プログラマでなくても大丈夫です。しかし当然ですが、英語と翻訳先の言語を両方知っている必要はあります。
納得のいく翻訳ができたら、それを他の人にも提供してもらえないでしょうか。vim-online (@url{http://vim.sf.net}) にアップロードするか、Vim のメンテナー <@email{maintainer@@vim.org}> にメールを送ってください。両方でも構いません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*45.2*	Language for Menus
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{45.2}
@node メニューの言語
@section メニューの言語
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The default menus are in English.  To be able to use your local language, they
must be translated.  Normally this is automatically done for you if the
environment is set for your language, just like with messages.  You don't need
to do anything extra for this.  But it only works if translations for the
language are available.
   Suppose you are in Germany, with the language set to German, but prefer to
use "File" instead of "Datei".  You can switch back to using the English menus
this way: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトのメニューは英語です。メニューが翻訳されていれば、あなたの国の言語で表示することができます。メッセージと同様、環境が設定してあれば、自動的に適切な言語が選択されます。そのために何かを設定する必要はありません。メニューが翻訳されていれば動作します。
例えば、ドイツに住んでいてドイツ語を使っているにも関わらず、"Datei" ではなく"File" と表示したい場合、次のコマンドでメニューを英語に戻すことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set langmenu=none
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set langmenu=none
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is also possible to specify a language: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特定の言語を選択することもできます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set langmenu=nl_NL.ISO_8859-1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set langmenu=nl_NL.ISO_8859-1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Like above, differences between "-" and "_" matter.  However, upper/lowercase
differences are ignored here.
   The 'langmenu' option must be set before the menus are loaded.  Once the
menus have been defined changing 'langmenu' has no direct effect.  Therefore,
put the command to set 'langmenu' in your vimrc file.
   If you really want to switch menu language while running Vim, you can do it
this way: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
前述したように、"-" と "_" の違いは重要です。ただし、この場合は大文字と小文字の違いは無視されます。
'@option{langmenu}' オプションはメニューがロードされる前に設定する必要があります。メニューが定義された後では、単に '@option{langmenu}' を設定しただけでは何も変更されません。ですから、'@option{langmenu}' は @file{vimrc} ファイルの中で設定してください。
どうしても Vim の実行中にメニューの言語を変更したい場合は、次の手順を実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:source $VIMRUNTIME/delmenu.vim
:set langmenu=de_DE.ISO_8859-1
:source $VIMRUNTIME/menu.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is one drawback: All menus that you defined yourself will be gone.  You
will need to redefine them as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ただし、ユーザーが自分で定義したメニューは失われてしまうので、それらを再定義する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DO-IT-YOURSELF MENU TRANSLATION
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自分でメニューを翻訳する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see which menu translations are available, look in this directory:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
利用可能な翻訳済みメニューは、次のディレクトリにあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	$VIMRUNTIME/lang ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
$VIMRUNTIME/lang
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The files are called menu_{language}.vim.  If you don't see the language you
want to use, you can do your own translations.  The simplest way to do this is
by copying one of the existing language files, and change it.
   First find out the name of your language with the ":language" command.  Use
this name, but with all letters made lowercase.  Then copy the file to your
own runtime directory, as found early in 'runtimepath'.  For example, for Unix
you would do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルは @file{menu_@{language@}.vim} という名前になっています。使用したい言語がない場合は自分で翻訳することもできます。最も簡単なのは、既存のファイルをコピーして、それを変更する方法です。
まず、あなたの言語の名前を "@command{:language}" コマンドで確認してください。その名前を使います。ただし、すべてを小文字にします。そして、ファイルを自分のランタイムディレクトリにコピーします ('@option{runtimepath}' の早めに見つかるように)。例えば、Unix なら次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You will find hints for the translation in "$VIMRUNTIME/lang/README.txt".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@env{$VIMRUNTIME}/lang/@file{README.txt}" には翻訳のヒントが書かれています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*45.3*	Using another encoding
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{45.3}
@node 他のエンコーディングを使う
@section 他のエンコーディングを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim guesses that the files you are going to edit are encoded for your
language.  For many European languages this is "latin1".  Then each byte is
one character.  That means there are 256 different characters possible.  For
Asian languages this is not sufficient.  These mostly use a double-byte
encoding, providing for over ten thousand possible characters.  This still
isn't enough when a text is to contain several different languages.  This is
where Unicode comes in.  It was designed to include all characters used in
commonly used languages.  This is the "Super encoding that replaces all
others".  But it isn't used that much yet.
   Fortunately, Vim supports these three kinds of encodings.  And, with some
restrictions, you can use them even when your environment uses another
language than the text.
   Nevertheless, when you only edit files that are in the encoding of your
language, the default should work fine and you don't need to do anything.  The
following is only relevant when you want to edit different languages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを開くとき、そのファイルはユーザーの言語のエンコーディングで保存されているものと推測されます。多くのヨーロッパ系言語では "latin1" が使われます。その場合、1 バイトで 1 文字を表すので、合計 256 個の文字を扱えます。アジア系言語の場合はそれでは足りません。それらの言語はダブルバイトエンコーディングを使って、1 万以上の文字を扱います。それでも、複数の言語を混在させるには十分ではありません。そういうときは Unicode の出番です。Unicode は一般的に使われている言語の文字をすべて網羅しています。Unicode は "他のすべてのエンコーディングに取って代わるスーパーエンコーディング" なのです。しかしまだ広くは普及していません。
Vim はこのような 3 種類のエンコーディングをサポートしています。そして、多少の制限はありますが、使用している言語とは違う言語のテキストを扱うことができます。
とはいえ、自分の言語のテキストだけを扱う場合は、Vim は何も設定しなくても適切に動作します。以下の説明は、他の言語のテキストを編集したい場合にだけ必要です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Using different encodings only works when Vim was compiled to handle
	it.  To find out if it works, use the ":version" command and check the
	output for "+multi_byte".  If it's there, you are OK.  If you see
	"-multi_byte" you will have to find another Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
他のエンコーディングを使うには、Vim のコンパイル時にその機能を有効にしておく必要があります。有効かどうかは、"@command{:version}" コマンドの出力を見て "@var{+multi_byte}" の表示を確認してください。表示されていれば有効です。"@var{-multi_byte}" と表示されている場合は他の Vim を探してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING UNICODE IN THE GUI
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec GUI で Unicode を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The nice thing about Unicode is that other encodings can be converted to it
and back without losing information.  When you make Vim use Unicode
internally, you will be able to edit files in any encoding.
   Unfortunately, the number of systems supporting Unicode is still limited.
Thus it's unlikely that your language uses it.  You need to tell Vim you want
to use Unicode, and how to handle interfacing with the rest of the system.
   Let's start with the GUI version of Vim, which is able to display Unicode
characters.  This should work: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unicode には他のエンコーディングと相互に変換しても情報が欠落しないという長所があります。Vim の内部で Unicode を使うように設定すれば、あらゆるエンコーディングのファイルを編集することができます。
残念ながら、Unicode をサポートしているシステムはまだ限られています。言語のエンコーディングが Unicode になっていることはまれです。その場合、Unicode の使用を宣言し、非 Unicode システムと協調方法を設定する必要があります。
まずは、(Unicode文字を表示可能な) GUI 版の Vim を設定します。次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set encoding=utf-8
:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'encoding' option tells Vim the encoding of the characters that you use.
This applies to the text in buffers (files you are editing), registers, Vim
script files, etc.  You can regard 'encoding' as the setting for the internals
of Vim.
   This example assumes you have this font on your system.  The name in the
example is for the X Window System.  This font is in a package that is used to
enhance xterm with Unicode support.  If you don't have this font, you might
find it here:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' オプションに使用したいエンコーディングを設定します。これは、バッファ (編集中のファイル) のテキスト、レジスタ、Vim script ファイル、などに使われます。'@option{encoding}' は Vim の内部エンコーディングであると言えます。
この例では、設定しているフォントがシステムに存在することを前提にしています。例で使用されているのは X Window System のフォント名です。このフォントは Unicode をサポートした拡張 xterm で使われるパッケージに入っています。フォントがない場合は、次の場所から入手できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@url{http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For MS-Windows, some fonts have a limited number of Unicode characters.  Try
using the "Courier New" font.  You can use the Edit/Select Font... menu to
select and try out the fonts available.  Only fixed-width fonts can be used
though.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-Windows では、Unicode 文字を部分的に持っているフォントがいくつかあります。"Courier New" フォントを試してみてください。メニューの 編集/フォント設定 を使うと、利用可能な一覧からフォントを選択できます。使用できるのは等幅フォントのみです。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set guifont=courier_new:h12
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set guifont=courier_new:h12
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If it doesn't work well, try getting a fontpack.  If Microsoft didn't move it,
you can find it here:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これがうまくいかない場合は、フォントパックを入手してください。Microsoft が場所を変更していなければ、次の場所にあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	http://www.microsoft.com/typography/fonts/default.aspx ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@url{http://www.microsoft.com/typography/fonts/default.aspx}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you have told Vim to use Unicode internally and display text with a
Unicode font.  Typed characters still arrive in the encoding of your original
language.  This requires converting them to Unicode.  Tell Vim the language
from which to convert with the 'termencoding' option.  You can do it like
this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、内部エンコーディングを Unicode にして、Unicode フォントでテキスト表示するように設定できました。しかし、入力される文字はまだ元の言語のエンコーディングのままです。入力を Unicode に変換する必要があります。'@option{termencoding}' オプションに入力のエンコーディングを設定します。次のように設定します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:let &termencoding = &encoding
	:set encoding=utf-8
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:let &termencoding = &encoding
:set encoding=utf-8
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This assigns the old value of 'encoding' to 'termencoding' before setting
'encoding' to utf-8.  You will have to try out if this really works for your
setup.  It should work especially well when using an input method for an Asian
language, and you want to edit Unicode text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{encoding}' に utf-8 を設定する前に、元の値を '@option{termencoding}' に代入しています。この設定が動作するかどうか、実際にあなたの環境で試してください。特に、アジア系言語の入力メソッドを使って Unicode のテキストを編集したい場合は、正しく動作する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING UNICODE IN A UNICODE TERMINAL
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Unicode 端末で Unicode を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are terminals that support Unicode directly.  The standard xterm that
comes with XFree86 is one of them.  Let's use that as an example.
   First of all, the xterm must have been compiled with Unicode support.  See
|UTF8-xterm| how to check that and how to compile it when needed.
   Start the xterm with the "-u8" argument.  You might also need so specify a
font.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unicode をサポートしている端末がいくつかあります。XFree86 に付属の標準 xterm もその一つです。ここではそれを使って説明します。
まず何よりも、xterm が Unicode サポート付きでコンパイルされている必要があります。|UTF8-xterm| を参照し、その確認方法と、必要ならコンパイル方法も確認してください。
xterm に "-u8" 引数を付けて起動します。フォントを指定する必要もあるかもしれません。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can run Vim inside this terminal.  Set 'encoding' to "utf-8" as
before.  That's all.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この端末の中で Vim を実行します。前述したように '@option{encoding}' を "utf-8" に設定してください。設定は以上です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING UNICODE IN AN ORDINARY TERMINAL
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 普通の端末で Unicode を使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you want to work with Unicode files, but don't have a terminal with
Unicode support.  You can do this with Vim, although characters that are not
supported by the terminal will not be displayed.  The layout of the text
will be preserved.  >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unicode をサポートしていない端末で Unicode ファイルを取り扱うことができます。ただし、端末でサポートされていない文字は表示されません。テキストのレイアウトは失われません:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:let &termencoding = &encoding
	:set encoding=utf-8
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:let &termencoding = &encoding
:set encoding=utf-8
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is the same as what was used for the GUI.  But it works differently: Vim
will convert the displayed text before sending it to the terminal.  That
avoids that the display is messed up with strange characters.
   For this to work the conversion between 'termencoding' and 'encoding' must
be possible.  Vim will convert from latin1 to Unicode, thus that always works.
For other conversions the |+iconv| feature is required.
   Try editing a file with Unicode characters in it.  You will notice that Vim
will put a question mark (or underscore or some other character) in places
where a character should be that the terminal can't display.  Move the cursor
to a question mark and use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは GUI での設定と同じです。しかし作用は違います。Vim はテキストを表示するときに、端末に文字を送る前に、それを変換します。それによって、端末の文字化けを防ぐことができます。
これには、'@option{termencoding}' と '@option{encoding}' の間での変換が可能である必要があります。latin1 から Unicode への変換は Vim の内部で行われるので常に機能します。他の変換には |+iconv| 機能が必要です。
実際に Unicode のテキストを編集してみてください。端末に表示できない文字は、クエスチョンマーク (あるいはアンダースコアや他の文字) として表示されます。クエスチョンマークの上にカーソルを動かして次のコマンドを実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ga
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
ga
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will display a line with the code of the character.  This gives you a hint
about what character it is.  You can look it up in a Unicode table.  You could
actually view a file that way, if you have lots of time at hand.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文字コード情報が表示されます。そこに実際に格納されている文字を知るヒントになります。文字コードを Unicode の表から調べることもできます。時間さえあれば、実際にこの方法でファイルを見ることも可能です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Since 'encoding' is used for all text inside Vim, changing it makes
	all non-ASCII text invalid.  You will notice this when using registers
	and the 'viminfo' file (e.g., a remembered search pattern).  It's
	recommended to set 'encoding' in your vimrc file, and leave it alone.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{encoding}' は Vim 内部のすべてのテキストで使われるので、設定を変更すると 非 ASCII のテキストは不正になってしまいます。レジスタの中身や '@option{viminfo}' ファイル (例えば記録された検索パターン) などで確認できます。'@option{encoding}' は vimrc ファイルの中で設定し、それ以外では変更しないことが推奨されています。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*45.4*	Editing files with a different encoding
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{45.4}
@node 異なるエンコーディングのファイルを編集する
@section 異なるエンコーディングのファイルを編集する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you have setup Vim to use Unicode, and you want to edit a file that is
in 16-bit Unicode.  Sounds simple, right?  Well, Vim actually uses utf-8
encoding internally, thus the 16-bit encoding must be converted, since there
is a difference between the character set (Unicode) and the encoding (utf-8 or
16-bit).
   Vim will try to detect what kind of file you are editing.  It uses the
encoding names in the 'fileencodings' option.  When using Unicode, the default
value is: "ucs-bom,utf-8,latin1".  This means that Vim checks the file to see
if it's one of these encodings:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unicode を使うように設定された Vim で 16-bit Unicode のファイルを開く場合、実際には Vim の内部では utf-8 が使われているので、エンコーディングの変換が必要になります。文字セット (Unicode) とエンコーディング (utf-8 or 16-bit) は別ものなのです。
ファイルを開くとき、Vim はファイルのエンコーディングを判別しようとします。それには '@option{fileencodings}' オプションが使われます。Unicode を使っているときは、その初期設定は "@var{ucs-bom,utf-8,latin1}" です。この設定を使ってファイルのエンコーディングがチェックされます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	ucs-bom		File must start with a Byte Order Mark (BOM).  This
			allows detection of 16-bit, 32-bit and utf-8 Unicode
			encodings.
	utf-8		utf-8 Unicode.  This is rejected when a sequence of
			bytes is illegal in utf-8.
	latin1		The good old 8-bit encoding.  Always works.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .7
@item @tab ucs-bom @tab ファイルの先頭がバイトオーダーマーク (BOM) で開始する場合。Unicode の 16-bit、32-bit、utf-8 エンコーディングを判別できます。
@item @tab utf-8 @tab utf-8 Unicode。utf-8 として不正なバイトがあった場合は拒否されます。
@item @tab latin1 @tab 古き良き 8-bit エンコーディング。常に有効です。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you start editing that 16-bit Unicode file, and it has a BOM, Vim will
detect this and convert the file to utf-8 when reading it.  The 'fileencoding'
option (without s at the end) is set to the detected value.  In this case it
is "utf-16le".  That means it's Unicode, 16-bit and little-endian.  This
file format is common on MS-Windows (e.g., for registry files).
   When writing the file, Vim will compare 'fileencoding' with 'encoding'.  If
they are different, the text will be converted.
   An empty value for 'fileencoding' means that no conversion is to be done.
Thus the text is assumed to be encoded with 'encoding'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
16-bit Unicode ファイルを開いたとき、BOM が付いていたなら、エンコーディングが判別され、ファイルは utf-8 に変換されながら読み込まれます。'@option{fileencoding}' (末尾に s なし) には判別されたエンコーディングが設定されます。この場合は "utf-16le" になります。"utf-16le" はリトルエンディアンの 16-bit Unicode を意味します。これは MS-Windows での一般的な形式です (例えばレジストリファイルなど)。
ファイルを保存するとき、'@option{fileencoding}' と '@option{encoding}' が比較され、それが違っていた場合は、テキストが変換されます。
'@option{fileencoding}' の値が空の場合は変換は実行されません。つまり、テキストは '@option{encoding}' でエンコードするものと判断されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the default 'fileencodings' value is not good for you, set it to the
encodings you want Vim to try.  Only when a value is found to be invalid will
the next one be used.  Putting "latin1" first doesn't work, because it is
never illegal.  An example, to fall back to Japanese when the file doesn't
have a BOM and isn't utf-8: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{fileencodings}' の初期設定が良くない場合は、チェックさせたいエンコーディングを自分で設定してください。設定の最初から順番に変換が試行されます。"latin1" を先頭に置くとうまく動作しません。それは "latin1" の変換が失敗することがないからです。例えば次の設定では、BOM がなく、utf-8 でもない場合に、Shift_JIS が使われます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set fileencodings=ucs-bom,utf-8,sjis
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set fileencodings=ucs-bom,utf-8,sjis
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |encoding-values| for suggested values.  Other values may work as well.
This depends on the conversion available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
エンコーディングの名前は |encoding-values| を参照してください。それ以外の名前も使えます。使用できる名前は変換ライブラリに依存します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
FORCING AN ENCODING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec エンコーディングを強制する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the automatic detection doesn't work you must tell Vim what encoding the
file is.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自動判別が機能しない場合は、エンコーディングを指定する必要があります。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit ++enc=koi8-r russian.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit ++enc=koi8-r russian.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "++enc" part specifies the name of the encoding to be used for this file
only.  Vim will convert the file from the specified encoding, Russian in this
example, to 'encoding'.  'fileencoding' will also be set to the specified
encoding, so that the reverse conversion can be done when writing the file.
   The same argument can be used when writing the file.  This way you can
actually use Vim to convert a file.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"++enc" を使ってファイルのエンコーディングを指定します。ファイルは指定されたエンコーディング (例ではロシア語) から '@option{encoding}' に変換されます。'@option{fileencoding}' は指定されたエンコーディングに設定されるので、保存するときには逆の変換が実行されます。
ファイルを保存するときにも同じ引数が使えます。すなわち Vim をコード変換ツールとして使うこともできます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:write ++enc=utf-8 russian.txt
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:write ++enc=utf-8 russian.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note:
	Conversion may result in lost characters.  Conversion from an encoding
	to Unicode and back is mostly free of this problem, unless there are
	illegal characters.  Conversion from Unicode to other encodings often
	loses information when there was more than one language in the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
変換によって一部の文字が失われることがあります。任意のエンコーディングから Unicode に変換し、それを元に戻す場合は、不正な文字が入っていない限り、そのような問題はほとんどありません。多言語で書かれたファイルを Unicode から他のエンコーディングに変換すると、情報が失われます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*45.5*	Entering language text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{45.5}
@node 言語のテキストを入力する
@section 言語のテキストを入力する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Computer keyboards don't have much more than a hundred keys.  Some languages
have thousands of characters, Unicode has over hundred thousand.  So how do
you type these characters?
   First of all, when you don't use too many of the special characters, you
can use digraphs.  This was already explained in |24.9|.
   When you use a language that uses many more characters than keys on your
keyboard, you will want to use an Input Method (IM).  This requires learning
the translation from typed keys to resulting character.  When you need an IM
you probably already have one on your system.  It should work with Vim like
with other programs.  For details see |mbyte-XIM| for the X Window system and
|mbyte-IME| for MS-Windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンピューターのキーボードには 100 個ほどのキーしかありません。しかし、数千の文字を持つ言語があり、Unicode には 10 万以上の文字があります。どのようにしてそれらの文字を入力するのでしょうか？
それほど多くの文字を必要としない場合はダイグラフが使えます。ダイグラフについては |@ref{24.9, , 24.9}| で説明しました。
キーボードのキー数よりはるかに多い文字を扱う場合はインプットメソッド (Input Method, IM) を使います。インプットメソッドを使うには、目的の文字を入力するためのキー操作を学ぶ必要があります。あなたがインプットメソッドを必要とするなら、それはおそらくは最初からシステムに用意されています。Vim でも他のプログラムと同様にインプットメソッドを使うことができます。詳細は、X Window system なら |mbyte-XIM| を、MS-Windows なら |mbyte-IME| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
KEYMAPS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec キーマップ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For some languages the character set is different from latin, but uses a
similar number of characters.  It's possible to map keys to characters.  Vim
uses keymaps for this.
   Suppose you want to type Hebrew.  You can load the keymap like this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかの言語は latin とは文字セットが異なるだけで、文字の数は同じような場合があります。その場合はキーを文字にマップすることができます。それにはキーマップを使います。
例えば、ヘブライ語を使いたい場合は、次のようにしてキーマップをロードします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set keymap=hebrew
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set keymap=hebrew
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will try to find a keymap file for you.  This depends on the value of
'encoding'.  If no matching file was found, you will get an error message.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーマップファイルが検索されます。これは '@option{encoding}' の設定に依存します。ファイルが見つからなかった場合はエラーメッセージが表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can type Hebrew in Insert mode.  In Normal mode, and when typing a ":"
command, Vim automatically switches to English.  You can use this command to
switch between Hebrew and English: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、挿入モードでヘブライ語を入力できるようになりました。ただし、ノーマルモードのときや、"@command{:}" コマンドを入力するときは、自動的に英語に切り替わります。次のコマンドでヘブライ語と英語を切り替えることができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-^
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
CTRL-^
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This only works in Insert mode and Command-line mode.  In Normal mode it does
something completely different (jumps to alternate file).
   The usage of the keymap is indicated in the mode message, if you have the
'showmode' option set.  In the GUI Vim will indicate the usage of keymaps with
a different cursor color.
   You can also change the usage of the keymap with the 'iminsert' and
'imsearch' options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは挿入モードとコマンドラインモードでのみ機能します。ノーマルモードではまったく別の機能です (オルタネートファイルにジャンプ)。
キーマップの使用状態はモードメッセージに表示されます ('@option{showmode}' が設定されているなら)。GUI ではカーソルの色が変わります。
キーマップの使用状態は '@option{iminsert}' と '@option{imsearch}' を設定することでも変更できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see the list of mappings, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のコマンドでマップの一覧を表示できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:lmap
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:lmap
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To find out which keymap files are available, in the GUI you can use the
Edit/Keymap menu.  Otherwise you can use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
利用可能なキーマップファイルの一覧は、GUI ならメニューの 編集/キーマップ で確認できます。あるいは次のコマンドで一覧を表示できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:echo globpath(&rtp, "keymap/*.vim")
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:echo globpath(&rtp, "keymap/*.vim")
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DO-IT-YOURSELF KEYMAPS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 自分でキーマップを作成する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can create your own keymap file.  It's not very difficult.  Start with
a keymap file that is similar to the language you want to use.  Copy it to the
"keymap" directory in your runtime directory.  For example, for Unix, you
would use the directory "~/.vim/keymap".
   The name of the keymap file must look like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自分でキーマップファイルを作成することができます。作成はそれほど難しくありません。目的の言語に近い既存のキーマップファイルを土台にしてください。そのファイルを自分の "keymap" ディレクトリにコピーします。例えば、Unix なら "~/.vim/keymap" などを使います。
キーマップファイルの名前は次のような形式にします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	keymap/{name}.vim ~
or
	keymap/{name}_{encoding}.vim ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
        keymap/{name}.vim
or
        keymap/{name}_{encoding}.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{name} is the name of the keymap.  Chose a name that is obvious, but different
from existing keymaps (unless you want to replace an existing keymap file).
{name} cannot contain an underscore.  Optionally, add the encoding used after
an underscore.  Examples:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@} はキーマップの名前です。分かりやすい名前を付けます。既存のキーマップとは違う名前にしてください (既存のキーマップファイルを置き換えるとき以外は)。@{name@} にはアンダースコアを含めることはできません。アンダースコアに続けてエンコーディングを指定することができます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	keymap/hebrew.vim ~
	keymap/hebrew_utf-8.vim ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
keymap/hebrew.vim
keymap/hebrew_utf-8.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The contents of the file should be self-explanatory.  Look at a few of the
keymaps that are distributed with Vim.  For the details, see |mbyte-keymap|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの内容については実物を見れば分かると思います。Vim に付属のキーマップを見てください。詳細は |mbyte-keymap| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LAST RESORT
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 最後の手段
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If all other methods fail, you can enter any character with CTRL-V:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべての方法がダメだったとしても、@kbd{CTRL-V} を使えばあらゆる文字を入力できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	encoding   type			range ~
	8-bit	   CTRL-V 123		decimal 0-255
	8-bit	   CTRL-V x a1		hexadecimal 00-ff
	16-bit     CTRL-V u 013b	hexadecimal 0000-ffff
	31-bit	   CTRL-V U 001303a4	hexadecimal 00000000-7fffffff
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .3 .4
@item @tab エンコード @tab 入力方法 @tab 入力できる範囲
@item @tab 8-bit @tab @kbd{CTRL-V} 123 @tab 10 進数の 0-255
@item @tab 8-bit @tab @kbd{CTRL-V} x a1 @tab 16 進数の 00-ff
@item @tab 16-bit @tab @kbd{CTRL-V} u 013b @tab 16 進数の 0000-ffff
@item @tab 31-bit @tab @kbd{CTRL-V} U 001303a4 @tab 16 進数の 00000000-7fffffff
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Don't type the spaces.  See |i_CTRL-V_digit| for the details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
入力するときはスペースは不要です。詳細は |i_CTRL-V_digit| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_90.txt|  Installing Vim

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
