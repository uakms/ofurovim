@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node usr_07.txt, usr_08.txt, usr_06.txt, 目次
@unnumbered 複数のファイルを開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*usr_07.txt*	For Vim version 8.0.  Last change: 2017 Sep 18

		     VIM USER MANUAL - by Bram Moolenaar

			  Editing more than one file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*usr_07.txt*	For Vim バージョン 8.0.  Last change: 2017 Sep 18

		     VIM USER MANUAL - by Bram Moolenaar

			  複数のファイルを開く
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
No matter how many files you have, you can edit them without leaving Vim.
Define a list of files to work on and jump from one to the other.  Copy text
from one file and put it in another one.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
どんなにファイルが多くても心配はいりません。Vim を複数起動することなしに、それらのファイルを編集できます。作業するファイルのリストを定義して、他のファイルにジャンプしたりテキストをコピーしたりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|07.1|	Edit another file
|07.2|	A list of files
|07.3|	Jumping from file to file
|07.4|	Backup files
|07.5|	Copy text between files
|07.6|	Viewing a file
|07.7|	Changing the file name

     Next chapter: |usr_08.txt|  Splitting windows
 Previous chapter: |usr_06.txt|  Using syntax highlighting
Table of contents: |usr_toc.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{07.1}| @tab 他のファイルを開く
@item |@ref{07.2}| @tab ファイルのリスト
@item |@ref{07.3}| @tab 他のファイルにジャンプする
@item |@ref{07.4}| @tab バックアップファイル
@item |@ref{07.5}| @tab 他のファイルにテキストをコピーする
@item |@ref{07.6}| @tab 読み込み専用モード
@item |@ref{07.7}| @tab ファイル名の変更
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.1*	Edit another file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.1}
@cindex 他のファイルを開く
@section 他のファイルを開く
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
So far you had to start Vim for every file you wanted to edit.  There is a
simpler way.  To start editing another file, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いままでは、ファイルを開くごとに Vim を起動しなければなりませんでしたが、もっと簡単な方法があります。次のコマンドを使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit foo.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit foo.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use any file name instead of "foo.txt".  Vim will close the current
file and open the new one.  If the current file has unsaved changes, however,
Vim displays an error message and does not open the new file:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル名は "@file{foo.txt}" に限らず何でも使えます。Vim は現在のファイルを閉じて、指定されたファイルを開きます。ファイルの変更が保存されていない場合は、エラーメッセージが表示され、新しいファイルは開かれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E37: No write since last change (use ! to override) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E37: 最後の変更が保存されていません (! で変更を破棄)
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	Vim puts an error ID at the start of each error message.  If you do
	not understand the message or what caused it, look in the help system
	for this ID.  In this case: >

		:help E37
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
エラーメッセージの先頭には エラーID が表示されます。エラーの意味や原因がわからない場合は、この ID をヘルプで引いてください。上記エラーの場合は、このようにします:

@example
:help E37
@end example
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At this point, you have a number of alternatives.  You can write the file
using this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このエラーを回避するには、次のコマンドでファイルを保存してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:write
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:write
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Or you can force Vim to discard your changes and edit the new file, using the
force (!) character: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるいは、変更を破棄して新しいファイルを開くこともできます。(@samp{!}) 文字を使ってください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit! foo.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit! foo.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to edit another file, but not write the changes in the current
file yet, you can make it hidden: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの変更を保存せずに他のファイルを開きたい場合は、ファイルを隠す方法もあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:hide edit foo.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:hide edit foo.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The text with changes is still there, but you can't see it.  This is further
explained in section |22.4|: The buffer list.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの変更はまだ破棄されませんが、ファイルは画面外に隠れてしまいます。詳しくは |@ref{22.4}| バッファリスト で説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.2*	A list of files
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.2}
@cindex ファイルのリスト
@section ファイルのリスト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can start Vim to edit a sequence of files.  For example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動するときに、複数のファイルを指定することができます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim one.c two.c three.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim one.c two.c three.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This command starts Vim and tells it that you will be editing three files.
Vim displays just the first file.  After you have done your thing in this
file, to edit the next file you use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドは Vim を起動し、3 つのファイルを開くように指示しています。Vim は 1 つ目のファイル (@file{one.c}) だけを表示します。そのファイルの編集が終わり、次のファイル (@file{two.c}) を編集したい場合はこのコマンドを使います:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:next
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:next
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you have unsaved changes in the current file, you will get an error
message and the ":next" will not work.  This is the same problem as with
":edit" mentioned in the previous section.  To abandon the changes: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの変更が保存されていない場合は、エラーメッセージが表示され、"@command{:next}" コマンドは中断されます。前節で述べた "@command{:edit}" の場合と同じです。変更を破棄するには次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:next!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:next!
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
But mostly you want to save the changes and move on to the next file.  There
is a special command for this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしほとんどの場合、変更を保存してから次のファイルを開くと思います。それには専用のコマンドが用意されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:wnext
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:wnext
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This does the same as using two separate commands: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは次の 2 つのコマンドを使うのと同じ結果となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:write
	:next
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:write
:next
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WHERE AM I?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 私はドコにいるの？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see which file in the argument list you are editing, look in the window
title.  It should show something like "(2 of 3)".  This means you are editing
the second file out of three files.
   If you want to see the list of files, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
今編集しているのが引数リスト中のどのファイルなのかは、ウィンドウタイトルを見ればわかります。そこに "(2 of 3)" のような表示があります。この場合は全部で 3 つのファイルがあり、今は 2 つ目を編集しているという意味です。次のコマンドでファイルの一覧を表示できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:args
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:args
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is short for "arguments".  The output might look like this:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは "arguments" の省略形です。結果は次のように表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	one.c [two.c] three.c ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
one.c [two.c] three.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These are the files you started Vim with.  The one you are currently editing,
"two.c", is in square brackets.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を起動したときに指定したファイルが表示されます。編集中のファイル (ここでは "@file{two.c}") は @samp{[]} 記号で囲んで表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MOVING TO OTHER ARGUMENTS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 他のファイルへの移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To go back one file: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはファイルを 1 つ戻るコマンドです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:previous
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:previous
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is just like the ":next" command, except that it moves in the other
direction.  Again, there is a shortcut command for when you want to write the
file first: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:next}" コマンドと同じ動作ですが、移動する方向が違います。このコマンドにも、ファイル保存してから移動する専用のコマンドがあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:wprevious
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:wprevious
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To move to the very last file in the list: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一覧の最後のファイルに移動するには次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:last
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:last
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
And to move back to the first one again: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初のファイルに戻るには次のコマンドです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:first
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:first
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is no ":wlast" or ":wfirst" command though!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
":wlast" とか ":wfirst" みたいなコマンドはありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can use a count for ":next" and ":previous".  To skip two files forward: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:next}" と "@command{:previous}" にはカウンタを指定できます。例えば、2 つ先のファイルに進むにはこのようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:2next
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:2next
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
AUTOMATIC WRITING
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 自動保存
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When moving around the files and making changes, you have to remember to use
":write".  Otherwise you will get an error message.  If you are sure you
always want to write modified files, you can tell Vim to automatically write
them: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いろんなファイルを編集して回るときには、"@command{:write}" で保存するのを忘れないでください。変更を保存せずに移動しようとすると、エラーメッセージが表示されます。移動するときはいつでも変更を保存したいと思った場合は、次のように設定してください。変更が自動的に保存されるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set autowrite
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set autowrite
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you are editing a file which you may not want to write, switch it off
again: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
保存して欲しくないファイルを編集するときは、機能をオフに設定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set noautowrite
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set noautowrite
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
EDITING ANOTHER LIST OF FILES
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 他のファイルリストで編集する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can redefine the list of files without the need to exit Vim and start it
again.  Use this command to edit three other files: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を再起動しなくても、ファイルリストを変更できます。例えば、他の 3 つのファイルを編集するには次のようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:args five.c six.c seven.h
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:args five.c six.c seven.h
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Or use a wildcard, like it's used in the shell: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シェルと同じようにワイルドカードを使うこともできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:args *.txt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:args *.txt
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will take you to the first file in the list.  Again, if the current file
has changes, you can either write the file first, or use ":args!" (with !
added) to abandon the changes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
リストの最初のファイルがまず開かれます。ここでも、現在のファイルの変更をまだ保存していない場合は、ファイルを保存するか、"@command{:args!}" (@samp{!} が付いています) を使って変更を破棄する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DID YOU EDIT THE LAST FILE?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 最後のファイルまで編集した？
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*arglist-quit*
When you use a list of files, Vim assumes you want to edit them all.  To
protect you from exiting too early, you will get this error when you didn't
edit the last file in the list yet:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{arglist-quit}
@cindex arglist-quit
ファイルリストが使われると、Vim は、すべてのファイルが編集対象だと判断します。間違って Vim を終了してしまうことがないように、すべてのファイルをまだ開いていないのに終了しようとした場合は、エラーメッセージが表示されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E173: 46 more files to edit ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E173: 編集すべきファイルがあと 46 個あります。
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you really want to exit, just do it again.  Then it will work (but not when
you did other commands in between).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
本当に終了してよければ、もう一度終了コマンドを実行してください。今度は終了できます (間に他のコマンドを挟まないでください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.3*	Jumping from file to file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.3}
@cindex 他のファイルにジャンプする
@section 他のファイルにジャンプする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To quickly jump between two files, press CTRL-^ (on English-US keyboards the ^
is above the 6 key).  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-^} を使うと 2 つのファイル間を素早く移動できます(日本語キーボードなら @key{^} は '@key{-}' キーの右側 (「@key{へ}」キー) にあります)。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:args one.c two.c three.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:args one.c two.c three.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You are now in one.c. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
上を実行すると "@file{one.c}" が開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:next
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:next
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you are in two.c.  Now use CTRL-^ to go back to one.c.  Another CTRL-^ and
you are back in two.c.  Another CTRL-^ and you are in one.c again.  If you now
do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで、"@file{two.c}" になりました。ここで @kbd{CTRL-^} を使うと "@file{one.c}" に戻ります。もう一度 @kbd{CTRL-^} を押すと "@file{two.c}" に戻ります。さらに @kbd{CTRL-^} を使うと "@file{one.c}" になります。さて、ここで次のコマンドを実行します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:next
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:next
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You are in three.c.  Notice that the CTRL-^ command does not change the idea
of where you are in the list of files.  Only commands like ":next" and
":previous" do that.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すると、"@file{three.c}" になります。@kbd{CTRL-^} コマンドはファイルリスト中での現在地を変更しません。"@command{:next}" や "@command{:previous}" のようなコマンドだけが現在地を変更します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The file you were previously editing is called the "alternate" file.  When you
just started Vim CTRL-^ will not work, since there isn't a previous file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
直前に編集していたファイルのことをオルタネートファイル (alternate file) と言います。Vim の起動直後はオルタネートファイルがまだ無いため @kbd{CTRL-^} は動作しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
PREDEFINED MARKS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 定義済マーク
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After jumping to another file, you can use two predefined marks which are very
useful: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のファイルにジャンプすると、2 つの定義済マークが使えるようになります。これは非常に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	`"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
`"
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This takes you to the position where the cursor was when you left the file.
Another mark that is remembered is the position where you made the last
change: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドを実行すると、以前にファイルを開いていたときにいた場所にカーソルが移動します。もう 1 つは、最後に変更を加えた場所に設定されたマークです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	`.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
`.
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose you are editing the file "one.txt".  Somewhere halfway through the
file you use "x" to delete a character.  Then you go to the last line with "G"
and write the file with ":w".  You edit several other files, and then use
":edit one.txt" to come back to "one.txt".  If you now use `" Vim jumps to the
last line of the file.  Using `. takes you to the position where you deleted
the character.  Even when you move around in the file `" and `. will take you
to the remembered position.  At least until you make another change or leave
the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、"@file{one.txt}" を編集しているとします。ファイルの真ん中あたりで "@command{x}" を使って文字を削除しました。そして、"@command{G}" を使って最後の行に移動し、"@command{:w}" でファイルを保存します。他のファイルをいくつか編集してから、"@command{:edit one.txt}" で "@file{one.txt}" に戻ってきました。ここで、@command{`"} を実行すると、ファイルの最後の行にカーソルが移動します。@command{`.} を実行すると、文字を削除した場所に移動します。ファイル内をいろいろと移動した後でも、@command{`"} と @command{`.} は同じ場所を覚えています。少なくとも、他の変更を加えたり、別のファイルに移動したりするまでは。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
FILE MARKS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ファイルマーク
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In chapter 4 was explained how you can place a mark in a file with "mx" and
jump to that position with "`x".  That works within one file.  If you edit
another file and place marks there, these are specific for that file.  Thus
each file has its own set of marks, they are local to the file.
   So far we were using marks with a lowercase letter.  There are also marks
with an uppercase letter.  These are global, they can be used from any file.
For example suppose that we are editing the file "foo.txt".  Go to halfway
down the file ("50%") and place the F mark there (F for foo): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
4 章 (|@ref{04.1}|) では "@command{mx}" でマークを付け、"@command{`x}" でその場所にジャンプする方法を説明しました。そのマークはファイルの中だけで使えます。別のファイルを開いて、それに同じマークを付けても、マークはそのファイルに固有のものとなります。つまり各ファイルはそれぞれのマークを持っていて、ファイル内に閉じているということです。

いままでは、マークに小文字を使ってきましたが、大文字のマークも使えます。大文字のマークはグローバルで、どのファイルからでも使えます。例えば "@file{foo.txt}" というファイルを開き、"50%" コマンドでファイルの真ん中にジャンプして下がり、その場所に @var{F} というマークを付けたとします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	50%mF
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
50%mF
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now edit the file "bar.txt" and place the B mark (B for bar) at its last line:
>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次に "@file{bar.txt}" を開き、最終行にマーク @var{B} を付けます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	GmB
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
GmB
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now you can use the "'F" command to jump back to halfway foo.txt.  Or edit yet
another file, type "'B" and you are at the end of bar.txt again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さて、ここで "@command{'F}" コマンドを使うと、いきなり @file{foo.txt} の真ん中にジャンプできます。さらに、他のファイルを開いてから "@command{'B}" を入力すると、@file{bar.txt} の行末に移動できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The file marks are remembered until they are placed somewhere else.  Thus you
can place the mark, do hours of editing and still be able to jump back to that
mark.
   It's often useful to think of a simple connection between the mark letter
and where it is placed.  For example, use the H mark in a header file, M in
a Makefile and C in a C code file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他の場所を設定するまで、ファイルマークは同じ場所を記憶しています。そのため、一度マークを付ければ、何時間も編集を行ってからでもそのマークに戻って来ることができます。

マークの文字とマークを付けた場所が連想できるような単純なルールを決めておくとよいでしょう。例えば、ヘッダーファイルは H、make ファイルは M、C 言語のソースには C といった具合です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To see where a specific mark is, give an argument to the ":marks" command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マークが置いてある場所を確認するには、"@command{:marks}" コマンドにそのマークを指定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:marks M
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:marks M
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can also give several arguments: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マークを複数指定しても構いません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:marks MCP
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:marks MCP
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Don't forget that you can use CTRL-O and CTRL-I to jump to older and newer
positions without placing marks there.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マークを使わなくても、@kbd{CTRL-O} と @kbd{CTRL-I} を使えば、古い場所と新しい場所の間をジャンプできることをお忘れなく。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.4*	Backup files
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.4}
@cindex バックアップファイル
@section バックアップファイル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Usually Vim does not produce a backup file.  If you want to have one, all you
need to do is execute the following command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
初期設定ではバックアップファイルは作成されません。バックアップファイルが必要なら、次のコマンドを実行してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set backup
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set backup
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The name of the backup file is the original file with a  ~  added to the end.
If your file is named data.txt, for example, the backup file name is
data.txt~.
   If you do not like the fact that the backup files end with ~, you can
change the extension: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バックアップファイルの名前は、ファイル名の後ろに ~ を加えた名前になります。例えば、ファイル名が @file{data.txt} なら、バックアップファイルは @file{data.txt~} です。

@samp{~} 以外の文字を使いたい場合は、次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set backupext=.bak
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set backupext=.bak
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will use data.txt.bak instead of data.txt~.
   Another option that matters here is 'backupdir'.  It specifies where the
backup file is written.  The default, to write the backup in the same
directory as the original file, will mostly be the right thing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで、バックアップファイルの名前が @file{data.txt.bak} になります。

もう 1 つのオプション '@option{backupdir}' についても説明しましょう。これはバックアップファイルを保存するディレクトリを指定するオプションです。初期設定ではバックアップは元ファイルと同じディレクトリに保存されます。たいていの場合はこれで問題ないはずです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Note:
	When the 'backup' option isn't set but the 'writebackup' is, Vim will
	still create a backup file.  However, it is deleted as soon as writing
	the file was completed successfully.  This functions as a safety
	against losing your original file when writing fails in some way (disk
	full is the most common cause; being hit by lightning might be
	another, although less common).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
'@option{writebackup}' がオンの場合、'@option{backup}' がオフでもバックアップファイルは作成されますが、ファイルの保存が成功すると、そのバックアップファイルはすぐに削除されます。これは、ファイルを保存できなかったときに、オリジナルファイルが失われないようにするための機能です。(失敗の原因は、例えば、ディスクがいっぱいになったというのが一番ありがちな理由です。雷にやられるというのも可能性は低いですがありうることです)。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
KEEPING THE ORIGINAL FILE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec オリジナルファイルを残す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you are editing source files, you might want to keep the file before you
make any changes.  But the backup file will be overwritten each time you write
the file.  Thus it only contains the previous version, not the first one.
   To make Vim keep the original file, set the 'patchmode' option.  This
specifies the extension used for the first backup of a changed file.  Usually
you would do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ソースファイルを編集していると、変更を加える前のファイルを残しておきたいときがあります。しかし、バックアップファイルはファイルを保存するたびに上書きされるので、直前のバックアップしか残らず、最初のファイルはなくなってしまいます。

オリジナルのファイルを残しておきたい場合は、'@option{patchmode}' オプションを設定してください。バックアップファイルを最初に作成するときに使う拡張子を指定します。次のように設定してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set patchmode=.orig
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set patchmode=.orig
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you now edit the file data.txt for the first time, make changes and write
the file, Vim will keep a copy of the unchanged file under the name
"data.txt.orig".
   If you make further changes to the file, Vim will notice that
"data.txt.orig" already exists and leave it alone.  Further backup files will
then be called "data.txt~" (or whatever you specified with 'backupext').
   If you leave 'patchmode' empty (that is the default), the original file
will not be kept.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、はじめて @file{data.txt} を開いたときに、変更を加え、保存しようとすると、変更前のファイルが "@file{data.txt.orig}" という名前でコピーされます。

その後、ファイルを変更しても、既に "@file{data.txt.orig}" があるので、上書きはされません。この場合もバックアップファイルは "@file{data.txt~}" (もしくは '@option{backupext}' で指定した名前) で作成されます。

'@option{patchmode}' が空のまま (初期設定) だと、オリジナルファイルは残りません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.5*	Copy text between files
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.5}
@cindex 他のファイルにテキストをコピーする
@section 他のファイルにテキストをコピーする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This explains how to copy text from one file to another.  Let's start with a
simple example.  Edit the file that contains the text you want to copy.  Move
the cursor to the start of the text and press "v".  This starts Visual mode.
Now move the cursor to the end of the text and press "y".  This yanks (copies)
the selected text.
   To copy the above paragraph, you would do: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここではファイルから別のファイルにテキストをコピーする方法を説明します。簡単な例で始めましょう。コピーしたいテキストを含んでいるファイルを開きます。テキストの先頭にカーソルを移動して "@key{v}" を押すとビジュアルモードが開始します。テキストの末尾までカーソルを移動して "@key{y}" を押します。これでテキストがヤンク (コピー)されました。

例えば、上の段落をコピーするには、次のようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit thisfile
	/This
	vjjjj$y
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit thisfile
/ここでは
vjjjj$y
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now edit the file you want to put the text in.  Move the cursor to the
character where you want the text to appear after.  Use "p" to put the text
there. >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次に、このテキストをプット (ペースト) したいファイルを開きます。テキストをプットしたい場所にカーソルを動かし、"@command{p}" コマンドでプットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:edit otherfile
	/There
	p
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit otherfile
/どこか
p
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Of course you can use many other commands to yank the text.  For example, to
select whole lines start Visual mode with "V".  Or use CTRL-V to select a
rectangular block.  Or use "Y" to yank a single line, "yaw" to yank-a-word,
etc.
   The "p" command puts the text after the cursor.  Use "P" to put the text
before the cursor.  Notice that Vim remembers if you yanked a whole line or a
block, and puts it back that way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
当然ながら、テキストのヤンクには他にもいろんなコマンドが使えます。例えば、"@command{V}" でビジュアルモードを開始すると行単位で選択できますし、@kbd{CTRL-V} で矩形選択もできます。"@command{Y}" で一行をヤンクしたり、"@command{yaw}" で単語をヤンク (yank-a-word) するなど、いろいろできます。

"@command{p}" コマンドはカーソルの後にテキストをプットします。カーソルの前にプットするには "@command{P}" を使います。Vim はヤンクしたときの選択単位 (行選択や矩形選択) を覚えていて、同じ単位でプットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
USING REGISTERS
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec レジスタを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you want to copy several pieces of text from one file to another, having
to switch between the files and writing the target file takes a lot of time.
To avoid this, copy each piece of text to its own register.
   A register is a place where Vim stores text.  Here we will use the
registers named a to z (later you will find out there are others).  Let's copy
a sentence to the f register (f for First): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるファイルから別のファイルに数箇所のテキストをコピーしたいとき、何度も何度もファイルを切り換えると時間がかかります。テキストをレジスタにコピーして手間を省きましょう。

レジスタとは、Vim がテキストを保持する場所です。ここでは @samp{a} から @samp{z} までの名前が付いたレジスタを使います (レジスタは他にもあります)。では、テキストをレジスタ @samp{f} (f は first のつもり) にヤンクしてみましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"fyas
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"fyas
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "yas" command yanks a sentence like before.  It's the "f that tells Vim
the text should be placed in the f register.  This must come just before the
yank command.
   Now yank three whole lines to the l register (l for line): >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{yas}" コマンドで文をヤンクしています。@command{"f} はテキストをレジスタ @samp{f} に入れるための指定です。この指定はヤンクコマンドの直前に指定します。

さらに 3 行をレジスタ @samp{l} (l は line のつもり) にヤンクしてみましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"l3Y
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"l3Y
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The count could be before the "l just as well.  To yank a block of text to the
b (for block) register: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カウンタ (回数指定) は @command{"l} の直前に指定することもできます。テキストのブロック(矩形選択) をレジスタ @samp{b} (b は block のつもり) にヤンクする場合は次のようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-Vjjww"by
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
CTRL-Vjjww"by
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notice that the register specification "b is just before the "y" command.
This is required.  If you would have put it before the "w" command, it would
not have worked.
   Now you have three pieces of text in the f, l and b registers.  Edit
another file, move around and place the text where you want it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
レジスタ指定 @command{"b} を "@command{y}" コマンドの直前で指定している点に注意してください。これは重要なことです。これを "@command{w}" コマンドより前に置いてしまうとうまく動きません。

さて、@samp{f}、@samp{l}、@samp{b} の 3 つのレジスタにテキストをヤンクできました。他のファイルを開いて、テキストを挿入したい場所にカーソルを移動し、レジスタの内容をプットしましょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"fp
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"fp
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Again, the register specification "f comes before the "p" command.
   You can put the registers in any order.  And the text stays in the register
until you yank something else into it.  Thus you can put it as many times as
you like.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヤンクの場合と同じく、レジスタ指定 @command{"f} は "@command{p}" コマンドより前に指定します。どのレジスタからプットしても構いません。他のテキストをヤンクし直さない限り、レジスタの内容は変わらないので、同じレジスタを何度でも好きなだけプットできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you delete text, you can also specify a register.  Use this to move
several pieces of text around.  For example, to delete-a-word and write it in
the w register: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストを削除するときにも、レジスタを指定できます。テキストを何ヶ所かに移動するときなどに使ってください。例えば、単語を削除 (delete-a-word) してその内容をレジスタ @samp{w} に入れるには次のようにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	"wdaw
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
"wdaw
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Again, the register specification comes before the delete command "d".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
何度も言うようですが、レジスタ指定は削除コマンド "@command{d}" の前に置いてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
APPENDING TO A FILE
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ファイルに追記する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When collecting lines of text into one file, you can use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
文章を 1 つのファイルにまとめたい場合は、次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:write >> logfile
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:write >> logfile
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This will write the text of the current file to the end of "logfile".  Thus it
is appended.  This avoids that you have to copy the lines, edit the log file
and put them there.  Thus you save two steps.  But you can only append to the
end of a file.
   To append only a few lines, select them in Visual mode before typing
":write".  In chapter 10 you will learn other ways to select a range of lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カレントファイルの内容が "logfile" の末尾に追記されます。テキストをコピーして、"logfile" を開き、テキストをプットするより簡単です。作業を 2 手節約できます。ただし、ファイルの末尾への追加しかできません。

ファイルの一部だけ追記したい場合は、ビジュアルモードでテキストを選択してから "@command{:write}" を実行してください。テキストを選択する方法は他にもありますが、10 章で説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.6*	Viewing a file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.6}
@cindex 読み込み専用モード
@section 読み込み専用モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Sometimes you only want to see what a file contains, without the intention to
ever write it back.  There is the risk that you type ":w" without thinking and
overwrite the original file anyway.  To avoid this, edit the file read-only.
   To start Vim in readonly mode, use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを変更する気はなく、ただファイルの内容を見たいだけのときがあります。普通に開くと、うっかり "@command{:w}" を実行して元のファイルを上書きしてしまう危険があります。そういうときは、読み込み専用モードでファイルを開いてください。

Vim を読み込み専用モードで起動するには、次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -R file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim -R file
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On Unix this command should do the same thing: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix なら、次のコマンドも同じ意味になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	view file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
view file
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You are now editing "file" in read-only mode.  When you try using ":w" you
will get an error message and the file won't be written.
   When you try to make a change to the file Vim will give you a warning:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"file" が読み込み専用モードで開きます。"@command{:w}" をしようとしても、エラーメッセージが表示され保存はされません。

ファイルに変更を加えようとすると、次のような警告が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	W10: Warning: Changing a readonly file ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
W10: 警告：読込専用ファイルを変更します
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The change will be done though.  This allows for formatting the file, for
example, to be able to read it easily.
   If you make changes to a file and forgot that it was read-only, you can
still write it.  Add the ! to the write command to force writing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
警告は出ますが、変更は可能です。これは、例えばファイルを読みやすくフォーマットしたりするためです。

読み込み専用モードであることを忘れて、ファイルを修正してしまったようなときは、@command{write} コマンドに ! を付けて強制保存してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you really want to forbid making changes in a file, do this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
完全にファイルの変更を禁止したい場合は、次のようにしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -M file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
vim -M file
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Now every attempt to change the text will fail.  The help files are like this,
for example.  If you try to make a change you get this error message:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで、内容を変更しようとしてもエラーになります。例えば、ヘルプファイルはこのモードで表示されています。変更しようとすると、次のエラーメッセージが表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E21: Cannot make changes, 'modifiable' is off ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E21: 'modifiable' がオフなので、変更できません
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You could use the -M argument to setup Vim to work in a viewer mode.  This is
only voluntary though, since these commands will remove the protection: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
-M 引数を使えば Vim を閲覧モードに設定できますが、これは自主規制みたいなもので、次のコマンドを使えば制限はなくなってしまいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set modifiable
	:set write
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:set modifiable
:set write
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
*07.7*	Changing the file name
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{07.7}
@cindex ファイル名の変更
@section ファイル名の変更
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A clever way to start editing a new file is by using an existing file that
contains most of what you need.  For example, you start writing a new program
to move a file.  You know that you already have a program that copies a file,
thus you start with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいファイルを作成するときに、目的に近いファイルがあるなら、それを利用するのが効率的です。例えば、ファイルを移動するプログラムを作りたいとしましょう。ファイルをコピーするプログラムがすでにあるので、それを流用することにしました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:edit copy.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:edit copy.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can delete the stuff you don't need.  Now you need to save the file under
a new name.  The ":saveas" command can be used for this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新しいプログラムに必要ない部分は削除してしまいましょう。次に、このファイルを新しい名前で保存する必要があります。そのためのコマンドが "@command{:saveas}" です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:saveas move.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:saveas move.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will write the file under the given name, and edit that file.  Thus the
next time you do ":write", it will write "move.c".  "copy.c" remains
unmodified.
   When you want to change the name of the file you are editing, but don't
want to write the file, you can use this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
指定した名前でファイルが保存され、そのファイルが開かれます。そのため、次に "@command{:write}" したときは "@file{move.c}" に保存されます。"@file{copy.c}" は変更されません。

ファイルを保存せずに、ファイルの名前だけ変更したい場合は、次のコマンドを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:file move.c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@example
:file move.c
@end example
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will mark the file as "not edited".  This means that Vim knows this is not
the file you started editing.  When you try to write the file, you might get
this message:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そのファイル (@file{move.c}) は、実際のファイルではないので、"開いていない" (not edited) 扱いになります。ファイルを保存しようとすると、次のメッセージが表示されることがあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	E13: File exists (use ! to override) ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@display
E13: ファイルが存在します (! を追加で上書)
@end display
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This protects you from accidentally overwriting another file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは、実際のファイルを間違って上書きしてしまわないようにするためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================

Next chapter: |usr_08.txt|  Splitting windows

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
@end ifset
