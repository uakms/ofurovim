@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@node index.txt, , , 目次
@unnumbered 全コマンド一覧。アルファベット順
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*index.txt*     For Vim version 8.0.  Last change: 2017 Aug 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*index.txt*     For Vim バージョン 8.0.  Last change: 2017 Aug 02


		  VIMリファレンスマニュアル	  by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*index*
This file contains a list of all commands for each mode, with a tag and a
short description.  The lists are sorted on ASCII value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{index}
@cindex index
このファイルには各モードのすべてのコマンドが列挙されており、タグと短い説明が示されている。一覧は ASCII コード順に並んでいる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Tip: When looking for certain functionality, use a search command.  E.g.,
to look for deleting something, use: "/delete".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Tip:} 機能で検索するときは、検索コマンドを使用する。例えば、何かを削除するコマンドを検索したいなら、"/削除" を使用する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Insert mode				|insert-index|
2. Normal mode				|normal-index|
   2.1. Text objects			|objects|
   2.2. Window commands			|CTRL-W|
   2.3. Square bracket commands		|[|
   2.4. Commands starting with 'g'	|g|
   2.5. Commands starting with 'z'	|z|
3. Visual mode				|visual-index|
4. Command-line editing			|ex-edit-index|
5. EX commands				|ex-cmd-index|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .6 .4
@item 1. 挿入モード @tab |@ref{insert-index, , insert-index}|
@item 2. ノーマルモード @tab |@ref{normal-index, , insert-index}|
@item @ @ @ @ 2.1. テキストオブジェクト @tab |@ref{objects, , objects}|
@item @ @ @ @ 2.2. ウィンドウコマンド @tab |@ref{CTRL-W, , CTRL-W}|
@item @ @ @ @ 2.3. 角括弧コマンド @tab |@ref{[, , [}|
@item @ @ @ @ 2.4. 'g' で始まるコマンド @tab |@ref{g, , g}|
@item @ @ @ @ 2.5. 'z' で始まるコマンド @tab |@ref{z, , z}|
@item 3. ビジュアルモード @tab |@ref{visual-index, , visual-index}|
@item 4. コマンドライン編集 @tab |@ref{ex-edit-index, , ex-edit-index}|
@item 5. EX コマンド @tab |@ref{ex-cmd-index, , ex-cmd-index}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For an overview of options see help.txt |option-list|.
For an overview of built-in functions see |functions|.
For a list of Vim variables see |vim-variable|.
For a complete listing of all help items see |help-tags|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの概略は help.txt を参照。|option-list|

組み込み関数の詳細は |functions| を参照。

Vim 変数の一覧は |vim-variable| を参照。

全ヘルプ項目の一覧は |help-tags| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Insert mode						*insert-index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{insert-index}
@cindex insert-index
@section 1. 挿入モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		char		action in Insert mode	~
-----------------------------------------------------------------------
|i_CTRL-@|	CTRL-@		insert previously inserted text and stop
				insert
|i_CTRL-A|	CTRL-A		insert previously inserted text
		CTRL-B		not used |i_CTRL-B-gone|
|i_CTRL-C|	CTRL-C		quit insert mode, without checking for
				abbreviation, unless 'insertmode' set.
|i_CTRL-D|	CTRL-D		delete one shiftwidth of indent in the current
				line
|i_CTRL-E|	CTRL-E		insert the character which is below the cursor
		CTRL-F		not used (but by default it's in 'cinkeys' to
				re-indent the current line)
|i_CTRL-G_j|	CTRL-G CTRL-J	line down, to column where inserting started
|i_CTRL-G_j|	CTRL-G j	line down, to column where inserting started
|i_CTRL-G_j|	CTRL-G <Down>	line down, to column where inserting started
|i_CTRL-G_k|	CTRL-G CTRL-K	line up, to column where inserting started
|i_CTRL-G_k|	CTRL-G k	line up, to column where inserting started
|i_CTRL-G_k|	CTRL-G <Up>	line up, to column where inserting started
|i_CTRL-G_u|	CTRL-G u	start new undoable edit
|i_CTRL-G_U|	CTRL-G U	don't break undo with next cursor movement
|i_<BS>|	<BS>		delete character before the cursor
|i_digraph|	{char1}<BS>{char2}
				enter digraph (only when 'digraph' option set)
|i_CTRL-H|	CTRL-H		same as <BS>
|i_<Tab>|	<Tab>		insert a <Tab> character
|i_CTRL-I|	CTRL-I		same as <Tab>
|i_<NL>|	<NL>		same as <CR>
|i_CTRL-J|	CTRL-J		same as <CR>
|i_CTRL-K|	CTRL-K {char1} {char2}
				enter digraph
|i_CTRL-L|	CTRL-L		when 'insertmode' set: Leave Insert mode
|i_<CR>|	<CR>		begin new line
|i_CTRL-M|	CTRL-M		same as <CR>
|i_CTRL-N|	CTRL-N		find next match for keyword in front of the
				cursor
|i_CTRL-O|	CTRL-O		execute a single command and return to insert
				mode
|i_CTRL-P|	CTRL-P		find previous match for keyword in front of
				the cursor
|i_CTRL-Q|	CTRL-Q		same as CTRL-V, unless used for terminal
				control flow
|i_CTRL-R|	CTRL-R {0-9a-z"%#*:=}
				insert the contents of a register
|i_CTRL-R_CTRL-R| CTRL-R CTRL-R {0-9a-z"%#*:=}
				insert the contents of a register literally
|i_CTRL-R_CTRL-O| CTRL-R CTRL-O {0-9a-z"%#*:=}
				insert the contents of a register literally
				and don't auto-indent
|i_CTRL-R_CTRL-P| CTRL-R CTRL-P {0-9a-z"%#*:=}
				insert the contents of a register literally
				and fix indent.
		CTRL-S		(used for terminal control flow)
|i_CTRL-T|	CTRL-T		insert one shiftwidth of indent in current
				line
|i_CTRL-U|	CTRL-U		delete all entered characters in the current
				line
|i_CTRL-V|	CTRL-V {char}	insert next non-digit literally
|i_CTRL-V_digit| CTRL-V {number} insert three digit decimal number as a single
				byte.
|i_CTRL-W|	CTRL-W		delete word before the cursor
|i_CTRL-X|	CTRL-X {mode}	enter CTRL-X sub mode, see |i_CTRL-X_index|
|i_CTRL-Y|	CTRL-Y		insert the character which is above the cursor
|i_CTRL-Z|	CTRL-Z		when 'insertmode' set: suspend Vim
|i_<Esc>|	<Esc>		end insert mode (unless 'insertmode' set)
|i_CTRL-[|	CTRL-[		same as <Esc>
|i_CTRL-\_CTRL-N| CTRL-\ CTRL-N	go to Normal mode
|i_CTRL-\_CTRL-G| CTRL-\ CTRL-G	go to mode specified with 'insertmode'
		CTRL-\ a - z	reserved for extensions
		CTRL-\ others	not used
|i_CTRL-]|	CTRL-]		trigger abbreviation
|i_CTRL-^|	CTRL-^		toggle use of |:lmap| mappings
|i_CTRL-_|	CTRL-_		When 'allowrevins' set: change language
				(Hebrew, Farsi) {only when compiled with
				the |+rightleft| feature}

		<Space> to '~'	not used, except '0' and '^' followed by
				CTRL-D

|i_0_CTRL-D|	0 CTRL-D	delete all indent in the current line
|i_^_CTRL-D|	^ CTRL-D	delete all indent in the current line, restore
				it in the next line

|i_<Del>|	<Del>		delete character under the cursor

		Meta characters (0x80 to 0xff, 128 to 255)
				not used

|i_<Left>|	<Left>		cursor one character left
|i_<S-Left>|	<S-Left>	cursor one word left
|i_<C-Left>|	<C-Left>	cursor one word left
|i_<Right>|	<Right>		cursor one character right
|i_<S-Right>|	<S-Right>	cursor one word right
|i_<C-Right>|	<C-Right>	cursor one word right
|i_<Up>|	<Up>		cursor one line up
|i_<S-Up>|	<S-Up>		same as <PageUp>
|i_<Down>|	<Down>		cursor one line down
|i_<S-Down>|	<S-Down>	same as <PageDown>
|i_<Home>|	<Home>		cursor to start of line
|i_<C-Home>|	<C-Home>	cursor to start of file
|i_<End>|	<End>		cursor past end of line
|i_<C-End>|	<C-End>		cursor past end of file
|i_<PageUp>|	<PageUp>	one screenful backward
|i_<PageDown>|	<PageDown>	one screenful forward
|i_<F1>|	<F1>		same as <Help>
|i_<Help>|	<Help>		stop insert mode and display help window
|i_<Insert>|	<Insert>	toggle Insert/Replace mode
|i_<LeftMouse>|	<LeftMouse>	cursor at mouse click
|i_<ScrollWheelDown>|	<ScrollWheelDown>	move window three lines down
|i_<S-ScrollWheelDown>|	<S-ScrollWheelDown>	move window one page down
|i_<ScrollWheelUp>|	<ScrollWheelUp>		move window three lines up
|i_<S-ScrollWheelUp>|	<S-ScrollWheelUp>	move window one page up
|i_<ScrollWheelLeft>|	<ScrollWheelLeft>	move window six columns left
|i_<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	move window one page left
|i_<ScrollWheelRight>|	<ScrollWheelRight>	move window six columns right
|i_<S-ScrollWheelRight>| <S-ScrollWheelRight>	move window one page right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .3 .4
@item タグ @tab 文字 @tab 挿入モードでの動作
@item |i_CTRL-@@| @tab CTRL-@@ @tab 直前に挿入したテキストを挿入し、挿入モードを終了する。
@item |i_CTRL-A| @tab CTRL-A @tab 直前に挿入したテキストを挿入する。
@item @tab CTRL-B @tab 未使用 |i_CTRL-B-gone|
@item |i_CTRL-C| @tab CTRL-C @tab '@option{insertmode}' がセットされていなければ、短縮入力をチェックせずに挿入モードを終了する。
@item |i_CTRL-D| @tab CTRL-D @tab 現在の行から @option{shiftwidth} 分のインデントを削除する。
@item |i_CTRL-E| @tab CTRL-E @tab 下の行のカーソルと同じ位置にある文字を挿入する
@item @tab CTRL-F @tab 未使用 (しかし標準設定では'@option{cinkeys}'の設定によりカーソル行を再インデントするのに使用される)
@item |i_CTRL-G_j| @tab CTRL-G CTRL-J @tab 下の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_j| @tab CTRL-G j @tab 下の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_j| @tab CTRL-G <Down> @tab 下の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_k| @tab CTRL-G CTRL-K @tab 上の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_k| @tab CTRL-G k @tab 上の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_k| @tab CTRL-G <Up> @tab 上の行へ移動。カーソルは挿入開始位置と同じ列へ
@item |i_CTRL-G_u| @tab CTRL-G u @tab アンドゥで元に戻す地点を新たに設定
@item |i_CTRL-G_U| @tab CTRL-G U @tab 次のカーソル移動でアンドゥを分割しない
@item |i_<BS>| @tab <BS> @tab カーソルの前にある文字を削除する。
@item |i_digraph| @tab @{char1@}<BS>@{char2@} @tab ダイグラフを入力する。 ('@option{digraph}' オプションがオンのとき)
@item |i_CTRL-H| @tab CTRL-H @tab <BS> と同じ
@item |i_<Tab>| @tab <Tab> @tab <Tab> 文字を挿入
@item |i_CTRL-I| @tab CTRL-I @tab <Tab> と同じ
@item |i_<NL>| @tab <NL> @tab <CR> と同じ
@item |i_CTRL-J| @tab CTRL-J @tab <CR> と同じ
@item |i_CTRL-K| @tab CTRL-K @{char1@} @{char2@} @tab ダイグラフを入力する。
@item |i_CTRL-L| @tab CTRL-L @tab '@option{insertmode}'がオンのとき、挿入モードを終了する
@item |i_<CR>| @tab <CR> @tab 改行を入力。
@item |i_CTRL-M| @tab CTRL-M @tab <CR> と同じ。
@item |i_CTRL-N| @tab CTRL-N @tab カーソルの前にあるキーワードで前方検索し、一致した単語で補完する。
@item |i_CTRL-O| @tab CTRL-O @tab 1 回コマンドを実行し、挿入モードに戻る。
@item |i_CTRL-P| @tab CTRL-P @tab カーソルの前にあるキーワードで後方検索し、一致した単語で補完する。
@item |i_CTRL-Q| @tab CTRL-Q @tab CTRL-V と同じ。端末制御に使用されている場合を除く。
@item |i_CTRL-R| @tab CTRL-R @{0-9a-z"%#*:=@} @tab レジスタに保存されている文字列を挿入。
@item |i_CTRL-R_CTRL-R| @tab CTRL-R CTRL-R @{0-9a-z"%#*:=@} @tab レジスタに保存されている文字列そのものを挿入。
@item |i_CTRL-R_CTRL-O| @tab CTRL-R CTRL-O @{0-9a-z"%#*:=@} @tab レジスタに保存されている文字列そのものを挿入。インデントは挿入しない。
@item |i_CTRL-R_CTRL-P| @tab CTRL-R CTRL-P @{0-9a-z"%#*:=@} @tab レジスタに保存されている文字列そのものを挿入。インデントは固定。
@item @tab CTRL-S @tab (端末制御に使用)
@item |i_CTRL-T| @tab CTRL-T @tab 現在の行に @option{shiftwidth} 分のインデントを挿入する。
@item |i_CTRL-U| @tab CTRL-U @tab 現在の行に挿入したすべての文字を削除する。
@item |i_CTRL-V| @tab CTRL-V @{char@} @tab 続いて入力する数字以外の文字をそのまま挿入する
@item |i_CTRL-V_digit| @tab CTRL-V @{number@} @tab 続いて入力する 3 桁の 10 進数で1バイト文字を指定して挿入
@item |i_CTRL-W| @tab CTRL-W @tab カーソルの前にある単語を削除する。
@item |i_CTRL-X| @tab CTRL-X @{mode@} @tab CTRL-X サブモードに移行する。詳しくは |i_CTRL-X_index| を参照。
@item |i_CTRL-Y| @tab CTRL-Y @tab 上の行のカーソルと同じ位置にある文字を挿入する
@item |i_CTRL-Z| @tab CTRL-Z @tab '@option{insertmode}' がセットされている場合: Vim をサスペンドする。
@item |i_<Esc>| @tab <Esc> @tab 挿入モードを終了する。('@option{insertmode}' がセットされていない場合)
@item |i_CTRL-[| @tab CTRL-[ @tab <Esc> と同じ。
@item |i_CTRL-\_CTRL-N| @tab CTRL-\ CTRL-N @tab ノーマルモードへ移行。
@item |i_CTRL-\_CTRL-G| @tab CTRL-\ CTRL-G @tab '@option{insertmode}' に合わせたモードへ移行。
@item @tab CTRL-\ a - z @tab 将来の拡張のために予約。
@item @tab CTRL-\ others @tab 未使用
@item |i_CTRL-]| @tab CTRL-] @tab 短縮入力を適用する
@item @tab CTRL-^ @tab マップ|:lmap|の有効無効を切り替える
@item |i_CTRL-_| @tab CTRL-_ @tab '@option{allowrevins}' がオンのとき、言語を切り替える。(ヘブライ語、ペルシア語) @{|+rightleft| 機能付きでコンパイルしたときのみ@}
@item @tab <Space> to '~' @tab 未使用。ただし CTRL-D が後に続く '0' と '^' は除く。
@item
@item |i_0_CTRL-D| @tab 0 CTRL-D @tab 現在の行の全インデントを削除する。
@item |i_^_CTRL-D| @tab ^ CTRL-D @tab 現在の行の全インデントを削除し、次の行に復元。
@item
@item |i_<Del>| @tab <Del> @tab カーソル位置の文字を削除。
@item 
@item @tab Meta characters (0x80 to 0xff, 128 to 255) @tab 	未使用
@item
@item |i_<Left>| @tab <Left> @tab カーソルを1文字左へ移動。
@item |i_<S-Left>| @tab <S-Left> @tab カーソルを 1 単語左へ移動。
@item |i_<C-Left>| @tab <C-Left> @tab カーソルを 1 単語左へ移動。
@item |i_<Right>| @tab <Right> @tab カーソルを 1 文字右へ移動。
@item |i_<S-Right>| @tab <S-Right> @tab カーソルを 1 単語右へ移動。
@item |i_<C-Right>| @tab <C-Right> @tab カーソルを 1 単語右へ移動。
@item |i_<Up>| @tab <Up> @tab カーソルを 1 行上へ移動。
@item |i_<S-Up>| @tab <S-Up> @tab <PageUp> と同じ。
@item |i_<Down>| @tab <Down> @tab カーソルを 1 行下へ移動。
@item |i_<S-Down>| @tab <S-Down> @tab <PageDown> と同じ。
@item |i_<Home>| @tab <Home> @tab カーソルを行の先頭へ移動。
@item |i_<C-Home>| @tab <C-Home> @tab カーソルを行の先頭へ移動。
@item |i_<End>| @tab <End> @tab カーソルを行末へ移動。
@item |i_<C-End>| @tab <C-End> @tab カーソルを行末へ移動。
@item |i_<PageUp>| @tab <PageUp> @tab 1 画面上へスクロール。
@item |i_<PageDown>| @tab <PageDown> @tab 1 画面下へスクロール。
@item |i_<F1>| @tab <F1> @tab <Help> と同じ。
@item |i_<Help>| @tab <Help> @tab 挿入モードを終了し、ヘルプウィンドウを表示する。
@item |i_<Insert>| @tab <Insert> @tab 挿入/置換モードをトグルする。
@item |i_<LeftMouse>| @tab <LeftMouse> @tab カーソルをマウスクリックした位置へ移動。
@item |i_<ScrollWheelDown>| @tab <ScrollWheelDown> @tab ウィンドウを 3 行下へ
@item |i_<S-ScrollWheelDown>| @tab <S-ScrollWheelDown> @tab ウィンドウを 1 画面下へ
@item |i_<ScrollWheelUp>| @tab <ScrollWheelUp> @tab ウィンドウを 3 行上へ
@item |i_<S-ScrollWheelUp>| @tab <S-ScrollWheelUp> @tab ウィンドウを 1 画面上へ
@item |i_<ScrollWheelLeft>| @tab <ScrollWheelLeft> @tab ウィンドウを 6 列左へ
@item |i_<S-ScrollWheelLeft>| @tab <S-ScrollWheelLeft> @tab ウィンドウを 1 画面左へ
@item |i_<ScrollWheelRight>| @tab <ScrollWheelRight> @tab ウィンドウを 6 列右へ
@item |i_<S-ScrollWheelRight>| @tab <S-ScrollWheelRight> @tab ウィンドウを 1 画面右へ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
commands in CTRL-X submode				*i_CTRL-X_index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{i_CTRL-X_index}
@cindex i_CTRL-X_index
@unnumberedsubsec CTRL-X サブモードで使用するコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|i_CTRL-X_CTRL-D|	CTRL-X CTRL-D	complete defined identifiers
|i_CTRL-X_CTRL-E|	CTRL-X CTRL-E	scroll up
|i_CTRL-X_CTRL-F|	CTRL-X CTRL-F	complete file names
|i_CTRL-X_CTRL-I|	CTRL-X CTRL-I	complete identifiers
|i_CTRL-X_CTRL-K|	CTRL-X CTRL-K	complete identifiers from dictionary
|i_CTRL-X_CTRL-L|	CTRL-X CTRL-L	complete whole lines
|i_CTRL-X_CTRL-N|	CTRL-X CTRL-N	next completion
|i_CTRL-X_CTRL-O|	CTRL-X CTRL-O	omni completion
|i_CTRL-X_CTRL-P|	CTRL-X CTRL-P	previous completion
|i_CTRL-X_CTRL-S|	CTRL-X CTRL-S	spelling suggestions
|i_CTRL-X_CTRL-T|	CTRL-X CTRL-T	complete identifiers from thesaurus
|i_CTRL-X_CTRL-Y|	CTRL-X CTRL-Y	scroll down
|i_CTRL-X_CTRL-U|	CTRL-X CTRL-U	complete with 'completefunc'
|i_CTRL-X_CTRL-V|	CTRL-X CTRL-V	complete like in : command line
|i_CTRL-X_CTRL-]|	CTRL-X CTRL-]	complete tags
|i_CTRL-X_s|		CTRL-X s	spelling suggestions
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .3 .4
@item |i_CTRL-X_CTRL-D| @tab CTRL-X CTRL-D @tab 定義済みの識別子を補完。
@item |i_CTRL-X_CTRL-E| @tab CTRL-X CTRL-E @tab ウィンドウを上へスクロール。
@item |i_CTRL-X_CTRL-F| @tab CTRL-X CTRL-F @tab ファイル名を補完。
@item |i_CTRL-X_CTRL-I| @tab CTRL-X CTRL-I @tab 識別子を補完。
@item |i_CTRL-X_CTRL-K| @tab CTRL-X CTRL-K @tab 辞書の識別子を補完。
@item |i_CTRL-X_CTRL-L| @tab CTRL-X CTRL-L @tab 行全体を補完。
@item |i_CTRL-X_CTRL-N| @tab CTRL-X CTRL-N @tab 次の補完候補。
@item |i_CTRL-X_CTRL-O| @tab CTRL-X CTRL-O @tab オムニ補完
@item |i_CTRL-X_CTRL-P| @tab CTRL-X CTRL-P @tab 前の補完候補。
@item |i_CTRL-X_CTRL-S| @tab CTRL-X CTRL-S @tab スペリング補完
@item |i_CTRL-X_CTRL-T| @tab CTRL-X CTRL-T @tab 類語による補完
@item |i_CTRL-X_CTRL-Y| @tab CTRL-X CTRL-Y @tab ウィンドウを下へスクロール。
@item |i_CTRL-X_CTRL-U| @tab CTRL-X CTRL-U @tab '@option{completefunc}' による補完
@item |i_CTRL-X_CTRL-V| @tab CTRL-X CTRL-V @tab コマンドラインと同様な補完
@item |i_CTRL-X_CTRL-]| @tab CTRL-X CTRL-] @tab タグを補完。
@item |i_CTRL-X_s| @tab CTRL-X s @tab スペリング補完
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
{not available when compiled without the |+insert_expand| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{|+insert_expand| 機能付きでコンパイルしたときのみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Normal mode						*normal-index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{normal-index}
@cindex normal-index
@section 2. ノーマルモード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CHAR	 any non-blank character
WORD	 a sequence of non-blank characters
N	 a number entered before the command
{motion} a cursor movement command
Nmove	 the text that is moved over with a {motion}
SECTION	 a section that possibly starts with '}' instead of '{'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .25 .75
@item CHAR @tab 空白以外の文字
@item WORD @tab 空白以外の文字からなる文字列
@item N @tab コマンドの前に入力される数字
@item @{motion@} @tab カーソル移動コマンド
@item Nmove @tab @{motion@} でカーソルが通過するテキスト
@item SECTION @tab セクション。'@{' ではなく '@}' の場合もある |section|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
note: 1 = cursor movement command; 2 = can be undone/redone
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
1 = カーソル移動コマンド  2 = アンドゥ/リドゥ可能
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
		CTRL-@		   not used
|CTRL-A|	CTRL-A		2  add N to number at/after cursor
|CTRL-B|	CTRL-B		1  scroll N screens Backwards
|CTRL-C|	CTRL-C		   interrupt current (search) command
|CTRL-D|	CTRL-D		   scroll Down N lines (default: half a screen)
|CTRL-E|	CTRL-E		   scroll N lines upwards (N lines Extra)
|CTRL-F|	CTRL-F		1  scroll N screens Forward
|CTRL-G|	CTRL-G		   display current file name and position
|<BS>|		<BS>		1  same as "h"
|CTRL-H|	CTRL-H		1  same as "h"
|<Tab>|		<Tab>		1  go to N newer entry in jump list
|CTRL-I|	CTRL-I		1  same as <Tab>
|<NL>|		<NL>		1  same as "j"
|CTRL-J|	CTRL-J		1  same as "j"
		CTRL-K		   not used
|CTRL-L|	CTRL-L		   redraw screen
|<CR>|		<CR>		1  cursor to the first CHAR N lines lower
|CTRL-M|	CTRL-M		1  same as <CR>
|CTRL-N|	CTRL-N		1  same as "j"
|CTRL-O|	CTRL-O		1  go to N older entry in jump list
|CTRL-P|	CTRL-P		1  same as "k"
		CTRL-Q		   (used for terminal control flow)
|CTRL-R|	CTRL-R		2  redo changes which were undone with 'u'
		CTRL-S		   (used for terminal control flow)
|CTRL-T|	CTRL-T		   jump to N older Tag in tag list
|CTRL-U|	CTRL-U		   scroll N lines Upwards (default: half a
				   screen)
|CTRL-V|	CTRL-V		   start blockwise Visual mode
|CTRL-W|	CTRL-W {char}	   window commands, see |CTRL-W|
|CTRL-X|	CTRL-X		2  subtract N from number at/after cursor
|CTRL-Y|	CTRL-Y		   scroll N lines downwards
|CTRL-Z|	CTRL-Z		   suspend program (or start new shell)
		CTRL-[ <Esc>	   not used
|CTRL-\_CTRL-N|	CTRL-\ CTRL-N	   go to Normal mode (no-op)
|CTRL-\_CTRL-G|	CTRL-\ CTRL-G	   go to mode specified with 'insertmode'
		CTRL-\ a - z	   reserved for extensions
		CTRL-\ others      not used
|CTRL-]|	CTRL-]		   :ta to ident under cursor
|CTRL-^|	CTRL-^		   edit Nth alternate file (equivalent to
				   ":e #N")
		CTRL-_		   not used

|<Space>|	<Space>		1  same as "l"
|!|		!{motion}{filter}
				2  filter Nmove text through the {filter}
				   command
|!!|		!!{filter}	2  filter N lines through the {filter} command
|quote|		"{a-zA-Z0-9.%#:-"}  use register {a-zA-Z0-9.%#:-"} for next
				   delete, yank or put (uppercase to append)
				   ({.%#:} only work with put)
|#|		#		1  search backward for the Nth occurrence of
				   the ident under the cursor
|$|		$		1  cursor to the end of Nth next line
|%|		%		1  find the next (curly/square) bracket on
				   this line and go to its match, or go to
				   matching comment bracket, or go to matching
				   preprocessor directive.
|N%|		{count}%	1  go to N percentage in the file
|&|		&		2  repeat last :s
|'|		'{a-zA-Z0-9}	1  cursor to the first CHAR on the line with
				   mark {a-zA-Z0-9}
|''|		''		1  cursor to the first CHAR of the line where
				   the cursor was before the latest jump.
|'(|		'(		1  cursor to the first CHAR on the line of the
				   start of the current sentence
|')|		')		1  cursor to the first CHAR on the line of the
				   end of the current sentence
|'<|		'<		1  cursor to the first CHAR of the line where
				   highlighted area starts/started in the
				   current buffer.
|'>|		'>		1  cursor to the first CHAR of the line where
				   highlighted area ends/ended in the current
				   buffer.
|'[|		'[		1  cursor to the first CHAR on the line of the
				   start of last operated text or start of put
				   text
|']|		']		1  cursor to the first CHAR on the line of the
				   end of last operated text or end of put
				   text
|'{|		'{		1  cursor to the first CHAR on the line of the
				   start of the current paragraph
|'}|		'}		1  cursor to the first CHAR on the line of the
				   end of the current paragraph
|(|		(		1  cursor N sentences backward
|)|		)		1  cursor N sentences forward
|star|		*		1  search forward for the Nth occurrence of
				   the ident under the cursor
|+|		+		1  same as <CR>
|,|		,		1  repeat latest f, t, F or T in opposite
				   direction N times
|-|		-		1  cursor to the first CHAR N lines higher
|.|		.		2  repeat last change with count replaced with
				   N
|/|		/{pattern}<CR>	1  search forward for the Nth occurrence of
				   {pattern}
|/<CR>|		/<CR>		1  search forward for {pattern} of last search
|count|		0		1  cursor to the first char of the line
|count|		1		   prepend to command to give a count
|count|		2			"
|count|		3			"
|count|		4			"
|count|		5			"
|count|		6			"
|count|		7			"
|count|		8			"
|count|		9			"
|:|		:		1  start entering an Ex command
|N:|		{count}:	   start entering an Ex command with range
				   from current line to N-1 lines down
|;|		;		1  repeat latest f, t, F or T N times
|<|		<{motion}	2  shift Nmove lines one 'shiftwidth'
				   leftwards
|<<|		<<		2  shift N lines one 'shiftwidth' leftwards
|=|		={motion}	2  filter Nmove lines through "indent"
|==|		==		2  filter N lines through "indent"
|>|		>{motion}	2  shift Nmove lines one 'shiftwidth'
				   rightwards
|>>|		>>		2  shift N lines one 'shiftwidth' rightwards
|?|		?{pattern}<CR>	1  search backward for the Nth previous
				   occurrence of {pattern}
|?<CR>|		?<CR>		1  search backward for {pattern} of last search
|@|		@{a-z}		2  execute the contents of register {a-z}
				   N times
|@:|		@:		   repeat the previous ":" command N times
|@@|		@@		2  repeat the previous @{a-z} N times
|A|		A		2  append text after the end of the line N times
|B|		B		1  cursor N WORDS backward
|C|		["x]C		2  change from the cursor position to the end
				   of the line, and N-1 more lines [into
				   register x]; synonym for "c$"
|D|		["x]D		2  delete the characters under the cursor
				   until the end of the line and N-1 more
				   lines [into register x]; synonym for "d$"
|E|		E		1  cursor forward to the end of WORD N
|F|		F{char}		1  cursor to the Nth occurrence of {char} to
				   the left
|G|		G		1  cursor to line N, default last line
|H|		H		1  cursor to line N from top of screen
|I|		I		2  insert text before the first CHAR on the
				   line N times
|J|		J		2  Join N lines; default is 2
|K|		K		   lookup Keyword under the cursor with
				   'keywordprg'
|L|		L		1  cursor to line N from bottom of screen
|M|		M		1  cursor to middle line of screen
|N|		N		1  repeat the latest '/' or '?' N times in
				   opposite direction
|O|		O		2  begin a new line above the cursor and
				   insert text, repeat N times
|P|		["x]P		2  put the text [from register x] before the
				   cursor N times
|Q|		Q		   switch to "Ex" mode
|R|		R		2  enter replace mode: overtype existing
				   characters, repeat the entered text N-1
				   times
|S|		["x]S		2  delete N lines [into register x] and start
				   insert; synonym for "cc".
|T|		T{char}		1  cursor till after Nth occurrence of {char}
				   to the left
|U|		U		2  undo all latest changes on one line
|V|		V		   start linewise Visual mode
|W|		W		1  cursor N WORDS forward
|X|		["x]X		2  delete N characters before the cursor [into
				   register x]
|Y|		["x]Y		   yank N lines [into register x]; synonym for
				   "yy"
|ZZ|		ZZ		   store current file if modified, and exit
|ZQ|		ZQ		   exit current file always
|[|		[{char}		   square bracket command (see |[| below)
		\		   not used
|]|		]{char}		   square bracket command (see |]| below)
|^|		^		1  cursor to the first CHAR of the line
|_|		_		1  cursor to the first CHAR N - 1 lines lower
|`|		`{a-zA-Z0-9}	1  cursor to the mark {a-zA-Z0-9}
|`(|		`(		1  cursor to the start of the current sentence
|`)|		`)		1  cursor to the end of the current sentence
|`<|		`<		1  cursor to the start of the highlighted area
|`>|		`>		1  cursor to the end of the highlighted area
|`[|		`[		1  cursor to the start of last operated text
				   or start of putted text
|`]|		`]		1  cursor to the end of last operated text or
				   end of putted text
|``|		``		1  cursor to the position before latest jump
|`{|		`{		1  cursor to the start of the current paragraph
|`}|		`}		1  cursor to the end of the current paragraph
|a|		a		2  append text after the cursor N times
|b|		b		1  cursor N words backward
|c|		["x]c{motion}	2  delete Nmove text [into register x] and
				   start insert
|cc|		["x]cc		2  delete N lines [into register x] and start
				   insert
|d|		["x]d{motion}	2  delete Nmove text [into register x]
|dd|		["x]dd		2  delete N lines [into register x]
|do|		do		2  same as ":diffget"
|dp|		dp		2  same as ":diffput"
|e|		e		1  cursor forward to the end of word N
|f|		f{char}		1  cursor to Nth occurrence of {char} to the
				   right
|g|		g{char}		   extended commands, see |g| below
|h|		h		1  cursor N chars to the left
|i|		i		2  insert text before the cursor N times
|j|		j		1  cursor N lines downward
|k|		k		1  cursor N lines upward
|l|		l		1  cursor N chars to the right
|m|		m{A-Za-z}	   set mark {A-Za-z} at cursor position
|n|		n		1  repeat the latest '/' or '?' N times
|o|		o		2  begin a new line below the cursor and
				   insert text, repeat N times
|p|		["x]p		2  put the text [from register x] after the
				   cursor N times
|q|		q{0-9a-zA-Z"}	   record typed characters into named register
				   {0-9a-zA-Z"} (uppercase to append)
|q|		q		   (while recording) stops recording
|q:|		q:		   edit : command-line in command-line window
|q/|		q/		   edit / command-line in command-line window
|q?|		q?		   edit ? command-line in command-line window
|r|		r{char}		2  replace N chars with {char}
|s|		["x]s		2  (substitute) delete N characters [into
				   register x] and start insert
|t|		t{char}		1  cursor till before Nth occurrence of {char}
				   to the right
|u|		u		2  undo changes
|v|		v		   start characterwise Visual mode
|w|		w		1  cursor N words forward
|x|		["x]x		2  delete N characters under and after the
				   cursor [into register x]
|y|		["x]y{motion}	   yank Nmove text [into register x]
|yy|		["x]yy		   yank N lines [into register x]
|z|		z{char}		   commands starting with 'z', see |z| below
|{|		{		1  cursor N paragraphs backward
|bar|		|		1  cursor to column N
|}|		}		1  cursor N paragraphs forward
|~|		~		2  'tildeop' off: switch case of N characters
				   under cursor and move the cursor N
				   characters to the right
|~|		~{motion}	   'tildeop' on: switch case of Nmove text
|<C-End>|	<C-End>		1  same as "G"
|<C-Home>|	<C-Home>	1  same as "gg"
|<C-Left>|	<C-Left>	1  same as "b"
|<C-LeftMouse>|	<C-LeftMouse>	   ":ta" to the keyword at the mouse click
|<C-Right>|	<C-Right>	1  same as "w"
|<C-RightMouse>| <C-RightMouse>	   same as "CTRL-T"
|<Del>|		["x]<Del>	2  same as "x"
|N<Del>|	{count}<Del>	   remove the last digit from {count}
|<Down>|	<Down>		1  same as "j"
|<End>|		<End>		1  same as "$"
|<F1>|		<F1>		   same as <Help>
|<Help>|	<Help>		   open a help window
|<Home>|	<Home>		1  same as "0"
|<Insert>|	<Insert>	2  same as "i"
|<Left>|	<Left>		1  same as "h"
|<LeftMouse>|	<LeftMouse>	1  move cursor to the mouse click position
|<MiddleMouse>|	<MiddleMouse>	2  same as "gP" at the mouse click position
|<PageDown>|	<PageDown>	   same as CTRL-F
|<PageUp>|	<PageUp>	   same as CTRL-B
|<Right>|	<Right>		1  same as "l"
|<RightMouse>|	<RightMouse>	   start Visual mode, move cursor to the mouse
				   click position
|<S-Down>|	<S-Down>	1  same as CTRL-F
|<S-Left>|	<S-Left>	1  same as "b"
|<S-LeftMouse>|	<S-LeftMouse>	   same as "*" at the mouse click position
|<S-Right>|	<S-Right>	1  same as "w"
|<S-RightMouse>| <S-RightMouse>	   same as "#" at the mouse click position
|<S-Up>|	<S-Up>		1  same as CTRL-B
|<Undo>|	<Undo>		2  same as "u"
|<Up>|		<Up>		1  same as "k"
|<ScrollWheelDown>|	<ScrollWheelDown>	move window three lines down
|<S-ScrollWheelDown>|	<S-ScrollWheelDown>	move window one page down
|<ScrollWheelUp>|	<ScrollWheelUp>		move window three lines up
|<S-ScrollWheelUp>|	<S-ScrollWheelUp>	move window one page up
|<ScrollWheelLeft>|	<ScrollWheelLeft>	move window six columns left
|<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	move window one page left
|<ScrollWheelRight>|	<ScrollWheelRight>	move window six columns right
|<S-ScrollWheelRight>|	<S-ScrollWheelRight>	move window one page right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .20 .20 .05 .55
@item タグ @tab 文字 @tab 注 @tab ノーマルモードでの動作
@item @tab CTRL-@@ @tab @tab 未使用
@item |CTRL-A| @tab CTRL-A @tab 2 @tab カーソル位置/カーソルより後ろにある数字に N を加える。
@item |CTRL-B| @tab CTRL-B @tab 1 @tab ウィンドウを N 画面上へスクロール。
@item |CTRL-C| @tab CTRL-C @tab @tab 現在の(検索)コマンドを中断する。
@item |CTRL-D| @tab CTRL-D @tab @tab ウィンドウを N 行下へスクロールする。(省略時は半画面)
@item |CTRL-E| @tab CTRL-E @tab @tab ウィンドウを N 行下へスクロールする。
@item |CTRL-F| @tab CTRL-F @tab 1 @tab ウィンドウを N 画面下へスクロール。
@item |CTRL-G| @tab CTRL-G @tab @tab 現在のファイル名とカーソル位置を表示する。
@item |<BS>| @tab <BS> @tab 1 @tab "h" と同じ。
@item |CTRL-H| @tab CTRL-H @tab 1 @tab "h" と同じ。
@item |<Tab>| @tab <Tab> @tab 1 @tab N 個先のジャンプリストの場所へジャンプする。
@item |CTRL-I| @tab CTRL-I @tab 1 @tab <Tab> と同じ。
@item |<NL>| @tab <NL> @tab 1 @tab "j" と同じ。
@item |CTRL-J| @tab CTRL-J @tab 1 @tab "j" と同じ。
@item @tab CTRL-K @tab @tab 未使用
@item |CTRL-L| @tab CTRL-L @tab @tab 画面の再描画。
@item |<CR>| @tab <CR> @tab 1 @tab カーソルを N 行下の先頭の CHAR へ移動。
@item |CTRL-M| @tab CTRL-M @tab 1 @tab <CR> と同じ。
@item |CTRL-N| @tab CTRL-N @tab 1 @tab "j" と同じ。
@item |CTRL-O| @tab CTRL-O @tab 1 @tab N 個前のジャンプリストの場所へジャンプする。
@item |CTRL-P| @tab CTRL-P @tab 1 @tab "k" と同じ。
@item @tab CTRL-Q @tab @tab (端末制御に使用)
@item |CTRL-R| @tab CTRL-R @tab 2 @tab 'u' でアンドゥした変更をリドゥする。
@item @tab CTRL-S @tab @tab (端末制御に使用)
@item |CTRL-T| @tab CTRL-T @tab @tab N 個前のタグリストの場所へジャンプする。
@item |CTRL-U| @tab CTRL-U @tab @tab ウィンドウを N 行上へスクロール。(省略時は半画面)
@item |CTRL-V| @tab CTRL-V @tab @tab 矩形ビジュアルモードを開始する。
@item |CTRL-W| @tab CTRL-W @{char@} @tab @tab ウィンドウコマンド、|CTRL-W| を参照。
@item |CTRL-X| @tab CTRL-X @tab 2 @tab カーソル位置/カーソルより後ろにある数字に N を減じる。
@item |CTRL-Y| @tab CTRL-Y @tab @tab ウィンドウを N 行上へスクロール。
@item |CTRL-Z| @tab CTRL-Z @tab @tab Vim の実行を中断。(新しいシェルを開始する)
@item @tab CTRL-[ <Esc> @tab @tab 未使用
@item |CTRL-\_CTRL-N| @tab CTRL-\ CTRL-N @tab @tab ノーマルモードへ移行。(つまり何もしない)
@item |CTRL-\_CTRL-G| @tab CTRL-\ CTRL-G @tab @tab '@option{insertmode}' に合わせたモードへ移行。
@item @tab CTRL-\ a - z @tab @tab 将来の拡張のために予約。
@item @tab CTRL-\ others @tab @tab 未使用
@item |CTRL-]| @tab CTRL-] @tab @tab カーソル位置の単語を :ta で検索する。
@item |CTRL-^| @tab CTRL-^ @tab @tab N 番目のファイルを編集する。(":e #N" と同じ)
@item @tab CTRL-_ @tab @tab 未使用
@item
@item |<Space>| @tab <Space> @tab 1 @tab "l" と同じ。
@item |!| @tab !@{motion@}@{filter@} @tab 2 @tab Nmove のテキストを @{filter@} コマンドでフィルタする。
@item |!!| @tab !!@{filter@} @tab 2 @tab N 行を @{filter@} コマンドでフィルタする。
@item |quote| @tab "@{a-zA-Z0-9.%#:-"@} @tab @tab 削除、ヤンク、プットコマンドでレジスタ @{a-zA-Z0-9.%#:-"@} (大文字は既存のレジスタに追加する)を指定するために使用する。(@{.%#:@} はプットコマンドでのみ有効)
@item |#| @tab # @tab 1 @tab カーソル位置の単語で後方検索し、N 番目に見つかった場所へ移動。
@item |$| @tab $ @tab 1 @tab カーソルを N 行下の行末へ移動。
@item |%| @tab % @tab 1 @tab 現在の行にある次の括弧や C 風コメント (/* */) の対、対応するプリプロセッサーなどに移動
@item |N%| @tab @{count@}% @tab 1 @tab ファイルの N パーセントの位置に移動。
@item |&| @tab & @tab 2 @tab 最後に実行した :s コマンドを繰り返す。
@item |'| @tab '@{a-zA-Z0-9@} @tab 1 @tab @{a-zA-Z0-9@} でマークした行の先頭の CHAR へカーソルを移動。
@item |''| @tab '' @tab 1 @tab 最後のジャンプの前にいた行の先頭の CHAR へカーソルを移動。
@item |'(| @tab '( @tab 1 @tab 現在の文の文頭がある行の先頭の CHAR へ移動
@item |')| @tab ') @tab 1 @tab 現在の文の文末がある行の先頭の CHAR へ移動
@item |'<| @tab '< @tab 1 @tab カレントバッファで選択されていた選択範囲の最初の行の先頭の CHAR へカーソルを移動。
@item |'>| @tab '> @tab 1 @tab カレントバッファで選択されていた選択範囲の最後の行の先頭の CHAR へカーソルを移動。
@item |'[| @tab '[ @tab 1 @tab 最後に編集したテキストまたは挿入したテキストの先頭行の先頭の CHAR へカーソルを移動。
@item |']| @tab '] @tab 1 @tab 最後に編集したテキストまたは挿入したテキストの末尾行の先頭の CHAR へカーソルを移動。
@item |'@{| @tab '@{ @tab 1 @tab 現在の段落の最初の行の先頭の CHAR へ移動
@item |'@}| @tab '@} @tab 1 @tab 現在の段落の最後の行の先頭の CHAR へ移動
@item |(| @tab ( @tab 1 @tab カーソルを N 文だけ戻す。
@item |)| @tab ) @tab 1 @tab カーソルを N 文だけ先に進める。
@item |star| @tab * @tab 1 @tab カーソル位置の単語を前方検索し、N 番目に見つかった位置へ移動。
@item |+| @tab + @tab 1 @tab <CR>と同じ。
@item |,| @tab , @tab 1 @tab 最後に実行した f, t, F または T コマンドを逆向きに N 回繰り返す。
@item |-| @tab - @tab 1 @tab カーソルを N 行上の先頭の CHAR へ移動。
@item |.| @tab . @tab 2 @tab 最後の編集を N 回繰り返す。
@item |/| @tab /@{pattern@}<CR> @tab 1 @tab @{pattern@} で前方検索し、N 番目に見つかった位置へ移動。
@item |/<CR>| @tab /<CR> @tab 1 @tab 最後の検索の @{pattern@} で前方検索。
@item |count| @tab 0 @tab 1 @tab カーソルを行頭文字へ移動。
@item |count| @tab 1 @tab @tab カウントを指定するためにコマンドの前に入力
@item |count| @tab 2 @tab @tab "
@item |count| @tab 3 @tab @tab "
@item |count| @tab 4 @tab @tab "
@item |count| @tab 5 @tab @tab "
@item |count| @tab 6 @tab @tab "
@item |count| @tab 7 @tab @tab "
@item |count| @tab 8 @tab @tab "
@item |count| @tab 9 @tab @tab "
@item |:| @tab : @tab 1 @tab Ex コマンドの入力開始。
@item |N:| @tab @{count@}: @tab @tab カレント行から N-1 行下の行までの範囲で有効となる Ex コマンドの入力開始。
@item |;| @tab ; @tab 1 @tab 最後の f, t, F または T を N 回繰り返す。
@item |<| @tab <@{motion@} @tab 2 @tab Nmove の行を 'shiftwidth' 分だけ左へシフト。
@item |<<| @tab << @tab 2 @tab N 行を 'shiftwidth' 分だけ左へシフト。
@item |=| @tab =@{motion@} @tab 2 @tab Nmove の行のインデントを調整する。
@item |==| @tab == @tab 2 @tab N 行のインデントを調整する。
@item |>| @tab >@{motion@} @tab 2 @tab Nmove の行を 'shiftwidth' 分だけ右へシフト。
@item |>>| @tab >> @tab 2 @tab N 行を 'shiftwidth' 分だけ右へシフト。
@item |?| @tab ?@{pattern@}<CR> @tab 1 @tab @{pattern@} で後方検索し、N 番目に見つかった位置へ移動。
@item |?<CR>| @tab ?<CR> @tab 1 @tab 最後の検索の @{pattern@} で後方検索。
@item |@@| @tab @@@{a-z@} @tab 2 @tab レジスタ @{a-z@} の内容を N 回実行する。
@item |@@:| @tab @: @tab @tab 最後の ":" コマンドを N 回実行する。
@item |@@@@| @tab @@@@ @tab 2 @tab 最後の @@@{a-z@} コマンドを N 回実行する。
@item |A| @tab A @tab 2 @tab 行末に N 回テキストを追加する。
@item |B| @tab B @tab 1 @tab カーソルを N WORD だけ戻す。
@item |C| @tab ["x]C @tab 2 @tab カーソル位置から行末までと続く N-1 行のテキストを削除し [レジスタ x に保存して]、テキストを入力する; "c$" と同じ。
@item |D| @tab ["x]D @tab 2 @tab カーソル位置から行末までと続く N-1 行のテキストを削除する [レジスタ x に保存する]; "d$" と同じ。
@item |E| @tab E @tab 1 @tab カーソルを N 先の WORD の末尾へ移動。
@item |F| @tab F@{char@} @tab 1 @tab カーソルを左方向へ N 個目の @{char@} に移動。
@item |G| @tab G @tab 1 @tab カーソルを N 行目に移動、省略時は最後の行。
@item |H| @tab H @tab 1 @tab カーソルを画面の上から N 行目に移動。
@item |I| @tab I @tab 2 @tab 行の先頭の CHAR の前に N 回テキストを挿入。
@item |J| @tab J @tab 2 @tab N 行結合。省略時は 2 行。
@item |K| @tab K @tab @tab カーソル位置のキーワードを '@option{keywordprg}' で調べる。
@item |L| @tab L @tab 1 @tab カーソルを画面の下から N 行目に移動。
@item |M| @tab M @tab 1 @tab カーソルを画面の中央の行に移動。
@item |N| @tab N @tab 1 @tab 最後に実行した '/' または '?' を逆方向に N 回実行する。
@item |O| @tab O @tab 2 @tab カーソルの上に新規に行を挿入し、テキストを入力、N 回繰り返す。
@item |P| @tab ["x]P @tab 2 @tab カーソルの前に[レジスタ x の]テキストを N 回挿入する。
@item |Q| @tab Q @tab @tab "Ex" モードに移行する。
@item |R| @tab R @tab 2 @tab 置換モードに移行する: 今ある文字を上書きする、入力したテキストを N-1 回繰り返す。
@item |S| @tab ["x]S @tab 2 @tab N 行削除し [レジスタ x に保存]、テキストの挿入開始; "cc" と同じ。
@item |T| @tab T@{char@} @tab 1 @tab カーソルを左方向へ N 個目の @{char@} の直後まで移動。
@item |U| @tab U @tab 2 @tab 1 行中の最近の変更をすべて取り消す。
@item |V| @tab V @tab @tab 行指定のビジュアルモードを開始する。
@item |W| @tab W @tab 1 @tab カーソルを N WORD 先に進める。
@item |X| @tab ["x]X @tab 2 @tab カーソルの前にある N 文字を削除する [レジスタ x に保存]。
@item |Y| @tab ["x]Y @tab @tab N 行 [レジスタ x に] ヤンクする; "yy" と同じ。
@item |ZZ| @tab ZZ @tab @tab カレントファイルが編集されていたら、保存して編集を終了する。
@item |ZQ| @tab ZQ @tab @tab カレントファイルの編集を終了する。
@item |[| @tab [@{char@} @tab @tab 大括弧コマンド (下の |[| を参照)
@item @tab @tab \ @tab 未使用
@item |]| @tab ]@{char@} @tab @tab 大括弧コマンド (下の|]|を参照)
@item |^| @tab ^ @tab 1 @tab カーソルを行の先頭の CHAR へ移動。
@item |_| @tab _ @tab 1 @tab カーソルを N-1 行下の先頭の CHAR へ移動。
@item |`| @tab `@{a-zA-Z0-9@} @tab 1 @tab カーソルをマーク @{a-zA-Z0-9@} へ移動。
@item |`(| @tab `( @tab 1 @tab 現在の文の文頭へ移動
@item |`)| @tab `) @tab 1 @tab 現在の文の文末へ移動
@item |`<| @tab `< @tab 1 @tab 最後に選択されていた選択範囲の先頭に移動
@item |`>| @tab `> @tab 1 @tab 最後に選択されていた選択範囲の末尾に移動
@item |`[| @tab `[ @tab 1 @tab 最後に編集したテキストまたは挿入したテキストの先頭へカーソルを移動。
@item |`]| @tab `] @tab 1 @tab 最後に編集したテキストまたは挿入したテキストの末尾へカーソルを移動。
@item |``| @tab `` @tab 1 @tab 最後のジャンプの前にいた位置へカーソルを移動。
@item |`@{| @tab `@{ @tab 1 @tab 現在の段落の最初へ移動
@item |`@}| @tab `@} @tab 1 @tab 現在の段落の最後へ移動
@item |a| @tab a @tab 2 @tab カーソルの直後に N 回テキストを追加する。
@item |b| @tab b @tab 1 @tab カーソルを N ワードだけ戻す。
@item |c| @tab ["x]c@{motion@} @tab 2 @tab Nmove のテキストを削除 [レジスタ x に保存] し、挿入モードへ移行。
@item |cc| @tab ["x]cc @tab 2 @tab N 行削除 [レジスタ x に保存] し、挿入モードへ移行。
@item |d| @tab ["x]d@{motion@} @tab 2 @tab Nmove のテキストを削除 [レジスタ x に保存]。
@item |dd| @tab ["x]dd @tab 2 @tab N 行削除 [レジスタ x に保存]。
@item |do| @tab do @tab 2 @tab ":diffget" と同じ。
@item |dp| @tab dp @tab 2 @tab ":diffput" と同じ。
@item |e| @tab e @tab 1 @tab カーソルを N 先のワードの末尾へ移動。
@item |f| @tab f@{char@} @tab 1 @tab カーソルを右方向へ N 個目の @{char@} に移動。
@item |g| @tab g@{char@} @tab @tab 拡張コマンド、下の |g| を参照。
@item |h| @tab h @tab 1 @tab カーソルを左へ N 文字移動。
@item |i| @tab i @tab 2 @tab カーソルの直前に N 回テキストを挿入する。
@item |j| @tab j @tab 1 @tab カーソルを N 行下へ移動する。
@item |k| @tab k @tab 1 @tab カーソルを N 行上へ移動する。
@item |l| @tab l @tab 1 @tab カーソルを右へ N 文字移動。
@item |m| @tab m@{A-Za-z@} @tab @tab カーソル位置にマーク @{A-Za-z@} をセットする。
@item |n| @tab n @tab 1 @tab 最後の '/' or '?' を N 回繰り返す。
@item |o| @tab o @tab 2 @tab カーソルの下に新規に行を挿入し、テキストを入力、N 回繰り返す。
@item |p| @tab ["x]p @tab 2 @tab カーソルの後に [バッファ x の] テキストを N 回挿入する。
@item |q| @tab q@{0-9a-zA-Z"@} @tab @tab 入力した文字をレジスタ @{0-9a-zA-Z"@} に記録する。(大文字なら既存のレジスタに追加)
@item |q| @tab q @tab @tab (記録中なら) レジスタへの記録を終了する。
@item |q:| @tab q: @tab @tab コマンドラインウィンドウで : のコマンドラインを編集する。
@item |q/| @tab q/ @tab @tab コマンドラインウィンドウで / のコマンドラインを編集する。
@item |q?| @tab q? @tab @tab コマンドラインウィンドウで ? のコマンドラインを編集する。
@item |r| @tab r@{char@} @tab 2 @tab N 文字を @{char@} で置き換える。
@item |s| @tab ["x]s @tab 2 @tab (置換) N 文字削除 [レジスタ x に保存] し、挿入モードに移行。
@item |t| @tab t@{char@} @tab 1 @tab カーソルを右方向へ N 個目の @{char@} の直前まで移動。
@item |u| @tab u @tab 2 @tab 変更をアンドゥ。
@item |v| @tab v @tab @tab 文字指定のビジュアルモードを開始する。
@item |w| @tab w @tab 1 @tab カーソルを N ワード先へ移動。
@item |x| @tab ["x]x @tab 2 @tab カーソル位置と直後の N 文字を削除[レジスタ x に保存]
@item |y| @tab ["x]y@{motion@} @tab @tab Nmove のテキストを[レジスタ x へ]ヤンク。
@item |yy| @tab ["x]yy @tab @tab N 行[レジスタ x へ]ヤンク。
@item |z| @tab z@{char@} @tab @tab 'z' で始まるコマンドの実行。下記参照|z|
@item |@{| @tab @@@{ @tab 1 @tab カーソルを N 段落戻す。
@item |bar| @tab | @tab 1 @tab カーソルを N カラムへ移動。
@item |@}| @tab @} @tab 1 @tab カーソルを N 段落進める。
@item |~| @tab ~ @tab 2 @tab 'tildeop' オフ: カーソル位置の N 文字の大文字小文字を逆転し、カーソルを右へ N 文字移動する。
@item |~| @tab ~@{motion@} @tab @tab 'tildeop' オン: Nmove のテキストの大文字小文字を逆転する。
@item |<C-End>| @tab <C-End> @tab 1 @tab "G" と同じ。
@item |<C-Home>| @tab <C-Home> @tab 1 @tab "gg" と同じ。
@item |<C-Left>| @tab <C-Left> @tab 1 @tab "b" と同じ。
@item |<C-Home>| @tab <C-Home> @tab 2 @tab "gg" と同じ。
@item |<C-Left>| @tab <C-Left> @tab 2 @tab "b" と同じ。
@item |<C-LeftMouse>| @tab <C-LeftMouse> @tab @tab マウスクリック位置のキーワードで ":ta" を実行する。
@item |<C-Right>| @tab <C-Right> @tab 1 @tab "w" と同じ。
@item |<C-RightMouse>| @tab <C-RightMouse> @tab @tab "CTRL-T" と同じ。
@item |<Del>| @tab ["x]<Del> @tab 2 @tab "x" と同じ。
@item |N<Del>| @tab @{count@}<Del> @tab @tab 入力した @{count@} から最後の数字を削除する。
@item |<Down>| @tab <Down> @tab 1 @tab "j" と同じ。
@item |<End>| @tab <End> @tab 1 @tab "$" と同じ。
@item |<F1>| @tab <F1> @tab @tab <Help> と同じ。
@item |<Help>| @tab <Help> @tab @tab ヘルプウィンドウを開く。
@item |<Home>| @tab <Home> @tab 1 @tab "0" と同じ。
@item |<Insert>| @tab <Insert> @tab 2 @tab "i" と同じ。
@item |<Left>| @tab <Left> @tab 1 @tab "h" と同じ。
@item |<LeftMouse>| @tab <LeftMouse> @tab 1 @tab カーソルをマウスクリック位置へ移動。
@item |<MiddleMouse>| @tab <MiddleMouse> @tab 2 @tab マウスクリック位置で実行した "gP" と同じ。
@item |<PageDown>| @tab <PageDown> @tab @tab CTRL-F と同じ。
@item |<PageUp>| @tab <PageUp> @tab @tab CTRL-B と同じ。
@item |<Right>| @tab <Right> @tab 1 @tab "l" と同じ。
@item |<RightMouse>| @tab <RightMouse> @tab @tab ビジュアルモードを開始、カーソルをマウスクリック位置へ移動。
@item |<S-Down>| @tab <S-Down> @tab 1 @tab CTRL-F と同じ。
@item |<S-Left>| @tab <S-Left> @tab 1 @tab "b" と同じ。
@item |<S-LeftMouse>| @tab <S-LeftMouse> @tab @tab マウスクリック位置で実行した "*" と同じ。
@item |<S-Right>| @tab <S-Right> @tab 1 @tab "w" と同じ。
@item |<S-RightMouse>| @tab <S-RightMouse> @tab @tab マウスクリック位置で実行した "#" と同じ。
@item |<S-Up>| @tab <S-Up> @tab 1 @tab CTRL-B と同じ。
@item |<Undo>| @tab <Undo> @tab 2 @tab "u" と同じ。
@item |<Up>| @tab <Up> @tab 1 @tab "k" と同じ。
@end multitable
@multitable @columnfractions .3 .3 .4
@item |<ScrollWheelDown>| @tab <ScrollWheelDown> @tab ウィンドウを3行下へ
@item |<S-ScrollWheelDown>| @tab <S-ScrollWheelDown> @tab ウィンドウを1画面下へ
@item |<ScrollWheelUp>| @tab <ScrollWheelUp> @tab ウィンドウを3行上へ
@item |<S-ScrollWheelUp>| @tab <S-ScrollWheelUp> @tab ウィンドウを1画面上へ
@item |<ScrollWheelLeft>| @tab <ScrollWheelLeft> @tab ウィンドウを6列左へ
@item |<S-ScrollWheelLeft>| @tab <S-ScrollWheelLeft> @tab ウィンドウを1画面左へ
@item |<ScrollWheelRight>| @tab <ScrollWheelRight> @tab ウィンドウを6列右へ
@item |<S-ScrollWheelRight>| @tab <S-ScrollWheelRight> @tab ウィンドウを1画面右へ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2.1 Text objects						*objects*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{objects}
@cindex objects
@section 2.1 テキストオブジェクト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These can be used after an operator or in Visual mode to select an object.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下のコマンドはオペレータとして、もしくは、ビジュアルモードでオブジェクトを選択する際に使われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		command		   action in op-pending and Visual mode	~
------------------------------------------------------------------------------
|v_aquote|	a"		   double quoted string
|v_a'|		a'		   single quoted string
|v_a(|		a(		   same as ab
|v_a)|		a)		   same as ab
|v_a<|		a<		   "a <>" from '<' to the matching '>'
|v_a>|		a>		   same as a<
|v_aB|		aB		   "a Block" from "[{" to "]}" (with brackets)
|v_aW|		aW		   "a WORD" (with white space)
|v_a[|		a[		   "a []" from '[' to the matching ']'
|v_a]|		a]		   same as a[
|v_a`|		a`		   string in backticks
|v_ab|		ab		   "a block" from "[(" to "])" (with braces)
|v_ap|		ap		   "a paragraph" (with white space)
|v_as|		as		   "a sentence" (with white space)
|v_at|		at		   "a tag block" (with white space)
|v_aw|		aw		   "a word" (with white space)
|v_a{|		a{		   same as aB
|v_a}|		a}		   same as aB
|v_iquote|	i"		   double quoted string without the quotes
|v_i'|		i'		   single quoted string without the quotes
|v_i(|		i(		   same as ib
|v_i)|		i)		   same as ib
|v_i<|		i<		   "inner <>" from '<' to the matching '>'
|v_i>|		i>		   same as i<
|v_iB|		iB		   "inner Block" from "[{" and "]}"
|v_iW|		iW		   "inner WORD"
|v_i[|		i[		   "inner []" from '[' to the matching ']'
|v_i]|		i]		   same as i[
|v_i`|		i`		   string in backticks without the backticks
|v_ib|		ib		   "inner block" from "[(" to "])"
|v_ip|		ip		   "inner paragraph"
|v_is|		is		   "inner sentence"
|v_it|		it		   "inner tag block"
|v_iw|		iw		   "inner word"
|v_i{|		i{		   same as iB
|v_i}|		i}		   same as iB
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .15 .65
@item タグ @tab コマンド @tab ビジュアルモードとオペレータ待機モードでの動作
@item |v_aquote| @tab a" @tab ダブルクォートで囲まれた文字列
@item |v_a'| @tab a' @tab シングルクォートで囲まれた文字列
@item |v_a(| @tab a( @tab ab と同じ。
@item |v_a)| @tab a) @tab ab と同じ。
@item |v_a<| @tab a< @tab "a <>" '<' から '>' までを選択。
@item |v_a>| @tab a> @tab a< と同じ。
@item |v_aB| @tab aB @tab "a Block" "[@{" から "]@}" までを選択(括弧を含む)。
@item |v_aW| @tab aW @tab "a WORD" (ホワイトスペースを含む)
@item |v_a[| @tab a[ @tab "a []" '[' から ']' までを選択。
@item |v_a]| @tab a] @tab a[ と同じ。
@item |v_a`| @tab a` @tab バッククォートで囲まれた文字列
@item |v_ab| @tab ab @tab "a block" "[(" から "])" までを選択(括弧を含む)。
@item |v_ap| @tab ap @tab "a paragraph" (ホワイトスペースを含む)
@item |v_as| @tab as @tab "a sentence" (ホワイトスペースを含む)
@item |v_at| @tab at @tab "a tag block" (ホワイトスペースを含む)
@item |v_aw| @tab aw @tab "a word" (ホワイトスペースを含む)
@item |v_a@{| @tab a@{ @tab aB と同じ。
@item |v_a@}| @tab a@} @tab aB と同じ。
@item |v_iquote| @tab i" @tab ダブルクォートで囲まれた文字列。ダブルクォートは含まない。
@item |v_i'| @tab i' @tab シングルクォートで囲まれた文字列。シングルクォートは含まない。
@item |v_i(| @tab i( @tab ib と同じ。
@item |v_i)| @tab i) @tab ib と同じ。
@item |v_i<| @tab i< @tab "inner <>" '<' から '>' までを選択。
@item |v_i>| @tab i> @tab i< と同じ。
@item |v_iB| @tab iB @tab "inner Block" "[@{" から "]@}" までを選択。
@item |v_iW| @tab iW @tab "inner WORD"
@item |v_i[| @tab i[ @tab "inner []" '[' から ']' までを選択。
@item |v_i]| @tab i] @tab i[ と同じ。
@item |v_i`| @tab i` @tab バッククォートで囲まれた文字列。バッククォートは含まない。
@item |v_ib| @tab ib @tab "inner block" "[(" から "])" までを選択。
@item |v_ip| @tab ip @tab "inner paragraph"
@item |v_is| @tab is @tab "inner sentence"
@item |v_it| @tab it @tab "inner tag block"
@item |v_iw| @tab iw @tab "inner word"
@item |v_i@{| @tab i@{ @tab iB と同じ。
@item |v_i@}| @tab i@} @tab iB と同じ。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2.2 Window commands						*CTRL-W*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-W}
@cindex CTRL-W
@section 2.2 ウィンドウコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		command		   action in Normal mode	~
------------------------------------------------------------------------------
|CTRL-W_CTRL-B|	CTRL-W CTRL-B	   same as "CTRL-W b"
|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   same as "CTRL-W c"
|CTRL-W_CTRL-D|	CTRL-W CTRL-D	   same as "CTRL-W d"
|CTRL-W_CTRL-F|	CTRL-W CTRL-F	   same as "CTRL-W f"
		CTRL-W CTRL-G	   same as "CTRL-W g .."
|CTRL-W_CTRL-H|	CTRL-W CTRL-H	   same as "CTRL-W h"
|CTRL-W_CTRL-I|	CTRL-W CTRL-I	   same as "CTRL-W i"
|CTRL-W_CTRL-J|	CTRL-W CTRL-J	   same as "CTRL-W j"
|CTRL-W_CTRL-K|	CTRL-W CTRL-K	   same as "CTRL-W k"
|CTRL-W_CTRL-L|	CTRL-W CTRL-L	   same as "CTRL-W l"
|CTRL-W_CTRL-N|	CTRL-W CTRL-N	   same as "CTRL-W n"
|CTRL-W_CTRL-O|	CTRL-W CTRL-O	   same as "CTRL-W o"
|CTRL-W_CTRL-P|	CTRL-W CTRL-P	   same as "CTRL-W p"
|CTRL-W_CTRL-Q|	CTRL-W CTRL-Q	   same as "CTRL-W q"
|CTRL-W_CTRL-R|	CTRL-W CTRL-R	   same as "CTRL-W r"
|CTRL-W_CTRL-S|	CTRL-W CTRL-S	   same as "CTRL-W s"
|CTRL-W_CTRL-T|	CTRL-W CTRL-T	   same as "CTRL-W t"
|CTRL-W_CTRL-V|	CTRL-W CTRL-V	   same as "CTRL-W v"
|CTRL-W_CTRL-W|	CTRL-W CTRL-W	   same as "CTRL-W w"
|CTRL-W_CTRL-X|	CTRL-W CTRL-X	   same as "CTRL-W x"
|CTRL-W_CTRL-Z|	CTRL-W CTRL-Z	   same as "CTRL-W z"
|CTRL-W_CTRL-]|	CTRL-W CTRL-]	   same as "CTRL-W ]"
|CTRL-W_CTRL-^|	CTRL-W CTRL-^	   same as "CTRL-W ^"
|CTRL-W_CTRL-_|	CTRL-W CTRL-_	   same as "CTRL-W _"
|CTRL-W_quote|	CTRL-W "	   terminal window: paste register
|CTRL-W_+|	CTRL-W +	   increase current window height N lines
|CTRL-W_-|	CTRL-W -	   decrease current window height N lines
|CTRL-W_.|	CTRL-W .	   terminal window: type CTRL-W
|CTRL-W_:|	CTRL-W :	   same as |:|, edit a command line
|CTRL-W_<|	CTRL-W <	   decrease current window width N columns
|CTRL-W_=|	CTRL-W =	   make all windows the same height & width
|CTRL-W_>|	CTRL-W >	   increase current window width N columns
|CTRL-W_H|	CTRL-W H	   move current window to the far left
|CTRL-W_J|	CTRL-W J	   move current window to the very bottom
|CTRL-W_K|	CTRL-W K	   move current window to the very top
|CTRL-W_L|	CTRL-W L	   move current window to the far right
|CTRL-W_N|	CTRL-W N	   terminal window: go to Terminal Normal mode
|CTRL-W_P|	CTRL-W P	   go to preview window
|CTRL-W_R|	CTRL-W R	   rotate windows upwards N times
|CTRL-W_S|	CTRL-W S	   same as "CTRL-W s"
|CTRL-W_T|	CTRL-W T	   move current window to a new tab page
|CTRL-W_W|	CTRL-W W	   go to N previous window (wrap around)
|CTRL-W_]|	CTRL-W ]	   split window and jump to tag under cursor
|CTRL-W_^|	CTRL-W ^	   split current window and edit alternate
				   file N
|CTRL-W__|	CTRL-W _	   set current window height to N (default:
				   very high)
|CTRL-W_b|	CTRL-W b	   go to bottom window
|CTRL-W_c|	CTRL-W c	   close current window (like |:close|)
|CTRL-W_d|	CTRL-W d	   split window and jump to definition under
				   the cursor
|CTRL-W_f|	CTRL-W f	   split window and edit file name under the
				   cursor
|CTRL-W_F|	CTRL-W F	   split window and edit file name under the
				   cursor and jump to the line number
				   following the file name.
|CTRL-W_g_CTRL-]| CTRL-W g CTRL-]  split window and do |:tjump| to tag under
				   cursor
|CTRL-W_g]|	CTRL-W g ]	   split window and do |:tselect| for tag
				   under cursor
|CTRL-W_g}|	CTRL-W g }	   do a |:ptjump| to the tag under the cursor
|CTRL-W_gf|	CTRL-W g f	   edit file name under the cursor in a new
				   tab page
|CTRL-W_gF|	CTRL-W g F	   edit file name under the cursor in a new
				   tab page and jump to the line number
				   following the file name.
|CTRL-W_h|	CTRL-W h	   go to Nth left window (stop at first window)
|CTRL-W_i|	CTRL-W i	   split window and jump to declaration of
				   identifier under the cursor
|CTRL-W_j|	CTRL-W j	   go N windows down (stop at last window)
|CTRL-W_k|	CTRL-W k	   go N windows up (stop at first window)
|CTRL-W_l|	CTRL-W l	   go to Nth right window (stop at last window)
|CTRL-W_n|	CTRL-W n	   open new window, N lines high
|CTRL-W_o|	CTRL-W o	   close all but current window (like |:only|)
|CTRL-W_p|	CTRL-W p	   go to previous (last accessed) window
|CTRL-W_q|	CTRL-W q	   quit current window (like |:quit|)
|CTRL-W_r|	CTRL-W r	   rotate windows downwards N times
|CTRL-W_s|	CTRL-W s	   split current window in two parts, new
				   window N lines high
|CTRL-W_t|	CTRL-W t	   go to top window
|CTRL-W_v|	CTRL-W v	   split current window vertically, new window
				   N columns wide
|CTRL-W_w|	CTRL-W w	   go to N next window (wrap around)
|CTRL-W_x|	CTRL-W x	   exchange current window with window N
				   (default: next window)
|CTRL-W_z|	CTRL-W z	   close preview window
|CTRL-W_bar|	CTRL-W |	   set window width to N columns
|CTRL-W_}|	CTRL-W }	   show tag under cursor in preview window
|CTRL-W_<Down>|	CTRL-W <Down>	   same as "CTRL-W j"
|CTRL-W_<Up>|	CTRL-W <Up>	   same as "CTRL-W k"
|CTRL-W_<Left>|	CTRL-W <Left>	   same as "CTRL-W h"
|CTRL-W_<Right>| CTRL-W <Right>	   same as "CTRL-W l"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .33 .33 .33
@item タグ @tab コマンド @tab ノーマルモードでの動作
@item |CTRL-W_CTRL-B| @tab CTRL-W CTRL-B @tab "CTRL-W b" と同じ。
@item |CTRL-W_CTRL-C| @tab CTRL-W CTRL-C @tab "CTRL-W c" と同じ。
@item |CTRL-W_CTRL-D| @tab CTRL-W CTRL-D @tab "CTRL-W d" と同じ。
@item |CTRL-W_CTRL-F| @tab CTRL-W CTRL-F @tab "CTRL-W f" と同じ。
@item @tab CTRL-W CTRL-G @tab "CTRL-W g .." と同じ。
@item |CTRL-W_CTRL-H| @tab CTRL-W CTRL-H @tab "CTRL-W h" と同じ。
@item |CTRL-W_CTRL-I| @tab CTRL-W CTRL-I @tab "CTRL-W i" と同じ。
@item |CTRL-W_CTRL-J| @tab CTRL-W CTRL-J @tab "CTRL-W j" と同じ。
@item |CTRL-W_CTRL-K| @tab CTRL-W CTRL-K @tab "CTRL-W k" と同じ。
@item |CTRL-W_CTRL-L| @tab CTRL-W CTRL-L @tab "CTRL-W l" と同じ。
@item |CTRL-W_CTRL-N| @tab CTRL-W CTRL-N @tab "CTRL-W n" と同じ。
@item |CTRL-W_CTRL-O| @tab CTRL-W CTRL-O @tab "CTRL-W o" と同じ。
@item |CTRL-W_CTRL-P| @tab CTRL-W CTRL-P @tab "CTRL-W p" と同じ。
@item |CTRL-W_CTRL-Q| @tab CTRL-W CTRL-Q @tab "CTRL-W q" と同じ。
@item |CTRL-W_CTRL-R| @tab CTRL-W CTRL-R @tab "CTRL-W r" と同じ。
@item |CTRL-W_CTRL-S| @tab CTRL-W CTRL-S @tab "CTRL-W s" と同じ。
@item |CTRL-W_CTRL-T| @tab CTRL-W CTRL-T @tab "CTRL-W t" と同じ。
@item |CTRL-W_CTRL-V| @tab CTRL-W CTRL-V @tab "CTRL-W v" と同じ。
@item |CTRL-W_CTRL-W| @tab CTRL-W CTRL-W @tab "CTRL-W w" と同じ。
@item |CTRL-W_CTRL-X| @tab CTRL-W CTRL-X @tab "CTRL-W x" と同じ。
@item |CTRL-W_CTRL-Z| @tab CTRL-W CTRL-Z @tab "CTRL-W z" と同じ。
@item |CTRL-W_CTRL-]| @tab CTRL-W CTRL-] @tab "CTRL-W ]" と同じ。
@item |CTRL-W_CTRL-^| @tab CTRL-W CTRL-^ @tab "CTRL-W ^" と同じ。
@item |CTRL-W_CTRL-_| @tab CTRL-W CTRL-_ @tab "CTRL-W _" と同じ。
@item |CTRL-W_quote| @tab CTRL-W " @tab ターミナルウィンドウ: レジスタをペーストする。
@item |CTRL-W_+| @tab CTRL-W + @tab カレントウィンドウの高さを N 行高くする。
@item |CTRL-W_-| @tab CTRL-W - @tab カレントウィンドウの高さを N 行低くする。
@item |CTRL-W_.| @tab CTRL-W . @tab ターミナルウィンドウ: CTRL-W を入力する。
@item |CTRL-W_:| @tab CTRL-W : @tab |:| と同じ。コマンドラインを編集する。
@item |CTRL-W_<| @tab CTRL-W < @tab カレントウィンドウの幅を N 列狭める
@item |CTRL-W_=| @tab CTRL-W = @tab すべてのウィンドウの高さと幅を同じにする。
@item |CTRL-W_>| @tab CTRL-W > @tab カレントウィンドウの幅を N 列広くする。
@item |CTRL-W_H| @tab CTRL-W H @tab カレントウィンドウを最も左に移動する。
@item |CTRL-W_J| @tab CTRL-W J @tab カレントウィンドウを最も下に移動する。
@item |CTRL-W_K| @tab CTRL-W K @tab カレントウィンドウを最も上に移動する。
@item |CTRL-W_L| @tab CTRL-W L @tab カレントウィンドウを最も右に移動する。
@item |CTRL-W_N| @tab CTRL-W N @tab ターミナルウィンドウ: ターミナルノーマルモードに移動する。
@item |CTRL-W_P| @tab CTRL-W P @tab プレビューウィンドウへ移動する。
@item |CTRL-W_R| @tab CTRL-W R @tab ウィンドウ位置を上向きに N 回転させる。
@item |CTRL-W_S| @tab CTRL-W S @tab "CTRL-W s" と同じ。
@item |CTRL-W_T| @tab CTRL-W T @tab カレントウィンドウを新しいタブページへ移動。
@item |CTRL-W_W| @tab CTRL-W W @tab 上から N 番目のウィンドウに移動。N の指定がなければ、カレントウィンドウの上のウィンドウ(なければ一番下のウィンドウ)に移動。
@item |CTRL-W_]| @tab CTRL-W ] @tab ウィンドウを分割してカーソル位置のタグへジャンプする。
@item |CTRL-W_^| @tab CTRL-W ^ @tab カレントウィンドウを分割し、N 番目のファイルを編集する。
@item |CTRL-W__| @tab CTRL-W _ @tab カレントウィンドウの高さを N 行にする (省略時は可能な限り高く)。
@item |CTRL-W_b| @tab CTRL-W b @tab 一番下のウィンドウへ移動。
@item |CTRL-W_c| @tab CTRL-W c @tab カレントウィンドウを閉じる(|:close| と同じ)。
@item |CTRL-W_d| @tab CTRL-W d @tab ウィンドウを分割し、カーソル位置の定義へジャンプする。
@item |CTRL-W_f| @tab CTRL-W f @tab ウィンドウを分割し、カーソル位置のファイル名のファイルを編集する。
@item |CTRL-W_F| @tab CTRL-W F @tab ウィンドウを分割し、カーソル位置のファイル名のファイルを開き、ファイル名の後に書かれた行番号にジャンプする。
@item |CTRL-W_g_CTRL-]| @tab CTRL-W g CTRL-] @tab ウィンドウを分割し、カーソル位置のタグに対し |:tjump| を実行する。
@item |CTRL-W_g]| @tab CTRL-W g ] @tab ウィンドウを分割し、カーソル位置のタグに対し |:tselect| を実行する。
@item |CTRL-W_g@}| @tab CTRL-W g @} @tab カーソル位置のタグに対し |:ptjump| を実行する。
@item |CTRL-W_gf| @tab CTRL-W g f @tab カーソル位置のファイル名のファイルを新しいタブページで開く。
@item |CTRL-W_gF| @tab CTRL-W g F @tab カーソル位置のファイル名のファイルを新しいタブページで開き、ファイル名の後に書かれた行番号にジャンプする。
@item |CTRL-W_h| @tab CTRL-W h @tab N 個左のウィンドウに移動(一番左のウィンドウでストップ)
@item |CTRL-W_i| @tab CTRL-W i @tab ウィンドウを分割し、カーソル位置の識別子の宣言位置へジャンプする。
@item |CTRL-W_j| @tab CTRL-W j @tab N 個下のウィンドウに移動(一番下のウィンドウでストップ)
@item |CTRL-W_k| @tab CTRL-W k @tab N 個上のウィンドウに移動(一番上のウィンドウでストップ)
@item |CTRL-W_l| @tab CTRL-W l @tab N 個右のウィンドウに移動(一番右のウィンドウでストップ)
@item |CTRL-W_n| @tab CTRL-W n @tab 高さが N 行の新しいウィンドウを開く。
@item |CTRL-W_o| @tab CTRL-W o @tab カレントウィンドウを除くすべてのウィンドウを閉じる (|:only| と同じ)。
@item |CTRL-W_p| @tab CTRL-W p @tab 直前の(最後にアクセスしていた)ウィンドウへ移動。
@item |CTRL-W_q| @tab CTRL-W q @tab カレントウィンドウを終了する(|:quit| と同じ)。
@item |CTRL-W_r| @tab CTRL-W r @tab ウィンドウ位置を下向きに N 回転させる。
@item |CTRL-W_s| @tab CTRL-W s @tab カレントウィンドウを2つに分割し、高さが N 行の新しいウィンドウを作成する。
@item |CTRL-W_t| @tab CTRL-W t @tab 一番上のウィンドウへ移動。
@item |CTRL-W_v| @tab CTRL-W v @tab カレントウィンドウを垂直分割する。新しいウィンドウの幅は N 列。
@item |CTRL-W_w| @tab CTRL-W w @tab 下から N 番目のウィンドウに移動。N の指定がなければ、カレントウィンドウの下のウィンドウ(なければ一番上のウィンドウ)に移動。
@item |CTRL-W_x| @tab CTRL-W x @tab カレントウィンドウと上から N 番目のウィンドウ (省略時は 1 つ下のウィンドウ) を入れ替える。
@item |CTRL-W_z| @tab CTRL-W z @tab プレビューウィンドウを閉じる。
@item |CTRL-W_bar| @tab CTRL-W | @tab ウィンドウの幅を N 列にする。
@item |CTRL-W_@}| @tab CTRL-W @} @tab カーソル位置のタグをプレビューウィンドウに表示する。
@item |CTRL-W_<Down>| @tab CTRL-W <Down> @tab "CTRL-W j" と同じ。
@item |CTRL-W_<Up>| @tab CTRL-W <Up> @tab "CTRL-W k" と同じ。
@item |CTRL-W_<Left>| @tab CTRL-W <Left> @tab "CTRL-W h" と同じ。
@item |CTRL-W_<Right>| @tab CTRL-W <Right> @tab "CTRL-W l" と同じ。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2.3 Square bracket commands					*[* *]*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{[}
@anchor{]}
@cindex [
@cindex ]
@section 2.3 角括弧コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
|[_CTRL-D|	[ CTRL-D	   jump to first #define found in current and
				   included files matching the word under the
				   cursor, start searching at beginning of
				   current file
|[_CTRL-I|	[ CTRL-I	   jump to first line in current and included
				   files that contains the word under the
				   cursor, start searching at beginning of
				   current file
|[#|		[#		1  cursor to N previous unmatched #if, #else
				   or #ifdef
|['|		['		1  cursor to previous lowercase mark, on first
				   non-blank
|[(|		[(		1  cursor N times back to unmatched '('
|[star|		[*		1  same as "[/"
|[`|		[`		1  cursor to previous lowercase mark
|[/|		[/		1  cursor to N previous start of a C comment
|[D|		[D		   list all defines found in current and
				   included files matching the word under the
				   cursor, start searching at beginning of
				   current file
|[I|		[I		   list all lines found in current and
				   included files that contain the word under
				   the cursor, start searching at beginning of
				   current file
|[P|		[P		2  same as "[p"
|[[|		[[		1  cursor N sections backward
|[]|		[]		1  cursor N SECTIONS backward
|[c|		[c		1  cursor N times backwards to start of change
|[d|		[d		   show first #define found in current and
				   included files matching the word under the
				   cursor, start searching at beginning of
				   current file
|[f|		[f		   same as "gf"
|[i|		[i		   show first line found in current and
				   included files that contains the word under
				   the cursor, start searching at beginning of
				   current file
|[m|		[m		1  cursor N times back to start of member
				   function
|[p|		[p		2  like "P", but adjust indent to current line
|[s|		[s		1  move to the previous misspelled word
|[z|		[z		1  move to start of open fold
|[{|		[{		1  cursor N times back to unmatched '{'
|[<MiddleMouse>| [<MiddleMouse>	2  same as "[p"

|]_CTRL-D|	] CTRL-D	   jump to first #define found in current and
				   included files matching the word under the
				   cursor, start searching at cursor position
|]_CTRL-I|	] CTRL-I	   jump to first line in current and included
				   files that contains the word under the
				   cursor, start searching at cursor position
|]#|		]#		1  cursor to N next unmatched #endif or #else
|]'|		]'		1  cursor to next lowercase mark, on first
				   non-blank
|])|		])		1  cursor N times forward to unmatched ')'
|]star|		]*		1  same as "]/"
|]`|		]`		1  cursor to next lowercase mark
|]/|		]/		1  cursor to N next end of a C comment
|]D|		]D		   list all #defines found in current and
				   included files matching the word under the
				   cursor, start searching at cursor position
|]I|		]I		   list all lines found in current and
				   included files that contain the word under
				   the cursor, start searching at cursor
				   position
|]P|		]P		2  same as "[p"
|][|		][		1  cursor N SECTIONS forward
|]]|		]]		1  cursor N sections forward
|]c|		]c		1  cursor N times forward to start of change
|]d|		]d		   show first #define found in current and
				   included files matching the word under the
				   cursor, start searching at cursor position
|]f|		]f		   same as "gf"
|]i|		]i		   show first line found in current and
				   included files that contains the word under
				   the cursor, start searching at cursor
				   position
|]m|		]m		1  cursor N times forward to end of member
				   function
|]p|		]p		2  like "p", but adjust indent to current line
|]s|		]s		1  move to next misspelled word
|]z|		]z		1  move to end of open fold
|]}|		]}		1  cursor N times forward to unmatched '}'
|]<MiddleMouse>| ]<MiddleMouse>	2  same as "]p"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .2 .1 .5
@item タグ @tab 文字 @tab 注 @tab ノーマルモードでの動作
@item |[_CTRL-D| @tab [ CTRL-D @tab @tab カーソル位置の単語と一致する #define の文をカレントファイルとインクルードファイルの中から探し、最初に見つけた場所へジャンプする。カレントファイルの先頭から検索する
@item |[_CTRL-I| @tab [ CTRL-I @tab @tab カーソル位置の単語を含む行をカレントファイルの先頭から探し、最初に見つかった行へジャンプする。
@item |[#| @tab [# @tab 1 @tab 後方へ対応のとれていない #if, #else, #ifdef を探し、N 個目に見つかった場所へジャンプ。
@item |['| @tab [' @tab 1 @tab 後方の小文字マークがある行の最初の非空白文字へ移動する。
@item |[(| @tab [( @tab 1 @tab 後方へ対応のとれていない '(' を探し、N 個目に見つかった場所へジャンプする。
@item |[star| @tab [* @tab 1 @tab "[/" と同じ。
@item |[`| @tab [` @tab 1 @tab 後方の小文字マークがある行へ移動する。
@item |[/| @tab [/ @tab 1 @tab 後方へ C コメントの始まりを探し、N 個目に見つかった場所へジャンプする。
@item |[D| @tab [D @tab @tab カーソル位置の単語にマッチする単語の定義をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
@item |[I| @tab [I @tab @tab カーソル位置の単語にマッチする単語を含む行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
@item |[P| @tab [P @tab 2 @tab "[p" と同じ。
@item |[[| @tab [[ @tab 1 @tab カーソルを N 段落後方へ移動
@item |[]| @tab [] @tab 1 @tab カーソルを N SECTION 後方へ移動
@item |[c| @tab [c @tab 1 @tab カーソル後方へ N 個目の変更箇所へ移動
@item |[d| @tab [d @tab @tab カーソル位置の単語にマッチする単語の最初の定義 (#define) をカレントファイルとインクルードファイルの中から検索し表示する。カレントファイルの先頭から検索を開始する。
@item |[f| @tab [f @tab @tab "gf" と同じ。
@item |[i| @tab [i @tab @tab カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
@item |[m| @tab [m @tab 1 @tab 後方へ N 番目に現れた関数の先頭へカーソルを移動。
@item |[p| @tab [p @tab 2 @tab "P" と同様、さらに現在の行と同じインデントにする
@item |[s| @tab [s @tab 1 @tab 前のスペルミスのある単語へ移動
@item |[z| @tab [z @tab 1 @tab 開いている折畳の最初の行へ移動
@item |[@{| @tab [@{ @tab 1 @tab 後方へ N 番目に現れた対応する括弧のない '@{' へカーソルを移動。
@item |[<MiddleMouse>| @tab [<MiddleMouse> @tab 2 @tab "[p" と同じ。
@item
@item |]_CTRL-D| @tab ] CTRL-D @tab @tab カーソル位置の単語にマッチする単語の最初の定義 (#define) をカレントファイルとインクルードファイルの中から検索しジャンプする。カーソル位置から検索を開始する。
@item |]_CTRL-I| @tab ] CTRL-I @tab @tab カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索しジャンプする。カーソル位置から検索を開始する。
@item |]#| @tab ]# @tab 1 @tab 前方の対応の取れていない N 個目の #endif か #else へ移動。
@item |]'| @tab ]' @tab 1 @tab 前方の小文字マークがある行の最初の非空白文字へ移動する。
@item |])| @tab ]) @tab 1 @tab 前方の対応の取れていないN個目の ')' へ移動
@item |]star| @tab ]* @tab 1 @tab "]/" と同じ。
@item |]`| @tab ]` @tab 1 @tab 前方の小文字マークがある行へ移動する。
@item |]/| @tab ]/ @tab 1 @tab カーソルを N 先の C のコメントの最後へ移動。
@item |]D| @tab ]D @tab @tab カーソル位置の単語にマッチする単語の定義 (#define) をカレントファイルとインクルードファイルの中から探して表示する。カーソル位置から検索を開始する。
@item |]I| @tab ]I @tab @tab カーソル位置の単語にマッチする単語を含む行をカレントファイルとインクルードファイルの中から探して表示。カーソル位置から検索を開始する。
@item |]P| @tab ]P @tab 2 @tab "[p" と同じ。
@item |][| @tab ][ @tab 1 @tab カーソルを N SECTION 前方へ移動。
@item |]]| @tab ]] @tab 1 @tab カーソルを N 段落前方へ移動。
@item |]c| @tab ]c @tab 1 @tab カーソル前方へ N 個目の変更箇所へ移動
@item |]d| @tab ]d @tab @tab カーソル位置の単語にマッチする単語の最初の定義 (#define) をカレントファイルとインクルードファイルの中から検索し表示する。カーソル位置から検索を開始する。
@item |]f| @tab ]f @tab @tab "gf" と同じ。
@item |]i| @tab ]i @tab @tab カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カーソル位置から検索を開始する。
@item |]m| @tab ]m @tab 1 @tab 前方へ N 番目に現れた関数の末尾へカーソルを移動。
@item |]p| @tab ]p @tab 2 @tab "p" と同様、さらにカレントラインにインデントをあわせる
@item |]s| @tab ]s @tab 1 @tab 次のスペルミスのある単語へ移動
@item |]z| @tab ]z @tab 1 @tab 開いている折畳の最後の行へ移動
@item |]@}| @tab ]@} @tab 1 @tab カーソルを N 先のマッチしていない '@}' へ移動。
@item |]<MiddleMouse>| @tab ]<MiddleMouse> @tab 2 @tab "]p" と同じ。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2.4 Commands starting with 'g'						*g*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{g}
@cindex g
@section 2.4 'g' で始まるコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
|g_CTRL-A|	g CTRL-A	   only when compiled with MEM_PROFILE
				   defined: dump a memory profile
|g_CTRL-G|	g CTRL-G	   show information about current cursor
				   position
|g_CTRL-H|	g CTRL-H	   start Select block mode
|g_CTRL-]|	g CTRL-]	   |:tjump| to the tag under the cursor
|g#|		g#		1  like "#", but without using "\<" and "\>"
|g$|		g$		1  when 'wrap' off go to rightmost character of
				   the current line that is on the screen;
				   when 'wrap' on go to the rightmost character
				   of the current screen line
|g&|		g&		2  repeat last ":s" on all lines
|g'|		g'{mark}	1  like |'| but without changing the jumplist
|g`|		g`{mark}	1  like |`| but without changing the jumplist
|gstar|		g*		1  like "*", but without using "\<" and "\>"
|g+|		g+		   go to newer text state N times
|g,|		g,		1  go to N newer position in change list
|g-|		g-		   go to older text state N times
|g0|		g0		1  when 'wrap' off go to leftmost character of
				   the current line that is on the screen;
				   when 'wrap' on go to the leftmost character
				   of the current screen line
|g8|		g8		   print hex value of bytes used in UTF-8
				   character under the cursor
|g;|		g;		1  go to N older position in change list
|g<|		g<		   display previous command output
|g?|		g?		2  Rot13 encoding operator
|g?g?|		g??		2  Rot13 encode current line
|g?g?|		g?g?		2  Rot13 encode current line
|gD|		gD		1  go to definition of word under the cursor
				   in current file
|gE|		gE		1  go backwards to the end of the previous
				   WORD
|gH|		gH		   start Select line mode
|gI|		gI		2  like "I", but always start in column 1
|gJ|		gJ		2  join lines without inserting space
|gN|		gN	      1,2  find the previous match with the last used
				   search pattern and Visually select it
|gP|		["x]gP		2  put the text [from register x] before the
				   cursor N times, leave the cursor after it
|gQ|		gQ		    switch to "Ex" mode with Vim editing
|gR|		gR		2  enter Virtual Replace mode
|gT|		gT		   go to the previous tab page
|gU|		gU{motion}	2  make Nmove text uppercase
|gV|		gV		   don't reselect the previous Visual area
				   when executing a mapping or menu in Select
				   mode
|g]|		g]		   :tselect on the tag under the cursor
|g^|		g^		1  when 'wrap' off go to leftmost non-white
				   character of the current line that is on
				   the screen; when 'wrap' on go to the
				   leftmost non-white character of the current
				   screen line
|g_|		g_		1  cursor to the last CHAR N - 1 lines lower
|ga|		ga		   print ascii value of character under the
				   cursor
|gd|		gd		1  go to definition of word under the cursor
				   in current function
|ge|		ge		1  go backwards to the end of the previous
				   word
|gf|		gf		   start editing the file whose name is under
				   the cursor
|gF|		gF		   start editing the file whose name is under
				   the cursor and jump to the line number
				   following the filename.
|gg|		gg		1  cursor to line N, default first line
|gh|		gh		   start Select mode
|gi|		gi		2  like "i", but first move to the |'^| mark
|gj|		gj		1  like "j", but when 'wrap' on go N screen
				   lines down
|gk|		gk		1  like "k", but when 'wrap' on go N screen
				   lines up
|gn|		gn	      1,2  find the next match with the last used
				   search pattern and Visually select it
|gm|		gm		1  go to character at middle of the screenline
|go|		go		1  cursor to byte N in the buffer
|gp|		["x]gp		2  put the text [from register x] after the
				   cursor N times, leave the cursor after it
|gq|		gq{motion}	2  format Nmove text
|gr|		gr{char}	2  virtual replace N chars with {char}
|gs|		gs		   go to sleep for N seconds (default 1)
|gt|		gt		   go to the next tab page
|gu|		gu{motion}	2  make Nmove text lowercase
|gv|		gv		   reselect the previous Visual area
|gw|		gw{motion}	2  format Nmove text and keep cursor
|netrw-gx|	gx		   execute application for file name under the
				   cursor (only with |netrw| plugin)
|g@|		g@{motion}	   call 'operatorfunc'
|g~|		g~{motion}	2  swap case for Nmove text
|g<Down>|	g<Down>		1  same as "gj"
|g<End>|	g<End>		1  same as "g$"
|g<Home>|	g<Home>		1  same as "g0"
|g<LeftMouse>|	g<LeftMouse>	   same as <C-LeftMouse>
		g<MiddleMouse>	   same as <C-MiddleMouse>
|g<RightMouse>|	g<RightMouse>	   same as <C-RightMouse>
|g<Up>|		g<Up>		1  same as "gk"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .2 .1 .5
@item タグ @tab 文字 @tab 注 @tab ノーマルモードでの動作
@item |g_CTRL-A| @tab g CTRL-A @tab @tab MEM_PROFILE を定義してコンパイルしたときのみメモリプロファイルをダンプする
@item |g_CTRL-G| @tab g CTRL-G @tab @tab 現在のカーソル位置に関する情報を表示。
@item |g_CTRL-H| @tab g CTRL-H @tab @tab 選択モードで矩形選択を開始
@item |g_CTRL-]| @tab g CTRL-] @tab @tab カーソル位置のタグへ |:tjump| する。
@item |g#| @tab g# @tab 1 @tab "#" と同様、ただし "\<" と "\>" を使用しない。
@item |g$| @tab g$ @tab 1 @tab 本当の行末ではなく、表示されたとおりの、見ため上の行末へ移動
@item |g&| @tab g& @tab 2 @tab 最後に実行した ":s" をすべての行で実行する
@item |g'| @tab g'@{mark@} @tab 1 @tab |'| と同じだがジャンプリストを更新しない
@item |g`| @tab g`@{mark@} @tab 1 @tab |`| と同じだがジャンプリストを更新しない
@item |gstar| @tab g* @tab 1 @tab "*" と同様、ただし "\<" と "\>" を使用しない。
@item |g+| @tab g+ @tab @tab N 回後の新しいテキスト状態へ移動。
@item |g,| @tab g, @tab 1 @tab 変更リスト中の N 個後の位置へ移動。
@item |g-| @tab g- @tab @tab N 回前の古いテキスト状態へ移動。
@item |g0| @tab g0 @tab 1 @tab 本当の行頭ではなく、表示されたとおりの、見ため上の行頭へ移動
@item |g8| @tab g8 @tab @tab UTF-8 環境でカーソル位置の文字のバイト列を 16 進数で表示する
@item |g;| @tab g; @tab 1 @tab 変更リスト中の N 個前の位置へ移動。
@item |g<| @tab g< @tab @tab 前のコマンドの出力を表示する。
@item |g?| @tab g? @tab 2 @tab Rot13 エンコード演算子。
@item |g?g?| @tab g?? @tab 2 @tab 現在の行を Rot13 エンコード。
@item |g?g?| @tab g?g? @tab 2 @tab 現在の行を Rot13 エンコード。
@item |gD| @tab gD @tab 1 @tab カーソル位置の単語の定義をカレントファイル内で検索し、移動。
@item |gE| @tab gE @tab 1 @tab 直前の WORD の末尾に移動。
@item |gH| @tab gH @tab @tab 選択モードで行選択を開始。
@item |gI| @tab gI @tab 2 @tab "I" と同様、ただし 1 カラム目より挿入開始。
@item |gJ| @tab gJ @tab 2 @tab スペースを挿入せずに行を連結。
@item |gN| @tab gN @tab 1,2 @tab 最後に使われた検索パターンを後方検索し、それをビジュアル選択する。
@item |gP| @tab ["x]gP @tab 2 @tab (レジスタ x からの)テキストをカーソルの前に挿入、カーソルは挿入テキストの最後へ移動。
@item |gQ| @tab gQ @tab @tab "Ex" モードを開始する。
@item |gR| @tab gR @tab 2 @tab 仮想置換モード開始。
@item |gT| @tab gT @tab @tab 前のタブページに移動
@item |gU| @tab gU@{motion@} @tab 2 @tab Nmove テキストを大文字にする。
@item |gV| @tab gV @tab @tab 選択モードでマップやメニューを使用した後、選択していた選択範囲を再選択しない。
@item |g]| @tab g] @tab @tab カーソル位置の単語をタグとして :tselect を実行する
@item |g^| @tab g^ @tab 1 @tab 本当の行頭ではなく、表示されたとおりの、見ため上の行頭から最初の非空白文字へ移動
@item |g_| @tab g_ @tab 1 @tab N-1 行下の最後の非空白文字へ移動。
@item |ga| @tab ga @tab @tab カーソル位置の文字の ASCII コード値を表示
@item |gd| @tab gd @tab 1 @tab カーソル位置の単語の定義を現在の関数内で探し、移動
@item |ge| @tab ge @tab 1 @tab 直前の単語の末尾に移動
@item |gf| @tab gf @tab @tab カーソル位置のファイル名のファイルを開く
@item |gF| @tab gF @tab @tab カーソル位置のファイル名のファイルを開き、ファイル名の後に書かれた行番号にジャンプする。
@item |gg| @tab gg @tab 1 @tab N 行目へジャンプ、省略時は1行目
@item |gh| @tab gh @tab @tab 選択モードの開始
@item |gi| @tab gi @tab 2 @tab "i" と同じだがその前に|'^|マークへ移動する
@item |gj| @tab gj @tab 1 @tab "j" と同様、ただし 'wrap' がオンの時はスクリーン行で N 行下へ移動
@item |gk| @tab gk @tab 1 @tab "k" と同様、ただし 'wrap' がオンの時はスクリーン行で N 行上へ移動
@item |gn| @tab gn @tab 1,2 @tab 最後に使われた検索パターンを前方検索し、それをビジュアル選択する。
@item |gm| @tab gm @tab 1 @tab スクリーン行の中央の文字へジャンプ
@item |go| @tab go @tab 1 @tab バッファ中の N バイト目へジャンプ
@item |gp| @tab ["x]gp @tab 2 @tab N 回カーソルの後に(レジスタxの)テキストを挿入、カーソルは挿入テキストの直後へ移動
@item |gq| @tab gq@{motion@} @tab 2 @tab Nmove テキストを整形する
@item |gr| @tab gr@{char@} @tab 2 @tab N 文字を @{char@} で仮想上書きする
@item |gs| @tab gs @tab @tab N 秒間スリープする(省略時は1秒)
@item |gt| @tab gt @tab @tab 次のタブページに移動
@item |gu| @tab gu@{motion@} @tab 2 @tab Nmove テキストを小文字にする
@item |gv| @tab gv @tab @tab 前回の選択範囲を再選択する
@item |gw| @tab gw@{motion@} @tab 2 @tab Nmove テキストを整形する。カーソル移動なし
@item |netrw-gx| @tab gx @tab @tab カーソル下のファイル名に対応したアプリケーションを起動する(|netrw| プラグインがあるときのみ)
@item |g@@| @tab g@@@{motion@} @tab @tab 'operatorfunc' を呼ぶ。
@item |g~| @tab g~@{motion@} @tab 2 @tab Nmove テキストの大文字、小文字を変換する
@item |g<Down>| @tab g<Down> @tab 1 @tab "gj" と同じ。
@item |g<End>| @tab g<End> @tab 1 @tab "g$" と同じ。
@item |g<Home>| @tab g<Home> @tab 1 @tab "g0" と同じ。
@item |g<LeftMouse>| @tab g<LeftMouse> @tab @tab <C-LeftMouse> と同じ。
@item @tab g<MiddleMouse> @tab @tab <C-MiddleMouse> と同じ。
@item |g<RightMouse>| @tab g<RightMouse> @tab @tab <C-RightMouse> と同じ。
@item |g<Up>| @tab g<Up> @tab 1 @tab "gk" と同じ。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2.5 Commands starting with 'z'						*z*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{z}
@cindex z
@section 2.5 'z' で始まるコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
|z<CR>|		z<CR>		   redraw, cursor line to top of window,
				   cursor on first non-blank
|zN<CR>|	z{height}<CR>	   redraw, make window {height} lines high
|z+|		z+		   cursor on line N (default line below
				   window), otherwise like "z<CR>"
|z-|		z-		   redraw, cursor line at bottom of window,
				   cursor on first non-blank
|z.|		z.		   redraw, cursor line to center of window,
				   cursor on first non-blank
|z=|		z=		   give spelling suggestions
|zA|		zA		   open a closed fold or close an open fold
				   recursively
|zC|		zC		   close folds recursively
|zD|		zD		   delete folds recursively
|zE|		zE		   eliminate all folds
|zF|		zF		   create a fold for N lines
|zG|		zG		   mark word as good spelled word
|zH|		zH		   when 'wrap' off scroll half a screenwidth
				   to the right
|zL|		zL		   when 'wrap' off scroll half a screenwidth
				   to the left
|zM|		zM		   set 'foldlevel' to zero
|zN|		zN		   set 'foldenable'
|zO|		zO		   open folds recursively
|zR|		zR		   set 'foldlevel' to the deepest fold
|zW|		zW		   mark word as wrong (bad) spelled word
|zX|		zX		   re-apply 'foldlevel'
|z^|		z^		   cursor on line N (default line above
				   window), otherwise like "z-"
|za|		za		   open a closed fold, close an open fold
|zb|		zb		   redraw, cursor line at bottom of window
|zc|		zc		   close a fold
|zd|		zd		   delete a fold
|ze|		ze		   when 'wrap' off scroll horizontally to
				   position the cursor at the end (right side)
				   of the screen
|zf|		zf{motion}	   create a fold for Nmove text
|zg|		zg		   mark word as good spelled word
|zh|		zh		   when 'wrap' off scroll screen N characters
				   to the right
|zi|		zi		   toggle 'foldenable'
|zj|		zj		1  move to the start of the next fold
|zk|		zk		1  move to the end of the previous fold
|zl|		zl		   when 'wrap' off scroll screen N characters
				   to the left
|zm|		zm		   subtract one from 'foldlevel'
|zn|		zn		   reset 'foldenable'
|zo|		zo		   open fold
|zr|		zr		   add one to 'foldlevel'
|zs|		zs		   when 'wrap' off scroll horizontally to
				   position the cursor at the start (left
				   side) of the screen
|zt|		zt		   redraw, cursor line at top of window
|zv|		zv		   open enough folds to view the cursor line
|zw|		zw		   mark word as wrong (bad) spelled word
|zx|		zx		   re-apply 'foldlevel' and do "zv"
|zz|		zz		   redraw, cursor line at center of window
|z<Left>|	z<Left>		   same as "zh"
|z<Right>|	z<Right>	   same as "zl"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .2 .1 .5
@item タグ @tab 文字 @tab 注 @tab ノーマルモードでの動作
@item |z<CR>| @tab z<CR> @tab @tab 画面の再描画、カーソル行をウィンドウの最上部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
@item |zN<CR>| @tab z@{height@}<CR> @tab @tab 画面の再描画、ウィンドウの高さを @{height@} にする。
@item |z+| @tab z+ @tab @tab カーソルを N 行目に移動(省略時はウィンドウの下の行)、その他は "z<CR>" と同じ。
@item |z-| @tab z- @tab @tab 画面の再描画、カーソル行をウィンドウの最下部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
@item |z.| @tab z. @tab @tab 画面の再描画、カーソル行をウィンドウの中央部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
@item |z=| @tab z= @tab @tab スペリング補完を行う。
@item |zA| @tab zA @tab @tab 折畳を再帰的に開閉する
@item |zC| @tab zC @tab @tab 折畳を再帰的に閉じる
@item |zD| @tab zD @tab @tab 折畳を再帰的に削除する
@item |zE| @tab zE @tab @tab 折畳をすべて削除する
@item |zF| @tab zF @tab @tab N 行の折畳を作成する
@item |zG| @tab zG @tab @tab wordを正しくスペリングされた単語としてマークする。
@item |zH| @tab zH @tab @tab '@option{wrap}' がオフの時、スクリーンの幅の半分右へスクロールする
@item |zL| @tab zL @tab @tab '@option{wrap}' がオフの時、スクリーンの幅の半分左へスクロールする
@item |zM| @tab zM @tab @tab '@option{foldlevel}' を0に設定する
@item |zN| @tab zN @tab @tab '@option{foldenable}' をオンにする
@item |zO| @tab zO @tab @tab 折畳を再帰的に開く
@item |zR| @tab zR @tab @tab '@option{foldlevel}' を最も深い折畳と同じレベルに設定する
@item |zW| @tab zW @tab @tab wordを間違ってスペリングされた単語としてマークする。
@item |zX| @tab zX @tab @tab '@option{foldlevel}' を再適用する
@item |z^| @tab z^ @tab @tab カーソルを N 行目に移動(省略時はウィンドウの上の行)、その他は "z-" と同じ。
@item |za| @tab za @tab @tab 折畳を開閉する
@item |zb| @tab zb @tab @tab 画面の再描画、カーソル行をウィンドウの最下部へ移動。
@item |zc| @tab zc @tab @tab 折畳を閉じる
@item |zd| @tab zd @tab @tab 折畳を削除する
@item |ze| @tab ze @tab @tab '@option{wrap}' オプションがオフの時、カーソルがスクリーンの右端になるように、水平方向にスクロール。
@item |zf| @tab zf@{motion@} @tab @tab Nmoveテキストの折畳を作成する
@item |zg| @tab zg @tab @tab wordを正しくスペリングされた単語としてマークする。
@item |zh| @tab zh @tab @tab '@option{wrap}' オプションがオフの時、水平方向に N 文字分右へスクロール。
@item |zi| @tab zi @tab @tab '@option{foldenable}' を切り替える
@item |zj| @tab zj @tab 1 @tab 次の折畳の始めに移動する
@item |zk| @tab zk @tab 1 @tab 前の折畳の最後に移動する
@item |zl| @tab zl @tab @tab '@option{wrap}' オプションがオフの時、水平方向に N 文字分左へスクロール。
@item |zm| @tab zm @tab @tab '@option{foldlevel}' を 1 低くする
@item |zn| @tab zn @tab @tab '@option{foldenable}' をオフにする
@item |zo| @tab zo @tab @tab 折畳を開く
@item |zr| @tab zr @tab @tab '@option{foldlevel}' を 1 高くする
@item |zs| @tab zs @tab @tab '@option{wrap}' オプションがオフの時、カーソルがスクリーンの左端になるように、水平方向にスクロール。
@item |zt| @tab zt @tab @tab 画面の再描画、カーソル行をウィンドウの最上部へ移動。
@item |zv| @tab zv @tab @tab カーソル行が表示されるように折畳を開く
@item |zw| @tab zw @tab @tab wordを間違ってスペリングされた単語としてマークする。
@item |zx| @tab zx @tab @tab '@option{foldlevel}' を最適用して "zv" を実行する
@item |zz| @tab zz @tab @tab 画面の再描画、カーソル行をウィンドウの中央部へ移動。
@item |z<Left>| @tab z<Left> @tab @tab "zh" と同じ。
@item |z<Right>| @tab z<Right> @tab @tab "zl" と同じ。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Visual mode						*visual-index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{visual-index}
@cindex visual-index
@section 3. ビジュアルモード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most commands in Visual mode are the same as in Normal mode.  The ones listed
here are those that are different.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードでのほとんどのコマンドは、ノーマルモードと同じ。ノーマルモードと異なるコマンドのみここに列挙した。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		command	      note action in Visual mode	~
------------------------------------------------------------------------------
|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N	   stop Visual mode
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G	   go to mode specified with 'insertmode'
|v_CTRL-A|	CTRL-A		2  add N to number in highlighted text
|v_CTRL-C|	CTRL-C		   stop Visual mode
|v_CTRL-G|	CTRL-G		   toggle between Visual mode and Select mode
|v_<BS>|	<BS>		2  Select mode: delete highlighted area
|v_CTRL-H|	CTRL-H		2  same as <BS>
|v_CTRL-O|	CTRL-O		   switch from Select to Visual mode for one
				   command
|v_CTRL-V|	CTRL-V		   make Visual mode blockwise or stop Visual
				   mode
|v_CTRL-X|	CTRL-X		2  subtract N from number in highlighted text
|v_<Esc>|	<Esc>		   stop Visual mode
|v_CTRL-]|	CTRL-]		   jump to highlighted tag
|v_!|		!{filter}	2  filter the highlighted lines through the
				   external command {filter}
|v_:|		:		   start a command-line with the highlighted
				   lines as a range
|v_<|		<		2  shift the highlighted lines one
				   'shiftwidth' left
|v_=|		=		2  filter the highlighted lines through the
				   external program given with the 'equalprg'
				   option
|v_>|		>		2  shift the highlighted lines one
				   'shiftwidth' right
|v_b_A|		A		2  block mode: append same text in all lines,
				   after the highlighted area
|v_C|		C		2  delete the highlighted lines and start
				   insert
|v_D|		D		2  delete the highlighted lines
|v_b_I|		I		2  block mode: insert same text in all lines,
				   before the highlighted area
|v_J|		J		2  join the highlighted lines
|v_K|		K		   run 'keywordprg' on the highlighted area
|v_O|		O		   Move horizontally to other corner of area.
		Q		   does not start Ex mode
|v_R|		R		2  delete the highlighted lines and start
				   insert
|v_S|		S		2  delete the highlighted lines and start
				   insert
|v_U|		U		2  make highlighted area uppercase
|v_V|		V		   make Visual mode linewise or stop Visual
				   mode
|v_X|		X		2  delete the highlighted lines
|v_Y|		Y		   yank the highlighted lines
|v_aquote|	a"		   extend highlighted area with a double
				   quoted string
|v_a'|		a'		   extend highlighted area with a single
				   quoted string
|v_a(|		a(		   same as ab
|v_a)|		a)		   same as ab
|v_a<|		a<		   extend highlighted area with a <> block
|v_a>|		a>		   same as a<
|v_aB|		aB		   extend highlighted area with a {} block
|v_aW|		aW		   extend highlighted area with "a WORD"
|v_a[|		a[		   extend highlighted area with a [] block
|v_a]|		a]		   same as a[
|v_a`|		a`		   extend highlighted area with a backtick
				   quoted string
|v_ab|		ab		   extend highlighted area with a () block
|v_ap|		ap		   extend highlighted area with a paragraph
|v_as|		as		   extend highlighted area with a sentence
|v_at|		at		   extend highlighted area with a tag block
|v_aw|		aw		   extend highlighted area with "a word"
|v_a{|		a{		   same as aB
|v_a}|		a}		   same as aB
|v_c|		c		2  delete highlighted area and start insert
|v_d|		d		2  delete highlighted area
|v_g_CTRL-A|	g CTRL-A	2  add N to number in highlighted text
|v_g_CTRL-X|	g CTRL-X	2  subtract N from number in highlighted text
|v_gJ|		gJ		2  join the highlighted lines without
				   inserting spaces
|v_gq|		gq		2  format the highlighted lines
|v_gv|		gv		   exchange current and previous highlighted
				   area
|v_iquote|	i"		   extend highlighted area with a double
				   quoted string (without quotes)
|v_i'|		i'		   extend highlighted area with a single
				   quoted string (without quotes)
|v_i(|		i(		   same as ib
|v_i)|		i)		   same as ib
|v_i<|		i<		   extend highlighted area with inner <> block
|v_i>|		i>		   same as i<
|v_iB|		iB		   extend highlighted area with inner {} block
|v_iW|		iW		   extend highlighted area with "inner WORD"
|v_i[|		i[		   extend highlighted area with inner [] block
|v_i]|		i]		   same as i[
|v_i`|		i`		   extend highlighted area with a backtick
				   quoted string (without the backticks)
|v_ib|		ib		   extend highlighted area with inner () block
|v_ip|		ip		   extend highlighted area with inner paragraph
|v_is|		is		   extend highlighted area with inner sentence
|v_it|		it		   extend highlighted area with inner tag block
|v_iw|		iw		   extend highlighted area with "inner word"
|v_i{|		i{		   same as iB
|v_i}|		i}		   same as iB
|v_o|		o		   move cursor to other corner of area
|v_r|		r		2  delete highlighted area and start insert
|v_s|		s		2  delete highlighted area and start insert
|v_u|		u		2  make highlighted area lowercase
|v_v|		v		   make Visual mode characterwise or stop
				   Visual mode
|v_x|		x		2  delete the highlighted area
|v_y|		y		   yank the highlighted area
|v_~|		~		2  swap case for the highlighted area
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .2 .1 .5
@item タグ @tab コマンド @tab 注 @tab ビジュアルモードでの動作
@item |v_CTRL-\_CTRL-N| @tab CTRL-\ CTRL-N @tab @tab ビジュアルモードの停止
@item |v_CTRL-\_CTRL-G| @tab CTRL-\ CTRL-G @tab @tab '@option{insertmode}' に合わせたモードに移行する
@item |v_CTRL-A| @tab CTRL-A @tab 2 @tab 選択範囲の数値を一律に N ずつ増やす
@item |v_CTRL-C| @tab CTRL-C @tab @tab ビジュアルモードの停止
@item |v_CTRL-G| @tab CTRL-G @tab @tab ビジュアルモードと選択モードを切り替える
@item |v_<BS>| @tab <BS> @tab 2 @tab 選択モードのとき: 選択範囲の内容を削除
@item |v_CTRL-H| @tab CTRL-H @tab 2 @tab <BS> と同じ。
@item |v_CTRL-O| @tab CTRL-O @tab @tab 選択モードからビジュアルモードへ 1 キーで移行
@item |v_CTRL-V| @tab CTRL-V @tab @tab ビジュアルモードを矩形選択にする。すでに矩形選択であれば、ビジュアルモードを終了する
@item |v_CTRL-X| @tab CTRL-X @tab 2 @tab 選択範囲の数値を一律に N ずつ減らす
@item |v_<Esc>| @tab <Esc> @tab @tab ビジュアルモードの停止
@item |v_CTRL-]| @tab CTRL-] @tab @tab 選択した文字のタグへジャンプ
@item |v_!| @tab !@{filter@} @tab 2 @tab 選択範囲の行を外部コマンド @{filter@} でフィルタする
@item |v_:| @tab : @tab @tab 選択範囲の行を対象範囲としてコマンドラインのコマンドを適用する
@item |v_<| @tab < @tab 2 @tab 選択範囲の行を '@option{shiftwidth}' 分だけ左へシフト
@item |v_=| @tab = @tab 2 @tab '@option{equalprg}' で設定されている外部プログラムで選択範囲の行をフィルタする
@item |v_>| @tab > @tab 2 @tab 選択範囲の行を '@option{shiftwidth}' 分だけ右へシフト
@item |v_b_A| @tab A @tab 2 @tab 矩形選択のとき: 選択範囲のすべての行末に同じテキストを追加する
@item |v_C| @tab C @tab 2 @tab 選択範囲の行を削除して、挿入開始
@item |v_D| @tab D @tab 2 @tab 選択範囲の行を削除
@item |v_b_I| @tab I @tab 2 @tab 矩形選択のとき: 選択範囲のすべての行頭に同じテキストを挿入する
@item |v_J| @tab J @tab 2 @tab 選択範囲の行を連結
@item |v_K| @tab K @tab @tab 選択した文字で '@option{keywordprg}' を実行
@item |v_O| @tab O @tab @tab 選択範囲のもう一方の端にカーソルを移動する
@item @tab Q @tab @tab Ex モードに移行しない(未使用)
@item |v_R| @tab R @tab 2 @tab 選択範囲の行を削除し、挿入を開始
@item |v_S| @tab S @tab 2 @tab 選択範囲の行を削除し、挿入を開始
@item |v_U| @tab U @tab 2 @tab 選択範囲の文字を大文字にする
@item |v_V| @tab V @tab @tab ビジュアルモードを行選択にする。すでに行選択であれば、ビジュアルモードを終了する
@item |v_X| @tab X @tab 2 @tab 選択範囲の行を削除
@item |v_Y| @tab Y @tab @tab 選択範囲の行をヤンク
@item |v_aquote| @tab a" @tab @tab 選択範囲を " で囲まれた文字列に拡大する
@item |v_a'| @tab a' @tab @tab 選択範囲を ' で囲まれた文字列に拡大する
@item |v_a(| @tab a( @tab @tab ab と同じ。
@item |v_a)| @tab a) @tab @tab ab と同じ。
@item |v_a<| @tab a< @tab @tab 選択範囲を < と > で囲まれた領域に拡大する。
@item |v_a>| @tab a> @tab @tab a< と同じ。
@item |v_aB| @tab aB @tab @tab 選択範囲を @{ と @} で囲まれた領域に拡大する。
@item |v_aW| @tab aW @tab @tab 選択範囲を "a WORD" だけ拡張する
@item |v_a[| @tab a[ @tab @tab 選択範囲を [ と ] で囲まれた領域に拡大する。
@item |v_a]| @tab a] @tab @tab a[ と同じ。
@item |v_a`| @tab a` @tab @tab 選択範囲を ` で囲まれた文字列に拡大する。
@item |v_ab| @tab ab @tab @tab 選択範囲を ( と ) で囲まれた領域に拡大する。
@item |v_ap| @tab ap @tab @tab 選択範囲を 1 段落に拡大する。
@item |v_as| @tab as @tab @tab 選択範囲を 1 文に拡大する。
@item |v_at| @tab at @tab @tab 選択範囲をタグブロックだけ拡大する。
@item |v_aw| @tab @tab @tab 選択範囲を "a word" だけ拡張する
@item |v_a@{| @tab a@{ @tab @tab aB と同じ。
@item |v_a@}| @tab a@} @tab @tab aB と同じ。
@item |v_c| @tab c @tab 2 @tab 選択範囲を削除し、挿入開始
@item |v_d| @tab d @tab 2 @tab 選択範囲を削除
@item |v_g_CTRL-A| @tab g CTRL-A @tab 2 @tab 選択範囲の数値を漸増的に N ずつ増やす
@item |v_g_CTRL-X| @tab g CTRL-X @tab 2 @tab 選択範囲の数値を漸減的に N ずつ減らす
@item |v_gJ| @tab gJ @tab 2 @tab 選択範囲の行をスペースを挿入せずに連結
@item |v_gq| @tab gq @tab 2 @tab 選択範囲の行を整形する
@item |v_gv| @tab gv @tab @tab 現在の選択範囲と直前に選択していた範囲を入れ替える
@item |v_iquote| @tab i" @tab @tab 選択範囲を " で囲まれた文字列に拡大する (" は含まない)
@item |v_i'| @tab i' @tab @tab 選択範囲を ' で囲まれた文字列に拡大する (' は含まない)
@item |v_i(| @tab i( @tab @tab ib と同じ。
@item |v_i)| @tab i) @tab @tab ib と同じ。
@item |v_i<| @tab i< @tab @tab 選択範囲を < と > で囲まれた内側の領域に拡大する。
@item |v_i>| @tab i> @tab @tab i< と同じ。
@item |v_iB| @tab iB @tab @tab 選択範囲を @{ と @} で囲まれた内側の領域に拡大する。
@item |v_iW| @tab iW @tab @tab 選択範囲を "inner WORD" だけ拡張する
@item |v_i[| @tab i[ @tab @tab 選択範囲を [ と ] で囲まれた内側の領域に拡大する。
@item |v_i]| @tab i] @tab @tab i[ と同じ。
@item |v_i`| @tab i` @tab @tab 選択範囲を ` で囲まれた文字列に拡大する (` は含まない)
@item |v_ib| @tab ib @tab @tab 選択範囲を ( と ) で囲まれた内側の領域に拡大する。
@item |v_ip| @tab ip @tab @tab 選択範囲を段落の内側の領域に拡大する。
@item |v_is| @tab is @tab @tab 選択範囲を文の内側の領域に拡大する。
@item |v_it| @tab it @tab @tab 選択範囲をタグブロックの内側の領域に拡大する。
@item |v_iw| @tab iw @tab @tab 選択範囲を "inner word" だけ拡張する
@item |v_i@{| @tab i@{ @tab @tab iB と同じ。
@item |v_i@}| @tab i@} @tab @tab iB と同じ。
@item |v_o| @tab o @tab @tab 選択範囲のもう一方の端にカーソルを移動する
@item |v_r| @tab r @tab 2 @tab 選択範囲の文字を削除し、挿入開始
@item |v_s| @tab s @tab 2 @tab 選択範囲の文字を削除し、挿入開始
@item |v_u| @tab u @tab 2 @tab 選択範囲の文字を小文字にする。
@item |v_v| @tab v @tab @tab ビジュアルモードを文字選択とする。すでに文字選択ならばビジュアルモードを終了する。
@item |v_x| @tab x @tab 2 @tab 選択範囲の文字を削除
@item |v_y| @tab y @tab @tab 選択範囲の文字をヤンク
@item |v_~| @tab ~ @tab 2 @tab 選択範囲の文字の大文字小文字を切り替える
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Command-line editing					*ex-edit-index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ex-edit-index}
@cindex ex-edit-index
@section 4. コマンドライン編集
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Get to the command-line with the ':', '!', '/' or '?' commands.
Normal characters are inserted at the current cursor position.
"Completion" below refers to context-sensitive completion.  It will complete
file names, tags, commands etc. as appropriate.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
':' や '!', '/', '?' コマンドでコマンドライン入力となる。
通常の文字はカーソル位置に挿入される。
以下の説明にある「補完」は、前後関係に依存した補完を行う。つまり、ファイル名やタグ、コマンド等適切な補完が行われる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag		command	      action in Command-line editing mode	~
------------------------------------------------------------------------------
		CTRL-@		not used
|c_CTRL-A|	CTRL-A		do completion on the pattern in front of the
				cursor and insert all matches
|c_CTRL-B|	CTRL-B		cursor to begin of command-line
|c_CTRL-C|	CTRL-C		same as <Esc>
|c_CTRL-D|	CTRL-D		list completions that match the pattern in
				front of the cursor
|c_CTRL-E|	CTRL-E		cursor to end of command-line
|'cedit'|	CTRL-F		default value for 'cedit': opens the
				command-line window; otherwise not used
|c_CTRL-G|	CTRL-G		next match when 'incsearch' is active
|c_<BS>|	<BS>		delete the character in front of the cursor
|c_digraph|	{char1} <BS> {char2}
				enter digraph when 'digraph' is on
|c_CTRL-H|	CTRL-H		same as <BS>
|c_<Tab>|	<Tab>		if 'wildchar' is <Tab>: Do completion on
				the pattern in front of the cursor
|c_<S-Tab>|	<S-Tab>		same as CTRL-P
|c_wildchar|	'wildchar'	Do completion on the pattern in front of the
				cursor (default: <Tab>)
|c_CTRL-I|	CTRL-I		same as <Tab>
|c_<NL>|	<NL>		same as <CR>
|c_CTRL-J|	CTRL-J		same as <CR>
|c_CTRL-K|	CTRL-K {char1} {char2}
				enter digraph
|c_CTRL-L|	CTRL-L		do completion on the pattern in front of the
				cursor and insert the longest common part
|c_<CR>|	<CR>		execute entered command
|c_CTRL-M|	CTRL-M		same as <CR>
|c_CTRL-N|	CTRL-N		after using 'wildchar' with multiple matches:
				go to next match, otherwise: recall older
				command-line from history.
		CTRL-O		not used
|c_CTRL-P|	CTRL-P		after using 'wildchar' with multiple matches:
				go to previous match, otherwise: recall older
				command-line from history.
|c_CTRL-Q|	CTRL-Q		same as CTRL-V, unless it's used for terminal
				control flow
|c_CTRL-R|	CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
				insert the contents of a register or object
				under the cursor as if typed
|c_CTRL-R_CTRL-R| CTRL-R CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
				insert the contents of a register or object
				under the cursor literally
		CTRL-S		(used for terminal control flow)
|c_CTRL-T|	CTRL-T		previous match when 'incsearch' is active
|c_CTRL-U|	CTRL-U		remove all characters
|c_CTRL-V|	CTRL-V		insert next non-digit literally, insert three
				digit decimal number as a single byte.
|c_CTRL-W|	CTRL-W		delete the word in front of the cursor
		CTRL-X		not used (reserved for completion)
		CTRL-Y		copy (yank) modeless selection
		CTRL-Z		not used (reserved for suspend)
|c_<Esc>|	<Esc>		abandon command-line without executing it
|c_CTRL-[|	CTRL-[		same as <Esc>
|c_CTRL-\_CTRL-N| CTRL-\ CTRL-N	go to Normal mode, abandon command-line
|c_CTRL-\_CTRL-G| CTRL-\ CTRL-G	go to mode specified with 'insertmode',
				abandon command-line
		CTRL-\ a - d	reserved for extensions
|c_CTRL-\_e|	CTRL-\ e {expr} replace the command line with the result of
				{expr}
		CTRL-\ f - z	reserved for extensions
		CTRL-\ others	not used
|c_CTRL-]|	CTRL-]		trigger abbreviation
|c_CTRL-^|	CTRL-^		toggle use of |:lmap| mappings
|c_CTRL-_|	CTRL-_		when 'allowrevins' set: change language
				(Hebrew, Farsi)
|c_<Del>|	<Del>		delete the character under the cursor

|c_<Left>|	<Left>		cursor left
|c_<S-Left>|	<S-Left>	cursor one word left
|c_<C-Left>|	<C-Left>	cursor one word left
|c_<Right>|	<Right>		cursor right
|c_<S-Right>|	<S-Right>	cursor one word right
|c_<C-Right>|	<C-Right>	cursor one word right
|c_<Up>|	<Up>		recall previous command-line from history that
				matches pattern in front of the cursor
|c_<S-Up>|	<S-Up>		recall previous command-line from history
|c_<Down>|	<Down>		recall next command-line from history that
				matches pattern in front of the cursor
|c_<S-Down>|	<S-Down>	recall next command-line from history
|c_<Home>|	<Home>		cursor to start of command-line
|c_<End>|	<End>		cursor to end of command-line
|c_<PageDown>|	<PageDown>	same as <S-Down>
|c_<PageUp>|	<PageUp>	same as <S-Up>
|c_<Insert>|	<Insert>	toggle insert/overstrike mode
|c_<LeftMouse>|	<LeftMouse>	cursor at mouse click
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .7
@item タグ @tab コマンド @tab コマンドライン編集モードでの動作
@item @tab CTRL-@@ @tab 未使用
@item |c_CTRL-A| @tab CTRL-A @tab カーソル直前の文字を補完し、すべての候補を挿入
@item |c_CTRL-B| @tab CTRL-B @tab カーソルをコマンドラインの先頭へ移動
@item |c_CTRL-C| @tab CTRL-C @tab <Esc> と同じ。
@item |c_CTRL-D| @tab CTRL-D @tab カーソル直前の文字に一致する補完候補を一覧表示
@item |c_CTRL-E| @tab CTRL-E @tab カーソルをコマンドラインの末尾へ移動
@item |'cedit'| @tab CTRL-F @tab '@option{cedit}' が標準設定なら、コマンドラインウィンドウを開く。そうでないなら未使用
@item |c_CTRL-G| @tab CTRL-G @tab '@option{incsearch}' がアクティブならば、次マッチへ移動
@item |c_<BS>| @tab <BS> @tab カーソル直前の文字を削除
@item |c_digraph| @tab @{char1@} <BS> @{char2@} @tab '@option{digraph}' がオンの時、ダイグラフを入力する
@item |c_CTRL-H| @tab CTRL-H @tab <BS> と同じ。
@item |c_<Tab>| @tab <Tab> @tab '@option{wildchar}' が <Tab> の時: カーソル直前の文字を補完する
@item |c_<S-Tab>| @tab <S-Tab> @tab CTRL-P と同じ。
@item |c_wildchar| @tab 'wildchar' @tab カーソル直前の文字を補完する('@option{wildchar}' は標準設定なら<Tab>)
@item |c_CTRL-I| @tab CTRL-I @tab <Tab> と同じ。
@item |c_<NL>| @tab <NL> @tab <CR> と同じ。
@item |c_CTRL-J| @tab CTRL-J @tab <CR> と同じ。
@item |c_CTRL-K| @tab CTRL-K @{char1@} @{char2@} @tab ダイグラフを入力
@item |c_CTRL-L| @tab CTRL-L @tab カーソル直前の文字を補完し、最も長い候補を挿入
@item |c_<CR>| @tab <CR> @tab 入力したコマンドを実行
@item |c_CTRL-M| @tab CTRL-M @tab <CR> と同じ。
@item |c_CTRL-N| @tab CTRL-N @tab '@option{wildchar}' を使用して複数の補完候補があるとき: 次の補完候補を表示。その他: 以前のコマンドラインを履歴から呼び出す
@item @tab CTRL-O @tab 未使用
@item |c_CTRL-P| @tab CTRL-P @tab '@option{wildchar}' を使用して複数の補完候補があるとき: 前の補完候補を表示。その他: 以前のコマンドラインを履歴から呼び出す
@item |c_CTRL-Q| @tab CTRL-Q @tab CTRL-V と同じ (端末制御で使用されていなければ)
@item |c_CTRL-R| @tab CTRL-R @{0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A@} @tab カーソル位置のオブジェクトまたはレジスタの内容をキー入力したかのように挿入
@item |c_CTRL-R_CTRL-R| @tab CTRL-R CTRL-R @{0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A@} @tab カーソル位置のオブジェクトまたはレジスタの内容を文字通りに挿入
@item @item @tab CTRL-S @tab (端末制御に使用)
@item |c_CTRL-T| @tab CTRL-T @tab '@option{incsearch}' がアクティブならば、前マッチへ移動
@item |c_CTRL-U| @tab CTRL-U @tab すべての文字を削除
@item |c_CTRL-V| @tab CTRL-V @tab 続いて入力する、数字以外の文字をそのまま挿入。もしくは 3 桁の 10 進数で 1 バイト文字を指定して挿入
@item |c_CTRL-W| @tab CTRL-W @tab カーソルより前にある単語を削除
@item @tab CTRL-X @tab 未使用 (補完機能のために予約)
@item @tab CTRL-Y @tab モードレス選択をコピー(ヤンク)する
@item @tab CTRL-Z @tab 未使用 (サスペンド機能のために予約)
@item |c_<Esc>| @tab <Esc> @tab コマンドラインを実行せずに破棄する
@item |c_CTRL-[| @tab CTRL-[ @tab <Esc> と同じ。
@item |c_CTRL-\_CTRL-N| @tab CTRL-\ CTRL-N @tab コマンドラインを破棄して、ノーマルモードへ移行
@item |c_CTRL-\_CTRL-G| @tab CTRL-\ CTRL-G @tab コマンドラインを破棄して、'@option{insertmode}' に合わせたモードへ移行
@item @tab CTRL-\ a - d	将来の拡張のために予約
@item |c_CTRL-\_e| @tab CTRL-\ e @{expr@} @tab コマンドラインを @{expr@} の結果で置き換える
@item @tab CTRL-\ f - z @tab 将来の拡張のために予約
@item @tab CTRL-\ others @tab 未使用
@item @tab CTRL-] @tab 未使用
@item |c_CTRL-]| @tab CTRL-] @tab 短縮入力を展開する
@item |c_CTRL-^| @tab CTRL-^ @tab マップ |:lmap| の有効無効を切り替える
@item |c_CTRL-_| @tab CTRL-_ @tab '@option{allowrevins}' がオンのとき、言語を切り替える。(ヘブライ語、ペルシア語)
@item |c_<Del>| @tab <Del> @tab カーソル位置の文字を削除
@item |c_<Left>| @tab <Left> @tab カーソルを左へ移動
@item |c_<S-Left>| @tab <S-Left> @tab カーソルを1単語左へ移動
@item |c_<C-Left>| @tab <C-Left> @tab カーソルを1単語左へ移動
@item |c_<Right>| @tab <Right> @tab カーソルを右へ移動
@item |c_<S-Right>| @tab <S-Right> @tab カーソルを1単語右へ移動
@item |c_<C-Right>| @tab <C-Right> @tab カーソルを1単語右へ移動
@item |c_<Up>| @tab <Up> @tab ヒストリの中でカーソルより前のパターンに一致する 1 つ前のコマンドラインを呼び出す
@item |c_<S-Up>| @tab <S-Up> @tab ヒストリから1つ前のコマンドラインを呼び出す
@item |c_<Down>| @tab <Down> @tab ヒストリの中でカーソルより前のパターンに一致する 1 つ次のコマンドラインを呼び出す
@item |c_<S-Down>| @tab <S-Down> @tab ヒストリから1つ次のコマンドラインを呼び出す
@item |c_<Home>| @tab <Home> @tab カーソルをコマンドラインの先頭へ移動
@item |c_<End>| @tab <End> @tab カーソルをコマンドラインの末尾へ移動
@item |c_<PageDown>| @tab <PageDown> @tab <S-Down> と同じ。
@item |c_<PageUp>| @tab <PageUp> @tab <S-Up> と同じ。
@item |c_<Insert>| @tab <Insert> @tab 挿入モード/置換モードを変更
@item |c_<LeftMouse>| @tab <LeftMouse> @tab カーソルをマウスクリック位置へ移動
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You found it, Arthur!				*holy-grail* *:smile*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{holy-grail}
@anchor{:smile}
@cindex holy-grail
@cindex :smile
ついに見つけたんだね、セイバー！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. EX commands					*ex-cmd-index* *:index*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{ex-cmd-index}
@anchor{:index}
@cindex ex-cmd-index
@cindex :index
@section 5. EX コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is a brief but complete listing of all the ":" commands, without
mentioning any arguments.  The optional part of the command name is inside [].
The commands are sorted on the non-optional part of their name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
以下に簡単ではあるがすべての "@command{:}" コマンドを列挙した。引数についての説明はしていない。コマンド名の省略可能な部分を [] で囲った。コマンドはコマンド名のうち省略できない部分を対象としてソートした。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
tag	      command	      action ~
------------------------------------------------------------------------------
|:!|		:!		filter lines or execute an external command
|:!!|		:!!		repeat last ":!" command
|:#|		:#		same as ":number"
|:&|		:&		repeat last ":substitute"
|:star|		:*		execute contents of a register
|:<|		:<		shift lines one 'shiftwidth' left
|:=|		:=		print the cursor line number
|:>|		:>		shift lines one 'shiftwidth' right
|:@|		:@		execute contents of a register
|:@@|		:@@		repeat the previous ":@"
|:Next|		:N[ext]		go to previous file in the argument list
|:Print|	:P[rint]	print lines
|:X|		:X		ask for encryption key
|:append|	:a[ppend]	append text
|:abbreviate|	:ab[breviate]	enter abbreviation
|:abclear|	:abc[lear]	remove all abbreviations
|:aboveleft|	:abo[veleft]	make split window appear left or above
|:all|		:al[l]		open a window for each file in the argument
				list
|:amenu|	:am[enu]	enter new menu item for all modes
|:anoremenu|	:an[oremenu]	enter a new menu for all modes that will not
				be remapped
|:args|		:ar[gs]		print the argument list
|:argadd|	:arga[dd]	add items to the argument list
|:argdelete|	:argd[elete]	delete items from the argument list
|:argedit|	:arge[dit]	add item to the argument list and edit it
|:argdo|	:argdo		do a command on all items in the argument list
|:argglobal|	:argg[lobal]	define the global argument list
|:arglocal|	:argl[ocal]	define a local argument list
|:argument|	:argu[ment]	go to specific file in the argument list
|:ascii|	:as[cii]	print ascii value of character under the cursor
|:autocmd|	:au[tocmd]	enter or show autocommands
|:augroup|	:aug[roup]	select the autocommand group to use
|:aunmenu|	:aun[menu]	remove menu for all modes
|:buffer|	:b[uffer]	go to specific buffer in the buffer list
|:bNext|	:bN[ext]	go to previous buffer in the buffer list
|:ball|		:ba[ll]		open a window for each buffer in the buffer list
|:badd|		:bad[d]		add buffer to the buffer list
|:bdelete|	:bd[elete]	remove a buffer from the buffer list
|:behave|	:be[have]	set mouse and selection behavior
|:belowright|	:bel[owright]	make split window appear right or below
|:bfirst|	:bf[irst]	go to first buffer in the buffer list
|:blast|	:bl[ast]	go to last buffer in the buffer list
|:bmodified|	:bm[odified]	go to next buffer in the buffer list that has
				been modified
|:bnext|	:bn[ext]	go to next buffer in the buffer list
|:botright|	:bo[tright]	make split window appear at bottom or far right
|:bprevious|	:bp[revious]	go to previous buffer in the buffer list
|:brewind|	:br[ewind]	go to first buffer in the buffer list
|:break|	:brea[k]	break out of while loop
|:breakadd|	:breaka[dd]	add a debugger breakpoint
|:breakdel|	:breakd[el]	delete a debugger breakpoint
|:breaklist|	:breakl[ist]	list debugger breakpoints
|:browse|	:bro[wse]	use file selection dialog
|:bufdo|	:bufdo		execute command in each listed buffer
|:buffers|	:buffers	list all files in the buffer list
|:bunload|	:bun[load]	unload a specific buffer
|:bwipeout|	:bw[ipeout]	really delete a buffer
|:change|	:c[hange]	replace a line or series of lines
|:cNext|	:cN[ext]	go to previous error
|:cNfile|	:cNf[ile]	go to last error in previous file
|:cabbrev|	:ca[bbrev]	like ":abbreviate" but for Command-line mode
|:cabclear|	:cabc[lear]	clear all abbreviations for Command-line mode
|:caddbuffer|	:cad[dbuffer]	add errors from buffer
|:caddexpr|	:cadde[xpr]	add errors from expr
|:caddfile|	:caddf[ile]	add error message to current quickfix list
|:call|		:cal[l]		call a function
|:catch|	:cat[ch]	part of a :try command
|:cbottom|	:cbo[ttom]	scroll to the bottom of the quickfix window
|:cbuffer|	:cb[uffer]	parse error messages and jump to first error
|:cc|		:cc		go to specific error
|:cclose|	:ccl[ose]	close quickfix window
|:cd|		:cd		change directory
|:cdo|		:cdo		execute command in each valid error list entry
|:cfdo|		:cfd[o]		execute command in each file in error list
|:center|	:ce[nter]	format lines at the center
|:cexpr|	:cex[pr]	read errors from expr and jump to first
|:cfile|	:cf[ile]	read file with error messages and jump to first
|:cfirst|	:cfir[st]	go to the specified error, default first one
|:cgetbuffer|	:cgetb[uffer]	get errors from buffer
|:cgetexpr|	:cgete[xpr]	get errors from expr
|:cgetfile|	:cg[etfile]	read file with error messages
|:changes|	:changes	print the change list
|:chdir|	:chd[ir]	change directory
|:checkpath|	:che[ckpath]	list included files
|:checktime|	:checkt[ime]	check timestamp of loaded buffers
|:chistory|	:chi[story]	list the error lists
|:clast|	:cla[st]	go to the specified error, default last one
|:clearjumps|	:cle[arjumps]	clear the jump list
|:clist|	:cl[ist]	list all errors
|:close|	:clo[se]	close current window
|:cmap|		:cm[ap]		like ":map" but for Command-line mode
|:cmapclear|	:cmapc[lear]	clear all mappings for Command-line mode
|:cmenu|	:cme[nu]	add menu for Command-line mode
|:cnext|	:cn[ext]	go to next error
|:cnewer|	:cnew[er]	go to newer error list
|:cnfile|	:cnf[ile]	go to first error in next file
|:cnoremap|	:cno[remap]	like ":noremap" but for Command-line mode
|:cnoreabbrev|	:cnorea[bbrev]	like ":noreabbrev" but for Command-line mode
|:cnoremenu|	:cnoreme[nu]	like ":noremenu" but for Command-line mode
|:copy|		:co[py]		copy lines
|:colder|	:col[der]	go to older error list
|:colorscheme|	:colo[rscheme]	load a specific color scheme
|:command|	:com[mand]	create user-defined command
|:comclear|	:comc[lear]	clear all user-defined commands
|:compiler|	:comp[iler]	do settings for a specific compiler
|:continue|	:con[tinue]	go back to :while
|:confirm|	:conf[irm]	prompt user when confirmation required
|:copen|	:cope[n]	open quickfix window
|:cprevious|	:cp[revious]	go to previous error
|:cpfile|	:cpf[ile]	go to last error in previous file
|:cquit|	:cq[uit]	quit Vim with an error code
|:crewind|	:cr[ewind]	go to the specified error, default first one
|:cscope|	:cs[cope]	execute cscope command
|:cstag|	:cst[ag]	use cscope to jump to a tag
|:cunmap|	:cu[nmap]	like ":unmap" but for Command-line mode
|:cunabbrev|	:cuna[bbrev]	like ":unabbrev" but for Command-line mode
|:cunmenu|	:cunme[nu]	remove menu for Command-line mode
|:cwindow|	:cw[indow]	open or close quickfix window
|:delete|	:d[elete]	delete lines
|:delmarks|	:delm[arks]	delete marks
|:debug|	:deb[ug]	run a command in debugging mode
|:debuggreedy|	:debugg[reedy]	read debug mode commands from normal input
|:delcommand|	:delc[ommand]	delete user-defined command
|:delfunction|	:delf[unction]	delete a user function
|:diffupdate|	:dif[fupdate]	update 'diff' buffers
|:diffget|	:diffg[et]	remove differences in current buffer
|:diffoff|	:diffo[ff]	switch off diff mode
|:diffpatch|	:diffp[atch]	apply a patch and show differences
|:diffput|	:diffpu[t]	remove differences in other buffer
|:diffsplit|	:diffs[plit]	show differences with another file
|:diffthis|	:diffthis	make current window a diff window
|:digraphs|	:dig[raphs]	show or enter digraphs
|:display|	:di[splay]	display registers
|:djump|	:dj[ump]	jump to #define
|:dl|		:dl		short for |:delete| with the 'l' flag
|:del|		:del[ete]l	short for |:delete| with the 'l' flag
|:dlist|	:dli[st]	list #defines
|:doautocmd|	:do[autocmd]	apply autocommands to current buffer
|:doautoall|	:doautoa[ll]	apply autocommands for all loaded buffers
|:dp|		:d[elete]p	short for |:delete| with the 'p' flag
|:drop|		:dr[op]		jump to window editing file or edit file in
				current window
|:dsearch|	:ds[earch]	list one #define
|:dsplit|	:dsp[lit]	split window and jump to #define
|:edit|		:e[dit]		edit a file
|:earlier|	:ea[rlier]	go to older change, undo
|:echo|		:ec[ho]		echoes the result of expressions
|:echoerr|	:echoe[rr]	like :echo, show like an error and use history
|:echohl|	:echoh[l]	set highlighting for echo commands
|:echomsg|	:echom[sg]	same as :echo, put message in history
|:echon|	:echon		same as :echo, but without <EOL>
|:else|		:el[se]		part of an :if command
|:elseif|	:elsei[f]	part of an :if command
|:emenu|	:em[enu]	execute a menu by name
|:endif|	:en[dif]	end previous :if
|:endfor|	:endfo[r]	end previous :for
|:endfunction|	:endf[unction]	end of a user function
|:endtry|	:endt[ry]	end previous :try
|:endwhile|	:endw[hile]	end previous :while
|:enew|		:ene[w]		edit a new, unnamed buffer
|:ex|		:ex		same as ":edit"
|:execute|	:exe[cute]	execute result of expressions
|:exit|		:exi[t]		same as ":xit"
|:exusage|	:exu[sage]	overview of Ex commands
|:file|		:f[ile]		show or set the current file name
|:files|	:files		list all files in the buffer list
|:filetype|	:filet[ype]	switch file type detection on/off
|:filter|	:filt[er]	filter output of following command
|:find|		:fin[d]		find file in 'path' and edit it
|:finally|	:fina[lly]	part of a :try command
|:finish|	:fini[sh]	quit sourcing a Vim script
|:first|	:fir[st]	go to the first file in the argument list
|:fixdel|	:fix[del]	set key code of <Del>
|:fold|		:fo[ld]		create a fold
|:foldclose|	:foldc[lose]	close folds
|:folddoopen|	:foldd[oopen]	execute command on lines not in a closed fold
|:folddoclosed|	:folddoc[losed]	execute command on lines in a closed fold
|:foldopen|	:foldo[pen]	open folds
|:for|		:for		for loop
|:function|	:fu[nction]	define a user function
|:global|	:g[lobal]	execute commands for matching lines
|:goto|		:go[to]		go to byte in the buffer
|:grep|		:gr[ep]		run 'grepprg' and jump to first match
|:grepadd|	:grepa[dd]	like :grep, but append to current list
|:gui|		:gu[i]		start the GUI
|:gvim|		:gv[im]		start the GUI
|:hardcopy|	:ha[rdcopy]	send text to the printer
|:help|		:h[elp]		open a help window
|:helpclose|	:helpc[lose]	close one help window
|:helpfind|	:helpf[ind]	dialog to open a help window
|:helpgrep|	:helpg[rep]	like ":grep" but searches help files
|:helptags|	:helpt[ags]	generate help tags for a directory
|:highlight|	:hi[ghlight]	specify highlighting methods
|:hide|		:hid[e]		hide current buffer for a command
|:history|	:his[tory]	print a history list
|:insert|	:i[nsert]	insert text
|:iabbrev|	:ia[bbrev]	like ":abbrev" but for Insert mode
|:iabclear|	:iabc[lear]	like ":abclear" but for Insert mode
|:if|		:if		execute commands when condition met
|:ijump|	:ij[ump]	jump to definition of identifier
|:ilist|	:il[ist]	list lines where identifier matches
|:imap|		:im[ap]		like ":map" but for Insert mode
|:imapclear|	:imapc[lear]	like ":mapclear" but for Insert mode
|:imenu|	:ime[nu]	add menu for Insert mode
|:inoremap|	:ino[remap]	like ":noremap" but for Insert mode
|:inoreabbrev|	:inorea[bbrev]	like ":noreabbrev" but for Insert mode
|:inoremenu|	:inoreme[nu]	like ":noremenu" but for Insert mode
|:intro|	:int[ro]	print the introductory message
|:isearch|	:is[earch]	list one line where identifier matches
|:isplit|	:isp[lit]	split window and jump to definition of
				identifier
|:iunmap|	:iu[nmap]	like ":unmap" but for Insert mode
|:iunabbrev|	:iuna[bbrev]	like ":unabbrev" but for Insert mode
|:iunmenu|	:iunme[nu]	remove menu for Insert mode
|:join|		:j[oin]		join lines
|:jumps|	:ju[mps]	print the jump list
|:k|		:k		set a mark
|:keepalt|	:keepa[lt]	following command keeps the alternate file
|:keepmarks|	:kee[pmarks]	following command keeps marks where they are
|:keepjumps|	:keepj[umps]	following command keeps jumplist and marks
|:keeppatterns|	:keepp[atterns]	following command keeps search pattern history
|:lNext|	:lN[ext]	go to previous entry in location list
|:lNfile|	:lNf[ile]	go to last entry in previous file
|:list|		:l[ist]		print lines
|:laddexpr|	:lad[dexpr]	add locations from expr
|:laddbuffer|	:laddb[uffer]	add locations from buffer
|:laddfile|	:laddf[ile]	add locations to current location list
|:last|		:la[st]		go to the last file in the argument list
|:language|	:lan[guage]	set the language (locale)
|:later|	:lat[er]	go to newer change, redo
|:lbottom|	:lbo[ttom]	scroll to the bottom of the location window
|:lbuffer|	:lb[uffer]	parse locations and jump to first location
|:lcd|		:lc[d]		change directory locally
|:lchdir|	:lch[dir]	change directory locally
|:lclose|	:lcl[ose]	close location window
|:lcscope|	:lcs[cope]	like ":cscope" but uses location list
|:ldo|		:ld[o]		execute command in valid location list entries
|:lfdo|		:lfd[o]		execute command in each file in location list
|:left|		:le[ft]		left align lines
|:leftabove|	:lefta[bove]	make split window appear left or above
|:let|		:let		assign a value to a variable or option
|:lexpr|	:lex[pr]	read locations from expr and jump to first
|:lfile|	:lf[ile]	read file with locations and jump to first
|:lfirst|	:lfir[st]	go to the specified location, default first one
|:lgetbuffer|	:lgetb[uffer]	get locations from buffer
|:lgetexpr|	:lgete[xpr]	get locations from expr
|:lgetfile|	:lg[etfile]	read file with locations
|:lgrep|	:lgr[ep]	run 'grepprg' and jump to first match
|:lgrepadd|	:lgrepa[dd]	like :grep, but append to current list
|:lhelpgrep|	:lh[elpgrep]	like ":helpgrep" but uses location list
|:lhistory|	:lhi[story]	list the location lists
|:ll|		:ll		go to specific location
|:llast|	:lla[st]	go to the specified location, default last one
|:llist|	:lli[st]	list all locations
|:lmake|	:lmak[e]	execute external command 'makeprg' and parse
				error messages
|:lmap|		:lm[ap]		like ":map!" but includes Lang-Arg mode
|:lmapclear|	:lmapc[lear]	like ":mapclear!" but includes Lang-Arg mode
|:lnext|	:lne[xt]	go to next location
|:lnewer|	:lnew[er]	go to newer location list
|:lnfile|	:lnf[ile]	go to first location in next file
|:lnoremap|	:ln[oremap]	like ":noremap!" but includes Lang-Arg mode
|:loadkeymap|	:loadk[eymap]	load the following keymaps until EOF
|:loadview|	:lo[adview]	load view for current window from a file
|:lockmarks|	:loc[kmarks]	following command keeps marks where they are
|:lockvar|	:lockv[ar]	lock variables
|:lolder|	:lol[der]	go to older location list
|:lopen|	:lope[n]	open location window
|:lprevious|	:lp[revious]	go to previous location
|:lpfile|	:lpf[ile]	go to last location in previous file
|:lrewind|	:lr[ewind]	go to the specified location, default first one
|:ls|		:ls		list all buffers
|:ltag|		:lt[ag]		jump to tag and add matching tags to the
				location list
|:lunmap|	:lu[nmap]	like ":unmap!" but includes Lang-Arg mode
|:lua|		:lua		execute |Lua| command
|:luado|	:luad[o]	execute Lua command for each line
|:luafile|	:luaf[ile]	execute |Lua| script file
|:lvimgrep|	:lv[imgrep]	search for pattern in files
|:lvimgrepadd|	:lvimgrepa[dd]	like :vimgrep, but append to current list
|:lwindow|	:lw[indow]	open or close location window
|:move|		:m[ove]		move lines
|:mark|		:ma[rk]		set a mark
|:make|		:mak[e]		execute external command 'makeprg' and parse
				error messages
|:map|		:map		show or enter a mapping
|:mapclear|	:mapc[lear]	clear all mappings for Normal and Visual mode
|:marks|	:marks		list all marks
|:match|	:mat[ch]	define a match to highlight
|:menu|		:me[nu]		enter a new menu item
|:menutranslate|  :menut[ranslate] add a menu translation item
|:messages|	:mes[sages]	view previously displayed messages
|:mkexrc|	:mk[exrc]	write current mappings and settings to a file
|:mksession|	:mks[ession]	write session info to a file
|:mkspell|	:mksp[ell]	produce .spl spell file
|:mkvimrc|	:mkv[imrc]	write current mappings and settings to a file
|:mkview|	:mkvie[w]	write view of current window to a file
|:mode|		:mod[e]		show or change the screen mode
|:mzscheme|	:mz[scheme]	execute MzScheme command
|:mzfile|	:mzf[ile]	execute MzScheme script file
|:nbclose|	:nbc[lose]	close the current Netbeans session
|:nbkey|	:nb[key]	pass a key to Netbeans
|:nbstart|	:nbs[art]	start a new Netbeans session
|:next|		:n[ext]		go to next file in the argument list
|:new|		:new		create a new empty window
|:nmap|		:nm[ap]		like ":map" but for Normal mode
|:nmapclear|	:nmapc[lear]	clear all mappings for Normal mode
|:nmenu|	:nme[nu]	add menu for Normal mode
|:nnoremap|	:nn[oremap]	like ":noremap" but for Normal mode
|:nnoremenu|	:nnoreme[nu]	like ":noremenu" but for Normal mode
|:noautocmd|	:noa[utocmd]	following commands don't trigger autocommands
|:noremap|	:no[remap]	enter a mapping that will not be remapped
|:nohlsearch|	:noh[lsearch]	suspend 'hlsearch' highlighting
|:noreabbrev|	:norea[bbrev]	enter an abbreviation that will not be
				remapped
|:noremenu|	:noreme[nu]	enter a menu that will not be remapped
|:normal|	:norm[al]	execute Normal mode commands
|:noswapfile|	:nos[wapfile]	following commands don't create a swap file
|:number|	:nu[mber]	print lines with line number
|:nunmap|	:nun[map]	like ":unmap" but for Normal mode
|:nunmenu|	:nunme[nu]	remove menu for Normal mode
|:oldfiles|	:ol[dfiles]	list files that have marks in the viminfo file
|:open|		:o[pen]		start open mode (not implemented)
|:omap|		:om[ap]		like ":map" but for Operator-pending mode
|:omapclear|	:omapc[lear]	remove all mappings for Operator-pending mode
|:omenu|	:ome[nu]	add menu for Operator-pending mode
|:only|		:on[ly]		close all windows except the current one
|:onoremap|	:ono[remap]	like ":noremap" but for Operator-pending mode
|:onoremenu|	:onoreme[nu]	like ":noremenu" but for Operator-pending mode
|:options|	:opt[ions]	open the options-window
|:ounmap|	:ou[nmap]	like ":unmap" but for Operator-pending mode
|:ounmenu|	:ounme[nu]	remove menu for Operator-pending mode
|:ownsyntax|	:ow[nsyntax]	set new local syntax highlight for this window
|:packadd|	:pa[ckadd]	add a plugin from 'packpath'
|:packloadall|	:packl[oadall]	load all packages under 'packpath'
|:pclose|	:pc[lose]	close preview window
|:pedit|	:ped[it]	edit file in the preview window
|:perl|		:pe[rl]		execute Perl command
|:print|	:p[rint]	print lines
|:profdel|	:profd[el]	stop profiling a function or script
|:profile|	:prof[ile]	profiling functions and scripts
|:promptfind|	:pro[mptfind]	open GUI dialog for searching
|:promptrepl|	:promptr[epl]	open GUI dialog for search/replace
|:perldo|	:perld[o]	execute Perl command for each line
|:pop|		:po[p]		jump to older entry in tag stack
|:popup|	:popu[p]	popup a menu by name
|:ppop|		:pp[op]		":pop" in preview window
|:preserve|	:pre[serve]	write all text to swap file
|:previous|	:prev[ious]	go to previous file in argument list
|:psearch|	:ps[earch]	like ":ijump" but shows match in preview window
|:ptag|		:pt[ag]		show tag in preview window
|:ptNext|	:ptN[ext]	|:tNext| in preview window
|:ptfirst|	:ptf[irst]	|:trewind| in preview window
|:ptjump|	:ptj[ump]	|:tjump| and show tag in preview window
|:ptlast|	:ptl[ast]	|:tlast| in preview window
|:ptnext|	:ptn[ext]	|:tnext| in preview window
|:ptprevious|	:ptp[revious]	|:tprevious| in preview window
|:ptrewind|	:ptr[ewind]	|:trewind| in preview window
|:ptselect|	:pts[elect]	|:tselect| and show tag in preview window
|:put|		:pu[t]		insert contents of register in the text
|:pwd|		:pw[d]		print current directory
|:py3|		:py3		execute Python 3 command
|:python3|	:python3	same as :py3
|:py3do|	:py3d[o]	execute Python 3 command for each line
|:py3file|	:py3f[ile]	execute Python 3 script file
|:python|	:py[thon]	execute Python command
|:pydo|		:pyd[o]		execute Python command for each line
|:pyfile|	:pyf[ile]	execute Python script file
|:pyx|		:pyx		execute |python_x| command
|:pythonx|	:pythonx	same as :pyx
|:pyxdo|	:pyxd[o]	execute |python_x| command for each line
|:pyxfile|	:pyxf[ile]	execute |python_x| script file
|:quit|		:q[uit]		quit current window (when one window quit Vim)
|:quitall|	:quita[ll]	quit Vim
|:qall|		:qa[ll]		quit Vim
|:read|		:r[ead]		read file into the text
|:recover|	:rec[over]	recover a file from a swap file
|:redo|		:red[o]		redo one undone change
|:redir|	:redi[r]	redirect messages to a file or register
|:redraw|	:redr[aw]	force a redraw of the display
|:redrawstatus|	:redraws[tatus]	force a redraw of the status line(s)
|:registers|	:reg[isters]	display the contents of registers
|:resize|	:res[ize]	change current window height
|:retab|	:ret[ab]	change tab size
|:return|	:retu[rn]	return from a user function
|:rewind|	:rew[ind]	go to the first file in the argument list
|:right|	:ri[ght]	right align text
|:rightbelow|	:rightb[elow]	make split window appear right or below
|:ruby|		:rub[y]		execute Ruby command
|:rubydo|	:rubyd[o]	execute Ruby command for each line
|:rubyfile|	:rubyf[ile]	execute Ruby script file
|:rundo|	:rund[o]	read undo information from a file
|:runtime|	:ru[ntime]	source vim scripts in 'runtimepath'
|:rviminfo|	:rv[iminfo]	read from viminfo file
|:substitute|	:s[ubstitute]	find and replace text
|:sNext|	:sN[ext]	split window and go to previous file in
				argument list
|:sandbox|	:san[dbox]	execute a command in the sandbox
|:sargument|	:sa[rgument]	split window and go to specific file in
				argument list
|:sall|		:sal[l]		open a window for each file in argument list
|:saveas|	:sav[eas]	save file under another name.
|:sbuffer|	:sb[uffer]	split window and go to specific file in the
				buffer list
|:sbNext|	:sbN[ext]	split window and go to previous file in the
				buffer list
|:sball|	:sba[ll]	open a window for each file in the buffer list
|:sbfirst|	:sbf[irst]	split window and go to first file in the
				buffer list
|:sblast|	:sbl[ast]	split window and go to last file in buffer
				list
|:sbmodified|	:sbm[odified]	split window and go to modified file in the
				buffer list
|:sbnext|	:sbn[ext]	split window and go to next file in the buffer
				list
|:sbprevious|	:sbp[revious]	split window and go to previous file in the
				buffer list
|:sbrewind|	:sbr[ewind]	split window and go to first file in the
				buffer list
|:scriptnames|	:scr[iptnames]	list names of all sourced Vim scripts
|:scriptencoding| :scripte[ncoding]	encoding used in sourced Vim script
|:scscope|	:scs[cope]	split window and execute cscope command
|:set|		:se[t]		show or set options
|:setfiletype|	:setf[iletype]	set 'filetype', unless it was set already
|:setglobal|	:setg[lobal]	show global values of options
|:setlocal|	:setl[ocal]	show or set options locally
|:sfind|	:sf[ind]	split current window and edit file in 'path'
|:sfirst|	:sfir[st]	split window and go to first file in the
				argument list
|:shell|	:sh[ell]	escape to a shell
|:simalt|	:sim[alt]	Win32 GUI: simulate Windows ALT key
|:sign|		:sig[n]		manipulate signs
|:silent|	:sil[ent]	run a command silently
|:sleep|	:sl[eep]	do nothing for a few seconds
|:slast|	:sla[st]	split window and go to last file in the
				argument list
|:smagic|	:sm[agic]	:substitute with 'magic'
|:smap|		:smap		like ":map" but for Select mode
|:smapclear|	:smapc[lear]	remove all mappings for Select mode
|:smenu|	:sme[nu]	add menu for Select mode
|:smile|	:smi[le]	make the user happy
|:snext|	:sn[ext]	split window and go to next file in the
				argument list
|:snomagic|	:sno[magic]	:substitute with 'nomagic'
|:snoremap|	:snor[emap]	like ":noremap" but for Select mode
|:snoremenu|	:snoreme[nu]	like ":noremenu" but for Select mode
|:sort|		:sor[t]		sort lines
|:source|	:so[urce]	read Vim or Ex commands from a file
|:spelldump|	:spelld[ump]	split window and fill with all correct words
|:spellgood|	:spe[llgood]	add good word for spelling
|:spellinfo|	:spelli[nfo]	show info about loaded spell files
|:spellrepall|	:spellr[epall]	replace all bad words like last |z=|
|:spellundo|	:spellu[ndo]	remove good or bad word
|:spellwrong|	:spellw[rong]	add spelling mistake
|:split|	:sp[lit]	split current window
|:sprevious|	:spr[evious]	split window and go to previous file in the
				argument list
|:srewind|	:sre[wind]	split window and go to first file in the
				argument list
|:stop|		:st[op]		suspend the editor or escape to a shell
|:stag|		:sta[g]		split window and jump to a tag
|:startinsert|	:star[tinsert]	start Insert mode
|:startgreplace|  :startg[replace] start Virtual Replace mode
|:startreplace|	:startr[eplace]	start Replace mode
|:stopinsert|	:stopi[nsert]	stop Insert mode
|:stjump|	:stj[ump]	do ":tjump" and split window
|:stselect|	:sts[elect]	do ":tselect" and split window
|:sunhide|	:sun[hide]	same as ":unhide"
|:sunmap|	:sunm[ap]	like ":unmap" but for Select mode
|:sunmenu|	:sunme[nu]	remove menu for Select mode
|:suspend|	:sus[pend]	same as ":stop"
|:sview|	:sv[iew]	split window and edit file read-only
|:swapname|	:sw[apname]	show the name of the current swap file
|:syntax|	:sy[ntax]	syntax highlighting
|:syntime|	:synti[me]	measure syntax highlighting speed
|:syncbind|	:sync[bind]	sync scroll binding
|:t|		:t		same as ":copy"
|:tNext|	:tN[ext]	jump to previous matching tag
|:tabNext|	:tabN[ext]	go to previous tab page
|:tabclose|	:tabc[lose]	close current tab page
|:tabdo|	:tabdo		execute command in each tab page
|:tabedit|	:tabe[dit]	edit a file in a new tab page
|:tabfind|	:tabf[ind]	find file in 'path', edit it in a new tab page
|:tabfirst|	:tabfir[st]	go to first tab page
|:tablast|	:tabl[ast]	go to last tab page
|:tabmove|	:tabm[ove]	move tab page to other position
|:tabnew|	:tabnew		edit a file in a new tab page
|:tabnext|	:tabn[ext]	go to next tab page
|:tabonly|	:tabo[nly]	close all tab pages except the current one
|:tabprevious|	:tabp[revious]	go to previous tab page
|:tabrewind|	:tabr[ewind]	go to first tab page
|:tabs|		:tabs		list the tab pages and what they contain
|:tab|		:tab		create new tab when opening new window
|:tag|		:ta[g]		jump to tag
|:tags|		:tags		show the contents of the tag stack
|:tcl|		:tc[l]		execute Tcl command
|:tcldo|	:tcld[o]	execute Tcl command for each line
|:tclfile|	:tclf[ile]	execute Tcl script file
|:tearoff|	:te[aroff]	tear-off a menu
|:terminal|	:ter[minal]	open a terminal window
|:tfirst|	:tf[irst]	jump to first matching tag
|:throw|	:th[row]	throw an exception
|:tjump|	:tj[ump]	like ":tselect", but jump directly when there
				is only one match
|:tlast|	:tl[ast]	jump to last matching tag
|:tmenu|	:tm[enu]	define menu tooltip
|:tnext|	:tn[ext]	jump to next matching tag
|:topleft|	:to[pleft]	make split window appear at top or far left
|:tprevious|	:tp[revious]	jump to previous matching tag
|:trewind|	:tr[ewind]	jump to first matching tag
|:try|		:try		execute commands, abort on error or exception
|:tselect|	:ts[elect]	list matching tags and select one
|:tunmenu|	:tu[nmenu]	remove menu tooltip
|:undo|		:u[ndo]		undo last change(s)
|:undojoin|	:undoj[oin]	join next change with previous undo block
|:undolist|	:undol[ist]	list leafs of the undo tree
|:unabbreviate|	:una[bbreviate]	remove abbreviation
|:unhide|	:unh[ide]	open a window for each loaded file in the
				buffer list
|:unlet|	:unl[et]	delete variable
|:unlockvar|	:unlo[ckvar]	unlock variables
|:unmap|	:unm[ap]	remove mapping
|:unmenu|	:unme[nu]	remove menu
|:unsilent|	:uns[ilent]	run a command not silently
|:update|	:up[date]	write buffer if modified
|:vglobal|	:v[global]	execute commands for not matching lines
|:version|	:ve[rsion]	print version number and other info
|:verbose|	:verb[ose]	execute command with 'verbose' set
|:vertical|	:vert[ical]	make following command split vertically
|:vimgrep|	:vim[grep]	search for pattern in files
|:vimgrepadd|	:vimgrepa[dd]	like :vimgrep, but append to current list
|:visual|	:vi[sual]	same as ":edit", but turns off "Ex" mode
|:viusage|	:viu[sage]	overview of Normal mode commands
|:view|		:vie[w]		edit a file read-only
|:vmap|		:vm[ap]		like ":map" but for Visual+Select mode
|:vmapclear|	:vmapc[lear]	remove all mappings for Visual+Select mode
|:vmenu|	:vme[nu]	add menu for Visual+Select mode
|:vnew|		:vne[w]		create a new empty window, vertically split
|:vnoremap|	:vn[oremap]	like ":noremap" but for Visual+Select mode
|:vnoremenu|	:vnoreme[nu]	like ":noremenu" but for Visual+Select mode
|:vsplit|	:vs[plit]	split current window vertically
|:vunmap|	:vu[nmap]	like ":unmap" but for Visual+Select mode
|:vunmenu|	:vunme[nu]	remove menu for Visual+Select mode
|:windo|	:windo		execute command in each window
|:write|	:w[rite]	write to a file
|:wNext|	:wN[ext]	write to a file and go to previous file in
				argument list
|:wall|		:wa[ll]		write all (changed) buffers
|:while|	:wh[ile]	execute loop for as long as condition met
|:winsize|	:wi[nsize]	get or set window size (obsolete)
|:wincmd|	:winc[md]	execute a Window (CTRL-W) command
|:winpos|	:winp[os]	get or set window position
|:wnext|	:wn[ext]	write to a file and go to next file in
				argument list
|:wprevious|	:wp[revious]	write to a file and go to previous file in
				argument list
|:wq|		:wq		write to a file and quit window or Vim
|:wqall|	:wqa[ll]	write all changed buffers and quit Vim
|:wsverb|	:ws[verb]	pass the verb to workshop over IPC
|:wundo|	:wu[ndo]	write undo information to a file
|:wviminfo|	:wv[iminfo]	write to viminfo file
|:xit|		:x[it]		write if buffer changed and quit window or Vim
|:xall|		:xa[ll]		same as ":wqall"
|:xmapclear|	:xmapc[lear]	remove all mappings for Visual mode
|:xmap|		:xm[ap]		like ":map" but for Visual mode
|:xmenu|	:xme[nu]	add menu for Visual mode
|:xnoremap|	:xn[oremap]	like ":noremap" but for Visual mode
|:xnoremenu|	:xnoreme[nu]	like ":noremenu" but for Visual mode
|:xunmap|	:xu[nmap]	like ":unmap" but for Visual mode
|:xunmenu|	:xunme[nu]	remove menu for Visual mode
|:yank|		:y[ank]		yank lines into a register
|:z|		:z		print some lines
|:~|		:~		repeat last ":substitute"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .1 .2 .7
@item タグ @tab コマンド @tab 動作
@item |:!| @tab :! @tab 行をフィルタにかける、または、外部コマンドを実行する
@item |:!!| @tab :!! @tab 最後に実行した "@command{:!}" コマンドを繰り返す
@item |:#| @tab :# @tab "@command{:number}" と同じ。
@item |:&| @tab :& @tab 最後に実行した "@command{:substitute}" を繰り返す
@item |:star| @tab :* @tab レジスタの内容を実行する
@item |:<| @tab :< @tab '@option{shiftwidth}' 1 つ分だけ行を左へシフト
@item |:=| @tab := @tab カーソルのある行の行番号を表示
@item |:>| @tab :> @tab '@option{shiftwidth}' 1 つ分だけ行を右へシフト
@item |:@@| @tab :@@ @tab レジスタの内容を実行
@item |:@@@@| @tab :@@@@ @tab 直前の ":@@" を繰り返す
@item |:Next| @tab :N[ext] @tab 引数リストの1つ前のファイルを編集
@item |:Print| @tab :P[rint] @tab 行を表示する
@item |:X| @tab :X @tab 暗号鍵を設定する
@item |:append| @tab :a[ppend] @tab テキストを追加する
@item |:abbreviate| @tab :ab[breviate] @tab 短縮入力を登録する
@item |:abclear| @tab :abc[lear] @tab すべての短縮入力を削除する
@item |:aboveleft| @tab :abo[veleft] @tab ウィンドウが左もしくは上に分割されるようにする
@item |:all| @tab :al[l] @tab 引数リストの全ファイルをウィンドウ作成して表示
@item |:amenu| @tab :am[enu] @tab すべてのモードに対してメニュー項目を追加
@item |:anoremenu| @tab :an[oremenu] @tab すべてのモードに対して再マップされないメニュー項目を追加
@item |:args| @tab :ar[gs] @tab 引数リストを表示
@item |:argadd| @tab :arga[dd] @tab 引数リストにファイルを追加する
@item |:argdelete| @tab :argd[elete] @tab 引数リストからファイルを削除する
@item |:argedit| @tab :arge[dit] @tab 引数リストにファイルを追加し、開く
@item |:argdo| @tab :argdo @tab 引数リストのすべてのファイルに対してコマンドを実行する
@item |:argglobal| @tab :argg[lobal] @tab グローバル引数リストを使用する
@item |:arglocal| @tab :argl[ocal] @tab ローカル引数リストを使用する
@item |:argument| @tab :argu[ment] @tab 引数リストの指定したファイルを開く
@item |:ascii| @tab :as[cii] @tab カーソル位置の文字の ASCII コードを表示
@item |:autocmd| @tab :au[tocmd] @tab オートコマンドの入力と表示
@item |:augroup| @tab :aug[roup] @tab 使用するオートコマンドグループの選択と表示
@item |:aunmenu| @tab :aun[menu] @tab すべてのモードに対してメニュー項目を削除
@item |:buffer| @tab :b[uffer] @tab バッファリストの指定したバッファを開く
@item |:bNext| @tab :bN[ext] @tab バッファリストの前のバッファを開く
@item |:ball| @tab :ba[ll] @tab バッファリストのすべてのバッファをウィンドウを作成して開く
@item |:badd| @tab :bad[d] @tab バッファリストにバッファを追加
@item |:bdelete| @tab :bd[elete] @tab バッファリストからバッファを削除
@item |:behave| @tab :be[have] @tab マウス操作や選択の動作を設定する
@item |:belowright| @tab :bel[owright] @tab ウィンドウが右もしくは下に分割されるようにする
@item |:bfirst| @tab :bf[irst] @tab バッファリストの最初のバッファを開く
@item |:blast| @tab :bl[ast] @tab バッファリストの最後のバッファを開く
@item |:bmodified| @tab :bm[odified] @tab バッファリストの次の変更済みバッファを開く
@item |:bnext| @tab :bn[ext] @tab バッファリストの次のバッファを開く
@item |:botright| @tab :bo[tright] @tab ウィンドウが最も右もしくは最も下に分割されるようにする
@item |:bprevious| @tab :bp[revious] @tab バッファリストの前のバッファを開く
@item |:brewind| @tab :br[ewind] @tab バッファリストの先頭のバッファを開く
@item |:break| @tab :brea[k] @tab while ループを抜ける
@item |:breakadd| @tab :breaka[dd] @tab デバッガのブレークポイントを追加する
@item |:breakdel| @tab :breakd[el] @tab デバッガのブレークポイントを削除する
@item |:breaklist| @tab :breakl[ist] @tab デバッガのブレークポイントを一覧表示する
@item |:browse| @tab :bro[wse] @tab ファイル選択ダイアログをポップアップする
@item |:bufdo| @tab :bufdo @tab バッファリストのすべてのバッファに対してコマンドを実行する
@item |:buffers| @tab :buffers @tab バッファリストのファイル名をリスト表示
@item |:bunload| @tab :bun[load] @tab 指定のバッファをアンロード
@item |:bwipeout| @tab :bw[ipeout] @tab バッファの一切を削除する
@item |:change| @tab :c[hange] @tab 1 行または連続する複数行を上書きする
@item |:cNext| @tab :cN[ext] @tab 直前のエラーへジャンプ
@item |:cNfile| @tab :cNf[ile] @tab エラーリストの前のファイルの最後のエラーへ移動する
@item |:cabbrev| @tab :ca[bbrev] @tab コマンドラインモードを対象とする "@command{:abbreviate}" コマンド
@item |:cabclear| @tab :cabc[lear] @tab コマンドラインモードにおけるすべての短縮入力を削除
@item |:caddbuffer| @tab :cad[dbuffer] @tab バッファからエラーを追加する
@item |:caddexpr| @tab :cadde[xpr] @tab 式からエラーを追加する
@item |:caddfile| @tab :caddf[ile] @tab 現在の QuickFix リストにエラーメッセージを追加
@item |:call| @tab :cal[l] @tab 関数を実行する
@item |:catch| @tab :cat[ch] @tab @command{:try} コマンドの一部
@item |:cbottom| @tab :cbo[ttom] @tab QuickFix ウィンドウの最下へスクロールする
@item |:cbuffer| @tab :cb[uffer] @tab エラーメッセージを解釈し、最初のエラーへジャンプ
@item |:cc| @tab :cc @tab 指定のエラーへジャンプ
@item |:cclose| @tab :ccl[ose] @tab QuickFix ウィンドウを閉じる
@item |:cd| @tab :cd @tab ディレクトリの移動
@item |:cdo| @tab :cdo @tab QuickFix リストの各項目に対してコマンドを実行する
@item |:cfdo| @tab :cfd[o] @tab QuickFix リストの各ファイルに対してコマンドを実行する
@item |:center| @tab :ce[nter] @tab 行を中央寄せに整形
@item |:cexpr| @tab :cex[pr] @tab 式からエラーを読みこみ、最初のエラーへジャンプ
@item |:cfile| @tab :cf[ile] @tab エラーファイルを読み込み最初のエラーへジャンプ
@item |:cfirst| @tab :cfir[st] @tab 指定のエラーへジャンプ。省略時は先頭のエラー
@item |:cgetbuffer| @tab :cgetb[uffer] @tab バッファからエラーを取得する
@item |:cgetexpr| @tab :cgete[xpr] @tab 式からエラーを取得する
@item |:cgetfile| @tab :cg[etfile] @tab エラーファイルを読み込む
@item |:changes| @tab :changes @tab 変更リストを表示する
@item |:chdir| @tab :chd[ir] @tab ディレクトリの移動
@item |:checkpath| @tab :che[ckpath] @tab インクルードファイルを一覧表示
@item |:checktime| @tab :checkt[ime] @tab 開いているファイルのタイムスタンプを確認する
@item |:chistory| @tab :chi[story] @tab エラーリストの一覧を表示する
@item |:clast| @tab :cla[st] @tab 指定のエラーへジャンプ、省略時は最後のエラー
@item |:clearjumps| @tab :cle[arjumps] @tab ジャンプリストを削除する
@item |:clist| @tab :cl[ist] @tab すべてのエラーを一覧表示
@item |:close| @tab :clo[se] @tab カレントウィンドウを閉じる
@item |:cmap| @tab :cm[ap] @tab コマンドラインモードを対象とする "@command{:map}" コマンド
@item |:cmapclear| @tab :cmapc[lear] @tab コマンドラインモードのすべてのマップを削除
@item |:cmenu| @tab :cme[nu] @tab コマンドラインモードのメニューを追加
@item |:cnext| @tab :cn[ext] @tab 次のエラーへジャンプ
@item |:cnewer| @tab :cnew[er] @tab より新しいエラーリストを使用する
@item |:cnfile| @tab :cnf[ile] @tab エラーリストの次のファイルの先頭エラーへジャンプ
@item |:cnoremap| @tab :cno[remap] @tab コマンドラインモードを対象とする "@command{:noremap}" コマンド
@item |:cnoreabbrev| @tab :cnorea[bbrev] @tab コマンドラインモードを対象とする "@command{:noreabbrev}" コマンド
@item |:cnoremenu| @tab :cnoreme[nu] @tab コマンドラインモードを対象とする "@command{:noremenu}" コマンド
@item |:copy| @tab :co[py] @tab 行のコピー
@item |:colder| @tab :col[der] @tab より古いエラーリストを使用する
@item |:colorscheme| @tab :colo[rscheme] @tab 指定した色テーマをロードする
@item |:command| @tab :com[mand] @tab ユーザー定義コマンドの作成
@item |:comclear| @tab :comc[lear] @tab すべてのユーザー定義コマンドの削除
@item |:compiler| @tab :comp[iler] @tab 指定したコンパイラ用の設定をする
@item |:continue| @tab :con[tinue] @tab :while に戻って実行を続ける
@item |:confirm| @tab :conf[irm] @tab コマンドを実行し、ユーザーの確認が必要ならプロンプトを表示する
@item |:copen| @tab :cope[n] @tab クイックフィックスウィンドウを開く
@item |:cprevious| @tab :cp[revious] @tab 直前のエラーへジャンプ
@item |:cpfile| @tab :cpf[ile] @tab エラーリストの前のファイルの最後のエラーへジャンプ
@item |:cquit| @tab :cq[uit] @tab Vimを終了しエラーコードを返す
@item |:crewind| @tab :cr[ewind] @tab 指定のエラーへジャンプ。省略時は先頭のエラー
@item |:cscope| @tab :cs[cope] @tab cscope コマンドを実行
@item |:cstag| @tab :cst[ag] @tab cscope を使用してタグへジャンプする
@item |:cunmap| @tab :cu[nmap] @tab コマンドラインモードを対象とする "@command{:unmap}" コマンド
@item |:cunabbrev| @tab :cuna[bbrev] @tab コマンドラインモードを対象とする "@command{:unabbrev}" コマンド
@item |:cunmenu| @tab :cunme[nu] @tab コマンドラインモードのメニューを削除
@item |:cwindow| @tab :cw[indow] @tab クイックフィックスウィンドウを開閉する
@item |:delete| @tab :d[elete] @tab 行を削除
@item |:delmarks| @tab :delm[arks] @tab マークを削除する
@item |:debug| @tab :deb[ug] @tab コマンドをデバッグモードで実行する
@item |:debuggreedy| @tab :debugg[reedy] @tab デバッグモードのコマンドを標準入力から読み込む
@item |:delcommand| @tab :delc[ommand] @tab ユーザー定義コマンドの削除
@item |:delfunction| @tab :delf[unction] @tab ユーザー定義関数の削除
@item |:diffupdate| @tab :dif[fupdate] @tab 'diff' バッファを更新する
@item |:diffget| @tab :diffg[et] @tab カレントバッファの差異を他方に合わせる
@item |:diffoff| @tab :diffo[ff] @tab 差分モードをオフにする
@item |:diffpatch| @tab :diffp[atch] @tab パッチを適用した新しい差分バッファを作成する
@item |:diffput| @tab :diffpu[t] @tab 他方の差異をカレントバッファに合わせる
@item |:diffsplit| @tab :diffs[plit] @tab ファイルを開きその違いを表示する
@item |:diffthis| @tab :diffthis @tab カレントウィンドウを差分ウィンドウにする
@item |:digraphs| @tab :dig[raphs] @tab ダイグラフの入力または表示
@item |:display| @tab :di[splay] @tab レジスタの内容を表示
@item |:djump| @tab :dj[ump] @tab #define へジャンプ
@item |:dl| @tab :dl @tab 'l' フラグ付き |:delete| の短縮形
@item |:del| @tab :del[ete]l @tab 'l' フラグ付き |:delete| の短縮形
@item |:dlist| @tab :dli[st] @tab #define をリスト表示
@item |:doautocmd| @tab :do[autocmd] @tab カレントバッファに対しオートコマンドを適用する
@item |:doautoall| @tab :doautoa[ll] @tab ロードされているバッファすべてにオートコマンドを適用する
@item |:dp| @tab :d[elete]p @tab 'p' フラグ付き |:delete| の短縮形
@item |:drop| @tab :dr[op] @tab 指定したファイルが表示されているウィンドウにジャンプするか、カレントウィンドウで開く
@item |:dsearch| @tab :ds[earch] @tab マクロ定義(#define)を表示する
@item |:dsplit| @tab :dsp[lit] @tab ウィンドウを分割し #define へジャンプ
@item |:edit| @tab :e[dit] @tab ファイルの編集
@item |:earlier| @tab :ea[rlier] @tab バッファを時間的に前の状態に戻す。アンドゥ
@item |:echo| @tab :ec[ho] @tab 式の結果を表示する
@item |:echoerr| @tab :echoe[rr] @tab @command{:echo} と同じだが、エラー表示し、履歴に残す
@item |:echohl| @tab :echoh[l] @tab echo コマンドで使用する強調表示を設定する
@item |:echomsg| @tab :echom[sg] @tab @command{:echo} と同じだが、履歴に残す
@item |:echon| @tab :echon @tab @command{:echo} と同じ、ただし <EOL> を出力しない
@item |:else| @tab :el[se] @tab :if コマンドと一緒に使用する
@item |:elseif| @tab :elsei[f] @tab :if コマンドと一緒に使用する
@item |:emenu| @tab :em[enu] @tab 名前を指定してメニューを実行
@item |:endif| @tab :en[dif] @tab 直前の :if の終了
@item |:endfor| @tab :endfo[r] @tab 直前の :for の終了
@item |:endfunction| @tab :endf[unction] @tab ユーザー定義関数の終了
@item |:endtry| @tab :endt[ry] @tab 直前の :try を終了する
@item |:endwhile| @tab :endw[hile] @tab 直前の :while の終了
@item |:enew| @tab :ene[w] @tab 新しい名無しバッファを開く
@item |:ex| @tab :ex @tab "@command{:edit}" と同じ。
@item |:execute| @tab :exe[cute] @tab 式の結果を実行する
@item |:exit| @tab :exi[t] @tab "@command{:xit}" と同じ。
@item |:exusage| @tab :exu[sage] @tab Exコマンドの概観
@item |:file| @tab :f[ile] @tab カレントファイルの名前を設定または表示
@item |:files| @tab :files @tab バッファリストの全ファイルを一覧表示
@item |:filetype| @tab :filet[ype] @tab ファイルタイプ検出の on/off 切換
@item |:filter| @tab :filt[er] @tab コマンドの出力をフィルターする
@item |:find| @tab :fin[d] @tab '@option{path}' の中からファイルを検索し、開く
@item |:finally| @tab :fina[lly] @tab @command{:try} コマンドの一部
@item |:finish| @tab :fini[sh] @tab Vim script の読み込みを終了する
@item |:first| @tab :fir[st] @tab 引数リストの最初のファイルを開く
@item |:fixdel| @tab :fix[del] @tab <Del> のキーコードを設定
@item |:fold| @tab :fo[ld] @tab 折畳を作成する
@item |:foldclose| @tab :foldc[lose] @tab 折畳を閉じる
@item |:folddoopen| @tab :foldd[oopen] @tab 閉じている折畳以外の行にコマンドを実行する
@item |:folddoclosed| @tab :folddoc[losed] @tab 閉じている折畳の中の行にコマンドを実行する
@item |:foldopen| @tab :foldo[pen] @tab 折畳を開く
@item |:for| @tab :for @tab for ループ
@item |:function| @tab :fu[nction] @tab ユーザー定義関数を定義
@item |:global| @tab :g[lobal] @tab パターンにマッチした行でコマンドを実行する
@item |:goto| @tab :go[to] @tab バッファ内の指定したバイト数の場所へジャンプ
@item |:grep| @tab :gr[ep] @tab 'grepprg' を実行し、最初にマッチした位置へジャンプ
@item |:grepadd| @tab :grepa[dd] @tab :grep と同じだが、結果を現在のリストへ加える
@item |:gui| @tab :gu[i] @tab GUI をスタートする
@item |:gvim| @tab :gv[im] @tab GUI をスタートする
@item |:hardcopy| @tab :ha[rdcopy] @tab テキストをプリンタに出力する
@item |:help| @tab :h[elp] @tab ヘルプウィンドウを表示
@item |:helpclose| @tab :helpc[lose] @tab ヘルプウィンドウを1つ閉じる
@item |:helpfind| @tab :helpf[ind] @tab ヘルプのキーワードを入力するためのダイアログをポップアップする
@item |:helpgrep| @tab :helpg[rep] @tab ヘルプファイル検索用の "@command{:grep}"
@item |:helptags| @tab :helpt[ags] @tab 指定したディレクトリのヘルプタグを作成する
@item |:highlight| @tab :hi[ghlight] @tab 強調表示を定義する
@item |:hide| @tab :hid[e] @tab コマンドを実行し、必要ならカレントバッファを隠れ (hidden) バッファにする
@item |:history| @tab :his[tory] @tab コマンドラインの履歴を表示
@item |:insert| @tab :i[nsert] @tab テキストを挿入
@item |:iabbrev| @tab :ia[bbrev] @tab 挿入モードを対象とする "@command{:abbrev}" コマンド
@item |:iabclear| @tab :iabc[lear] @tab 挿入モードを対象とする "@command{:abclear}" コマンド
@item |:if| @tab :if @tab 条件が成立した場合にコマンド群を実行
@item |:ijump| @tab :ij[ump] @tab 識別子の定義へジャンプ
@item |:ilist| @tab :il[ist] @tab 識別子に一致したすべての行をリスト表示
@item |:imap| @tab :im[ap] @tab 挿入モードを対象とした "@command{:map}" コマンド
@item |:imapclear| @tab :imapc[lear] @tab 挿入モードを対象とした "@command{:mapclear}" コマンド
@item |:imenu| @tab :ime[nu] @tab 挿入モードを対象にメニュー追加
@item |:inoremap| @tab :ino[remap] @tab 挿入モードを対象とした "@command{:noremap}" コマンド
@item |:inoreabbrev| @tab :inorea[bbrev] @tab 挿入モードを対象とした "@command{:noreabbrev}" コマンド
@item |:inoremenu| @tab :inoreme[nu] @tab 挿入モードを対象とした "@command{:noremenu}" コマンド
@item |:intro| @tab :int[ro] @tab 起動直後のメッセージを表示
@item |:isearch| @tab :is[earch] @tab 識別子と一致した最初の行を表示
@item |:isplit| @tab :isp[lit] @tab ウィンドウを分割し、識別子の定義へジャンプ
@item |:iunmap| @tab :iu[nmap] @tab 挿入モードを対象とした "@command{:unmap}" コマンド
@item |:iunabbrev| @tab :iuna[bbrev] @tab 挿入モードを対象とした "@command{:unabbrev}" コマンド
@item |:iunmenu| @tab :iunme[nu] @tab 挿入モードを対象にメニュー削除
@item |:join| @tab :j[oin] @tab 行の結合
@item |:jumps| @tab :ju[mps] @tab ジャンプリストの表示
@item |:k| @tab :k @tab マークを設定
@item |:keepalt| @tab :keepa[lt] @tab 代替ファイルを変更せずにコマンドを実行する
@item |:keepmarks| @tab :kee[pmarks] @tab マークを変更せずにコマンドを実行する
@item |:keepjumps| @tab :keepj[umps] @tab マークやジャンプリストを変更せずにコマンドを実行する
@item |:keeppatterns| @tab :keepp[atterns] @tab 検索パターン履歴を変更せずにコマンドを実行する
@item |:lNext| @tab :lN[ext] @tab ロケーションリストの前の項目の位置へ移動
@item |:lNfile| @tab :lNf[ile] @tab 前のファイルの最後の項目の位置へ移動
@item |:list| @tab :l[ist] @tab 行を表示
@item |:laddexpr| @tab :lad[dexpr] @tab exprからロケーションリストの項目を追加
@item |:laddbuffer| @tab :laddb[uffer] @tab バッファからロケーションリストの項目を追加
@item |:laddfile| @tab :laddf[ile] @tab 現在のロケーションリストに項目を追加
@item |:last| @tab :la[st] @tab 引数リストの最後のファイルを編集
@item |:language| @tab :lan[guage] @tab 言語(ロケール)を設定する
@item |:later| @tab :lat[er] @tab バッファを時間的に新しい状態に戻す。リドゥ
@item |:lbottom| @tab :lbo[ttom] @tab ロケーションウィンドウの最下へスクロールする
@item |:lbuffer| @tab :lb[uffer] @tab バッファからロケーションリストを解釈し、最初のエラーへジャンプ
@item |:lcd| @tab :lc[d] @tab ウィンドウのカレントディレクトリを変更する
@item |:lchdir| @tab :lch[dir] @tab ウィンドウのカレントディレクトリを変更する
@item |:lclose| @tab :lcl[ose] @tab ロケーションウィンドウを閉じる
@item |:lcscope| @tab :lcs[cope] @tab "@command{:cscope}" と同様だがロケーションリストを使う
@item |:ldo| @tab :ld[o] @tab ロケーションリストの各項目に対してコマンドを実行する
@item |:lfdo| @tab :lfd[o] @tab ロケーションリストの各ファイルに対してコマンドを実行する
@item |:left| @tab :le[ft] @tab 行を左寄せに整形
@item |:leftabove| @tab :lefta[bove] @tab ウィンドウが左もしくは上に分割されるようにする
@item |:let| @tab :let @tab 変数またはオプションに値を設定する
@item |:lexpr| @tab :lex[pr] @tab 式からロケーションリストを読み込み、最初のエラーへジャンプする
@item |:lfile| @tab :lf[ile] @tab ファイルからロケーションリストを読み込み、最初のエラーへジャンプする
@item |:lfirst| @tab :lfir[st] @tab 指定されたロケーションへジャンプする。デフォルトは最初のロケーション。
@item |:lgetbuffer| @tab :lgetb[uffer] @tab バッファからロケーションリストを取得する
@item |:lgetexpr| @tab :lgete[xpr] @tab 式からロケーションリストを取得する
@item |:lgetfile| @tab :lg[etfile] @tab ファイルからロケーションリストを取得する
@item |:lgrep| @tab :lgr[ep] @tab 'grepprg' を実行し、最初のマッチへジャンプする
@item |:lgrepadd| @tab :lgrepa[dd] @tab @command{:grep} と同様だが現在のリストに追加する
@item |:lhelpgrep| @tab :lh[elpgrep] @tab "@command{:helpgrep}" と同様だがロケーションリストを使う
@item |:lhistory| @tab :lhi[story] @tab ロケーションリストの一覧を表示する
@item |:ll| @tab :ll @tab 特定のロケーションへ移動する
@item |:llast| @tab :lla[st] @tab 特定のロケーションへ移動する。デフォルトは最後のロケーション
@item |:llist| @tab :lli[st] @tab 全てのロケーションをリストする
@item |:lmake| @tab :lmak[e] @tab 外部プログラム 'makeprg' を実行、エラーメッセージを解釈する。
@item |:lmap| @tab :lm[ap] @tab "@command{:map!}" と同じだが、Lang-Arg モードも対象
@item |:lmapclear| @tab :lmapc[lear] @tab "@command{:mapclear!}" と同じだが、Lang-Arg モードも対象
@item |:lnext| @tab :lne[xt] @tab 次のロケーションへ移動
@item |:lnewer| @tab :lnew[er] @tab 新しいロケーションリストへ移動
@item |:lnfile| @tab :lnf[ile] @tab 次のファイルの最初のロケーションへ移動
@item |:lnoremap| @tab :ln[oremap] @tab "@command{:noremap!}" と同じだが、Lang-Arg モードも対象
@item |:loadkeymap| @tab :loadk[eymap] @tab 次の行からEOFまでキーマップを読み込む
@item |:loadview| @tab :lo[adview] @tab カレントウィンドウにビューを読み込む
@item |:lockmarks| @tab :loc[kmarks] @tab マークを調整せずにコマンドを実行する
@item |:lockvar| @tab :lockv[ar] @tab 変数をロックする
@item |:lolder| @tab :lol[der] @tab 以前のロケーションリストへ移動
@item |:lopen| @tab :lope[n] @tab ロケーションウィンドウを開く
@item |:lprevious| @tab :lp[revious] @tab 前のロケーションへ移動
@item |:lpfile| @tab :lpf[ile] @tab 前のファイルの最後のロケーションへ移動
@item |:lrewind| @tab :lr[ewind] @tab 指定されたロケーションへ移動。デフォルトは最初のロケーション
@item |:ls| @tab :ls @tab すべてのバッファを表示
@item |:ltag| @tab :lt[ag] @tab タグへジャンプし、マッチしたタグをロケーションリストに追加する
@item |:lunmap| @tab :lu[nmap] @tab "@command{:unmap!}" と同じだが、Lang-Arg モードも対象
@item |:lua| @tab :lua @tab |Lua| コマンドを実行
@item |:luado| @tab :luad[o] @tab 各行に対して Lua コマンドを実行
@item |:luafile| @tab :luaf[ile] @tab |Lua| スクリプトファイルを実行
@item |:lvimgrep| @tab :lv[imgrep] @tab ファイルからパターンを検索する
@item |:lvimgrepadd| @tab :lvimgrepa[dd] @tab @command{:vimgrep} と同様だが、ロケーションリストに追加する
@item |:lwindow| @tab :lw[indow] @tab ロケーションウィンドウを開閉する
@item |:move| @tab :m[ove] @tab 行を移動する
@item |:mark| @tab :ma[rk] @tab マークを設定
@item |:make| @tab :mak[e] @tab 外部プログラム '@option{makeprg}' を実行し、エラーメッセージを解釈する
@item |:map| @tab :map @tab マップの設定または表示
@item |:mapclear| @tab :mapc[lear] @tab ノーマルモードとビジュアルモードを対象にマップをクリア
@item |:marks| @tab :marks @tab すべてのマークを表示
@item |:match| @tab :mat[ch] @tab 指定したパターンの文字を強調表示する
@item |:menu| @tab :me[nu] @tab 新しいメニュー項目を追加
@item |:menutranslate| @tab :menut[ranslate] @tab 翻訳したメニュー項目を追加する
@item |:messages| @tab :mes[sages] @tab 直前に表示されたメッセージの表示
@item |:mkexrc| @tab :mk[exrc] @tab 現在のマップと設定をファイルに書き出す
@item |:mksession| @tab :mks[ession] @tab セッション情報をファイルに書き出す
@item |:mkspell| @tab :mksp[ell] @tab スペルファイル .spl を生成する
@item |:mkview| @tab :mkvie[w] @tab カレントウィンドウのビューをファイルに保存する
@item |:mkvimrc| @tab :mkv[imrc] @tab 現在のマップと設定をファイルに書き出す
@item |:mode| @tab :mod[e] @tab スクリーンモードを表示または変更する
@item |:mzscheme| @tab :mz[scheme] @tab MzScheme コマンドを実行する
@item |:mzfile| @tab :mzf[ile] @tab MzScheme スクリプトファイルを実行する
@item |:nbclose| @tab :nbc[lose] @tab 現在の Netbeans セッションを閉じる
@item |:nbstart| @tab :nbs[art] @tab 新しい Netbeans セッションを開始する
@item |:nbkey| @tab :nb[key] @tab キーをNetbeansに渡す
@item |:next| @tab :n[ext] @tab 引数リストの次のファイルを開く
@item |:new| @tab :new @tab 新規に空のウィンドウを作成する
@item |:nmap| @tab :nm[ap] @tab ノーマルモードを対象とする "@command{:map}" コマンド
@item |:nmapclear| @tab :nmapc[lear] @tab ノーマルモードのすべてのマップを削除する
@item |:nmenu| @tab :nme[nu] @tab ノーマルモードのメニューを追加する
@item |:nnoremap| @tab :nn[oremap] @tab ノーマルモードを対象とする "@command{:noremap}" コマンド
@item |:nnoremenu| @tab :nnoreme[nu] @tab ノーマルモードを対象とする "@command{:noremenu}" コマンド
@item |:noautocmd| @tab :noa[utocmd] @tab 自動コマンドを実行せずにコマンドを実行する
@item |:noremap| @tab :no[remap] @tab 再マップされないマップを定義する
@item |:nohlsearch| @tab :noh[lsearch] @tab 一時的に '@option{hlsearch}' の強調表示をやめる
@item |:noreabbrev| @tab :norea[bbrev] @tab 再マップされない短縮入力を定義する
@item |:noremenu| @tab :noreme[nu] @tab 再マップされないメニューを定義する
@item |:normal| @tab :norm[al] @tab ノーマルモードのコマンドを実行する
@item |:noswapfile| @tab :nos[wapfile] @tab スワップファイルを作らずにコマンドを実行する
@item |:number| @tab :nu[mber] @tab 行番号を表示
@item |:nunmap| @tab :nun[map] @tab ノーマルモードを対象とする "@command{:unmap}" コマンド
@item |:nunmenu| @tab :nunme[nu] @tab ノーマルモードのメニューを削除
@item |:oldfiles| @tab :ol[dfiles] @tab viminfo ファイルに記録されたマークを持つファイルを表示する
@item |:open| @tab :o[pen] @tab openモードを開始(未実装)
@item |:omap| @tab :om[ap] @tab Operator-pending モードを対象とする "@command{:map}" コマンド
@item |:omapclear| @tab :omapc[lear] @tab Operator-pending モードのマップをすべて削除
@item |:omenu| @tab :ome[nu] @tab Operator-pending モードのメニューを追加
@item |:only| @tab :on[ly] @tab カレントウィンドウ以外のウィンドウをすべて閉じる
@item |:onoremap| @tab :ono[remap] @tab Operator-pending モードを対象とする "@command{:noremap}" コマンド
@item |:onoremenu| @tab :onoreme[nu] @tab Operator-pending モードを対象とする "@command{:noremenu}" コマンド
@item |:options| @tab :opt[ions] @tab オプションウィンドウを開く
@item |:ounmap| @tab :ou[nmap] @tab Operator-pending モードを対象とした "@command{:unmap}" コマンド
@item |:ounmenu| @tab :ounme[nu] @tab Operator-pending モードのメニューを削除
@item |:ownsyntax| @tab :ow[nsyntax] @tab ウィンドウのローカル構文強調を新たに設定する
@item |:packadd| @tab :pa[ckadd] @tab '@option{packpath}' からプラグインを追加する
@item |:packloadall| @tab :packl[oadall] @tab '@option{packpath}' 下の全プラグインをロードする
@item |:pclose| @tab :pc[lose] @tab プレビューウィンドウを閉じる
@item |:pedit| @tab :ped[it] @tab プレビューウィンドウでファイルを開く
@item |:perl| @tab :pe[rl] @tab Perl コマンドを実行
@item |:print| @tab :p[rint] @tab 行単位で印刷する
@item |:profdel| @tab :profd[el] @tab 関数やスクリプトのプロファイリングを停止する
@item |:profile| @tab :prof[ile] @tab 関数やスクリプトのプロファイリングをする
@item |:promptfind| @tab :pro[mptfind] @tab GUIの検索ダイアログを開く
@item |:promptrepl| @tab :promptr[epl] @tab GUIの検索・置換ダイアログを開く
@item |:perldo| @tab :perld[o] @tab 1 行ずつ Perl コマンドを実行
@item |:pop| @tab :po[p] @tab タグスタックの 1 つ古いエントリへジャンプ
@item |:popup| @tab :popup @tab 指定した名前のメニューをポップアップ表示する
@item |:ppop| @tab :pp[op] @tab プレビューウィンドウで "@command{:pop}" を実行
@item |:preserve| @tab :pre[serve] @tab すべてのテキストをスワップファイルに書き出す
@item |:previous| @tab :prev[ious] @tab 引数リスト中の前のファイルを読み込む
@item |:psearch| @tab :ps[earch] @tab "@command{:ijump}"と同じだが、結果をプレビューウィンドウで表示する
@item |:ptag| @tab :pt[ag] @tab プレビューウィンドウでタグを表示
@item |:ptNext| @tab :ptN[ext] @tab プレビューウィンドウで |:tNext| を実行
@item |:ptfirst| @tab :ptf[irst] @tab プレビューウィンドウで|:trewind| を実行
@item |:ptjump| @tab :ptj[ump] @tab プレビューウィンドウで |:tjump| を実行、タグを表示
@item |:ptlast| @tab :ptl[ast] @tab プレビューウィンドウで |:tlast| を実行
@item |:ptnext| @tab :ptn[ext] @tab プレビューウィンドウで |:tnext| を実行
@item |:ptprevious| @tab :ptp[revious] @tab プレビューウィンドウで |:tprevious| を実行
@item |:ptrewind| @tab :ptr[ewind] @tab プレビューウィンドウで |:trewind| を実行
@item |:ptselect| @tab :pts[elect] @tab プレビューウィンドウで |:tselect| を実行、タグを表示
@item |:put| @tab :pu[t] @tab テキストにレジスタの内容を挿入
@item |:pwd| @tab :pw[d] @tab カレントディレクトリを表示
@item |:py3| @tab :py3 @tab Python 3 コマンドを実行
@item |:python3| @tab :python3 @tab @command{:py3} と同じ
@item |:py3do| @tab :py3d[o] @tab 各行に対して Python 3 コマンドを実行
@item |:py3file| @tab :py3f[ile] @tab Python 3 スクリプトファイルを実行
@item |:python| @tab :py[thon] @tab Python コマンドを実行
@item |:pydo| @tab :pyd[o] @tab 各行に対して Python コマンドを実行
@item |:pyfile| @tab :pyf[ile] @tab Python スクリプトファイルを実行
@item |:pyx| @tab :pyx @tab |python_x| コマンドを実行
@item |:pythonx| @tab :pythonx @tab @command{:pyx} と同じ
@item |:pyxdo| @tab :pyxd[o] @tab 各行に対して |python_x| コマンドを実行
@item |:pyxfile| @tab :pyxf[ile] @tab |python_x| スクリプトファイルを実行
@item |:quit| @tab :q[uit] @tab カレントウィンドウを閉じる(ウィンドウが 1 つなら Vim を終了)
@item |:quitall| @tab :quita[ll] @tab Vim を終了
@item |:qall| @tab :qa[ll] @tab Vim を終了
@item |:read| @tab :r[ead] @tab テキストにファイルを挿入
@item |:recover| @tab :rec[over] @tab スワップファイルからファイルを復元
@item |:redo| @tab :red[o] @tab 1 回のアンドゥをリドゥする
@item |:redraw| @tab :redr[aw] @tab 画面を再描画する
@item |:redrawstatus| @tab :redraws[tatus] @tab ステータスラインを再描画する
@item |:redir| @tab :redi[r] @tab ファイルまたはレジスタにメッセージをリダイレクトする
@item |:registers| @tab :reg[isters] @tab レジスタの内容を表示
@item |:resize| @tab :res[ize] @tab カレントウィンドウの高さを変更
@item |:retab| @tab :ret[ab] @tab タブの大きさを変更
@item |:return| @tab :retu[rn] @tab ユーザー関数から戻る
@item |:rewind| @tab :rew[ind] @tab 引数リストの先頭のファイルを開く
@item |:right| @tab :ri[ght] @tab テキストを右寄せに整形
@item |:rightbelow| @tab :rightb[elow] @tab ウィンドウが右もしくは下に分割されるようにする
@item |:ruby| @tab :rub[y] @tab Ruby のコマンドを実行する
@item |:rubydo| @tab :rubyd[o] @tab 各行に対して Ruby のコマンドを実行する
@item |:rubyfile| @tab :rubyf[ile] @tab Ruby スクリプトファイルを実行する
@item |:rundo| @tab :rund[o] @tab アンドゥ情報をファイルから読み込む
@item |:runtime| @tab :ru[ntime] @tab Vim script を '@option{runtimepath}' から探して実行する
@item |:rviminfo| @tab :rv[iminfo] @tab viminfo ファイルを読み込む
@item |:substitute| @tab :s[ubstitute] @tab テキストの置換
@item |:sNext| @tab :sN[ext] @tab ウィンドウを分割して、引数リストの前のファイルを開く
@item |:sandbox| @tab :san[dbox] @tab サンドボックスでコマンドを実行する
@item |:sargument| @tab :sa[rgument] @tab ウィンドウを分割して、引数リストの指定ファイルを開く
@item |:sall| @tab :sal[l] @tab 引数リストのすべてのファイルをウィンドウを作成して開く
@item |:saveas| @tab :sav[eas] @tab 別の名前でファイルを保存する
@item |:sbuffer| @tab :sb[uffer] @tab ウィンドウを分割してバッファリストの指定したバッファを開く
@item |:sbNext| @tab :sbN[ext] @tab ウィンドウを分割してバッファリストの前のバッファを開く
@item |:sball| @tab :sba[ll] @tab バッファリストのすべてのバッファをウィンドウを作成して開く
@item |:sbfirst| @tab :sbf[irst] @tab ウィンドウを分割してバッファリストの最初のバッファを開く
@item |:sblast| @tab :sbl[ast] @tab ウィンドウを分割してバッファリストの最後のバッファを開く
@item |:sbmodified| @tab :sbm[odified] @tab ウィンドウを分割してバッファリストの変更済みバッファを開く
@item |:sbnext| @tab :sbn[ext] @tab ウィンドウを分割してバッファリストの次のバッファを開く
@item |:sbprevious| @tab :sbp[revious] @tab ウィンドウを分割してバッファリストの前のバッファを開く
@item |:sbrewind| @tab :sbr[ewind] @tab ウィンドウを分割してバッファリストの最初のバッファを開く
@item |:scriptnames| @tab :scr[iptnames] @tab 実行済み Vim script の名前を一覧表示する
@item |:scriptencoding| @tab :scripte[ncoding] @tab Vim script が使用しているエンコーディングを指定する
@item |:scscope| @tab :scs[cope] @tab ウィンドウを分割して cscope コマンドを実行する
@item |:set| @tab :se[t] @tab オプションを表示または設定する
@item |:setfiletype| @tab :setf[iletype] @tab まだ設定されていなければ '@command{filetype}' を設定する
@item |:setglobal| @tab :setg[lobal] @tab グローバルオプションを表示もしくは設定する
@item |:setlocal| @tab :setl[ocal] @tab ローカルオプションを表示もしくは設定する
@item |:sfind| @tab :sf[ind] @tab ウィンドウを分割して、'path' にあるファイルを開く
@item |:sfirst| @tab :sfir[st] @tab ウィンドウを分割して引数リストの最初のファイルを開く
@item |:shell| @tab :sh[ell] @tab シェルを実行する
@item |:simalt| @tab :si[malt] @tab Win32 GUI: Windows ALT キーをシミュレートする
@item |:sign| @tab :sig[n] @tab 目印を取り扱うコマンド
@item |:silent| @tab :sil[ent] @tab 実行したコマンドの出力を抑制する
@item |:sleep| @tab :sl[eep] @tab 数秒間何もしない
@item |:slast| @tab :sla[st] @tab ウィンドウを分割して引数リストの最後のファイルを開く
@item |:smagic| @tab :sm[agic] @tab '@option{magic}' オプションの下で @command{:substitute} を実行
@item |:smap| @tab :smap @tab "@command{:map}" と同様。選択モード用
@item |:smapclear| @tab :smapc[lear] @tab 選択モードのすべてのマップを削除する
@item |:smenu| @tab :sme[nu] @tab 選択モードのメニューを追加する
@item |:smile| @tab :smi[le] @tab ユーザーを幸せにする
@item |:snext| @tab :sn[ext] @tab ウィンドウを分割して引数リストの次のファイルを開く
@item |:snomagic| @tab :sno[magic] @tab '@option{nomagic}' オプションの下で @command{:substitute} を実行
@item |:snoremap| @tab :snor[emap] @tab "@command{:noremap}" と同様。選択モード用
@item |:snoremenu| @tab :snoreme[nu] @tab "@command{:noremenu}" と同様。選択モード用
@item |:sort| @tab :sor[t] @tab 行をソートする
@item |:source| @tab :so[urce] @tab Vim or Ex コマンドをファイルから読み込む
@item |:spelldump| @tab :spelld[ump] @tab ウィンドウを分割し、正しい単語を列挙する
@item |:spellgood| @tab :spe[llgood] @tab スペルチェック用に正しい単語を登録する
@item |:spellinfo| @tab :spelli[nfo] @tab 読み込んでいるスペルファイルの情報を表示する
@item |:spellrepall| @tab :spellr[epall] @tab 最後の|z=|と同様にすべての間違った単語を置換
@item |:spellundo| @tab :spellu[ndo] @tab 正しいまたは間違った単語を削除
@item |:spellwrong| @tab :spellw[rong] @tab スペリングの間違いを登録する
@item |:split| @tab :sp[lit] @tab カレントウィンドウを分割
@item |:sprevious| @tab :spr[evious] @tab ウィンドウを分割して引数リストの前のファイルを開く
@item |:srewind| @tab :sre[wind] @tab ウィンドウを分割して引数リストの最初のファイルを開く
@item |:stop| @tab :st[op] @tab Vimをサスペンドする
@item |:stag| @tab :sta[g] @tab ウィンドウを分割して、タグへジャンプする
@item |:startinsert| @tab :star[tinsert] @tab 挿入モードを開始する
@item |:startgreplace| @tab :startg[replace] @tab 仮想置換モードを開始する
@item |:startreplace| @tab :startr[eplace] @tab 置換モードを開始する
@item |:stopinsert| @tab :stopi[nsert] @tab 挿入モードを終了する
@item |:stjump| @tab :stj[ump] @tab ウィンドウを分割して、"@command{:tjump}" を実行
@item |:stselect| @tab :sts[elect] @tab ウィンドウを分割して、"@command{:tselect}" を実行
@item |:sunhide| @tab :sun[hide] @tab "@command{:unhide}" と同じ。
@item |:sunmap| @tab :sunm[ap] @tab "@command{:unmap}" と同様。選択モード用
@item |:sunmenu| @tab :sunme[nu] @tab 選択モードのメニューを削除する
@item |:suspend| @tab :sus[pend] @tab "@command{:stop}" と同じ。
@item |:sview| @tab :sv[iew] @tab ウィンドウを分割してファイルを読み込み専用で開く
@item |:swapname| @tab :sw[apname] @tab 現在のスワップファイルの名前を表示
@item |:syntax| @tab :sy[ntax] @tab 構文強調表示 (syntax highlighting)
@item |:syntime| @tab :synti[me] @tab 構文強調表示の速度を測定する
@item |:syncbind| @tab :sync[bind] @tab ウィンドウのスクロール状態を同期する
@item |:t| @tab :t @tab "@command{:copy}" と同じ。
@item |:tNext| @tab :tN[ext] @tab 後方へ検索し一致したタグ位置へジャンプ
@item |:tabNext| @tab :tabN[ext] @tab 前のタブページへ移動
@item |:tabclose| @tab :tabc[lose] @tab 現在のタブページを閉じる
@item |:tabdo| @tab :tabdo @tab 各タブページでコマンドを実行する
@item |:tabedit| @tab :tabe[dit] @tab 新しいタブページでファイルを開く
@item |:tabfind| @tab :tabf[ind] @tab 'path' からファイルを探し新しいタブページで開く
@item |:tabfirst| @tab :tabfir[st] @tab 最初のタブページへ移動
@item |:tablast| @tab :tabl[ast] @tab 最後のタブページへ移動
@item |:tabmove| @tab :tabm[ove] @tab タブページの位置を移動
@item |:tabnew| @tab :tabnew @tab 新しいタブページでファイルを編集する
@item |:tabnext| @tab :tabn[ext] @tab 次のタブページへ移動
@item |:tabonly| @tab :tabo[nly] @tab 現在のタブページ以外をすべて閉じる
@item |:tabprevious| @tab :tabp[revious] @tab 前のタブページへ移動
@item |:tabrewind| @tab :tabr[ewind] @tab 最初のタブページへ移動
@item |:tabs| @tab :tabs @tab タブページとその中身を列挙
@item |:tab| @tab :tab @tab 新しいウィンドウを開くとき新しいタブを作る
@item |:tag| @tab :ta[g] @tab タグを検索しジャンプする
@item |:tags| @tab :tags @tab タグスタックの内容を表示
@item |:tcl| @tab :tc[l] @tab Tcl コマンドを実行
@item |:tcldo| @tab :tcld[o] @tab 各行の Tcl コマンドを実行
@item |:tclfile| @tab :tclf[ile] @tab Tcl スクリプトファイルを実行
@item |:tearoff| @tab :te[aroff] @tab メニューを切り離す
@item |:terminal| @tab :ter[minal] @tab ターミナルウィンドウを開く
@item |:tfirst| @tab :tf[irst] @tab 複数一致した内の最初のタグへジャンプ
@item |:throw| @tab :th[row] @tab 例外を投げる
@item |:tjump| @tab :tj[ump] @tab "@command{:tselect}" と同様、ただし一致したタグが 1 つしかない場合、その場所へジャンプ
@item |:tlast| @tab :tl[ast] @tab 直前に一致したタグ位置へジャンプ
@item |:tmenu| @tab :tm[enu] @tab ツールチップメニューを定義する
@item |:tnext| @tab :tn[ext] @tab タグを前方検索し、ジャンプ
@item |:tprevious| @tab :tp[revious] @tab タグを後方検索し、ジャンプ
@item |:topleft| @tab :to[pleft] @tab ウィンドウが最も左もしくは最も上に分割されるようにする
@item |:trewind| @tab :tr[ewind] @tab 最初に一致したタグ位置へジャンプ
@item |:tselect| @tab :ts[elect] @tab 一致したタグを一覧表示し、ジャンプ先のタグを選択
@item |:tunmenu| @tab :tu[nmenu] @tab ツールチップメニューを削除
@item |:try| @tab :try @tab コマンドを実行し発生したエラーや例外を処理する
@item |:undo| @tab :u[ndo] @tab 最後の変更を取り消す
@item |:undojoin| @tab :undoj[oin] @tab 次の変更を前のアンドゥブロックと連結する
@item |:undolist| @tab :undol[ist] @tab アンドゥツリーのリーフを列挙する
@item |:unabbreviate| @tab :una[bbreviate] @tab 短縮入力を削除
@item |:unhide| @tab :unh[ide] @tab バッファリストのメモリにロードされているすべてのバッファをウィンドウを作成して開く
@item |:unlet| @tab :unl[et] @tab 変数を削除
@item |:unlockvar| @tab :unlo[ckvar] @tab 変数をアンロックする
@item |:unmap| @tab :unm[ap] @tab マップを削除
@item |:unmenu| @tab :unme[nu] @tab メニューを削除
@item |:unsilent| @tab :uns[ilent] @tab コマンドを silent でなく実行する
@item |:update| @tab :up[date] @tab バッファ内容が変更されていれば、ファイルに書き出す
@item |:vglobal| @tab :v[global] @tab パターンにマッチしない行でコマンドを実行する
@item |:version| @tab :ve[rsion] @tab バージョン番号その他の情報を表示
@item |:verbose| @tab :verb[ose] @tab '@option{verbose}' を一時設定してコマンドを実行する
@item |:vertical| @tab :vert[ical] @tab ウィンドウが垂直分割されるようにする
@item |:vimgrep| @tab :vim[grep] @tab 複数ファイルからパターンを検索する
@item |:vimgrepadd| @tab :vimgrepa[dd] @tab @command{:vimgrep} と同様だが現在のリストに追加
@item |:visual| @tab :vi[sual] @tab "@command{:edit}" と同じ、ただし "Ex" モードから抜ける。
@item |:viusage| @tab :viu[sage] @tab ノーマルモードコマンドの概観
@item |:view| @tab :vie[w] @tab 読み込み専用でファイルを開く
@item |:vmap| @tab :vm[ap] @tab ビジュアル・選択モードを対象とする "@command{:map}" コマンド
@item |:vmapclear| @tab :vmapc[lear] @tab ビジュアル・選択モードのマッピングをすべて削除
@item |:vmenu| @tab :vme[nu] @tab ビジュアル・選択モードのメニューを追加
@item |:vnew| @tab :vne[w] @tab 新しいウィンドウを垂直分割して作る
@item |:vnoremap| @tab :vn[oremap] @tab ビジュアル・選択モードを対象とする "@command{:noremap}" コマンド
@item |:vnoremenu| @tab :vnoreme[nu] @tab ビジュアル・選択モードを対象とする "@command{:noremenu}" コマンド
@item |:vsplit| @tab :vs[plit] @tab カレントウィンドウを垂直分割する
@item |:vunmap| @tab :vu[nmap] @tab ビジュアル・選択モードを対象とする "@command{:unmap}" コマンド
@item |:vunmenu| @tab :vunme[nu] @tab ビジュアルモードのメニューを削除
@item |:windo| @tab :windo @tab 各ウィンドウに対してコマンドを実行する
@item |:write| @tab :w[rite] @tab ファイルに保存
@item |:wNext| @tab :wN[ext] @tab ファイルに保存して、引数リストの直前のファイルを開く
@item |:wall| @tab :wa[ll] @tab (変更した) すべてのバッファを保存
@item |:while| @tab :wh[ile] @tab 与えた条件を満たしている限りループする
@item |:winsize| @tab :wi[nsize] @tab ウィンドウサイズを取得もしくはセットする (古いコマンド)
@item |:winpos| @tab :winp[os] @tab ウィンドウの位置を取得もしくはセットする
@item |:wincmd| @tab :winc[md] @tab ウィンドウコマンド (CTRL-W) を実行する
@item |:wnext| @tab :wn[ext] @tab ファイルに保存して、引数リストの次のファイルを開く
@item |:wprevious| @tab :wp[revious] @tab ファイルに保存して、引数リストの直前のファイルを開く
@item |:wq| @tab :wq @tab ファイルに保存して、ウィンドウもしくは Vim を終了
@item |:wqall| @tab :wqa[ll] @tab すべての変更済みバッファを保存し、Vim を終了
@item |:wundo| @tab :wu[ndo] @tab アンドゥ情報をファイルに保存する
@item |:wviminfo| @tab :wv[iminfo] @tab viminfo ファイルに保存
@item |:wsverb| @tab :ws[verb] @tab workshopに命令をIPCで送信する
@item |:xit| @tab :x[it] @tab バッファが変更されていたら保存し、ウィンドウもしくは Vim を終了
@item |:xall| @tab :xa[ll] @tab "@command{:wqall}" と同じ。
@item |:xmapclear| @tab :xmapc[lear] @tab ビジュアルモード時のマッピングを全て削除する
@item |:xmap| @tab :xm[ap] @tab "@command{:map}" と同様。ビジュアルモード用
@item |:xmenu| @tab :xme[nu] @tab ビジュアルモード時にメニューを追加する
@item |:xnoremap| @tab :xn[oremap] @tab "@command{:noremap}" と同様。ビジュアルモード用
@item |:xnoremenu| @tab :xnoreme[nu] @tab "@command{:noremenu}" と同様。ビジュアルモード用
@item |:xunmap| @tab :xu[nmap] @tab "@command{:unmap}" と同様。ビジュアルモード用
@item |:xunmenu| @tab :xunme[nu] @tab ビジュアルモード時にメニューを削除する
@item |:yank| @tab :y[ank] @tab 行をレジスタへヤンク
@item |:z| @tab :z @tab 行を表示
@item |:~| @tab :~ @tab 直前に実行した "@command{:substitute}" を実行
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
 vim:tw=78:ts=8:ft=help:norl:
@end ifset
