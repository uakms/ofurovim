@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node gui_w32.txt, , , 目次
@unnumbered Win32 GUI
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*gui_w32.txt*   For Vim version 8.1.  Last change: 2019 May 05


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*gui_w32.txt*   For Vim バージョン 8.1.  Last change: 2019 May 05


                VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim's Win32 Graphical User Interface			*gui-w32* *win32-gui*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32}
@anchor{win32-gui}
@cindex gui-w32
@cindex win32-gui
Win32 での Vim のグラフィカルユーザーインターフェイス
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Starting the GUI		|gui-w32-start|
2. Vim as default editor	|vim-default-editor|
3. Using the clipboard		|gui-clipboard|
4. Shell Commands		|gui-shell-win32|
5. Special colors		|win32-colors|
6. Windows dialogs & browsers	|gui-w32-dialogs|
7. Command line arguments	|gui-w32-cmdargs|
8. Various			|gui-w32-various|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. GUI を始める @tab |@ref{gui-w32-start}|
@item 2. デフォルトエディタ Vim @tab |@ref{vim-default-editor}|
@item 3. クリップボードを使う @tab |@ref{gui-clipboard}|
@item 4. シェルコマンド @tab |@ref{gui-shell-win32}|
@item 5. 特別な色 @tab |@ref{win32-colors}|
@item 6. ダイアログとブラウズ @tab |@ref{gui-w32-dialogs}|
@item 7. コマンドライン引数 @tab |@ref{gui-w32-cmdargs}|
@item 8. その他色々 @tab |@ref{gui-w32-various}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Other relevant documentation:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その他の関連した文章:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|gui.txt|	For generic items of the GUI.
|os_win32.txt| 	For Win32 specific items.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{gui.txt}| @tab GUI の一般的な要素。
@item |@ref{os_win32.txt}| @tab Win32 特有の要素。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
1. Starting the GUI					*gui-w32-start*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-start}
@cindex gui-w32-start
@section 1. GUI を始める
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Win32 GUI version of Vim will always start the GUI, no matter how you
start it or what it's called.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 の GUI バージョンは、どんな名前で起動されたかなんておかまい無しに、いつも GUI でスタートする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The GUI will always run in the Windows subsystem.  Mostly shells automatically
return with a command prompt after starting gvim.  If not, you should use the
"start" command: >
	start gvim [options] file ..
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI は常に Windows のサブシステムとして実行される。ほとんどのシェルは Vim を起動した直後にコマンドプロンプトへ自動的に復帰する。そうでなかったら、"start" コマンドを使うと良い:
@verbatim
start gvim [options] file ..
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<							*E988*
The console version with the |-g| option may also start the GUI by executing
gvim.exe: >
	vim -g [options] file ..
To make this work, gvim.exe must exist in the same directory as the vim.exe,
and this feature must be enabled at compile time.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E988}
@erindex E988
コンソールバージョンに |@ref{-g}| オプションを付けても gvim.exe が実行されて GUI をスタートできる。
@verbatim
vim -g [options] file ..
@end verbatim
この機能を動作させるには、gvim.exe が vim.exe と同一のディレクトリに存在し、かつこの機能を有効にしてコンパイルされていなければならない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One may also use `:gui` from the console version.  However, this is an
experimental feature and this feature must be enabled at compile time.
It uses a session file to recreate the current state of the console Vim in the
GUI Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンソールバージョンから `@command{:gui}` を使うこともできる。しかし、これは実験的な機能で、かつこの機能を有効にしてコンパイルされていなければならない。セッションファイルを使って現在のコンソール Vim の状態が GUI Vim で再生成される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note: All fonts (bold, italic) must be of the same size!!!  If you don't do
this, text will disappear or mess up the display.  Vim does not check the font
sizes.  It's the size in screen pixels that must be the same.  Note that some
fonts that have the same point size don't have the same pixel size!
Additionally, the positioning of the fonts must be the same (ascent and
descent).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
全てのフォント (太字、斜体) は同じ大きさでなければならない！！！そうしない場合、文字が欠けたり表示がゴチャゴチャになったりしてしまうだろう。Vim はフォントの大きさを検査していない。画面上でのピクセルサイズが同じでなければならない。
@end quotation
@quotation
@strong{Note:} @*
同じポイントサイズのフォントでも、同じピクセルサイズのフォントだとは限らないことに注意！加えてフォントの位置情報 (アセントとディセント) も同じでなければならない。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Win32 GUI has an extra menu item:  "Edit/Select Font".  It brings up the
standard Windows font selector.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 GUI ではメニューが拡張されている: "編集/フォント設定"。Windows の標準フォントセレクトダイアログが起動される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Setting the menu height doesn't work for the Win32 GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メニューの高さ設定は、Win32 GUI では動作しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-win32-maximized*
If you want Vim to start with a maximized window, add this command to your
vimrc or gvimrc file: >
	au GUIEnter * simalt ~x
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-win32-maximized}
@cindex gui-win32-maximized
Vim のウィンドウを最大化した状態で起動したいのならば、@file{vimrc} か @file{gvimrc} に次のコマンドを書き加える:
@verbatim
au GUIEnter * simalt ~x
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Using Vim as a plugin					*gui-w32-windowid*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-windowid}
@cindex gui-w32-windowid
@unnumberedsubsec Vim をプラグインとして使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When gvim starts up normally, it creates its own top level window.  If you
pass Vim the command-line option |--windowid| with a decimal or hexadecimal
value, Vim will create a window that is a child of the window with the given
ID.  This enables Vim to act as a plugin in another application.  This really
is a programmer's interface, and is of no use without a supporting application
to spawn Vim correctly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
普通に gvim が起動されると、gvim のウィンドウがトップレベルで作成される。コマンドラインオプション |@ref{--windowid, , @minus{}@minus{}windowid}| に 10 進または 16 進の数値を指定すると、Vim はその ID を持つウィンドウの子ウィンドウを作成する。これによって、Vim を他のアプリケーションのプラグインとして使うことができる。これは完全にプログラマ向けのインターフェイスであり、Vim を正しく起動するアプリケーションの対応なくしては何の役にも立たない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Vim as default editor				*vim-default-editor*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-default-editor}
@cindex vim-default-editor
@section 2. デフォルトエディタ Vim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To set Vim as the default editor for a file type:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim をあるファイルタイプのデフォルトエディタにするには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Start a Windows Explorer
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item Windows のエクスプローラーを起動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Choose View/Options -> File Types
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ツール/フォルダオプション -> ファイルタイプ (W2K + IE5.5)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. Select the path to gvim for every file type that you want to use it for.
   (you can also use three spaces in the file type field, for files without an
   extension).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Vim を使用したい全てのファイルタイプに対して、gvim のパスを設定する。(拡張子の無いファイルタイプに対しては、ファイルタイプを指定するフィールドに 3 つのスペースを置くことで対応できる)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   In the "open" action, use: >
	gvim "%1"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アクションの "open" に:
@verbatim
gvim "%1"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<  The quotes are required for using file names with embedded spaces.
   You can also use this: >
	gvim "%L"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル名にスペースを含むファイルを正しく扱うためにクォート (") が必要。こういう方法もある:
@verbatim
gvim "%L"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<  This should avoid short (8.3 character) file names in some situations.  But
   I'm not sure if this works everywhere.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これにより幾つかの状況で、短い形式のファイル名 (8.3 形式) を避けることができる。しかし、常に働くわけではない。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you open a file in Vim by double clicking it, Vim changes to that
file's directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルをダブルクリックして Vim で開いた時には、Vim はそのファイルのディレクトリへ移動する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want Vim to start full-screen, use this for the Open action: >
	gvim -c "simalt ~x" "%1"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を全画面で起動したい時には、open のアクションとして次のものを使用する:
@verbatim
gvim -c "simalt ~x" "%1"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Another method, which also works when you put Vim in another directory (e.g.,
when you have got a new version):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
新たに Vim を違うディレクトリに置いた時 (新しいバージョンを入手した時など) の、も
う 1 つの方法は:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. select a file you want to use Vim with
2. <Shift-F10>
3. select "Open With..." menu entry
4. click "Other..."
5. browse to the (new) location of Vim and click "Open"
6. make "Always Use this program..." checked
7. <OK>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item Vim を使って開きたいファイルを選ぶ
@item <Shift-F10> を押す
@item メニューから "アプリケーションから開く" を選択する
@item "その他" をクリック
@item Vim の新しい位置を参照して、開くをクリックする。
@item "いつもこのアプリケーションを使う" をチェックする
@item OK をクリック
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*send-to-menu* *sendto*
You can also install Vim in the "Send To" menu:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{send-to-menu}
@anchor{sendto}
@cindex send-to-menu
@cindex sendto
Vim を "送る" メニューに追加することもできる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Start a Windows Explorer
2. Navigate to your sendto directory:
   Windows NT: %windir%\profiles\%user%\sendto (e.g.
	       "c:\winnt\profiles\mattha\sendto")
   Windows XP: C:\Documents and Settings\%user%\SendTo
   Windows Vista: C:\Users\%user%\AppData\Roaming\Microsoft\Windows\SendTo .
3. Right-click in the file pane and select New->Shortcut
4. Follow the shortcut wizard, using the full path to VIM/GVIM.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item  Windows のエクスプローラーを起動する。
@item "送る" のためのディレクトリに移動する:
@verbatim
Windows NT: %windir%\profiles\%user%\sendto (e.g. "c:\winnt\profiles\mattha\sendto")
Windows XP: C:\Documents and Settings\%user%\SendTo
Windows Vista: C:\Users\%user%\AppData\Roaming\Microsoft\Windows\SendTo .
@end verbatim
@item ファイル表示枠の上で右クリックして新規作成 → ショートカット。
@item ショートカットウィザードに従って VIM/GVIM へのフルパスを指定。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When you 'send a file to Vim', Vim changes to that file's directory.  Note,
however, that any long directory names will appear in their short (MS-DOS)
form.  This is a limitation of the Windows "Send To" mechanism.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim にファイルを送ると、Vim はファイルのあるディレクトリに移動する。しかし長いディレクトリ名は短い (MS-DOS 形式) で表示されてしまうことに注意。これは Windows の "送る" の仕組みによる制限である。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*notepad*
You could replace notepad.exe with gvim.exe, but that has a few side effects.
Some programs rely on notepad arguments, which are not recognized by Vim.  For
example "notepad -p" is used by some applications to print a file.  It's
better to leave notepad where it is and use another way to start Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{notepad}
@cindex notepad
notepad.exe (メモ帳) を gvim.exe に置き換えてしまうこともできるが、これには副作用もある。いくつかのプログラムは notepad.exe に依存していて、例えばファイルを印刷するために "notepad -p" を使っているからである。メモ帳 (notepad) はそのままにしておいて、Vim を起動するためのほかの方法を使ったほうが良い。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*win32-popup-menu*
A more drastic approach is to install an "Edit with Vim" entry in the popup
menu for the right mouse button.  With this you can edit any file with Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-popup-menu}
@cindex win32-popup-menu
もっと抜本的なアプローチは、右マウスボタンメニューに "Edit with Vim" という項目を追加するものである。これを使うとあらゆるファイルを Vim で編集できるようになる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This can co-exist with the file associations mentioned above.  The difference
is that the file associations will make starting Vim the default action.  With
the "Edit with Vim" menu entry you can keep the existing file association for
double clicking on the file, and edit the file with Vim when you want.  For
example, you can associate "*.mak" with your make program.  You can execute
the makefile by double clicking it and use the "Edit with Vim" entry to edit
the makefile.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは上述のファイルの関連付けと共存することができる。ファイルの関連付けは、Vim で開始することを「デフォルトのアクション」にしてしまう点が違う。"Edit with Vim" メニュー項目を使うと、ダブルクリックで開ける既に存在するファイルの関連付けはそのままにして、したい時にはいつでも Vim でファイルを編集することができる。

例えば、"*.mak" は make プログラムに関連付けることができる。この場合、そのファイルをダブルクリックすれば makefile が実行されるし、"Edit with Vim" を選べば makefile を編集することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can select any files and right-click to see a menu option called "Edit
with gvim".  Choosing this menu option will invoke gvim with the file you have
selected.  If you select multiple files, you will find two gvim-related menu
options:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
どんなファイルでも選択し、右クリックで "Edit with gvim" と呼ばれるメニューオプションを表示させることができる。このメニューオプションを選択すると、選択したファイルが gvim によって開かれる。複数のファイルを選択した場合には、2 つのメニューオプションが提示されるだろう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
"Edit with multiple gvims"  -- one gvim for each file in the selection
"Edit with single gvim"     -- one gvim for all the files in the selection
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
"Edit with multiple gvims"  -- 1 つのファイルにつき 1 つの gvim が起動される
"Edit with single gvim"     -- 選んだ全てのファイルが 1 つの gvim で開かれる
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
And if there already is a gvim running:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さらに、もしもすでに gvim が起動しているなら:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
"Edit with existing gvim"   -- edit the file with the running gvim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
"Edit with existing gvim    -- すでに起動している gvim でそのファイルの編集を開始する。
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "edit with existing Vim" entries can be disabled by adding an entry in the
registry under HKLM\Software\Vim\Gvim, named DisableEditWithExisting, and with
any value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"edit with existing Vim" メニューはレジストリを設定することで無効化できる。HKLM\Software\Vim\Gvim に DisableEditWithExisting という名前のエントリを追加すればよい。値は何でもよい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*install-registry*
You can add the "Edit with Vim" menu entry in an easy way by using the
"install.exe" program.  It will add several registry entries for you.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{install-registry}
@cindex install-registry
"install.exe" プログラムを使用すれば、簡単に "Edit with Vim" メニュー項目を追加することができる。これはレジストリに幾つかの項目を書き加える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can also do this by hand.  This is complicated!  Use the install.exe if
you can.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同じことを手動で行うこともできる。これは非常に複雑である！できれば install.exe を使うことをオススメする。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Start the registry editor with "regedit".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item "regedit" でレジストリエディタを起動する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Add these keys:
   key		value name		    value ~
   HKEY_CLASSES_ROOT\CLSID\{51EEE242-AD87-11d3-9C1E-0090278BBD99}
		{default}		    Vim Shell Extension
   HKEY_CLASSES_ROOT\CLSID\{51EEE242-AD87-11d3-9C1E-0090278BBD99}\InProcServer32
		{default}		    {path}\gvimext.dll
		ThreadingModel		    Apartment
   HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers\gvim
		{default}		    {51EEE242-AD87-11d3-9C1E-0090278BBD99}
   HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Shell Extensions\Approved
		{51EEE242-AD87-11d3-9C1E-0090278BBD99}
					    Vim Shell Extension
   HKEY_LOCAL_MACHINE\Software\Vim\Gvim
		path			    {path}\gvim.exe
   HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\vim 5.6
		DisplayName		    Vim 5.6: Edit with Vim popup menu entry
		UninstallString		    {path}\uninstall.exe

   Replace {path} with the path that leads to the executable.
   Don't type {default}, this is the value for the key itself.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 次のキーを追加する:
@verbatim
キー                                                                                    キーの名前                              値
HKEY_CLASSES_ROOT\CLSID\{51EEE242-AD87-11d3-9C1E-0090278BBD99}                          {default}                               Vim Shell Extension
HKEY_CLASSES_ROOT\CLSID\{51EEE242-AD87-11d3-9C1E-0090278BBD99}\InProcServer32           {default}                               {path}\gvimext.dll
                                                                                        ThreadingModel                          Apartment
HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers\gvim                                    {default}                               {51EEE242-AD87-11d3-9C1E-0090278BBD99}
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Shell Extensions\Approved  {51EEE242-AD87-11d3-9C1E-0090278BBD99}  Vim Shell Extension
HKEY_LOCAL_MACHINE\Software\Vim\Gvim                                                    path                                    {path}\gvim.exe
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\vim 5.6          DisplayName                             Vim 5.6: Edit with Vim popup menu entry
                                                                                        UninstallString                         {path}\uninstal.exe
@end verbatim
@{path@} は実行可能ファイルのあるディレクトリパスに置き換える。

@{default@} はキー自身の値なので、タイプしない。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To remove "Edit with Vim" from the popup menu, just remove the registry
entries mentioned above.  The "uninstall.exe" program can do this for you.
You can also use the entry in the Windows standard "Add/Remove Programs" list.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップメニューから "Edit with Vim" を削除するには、上記のレジストリ項目を削除すればよい。uninstall.exe プログラムは同じことをしてくれる。Windows 標準の "アプリケーションの追加と削除" のリストの、エントリを使うこともできる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you notice that this entry overrules other file type associations, set
those associations again by hand (using Windows Explorer, see above).  This
only seems to happen on some Windows NT versions (Windows bug?).  Procedure:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このエントリがファイルタイプの関連付けを抑制してしまうことに気がついたら、手動で関連付けをやり直す (上記を参考に、Windows のエクスプローラーを使って)。これは Windows NT の幾つかのバージョンでだけ起こるらしい (Windows のバグ？) 。手続き:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Find the name of the file type.  This can be done by starting the registry
   editor, and searching for the extension in \\HKEY_CLASSES_ROOT
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item ファイルタイプの名前を見つける。これはレジストリエディタを起動し、\\HKEY_CLASSES_ROOT で拡張子を探すことで行える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. In a Windows Explorer, use View/Options/File Types.  Search for the file
   type in the list and click "Edit".  In the actions list, you can select on
   to be used as the default (normally the "open" action) and click on the
   "Set Default" button.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Windows エクスプローラーでは、表示 → オプション → ファイルタイプ。リストの中からファイルタイプを探し出し "編集" をクリック。アクションのリストで、デフォルトとして使用したいものを選択し (通常は "開く" アクション)、"標準" ボタンをクリックする。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vim in the "Open With..." context menu			*win32-open-with-menu*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-open-with-menu}
@cindex win32-open-with-menu
@unnumberedsubsec "アプリケーションから開く" ("Open With...") コンテキストメニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you use the Vim install program you have the choice to add Vim to the "Open
With..." menu.  This means you can use Vim to edit many files.  Not every file
(for unclear reasons...), thus the "Edit with Vim" menu entry is still useful.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のインストーラを使うならエクスプローラーのメニューの "アプリケーションから開く" に Vim を加えるか選択することができる。これは Vim でいろんなファイルを編集するなら重要である。(不明瞭な理由で) 全てのファイルには使えない。したがって "Edit with Vim" メニューの方が使いやすい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One reason to add this is to be able to edit HTML files directly from Internet
Explorer.  To enable this use the "Tools" menu, "Internet Options..." entry.
In the dialog select the "Programs" tab and select Vim in the "HTML editor"
choice.  If it's not there than installing didn't work properly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これを追加する理由の 1 つがインターネットエクスプローラーから直接ファイルを編集できるようにするためである。これを有効にするには "Tools" メニューから "Internet Options..." を選択し、出てきたダイアログウィンドウの "Programs" タブの "HTML editor" に Vim を選択する。そこに Vim がなければインストールは完了していない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Doing this manually can be done with this script:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このスクリプトを使って手作業で設定できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
----------------------------------------------------------
REGEDIT4

[HKEY_CLASSES_ROOT\Applications\gvim.exe]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell\edit]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell\edit\command]
@="c:\\vim\\vim62\\gvim.exe \"%1\""

[HKEY_CLASSES_ROOT\.htm\OpenWithList\gvim.exe]

[HKEY_CLASSES_ROOT\*\OpenWithList\gvim.exe]

----------------------------------------------------------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
REGEDIT4

[HKEY_CLASSES_ROOT\Applications\gvim.exe]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell\edit]

[HKEY_CLASSES_ROOT\Applications\gvim.exe\shell\edit\command]
@="c:\\vim\\vim62\\gvim.exe \"%1\""

[HKEY_CLASSES_ROOT\.htm\OpenWithList\gvim.exe]

[HKEY_CLASSES_ROOT\*\OpenWithList\gvim.exe]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Change the "c:\\vim\\vim62" bit to where gvim.exe is actually located.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"c:\\vim\\vim62" を gvim.exe が実際にある場所に変更すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To uninstall this run the Vim uninstall program or manually delete the
registry entries with "regedit".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これをアンインストールするには Vim のアンインストーラを使うか "regedit" を使って手作業でレジストリエントリを削除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Using the clipboard					*gui-clipboard*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-clipboard}
@cindex gui-clipboard
@section 3. クリップボードを使う
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Windows has a clipboard, where you can copy text to, and paste text from.  Vim
supports this in several ways.  For other systems see |gui-selections|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Windows にはテキストを一時的に格納 (コピー) し、取り出す (ペースト) できるクリップボードがある。Vim では幾つかの方法でクリップボードに対応している。他のシステムについては |@ref{gui-selections}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "* register reflects the contents of the clipboard.  |quotestar|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"* レジスタにはクリップボードの内容が反映される。|@ref{quotestar}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the "unnamed" string is included in the 'clipboard' option, the unnamed
register is the same.  Thus you can yank to and paste from the clipboard
without prepending "* to commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{clipboard}' オプションに文字列 "@var{unnamed}" が含まれている時には、名前なしレジスタが同じになる。こうすることで、ヤンク (Vim におけるコピー "y") やペースト (Vim における貼り付け "p") にクリップボードを、"* を付けることなく使用できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'a' flag in 'guioptions' is not included by default.  This means that text
is only put on the clipboard when an operation is performed on it.  Just
Visually selecting text doesn't put it on the clipboard.  When the 'a' flag is
included, the text is copied to the clipboard even when it is not operated
upon.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは '@option{guioptions}' に '@var{a}' フラグは含まれていない。これはその操作を行った時にだけ、テキストがクリップボードへ送られることを意味している。単に視覚的に選択 (Visual モード) しただけではクリップボードには送られない。'@var{a}' フラグを加えれば、(Visual モードで選択するだけで) 操作をせずにもクリップボードへ送られる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*mswin.vim*
To use the standard MS-Windows way of CTRL-X, CTRL-C and CTRL-V, use the
$VIMRUNTIME/mswin.vim script.  You could add this line to your _vimrc file: >
	source $VIMRUNTIME/mswin.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{mswin.vim}
@cindex mswin.vim
標準的な MS-Windows の @kbd{CTRL-X}, @kbd{CTRL-C} および @kbd{CTRL-V} を使うには、$VIMRUNTIME/mswin.vim スクリプトを使用する。@file{_vimrc} ファイルに次の 1 行を追加する:
@verbatim
source $VIMRUNTIME/mswin.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Since CTRL-C is used to copy the text to the clipboard, it can't be used to
cancel an operation.  Use CTRL-Break for that.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-C} がクリップボードへのコピーになってしまうので、操作を停止すること (無限ループに陥ったスクリプトを停止するなど) が、できなくなってしまう。代わりに @kbd{CTRL-Break} が使える。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-Z is used for undo.  This means you can't suspend Vim with this key, use
|:suspend| instead (if it's supported at all).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-Z} がアンドゥになる。そのため、このキーで Vim をサスペンドすることはできない。代わりに |@ref{:suspend}| を使うこと (これがサポートされていればだが)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*CTRL-V-alternative* *CTRL-Q*
Since CTRL-V is used to paste, you can't use it to start a blockwise Visual
selection.  You can use CTRL-Q instead.  You can also use CTRL-Q in Insert
mode and Command-line mode to get the old meaning of CTRL-V.  But CTRL-Q
doesn't work for terminals when it's used for control flow.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{CTRL-V-alternative}
@anchor{CTRL-Q}
@cindex CTRL-V-alternative
@kindex CTRL-Q
@kbd{CTRL-V} がペーストに使われてしまうので、矩形ビジュアル選択を開始することができない。これには @kbd{CTRL-Q} を代用できる。挿入モードやコマンドラインモードにおいても、もともとの @kbd{CTRL-V} の代わりに @kbd{CTRL-Q} を使用することができる。しかしターミナルで @kbd{CTRL-Q} が制御のために使われる時はうまく機能しない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
NOTE: The clipboard support still has a number of bugs.  See |todo|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
クリップボードのサポートにはまだかなりのバグがある。|todo| 参照。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Shell Commands					*gui-shell-win32*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-shell-win32}
@cindex gui-shell-win32
@section 4. シェルコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim uses another window for external commands, to make it possible to run any
command.  The external command gets its own environment for running, just like
it was started from a DOS prompt.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は外部コマンドを実行するのに、どんなコマンドでも実行できるようにするために Vim とは別個のウィンドウを使用する。外部コマンドはちょうど DOS プロンプトから実行されるように、独自の実行環境を獲得する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*win32-vimrun*
Executing an external command is done indirectly by the "vimrun" command.  The
"vimrun.exe" must be in the path for this to work.  Or it must be in the same
directory as the Vim executable.  If "vimrun" cannot be found, the command is
executed directly, but then the DOS window closes immediately after the
external command has finished.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-vimrun}
@cindex win32-vimrun
外部コマンドの実行は "vimrun" コマンドを用いて間接的に行われる。これが働くためには "vimrun.exe" コマンドが実行パスになければならない。そうでなければ Vim の実行ファイルと同じディレクトリになければならない。"vimrun" を見つけることができなければ、コマンドは直接実行され、そのため外部コマンドの実行が終了するとすぐに DOS ウィンドウが閉じられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
WARNING: If you close this window with the "X" button, and confirm the
question if you really want to kill the application, Vim may be killed too!
(This does not apply to commands run asynchronously with ":!start".)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{警告:} @*
もしも "X" ボタンでこのウィンドウを閉じてしまい、強制終了することを確認するウィンドウでアプリケーションを本当に終了してしまうと、Vim も一緒に強制終了してしまう！("@command{:!start}" で非同期的に起動されたアプリケーションには、これは当てはまらない)
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The window in which the commands are executed will be the default you have set
up for "Console" in Control Panel.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コントロールパネルの "コンソール" によって設定された内容がデフォルトで使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*win32-!start*
Normally, Vim waits for a command to complete before continuing (this makes
sense for most shell commands which produce output for Vim to use).  If you
want Vim to start a program and return immediately, you can use the following
syntax: >
	:!start [/min] {command}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-!start}
@cindex win32-!start
通常、Vim はコマンドの実行が終了するのを待つ(これは多くのシェルコマンドの出力を Vim が取り込んで使用できるようにするため)。Vim がプログラムを実行した後、その終了を待たないように望むのならば、次の構文を使用することができる:
@verbatim
:!start [/min] {command}
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The optional "/min" causes the window to be minimized.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"/min" 引数を指定すると、ウィンドウは最小化される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Special colors					*win32-colors*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{win32-colors}
@cindex win32-colors
@section 5. 特別な色
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On Win32, the normal DOS colors can be used.  See |dos-colors|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 では、通常の DOS での色が使用される。|@ref{dos-colors}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additionally the system configured colors can also be used.  These are known
by the names Sys_XXX, where XXX is the appropriate system color name, from the
following list (see the Win32 documentation for full descriptions).  Case is
ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
付け加えて、システムが構成している色を使用することができる。それらは Sys_XXX として知られ、XXX の部分は下のリストに示される、割り当てられているシステムカラー名である (完全な解説は Win32 の文章を参照)。大文字小文字は区別されない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Sys_3DDKShadow		Sys_3DFace			Sys_BTNFace
Sys_3DHilight		Sys_3DHighlight			Sys_BTNHilight
Sys_BTNHighlight	Sys_3DLight			Sys_3DShadow
Sys_BTNShadow		Sys_ActiveBorder		Sys_ActiveCaption
Sys_AppWorkspace	Sys_Background			Sys_Desktop
Sys_BTNText		Sys_CaptionText			Sys_GrayText
Sys_Highlight		Sys_HighlightText		Sys_InactiveBorder
Sys_InactiveCaption	Sys_InactiveCaptionText		Sys_InfoBK
Sys_InfoText		Sys_Menu			Sys_MenuText
Sys_ScrollBar		Sys_Window			Sys_WindowFrame
Sys_WindowText
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Sys_3DDKShadow          Sys_3DFace                      Sys_BTNFace
Sys_3DHilight           Sys_3DHighlight                 Sys_BTNHilight
Sys_BTNHighlight        Sys_3DLight                     Sys_3DShadow
Sys_BTNShadow           Sys_ActiveBorder                Sys_ActiveCaption
Sys_AppWorkspace        Sys_Background                  Sys_Desktop
Sys_BTNText             Sys_CaptionText                 Sys_GrayText
Sys_Highlight           Sys_HighlightText               Sys_InactiveBorder
Sys_InactiveCaption     Sys_InactiveCaptionText         Sys_InfoBK
Sys_InfoText            Sys_Menu                        Sys_MenuText
Sys_ScrollBar           Sys_Window                      Sys_WindowFrame
Sys_WindowText
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Probably the most useful values are
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
恐らく一番便利な値はこれらだろう
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Sys_Window	    Normal window background
	Sys_WindowText      Normal window text
	Sys_Highlight       Highlighted background
	Sys_HighlightText   Highlighted text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
Sys_Window          通常のウィンドウの背景の色
Sys_WindowText      通常のウィンドウの文字の色
Sys_Highlight       選択されたテキストの背景の色
Sys_HighlightText   選択されたテキストの文字の色
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These extra colors are also available:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他にもこの様な色も存在する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Gray, Grey, LightYellow, SeaGreen, Orange, Purple, SlateBlue, Violet,
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

Gray, Grey, LightYellow, SeaGreen, Orange, Purple, SlateBlue, Violet
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
								*rgb.txt*
Additionally, colors defined by a "rgb.txt" file can be used.  This file is
well known from X11.  A few lines from it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{rgb.txt}
@cindex rgb.txt
付け加えて、"rgb.txt" で定義される色も使うことができる。このファイルは X11 のものとして知られている。何行かを抜粋する:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
  255 218 185		   peach puff
  205 133  63		   peru
  255 181 197		   pink
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
255 218 185              peach puff
205 133  63              peru
255 181 197              pink
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This shows the layout of the file:  First the R, G and B value as a decimal
number, followed by the name of the color.  The four fields are separated by
spaces.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これはファイルのレイアウトを示している: 最初に赤、緑、そして青の輝度を 10 進数で記述し、続いて色の名前を定義している。4 つのフィールドはスペースで区切られている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can get an rgb.txt file from any X11 distribution.  It is located in a
directory like "/usr/X11R6/lib/X11/".  For Vim it must be located in the
$VIMRUNTIME directory.  Thus the file can be found with "$VIMRUNTIME/rgb.txt".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
rgb.txt は X11 のディストリビューションから手に入れることができる。"/usr/X11R6/lib/X11/" あたりのディレクトリにおいてあることが多い。Vim では $VIMRUNTIME ディレクトリに置く。だから "$VIMRUNTIME/rgb.txt" にファイルが見つけることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
						*gui-w32-dialogs* *dialog*
6. Windows dialogs & browsers
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-dialogs}
@anchor{dialog}
@cindex gui-w32-dialogs
@cindex dialog
@section 6. ダイアログとブラウズ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Win32 GUI can use familiar Windows components for some operations, as well
as the traditional interface shared with the console version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンソールバージョンから受け継がれる伝統的なインターフェイスはもちろん、さらに Win32 GUI では幾つかの操作に見慣れた Windows のコンポーネントを使用することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
6.1 Dialogs
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 6.1 ダイアログ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The dialogs displayed by the "confirm" family (i.e. the 'confirm' option,
|:confirm| command and |confirm()| function) are GUI-based rather than the
console-based ones used by other versions.  The 'c' flag in 'guioptions'
changes this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その他のバージョンではコンソールベースで行われていた "confirm" ファミリ (すなわち '@option{confirm}' オプションと |@ref{:confirm}| コマンドと |@ref{confirm()}| 関数) で、GUI ベースのダイアログが表示される。'@option{guioptions}' の '@var{c}' フラグでこれを変更できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
6.2 File Browsers
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 6.2 ファイルブラウザー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When prepending ":browse" before file editing commands, a file requester is
used to allow you to select an existing file.  See |:browse|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを編集するコマンドの前に ":browse" を付けると、存在するファイルを選択するためのウィンドウ選択ダイアログが使用される。|@ref{:browse}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
6.3 Tearoff Menus
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 6.3 切取メニュー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The Win32 GUI emulates Motif's tear-off menus.  At the top of each menu you
will see a small graphic "rip here" sign.  Selecting it will cause a floating
window to be created with the same menu entries on it.  The floating menu can
then be accessed just as if it was the original (including sub-menus), but
without having to go to the menu bar each time.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Win32 GUI 版では Motif の「切取メニュー」をエミュレートする。個々のメニューの最上位には、小さな「切り取り線」のグラフィックスが存在する。これを選択すると同じメニューのエントリがある、フローティングウィンドウが作成される。フローティングメニューを使用すれば、いちいちメニューバーに移動することなく、オリジナルのメニューの (サブメニューも含めた) 項目にアクセスすることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This is most useful if you find yourself using a command buried in a sub-menu
over and over again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

これはサブメニューの奥の方のコマンドを頻繁に使用するときに非常に便利。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The tearoff menus can be positioned where you like, and always stay just above
the Main Vim window.  You can get rid of them by closing them as usual; they
also of course close when you exit Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

切取メニューは好きなところに配置し、常に Vim のメインウィンドウよりも手前に表示される。普通に閉じることで取り除くこともできる; もちろん Vim を終了すれば自動的にそれらも閉じられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:tearoff* *:te*
:te[aroff] {name}	Tear-off the menu {name}.  The menu named must have at
			least one subentry, but need not appear on the
			menu-bar (see |win32-hidden-menus|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:tearoff}
@anchor{:te}
@pindex :tearoff
@pindex :te
@item :te[aroff] @{name@}
@{name@} というメニューを切り取る。指定されたメニューは少なくとも 1 つ以上のサブエントリを持たねばないが、メニューバーに表示されている必要は無い。(|@ref{win32-hidden-menus}| を参照)。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example: >
	:tearoff File
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
:tearoff ファイル(F)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
will make the "File" menu (if there is one) appear as a tearoff menu. >

	:amenu ]Toolbar.Make	:make<CR>
	:tearoff ]Toolbar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"ファイル" メニューが(あれば)切取メニューとして表示される。
@verbatim
:amenu ]Toolbar.Make    :make<CR>
:tearoff ]Toolbar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This creates a floating menu that doesn't exist on the main menu-bar.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
メインのメニューバーには存在しないフローティングメニューを作成する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that a menu that starts with ']' will not be displayed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
']' で始まるメニューは表示されないことに注意。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. Command line arguments				*gui-w32-cmdargs*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-cmdargs}
@cindex gui-w32-cmdargs
@section 7. コマンドライン引数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Command line arguments behave the same way as with the console application,
see |win32-cmdargs|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドライン引数はコンソール版と同じ挙動となる。|@ref{win32-cmdargs}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. Various						*gui-w32-various*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-various}
@cindex gui-w32-various
@section 8. その他色々
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*gui-w32-printing*
The "File/Print" menu prints the text with syntax highlighting, see
|:hardcopy|.  If you just want to print the raw text and have a default
printer installed this should also work: >
	:w >>prn
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gui-w32-printing}
@cindex gui-w32-printing
"ファイル/印刷" メニューはシンタックスハイライトを使って印刷する。|@ref{:hardcopy}| を参照すること。もしもテキストを装飾なしで印刷したいのなら、デフォルトのプリンタがインストールされていれば次のようにできるだろう。
@verbatim
:w >>prn
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim supports a number of standard MS Windows features.  Some of these are
detailed elsewhere: see |'mouse'|, |win32-hidden-menus|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim では多くの MS Windows 標準の機能をサポートしている。それらの幾つかは別の場所で説明されている: |@ref{'mouse'}|, |@ref{win32-hidden-menus}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*drag-n-drop-win32*
You can drag and drop one or more files into the Vim window, where they will
be opened as normal.  See |drag-n-drop|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{drag-n-drop-win32}
@cindex drag-n-drop-win32
Vim のウィンドウに1つもしくは複数のファイルをドラッグ&ドロップすることができ、それらは普通に開かれる。|@ref{drag-n-drop}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:simalt* *:sim*
:sim[alt] {key}		simulate pressing {key} while holding Alt pressed.
			{only for Win32 versions}
			Note: ":si" means ":s" with the "i" flag.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:simalt}
@anchor{:sim}
@pindex :simalt
@pindex :sim
@item :sim[alt] @{key@}
@key{Alt} と @{key@} の同時押しをシミュレートする。

@{Win32 バージョンだけの機能@}
@quotation
@strong{Note:} @*
":si" は "i" フラグ付きの ":s" になる。
@end quotation
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Normally, Vim takes control of all Alt-<Key> combinations, to increase the
number of possible mappings.  This clashes with the standard use of Alt as the
key for accessing menus.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、Vim では使用可能なマッピングを増やすために、Alt-<Key> の全ての組み合わせを使うことができる。これはメニューにアクセスするための @key{Alt} キーの標準的な使い方と衝突する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The quick way of getting standard behavior is to set the 'winaltkeys' option
to "yes".  This however prevents you from mapping Alt keys at all.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

標準的な振る舞いをさせるための近道は、'@option{winaltkeys}' オプションに "@var{yes}" を設定することである。しかしこうすると @key{Alt} を使用したマッピングは一切使えなくなる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Another way is to set 'winaltkeys' to "menu".  Menu shortcut keys are then
handled by windows, other ALT keys can be mapped.  This doesn't allow a
dependency on the current state though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

もう 1 つの方法は '@option{winaltkeys}' に "@var{menu}" を指定することである。マッピングされていない @key{ALT} キーだけが、メニューのショートカットとして Windows に解釈される。だが、現在の状態に依存することは許さない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
To get round this, the :simalt command allows Vim (when 'winaltkeys' is not
"yes") to fake a Windows-style Alt keypress.  You can use this to map Alt key
combinations (or anything else for that matter) to produce standard Windows
actions.  Here are some examples: >

	:map <M-f> :simalt f<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これを回避するために、('@option{winaltkeys}' が "@var{yes}" でない時に) @command{:simalt} コマンドで、Windows のスタイルで @key{Alt} キーを押すふりを、Vim にさせることができる。これを使って Windows 標準のアクションを興すための、@key{Alt} キーの組み合わせ (ほかのものでも) をマッピングすることができる。いくつか例を示そう:
@verbatim
:map <M-f> :simalt f<CR>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This makes Alt-F pop down the 'File' menu (with the stock Menu.vim) by
simulating the keystrokes Alt, F. >
	:map <M-Space> :simalt ~<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これで @kbd{Alt-F} を押すとキーストロークの Alt→F がシミュレートされ、'ファイル(F)' メニュー (Menu.vim で定義される) が表示される。
@verbatim
:map <M-Space> :simalt ~<CR>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
This maps Alt-Space to pop down the system menu for the Vim window.  Note that
~ is used by simalt to represent the <Space> character. >
	:map <C-n> :simalt ~n<CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このマッピングにより @kbd{Alt-Space} で Vim ウィンドウのシステムメニューが表示される。
@quotation
@strong{Note:} @*
'~' は simalt において文字 <Space> を表現するのに使われることに注意。
@end quotation
@verbatim
:map <C-n> :simalt ~n<CR>
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Maps Control-N to produce the keys Alt-Space followed by N.  This minimizes the
Vim window via the system menu.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Control-N に、Alt-Space に N を続けるマッピングを施す。これはシステムメニュー経由で Vim のウィンドウを最小化する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the key changes depending on the language you are using.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
これらのキーは使用している言語によって異なることがある。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*intellimouse-wheel-problems*
When using the Intellimouse mouse wheel causes Vim to stop accepting input, go
to:
	ControlPanel - Mouse - Wheel - UniversalScrolling - Exceptions
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{intellimouse-wheel-problems}
@cindex intellimouse-wheel-problems
インテリマウスのホイールを使用すると、Vim は入力を受け付けなくなることがある。次の場所へ行き:
@verbatim
コントロールパネル - マウス - ホイール - スクロール - 例外
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
And add gvim to the list of applications.  This problem only appears to happen
with the Intellimouse driver 2.2 and when "Universal Scrolling" is turned on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アプリケーションのリストに gvim を追加する。この問題は Intellimouse のドライババージョン 2.2 を使用し、"ユニバーサルスクロール" を有効にしている時にだけ起こる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
XPM support						*w32-xpm-support*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{w32-xpm-support}
@cindex w32-xpm-support
@unnumberedsubsec XPM サポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
GVim can be build on MS-Windows with support for XPM files.  |+xpm_w32|
See the Make_mvc.mak file for instructions, search for XPM.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Gvim は、MS-Windows で XPM ファイルのサポート付きでビルドすることができる。|@ref{+xpm_w32}| 詳細は @file{Make_mvc.mak} ファイルを見て、XPM で検索すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To try out if XPM support works do this: >
	:help
	:exe 'sign define vimxpm icon=' . $VIMRUNTIME . '\\vim16x16.xpm'
	:exe 'sign place 1 line=1 name=vimxpm file=' . expand('%:p')
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
XPM サポートが動作するか試すには、以下を行うこと:
@verbatim
:help
:exe 'sign define vimxpm icon=' . $VIMRUNTIME . '\\vim16x16.xpm'
:exe 'sign place 1 line=1 name=vimxpm file=' . expand('%:p')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:sw=4:ts=8:noet:ft=help:norl:
@end ifset
