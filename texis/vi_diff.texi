@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node vi_diff.txt, , , 目次
@unnumbered Vim と Vi の主な違い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*vi_diff.txt*   For Vim version 8.1.  Last change: 2019 Nov 12


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*vi_diff.txt*   For Vim バージョン 8.1.  Last change: 2019 Nov 12


                  VIMリファレンスマニュアル       by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Differences between Vim and Vi				*vi-differences*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vi-differences}
@cindex vi-differences
Vim と Vi の違い
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This file lists the differences between Vim and Vi/Ex and gives an overview of
what is in Vim that is not in Vi.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このファイルは Vim と Vi/Ex の違いを一覧表示し、Vi になくて Vim にあるものの概要を説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim is mostly POSIX 1003.2-1 compliant.  The only command known to be missing
is ":open".  There are probably a lot of small differences (either because Vim
is missing something or because Posix is beside the mark).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は大体において POSIX 1003.2-1 に従っています。知られている唯一の足りないコマンドは "@command{:open}" コマンドです。細かな違いはたぶんたくさんあります (Vim が間違っているか、Posix の指標がはずれているかのどちらか)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Simulated command			|simulated-command|
2. Missing options			|missing-options|
3. Limits				|limits|
4. The most interesting additions	|vim-additions|
5. Other vim features			|other-features|
6. Supported Vi features		|vi-features|
7. Command-line arguments		|cmdline-arguments|
8. POSIX compliance			|posix-compliance|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. シミュレートされているコマンド @tab |@ref{simulated-command}|
@item 2. なくなっているオプション @tab |@ref{missing-options}|
@item 3. 制限 @tab |@ref{limits}|
@item 4. もっとも興味深い機能追加 @tab |@ref{vim-additions}|
@item 5. その他の Vim の機能 @tab |@ref{other-features}|
@item 6. サポートされているViの機能 @tab |@ref{vi-features}|
@item 7.コマンドライン引数 @tab |@ref{cmdline-arguments}|
@item 8. POSIX 準拠 @tab |@ref{posix-compliance}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Simulated command					*simulated-command*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{simulated-command}
@cindex simulated-command
@section 1. シミュレートされているコマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This command is in Vi, but Vim only simulates it:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このコマンドは Vi にはありますが Vim ではシミュレートしているだけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:o* *:op* *:open*
:[range]o[pen]			Works like |:visual|: end Ex mode.
				{Vi: start editing in open mode}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{:o}
@anchor{:op}
@anchor{:open}
@pindex :o
@pindex :op
@pindex :open
@item :[range]o[pen]
|@ref{:visual}| と同様。Ex モードを終了します。

@{Vi: オープンモードで編集を開始する@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:[range]o[pen] /pattern/	As above, additionally move the cursor to the
				column where "pattern" matches in the cursor
				line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :[range]o[pen] /pattern/
上と同様で、さらに現在行の中で "pattern" にマッチする桁へカーソルを移動します。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim does not support open mode, since it's not really useful.  For those
situations where ":open" would start open mode Vim will leave Ex mode, which
allows executing the same commands, but updates the whole screen instead of
only one line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim にオープンモードはありません。まったく便利ではないからです。Vi なら ":open" でオープンモードを開始しますが、Vim では Ex モードを抜けます。その結果、Vi の場合と同じコマンドが実行できるようになります。ただ、1 行だけを再描画するのでなく、画面全体を再描画する点が違います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Missing options					*missing-options*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{missing-options}
@cindex missing-options
@section 2. なくなっているオプション
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These options are in the Unix Vi, but not in Vim.  If you try to set one of
them you won't get an error message, but the value is not used and cannot be
printed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのオプションは Vi にはあって、Vim にはないものです。これらのオプションをセットしてもエラーメッセージは出ませんが、設定した値は使われませんし表示もされません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
autoprint (ap)		boolean	(default on)		*'autoprint'* *'ap'*
beautify (bf)		boolean	(default off)		*'beautify'* *'bf'*
flash (fl)		boolean	(default ??)		*'flash'* *'fl'*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@anchor{'autoprint'}
@anchor{'ap'}
@vindex 'autoprint'
@vindex 'ap'
@item autoprint (ap) @tab 二者択一 (初期値 オン)
@anchor{'beautify'}
@anchor{'bf'}
@vindex 'beautify'
@vindex 'bf'
@item beautify (bf) @tab 二者択一 (初期値 オフ)
@anchor{'flash'}
@anchor{'fl'}
@vindex 'flash'
@vindex 'fl'
@item flash (fl) @tab 二者択一 (初期値 ??)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
graphic (gr)		boolean	(default off)		*'graphic'* *'gr'*
hardtabs (ht)		number	(default 8)		*'hardtabs'* *'ht'*
	number of spaces that a <Tab> moves on the display
mesg			boolean	(default on)		*'mesg'*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'graphic'}
@anchor{'gr'}
@vindex 'graphic'
@vindex 'gr'
@item graphic (gr) @tab 二者択一 (初期値 オフ)
@anchor{'hardtabs'}
@anchor{'ht'}
@vindex 'hardtabs'
@vindex 'ht'
@item hardtabs (ht) @tab 数値 (初期値 8) @*
ディスプレイ上で 1 つの <Tab> が移動するスペースの数
@anchor{'mesg'}
@vindex 'mesg'
@item mesg @tab 二者択一 (初期値 オン)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
novice			boolean	(default off)		*'novice'*
open			boolean	(default on)		*'open'*
optimize (op)		boolean	(default off)		*'optimize'* *'op'*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'novice'}
@vindex 'novice'
@item novice @tab 二者択一 (初期値 オフ)
@anchor{'open'}
@vindex 'open'
@item open @tab 二者択一 (初期値 オン)
@anchor{'optimize'}
@anchor{'op'}
@vindex 'optimize'
@vindex 'op'
@item optimize (op) @tab 二者択一 (初期値 オフ)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
redraw			boolean	(default off)		*'redraw'*
slowopen (slow)		boolean	(default off)		*'slowopen'* *'slow'*
sourceany		boolean	(default off)		*'sourceany'*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'redraw'}
@vindex 'redraw'
@item redraw @tab 二者択一 (初期値 オフ)
@anchor{'slowopen'}
@anchor{'slow'}
@vindex 'slowopen'
@vindex 'slow'
@item slowopen (slow) @tab 二者択一 (初期値 オフ)
@anchor{'sourceany'}
@vindex 'sourceany'
@item sourceany @tab 二者択一 (初期値 オフ)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
w300			number	(default 23)		*'w300'*
w1200			number	(default 23)		*'w1200'*
w9600			number	(default 23)		*'w9600'*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{'w300'}
@vindex 'w300'
@item w300 @tab 数値 (初期値 23)
@anchor{'w1200'}
@vindex 'w1200'
@item w1200 @tab 数値 (初期値 23)
@anchor{'w9600'}
@vindex 'w9600'
@item w9600 @tab 数値 (初期値 23)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vi did not allow for changing the termcap entries, you would have to exit Vi,
edit the termcap entry and try again.  Vim has the |terminal-options|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi は termcap エントリの変更を許可しませんでした。Vi を終了し、termcap エントリを編集して再試行する必要があります。Vim には |@ref{terminal-options}| があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Limits						*limits*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{limits}
@cindex limits
@section 3. 制限
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim has only a few limits for the files that can be edited {Vi: can not handle
<Nul> characters and characters above 128, has limited line length, many other
limits}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim で編集できるファイルの制限はかなり少ないです。@{Vi: <Nul> 文字を扱えず、また 128 をこえる文字を扱えません。行の長さにも制限がありますし、他にも多くの制限があります。@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E340*
Maximum line length	   On machines with 16-bit ints (Amiga and MS-DOS real
			   mode): 32767, otherwise 2147483647 characters.
			   Longer lines are split.
Maximum number of lines	   2147483647 lines.
Maximum file size	   2147483647 bytes (2 Gbyte) when a long integer is
			   32 bits.  Much more for 64 bit longs.  Also limited
			   by available disk space for the |swap-file|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@anchor{E340}
@erindex E340
@item 行の最大の長さ @tab 16ビット int を使っているマシン (Amiga と MS-DOS のリアルモード) は 32767 文字、それ以外は 2147483647 文字。それより長い行は分割されます。
@item 最大行数 @tab 2147483647 行
@item 最大のファイルのサイズ @tab long integer が 32 ビットである場合 2147483647 バイト (2 ギガバイト) です。64 ビットの長さであればもっと多くなります。またスワップファイル |@ref{swap-file}| の為のディスクの空き容量にも制限されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E75*
Length of a file path	   Unix and Win32: 1024 characters, otherwise 256
			   characters (or as much as the system supports).
Length of an expanded string option
			   Unix and Win32: 1024 characters, otherwise 256
			   characters
Maximum display width	   Unix and Win32: 1024 characters, otherwise 255
			   characters
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E75}
@erindex E75
@item ファイルのパスの長さ @tab Unix と Win32: 1024 文字、それ以外は 256 文字 (もしくはシステムがサポートしている長さ分だけ)
@item 展開されたオプションの文字列の長さ @tab Unix と Win32: 1024 文字、それ以外は 256 文字
@item 表示される最大の長さ @tab Unix と Win32: 1024 文字、それ以外は 255 文字
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Maximum lhs of a mapping   50 characters.
Number of different highlighting types: over 30000
Range of a Number variable:  -2147483648 to 2147483647 (might be more on 64
			   bit systems)
Maximum length of a line in a tags file: 512 bytes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item マッピングでの lhs の最大の長さ @tab 50 文字
@item 異なるハイライトの種類の数: @tab 30000以上
@item 数値変数の範囲: @tab -2147483648 から 2147483647 (64 ビットシステムではもっと大きい場合があります)
@item タグファイルにおける一行の最大の長さ: @tab 512 バイト
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Information for undo and text in registers is kept in memory, thus when making
(big) changes the amount of (virtual) memory available limits the number of
undo levels and the text that can be kept in registers.  Other things are also
kept in memory:  Command-line history, error messages for Quickfix mode, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アンドゥとレジスタの中のテキストに関する情報はメモリに保持されます。ですので、使用可能な (仮想) メモリの量を超えて (大きな) 変更を行っている場合はアンドゥレベルの数とレジスタに保持されうるテキストは制限されることになります。コマンドライン履歴や quickfix モードでのエラーメッセージなどの他のものもまたメモリに保持されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Memory usage limits
-------------------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec メモリの使い方を制限する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The option 'maxmem' ('mm') is used to set the maximum memory used for one
buffer (in kilobytes).  'maxmemtot' is used to set the maximum memory used for
all buffers (in kilobytes).  The defaults depend on the system used.  For the
Amiga and MS-DOS, 'maxmemtot' is set depending on the amount of memory
available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{maxmem}' ('@option{mm}') オプションは 1 つのバッファに使われるメモリの最大の量 (キロバイトで) を決めるのに使います。'@option{maxmemtot}' はすべてのバッファで使われるメモリの最大の量 (キロバイトで) を決めるのに使います。Amiga と MS-DOS では '@option{maxmemtot}' は使えるメモリの量に依存して設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
These are not hard limits, but tell Vim when to move text into a swap file.
If you don't like Vim to swap to a file, set 'maxmem' and 'maxmemtot' to a
very large value.  The swap file will then only be used for recovery.  If you
don't want a swap file at all, set 'updatecount' to 0, or use the "-n"
argument when starting Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

これらは厳格な制限ではなく、いつテキストをスワップファイルに移動するかの目安です。もし Vim がファイルにスワップを行うのが嫌であれば '@option{maxmem}' と '@option{maxmemtot}' の値をかなり大きい値に設定しておきます。そうするとスワップファイルはリカバリーの時にのみ使われるようになります。もしどんなスワップファイルも欲しくなければ '@option{updatecount}' を 0 に設定するか、Vim を起動するときに "-n" 引数をつけます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. The most interesting additions			*vim-additions*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-additions}
@cindex vim-additions
@section 4. もっとも興味深い機能追加
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vi compatibility.					|'compatible'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Vi との互換性
|@ref{'compatible'}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Although Vim is 99% Vi compatible, some things in Vi can be
	considered to be a bug, or at least need improvement.  But still, Vim
	starts in a mode which behaves like the "real" Vi as much as possible.
	To make Vim behave a little bit better, try resetting the 'compatible'
	option:
		:set nocompatible
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim には Vi の 99% の機能が含まれますが、Vi のうちのいくつかはバグか少なくとも改良が必要だと考えられるものがあります。しかしそれでもなお Vim は可能な限り「本当の」 Vi のように振る舞うモードで起動します。Vim にもう少しよい動作をして欲しい場合は '@option{compatible}' オプションを解除してみてください。
@verbatim
:set nocompatible
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Or start Vim with the "-N" argument:
		vim -N
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それか Vim を "-N" 引数つきで起動してください:
@verbatim
vim -N
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim starts with 'nocompatible' automatically if you have a .vimrc
	file.  See |startup|.
	The 'cpoptions' option can be used to set Vi compatibility on/off for
	a number of specific items.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もし @file{.vimrc} ファイルがあれば '@option{nocompatible}' つきで Vim が起動します。|@ref{startup}| も見てください。

'@option{cpoptions}' オプションはたくさんの特定のアイテムに関する Vi と同一の動作をするかどうかのオン/オフを切り替えることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Support for different systems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 様々なシステムのサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can be used on:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は次のシステムで利用できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- All Unix systems (it works on all systems it was tested on, although
	  the GUI and Perl interface may not work everywhere).
	- Amiga (500, 1000, 1200, 2000, 3000, 4000, ...).
	- MS-DOS in real-mode (no additional drivers required).
	- In protected mode on Windows 3.1 and MS-DOS (DPMI driver required).
	- Windows 95 and Windows NT, with support for long file names.
	- OS/2 (needs emx.dll)
	- Atari MiNT
	- VMS
	- BeOS
	- Macintosh
	- Risc OS
	- IBM OS/390
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item すべての Unix システム (テストされたすべてのシステムで動作しますが GUI と Perl インターフェイスはどこでも動作するわけではないかもしれません)。
@item Amiga (500, 1000, 1200, 2000, 3000, 4000, ...).
@item リアルモードの MS-DOS (他のドライバは必要ありません)
@item プロテクトモードの Windows 3.1 と MS-DOS (DPMI ドライバが必要です)
@item Windows 95 と Windows NT、ロングファイル名をサポート
@item OS/2 (emx.dll が必要です)
@item Atari MiNT
@item VMS
@item BeOS
@item Macintosh
@item Risc OS
@item IBM OS/390
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that on some systems features need to be disabled to reduce
	resource usage, esp. on MS-DOS.  For some outdated systems you need to
	use an older Vim version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
いくつかのシステムではリソース使用量を削減するために機能を無効にする必要があります (特に MS-DOS)。いくつかの時代後れのシステムでは以前のバージョンのVimを使わねばなりません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Multi level persistent undo.					|undo|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 多段永続化アンドゥ
|@ref{undo}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	'u' goes backward in time, 'CTRL-R' goes forward again.  Set option
	'undolevels' to the number of changes to be remembered (default 1000).
	Set 'undolevels' to 0 for a Vi-compatible one level undo.  Set it to
	-1 for no undo at all.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@kbd{u}' は時をさかのぼり、'@kbd{CTRL-R}' は再び進めます。変更を覚えておく回数を '@option{undolevels}' オプションでセットしてください (初期値 1000)。'@option{undolevels}' を 0 にセットすると Vi 互換のアンドゥになります。-1 にセットするとアンドゥできないようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When all changes in a buffer have been undone, the buffer is not
	considered changed anymore.  You can exit it with :q, without <!>.
	When undoing a few changes and then making a new change Vim will
	create a branch in the undo tree.  This means you can go back to any
	state of the text, there is no risk of a change causing text to be
	lost forever. |undo-tree|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるバッファに対する変更をすべてアンドゥした場合は、バッファは何も変更されていないと見なされます。つまり <!> なしで :q で終了させることができます。

変更をアンドゥしてその後新しい変更をすると、Vim のアンドゥツリーにブランチが作られます。これにより、テキストを永遠に失うという危険性なしにテキストをどの状態にでも戻すことができます。|@ref{undo-tree}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The undo information is stored in a file when the 'undofile' option is
	set.  This means you can exit Vim, start Vim on a previously edited
	file and undo changes that were made before exiting Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{undofile}' オプションがセットされた場合には、アンドゥ情報がファイルに保存されます。これはつまり、Vim を一旦終了し再起動して同じファイルの編集をすれば、再起動前に行っていた変更もアンドゥできる、ということです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Graphical User Interface (GUI).				|gui|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec グラフィカルユーザーインターフェイス (GUI)
|@ref{gui}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Included support for GUI: menu's, mouse, scrollbars, etc.  You can
	define your own menus.  Better support for CTRL/SHIFT/ALT keys in
	combination with special keys and mouse.  Supported for various
	platforms, such as X11 (with Motif and Athena interfaces), GTK, Win32
	(Windows 95 and later), BeOS, Amiga and Macintosh.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI (メニュー、マウス、スクロールバー、などなど) のサポートが含められました。独自のメニューを定義することもできます。CTRL/SHIFT/ALT とキーの組み合わではなく特殊なキーとマウスの組み合わせというよりよい方法がサポートされます。さまざまなプラットフォーム、X11 (Motif と Athena インターフェイス)、Win32 (Windows95 か、より最新のもの), BeOS, Amiga, Macintosh でサポートされています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Multiple windows and buffers.				|windows.txt|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 複数のウィンドウとバッファ
|@ref{windows.txt}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can split the screen into several windows, each editing a
	different buffer or the same buffer at a different location.  Buffers
	can still be loaded (and changed) but not displayed in a window.  This
	is called a hidden buffer.  Many commands and options have been added
	for this facility.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim ではスクリーンをいくつかのウィンドウに分けてそれぞれの中で異なるバッファを編集したり同じバッファを別の場所で編集したりできます。バッファはウィンドウに表示されていなくともロードして (変更を加えて) おくこともできます。これは隠れたバッファと呼ばれます。この機能のために多くのコマンドやオプションが追加されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can also use multiple tab pages, each with one or more windows.  A
	line with tab labels can be used to quickly switch between these pages.
	|tab-page|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はタブページを使うこともできます。各タブページは 1 個以上のウィンドウを含みます。タブラベルを表示する行を使ってこれらのタブを素早く切替えることができます。|@ref{tab-page}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Terminal window.					|:terminal|
	Vim can create a window in which a terminal emulator runs.  This can
	be used to execute an arbitrary command, a shell or a debugger.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 端末ウィンドウ
|@ref{:terminal}| @*
Vim は端末エミュレータが動くウィンドウを作ることができます。これは、任意のコマンド、シェル、またはデバッガを実行するために使用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Syntax highlighting.					|:syntax|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 構文ハイライト
|@ref{:syntax}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can highlight keywords, patterns and other things.  This is
	defined by a number of |:syntax| commands, and can be made to
	highlight most languages and file types.  A number of files are
	included for highlighting the most common languages, like C, C++,
	Java, Pascal, Makefiles, shell scripts, etc.  The colors used for
	highlighting can be defined for ordinary terminals, color terminals
	and the GUI with the |:highlight| command.  A convenient way to do
	this is using a |:colorscheme| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim ではキーワードやパターンやその他のものをハイライトすることができます。これは |@ref{:syntax}| コマンドで定義し、ほとんどの言語やファイルのタイプに対してハイライトをつけることができます。C, C++, Java, Pascal, Makefiles, シェルスクリプトなどなどの、多くの一般的な言語のうちのほとんどのためのハイライト定義ファイルはすでに含まれています。ハイライトに使われる色は普通の端末で定義することができ、色端末と GUI では |@ref{:highlight}| コマンドで定義できます。色を変更するのに便利な方法は |@ref{:colorscheme}| コマンドを使うことです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The highlighted text can be exported as HTML. |convert-to-HTML|
	Other items that can be highlighted are matches with the search string
	|'hlsearch'|, matching parens |matchparen| and the cursor line and
	column |'cursorline'| |'cursorcolumn'|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ハイライトされたテキストを HTML にエクスポートすることができます |@ref{convert-to-HTML}|。ハイライトできる他の要素は、検索文字列のマッチ部分 |@ref{'hlsearch'}|、対応する括弧 |@ref{matchparen}|、カーソル行とカーソル桁 |@ref{'cursorline'}| |@ref{'cursorcolumn'}| です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Text properties						|textprop.txt|
	Vim supports highlighting text by a plugin.  Property types can be
	specified with |prop_type_add()| and properties can be placed with
	|prop_add()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec テキストプロパティ
|@ref{textprop.txt}| @*
Vim はプラグインによるテキストの強調表示をサポートしています。プロパティタイプは |@ref{prop_type_add()}| で指定でき、プロパティは |@ref{prop_add()}| で配置できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Spell checking.						|spell|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec スペルチェック
|@ref{spell}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'spell' option is set Vim will highlight spelling mistakes.
	About 50 languages are currently supported, selected with the
	'spelllang' option.  In source code only comments and strings are
	checked for spelling.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{spell}' がセットされていると、スペリングの間違いがハイライトされます。現在のところ約 50 の言語がサポートされています。言語はオプション '@option{spelllang}' で選択できます。ソースコード中ではコメントと文字列だけがスペルチェックされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Folding.						|folding|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 折畳み
|@ref{folding}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	A range of lines can be shown as one "folded" line.  This allows
	overviewing a file and moving blocks of text around quickly.
	Folds can be created manually, from the syntax of the file, by indent,
	etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複数行の範囲を一行の「折畳まれた」行として表示することができます。これによりファイルを一望することができ、テキストブロック間を素早く移動することが可能になります。折畳みの設定は手動、ファイルのシンタックス、インデント等々で設定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Diff mode.						|diff|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 差分モード
|@ref{diff}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can show two versions of a file with the differences highlighted.
	Parts of the text that are equal are folded away.  Commands can be
	used to move text from one version to the other.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの 2 つのバージョンの差分をハイライトして表示することができます。テキストの一致する部分は折り畳みされます。コマンドを使って片方のバージョンのテキストをもう一方へ移動することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Plugins.						|add-plugin|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec プラグイン
|@ref{add-plugin}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The functionality can be extended by dropping a plugin file in the
	right directory.  That's an easy way to start using Vim scripts
	written by others.  Plugins can be for all kind of files, or
	specifically for a filetype.
	Packages make this even easier. |packages|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインファイルを正しいディレクトリにただ置くだけで機能追加ができます。これは他人が書いた Vim script を使い始める簡単な方法です。プラグインは全ての種類のファイルについて設定することもできますし、ある 1 つのファイルタイプについて設定することも可能です。パッケージ機能はこれをさらに簡単にします。|@ref{packages}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Asynchronous communication and timers.			|channel| |job| |timer|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 非同期通信とタイマー
|@ref{channel}| |@ref{job}| |@ref{timer}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can exchange messages with other processes in the background.
	This makes it possible to have servers do work and send back the
	results to Vim. |channel|
	Vim can start a job, communicate with it and stop it. |job|
	Timers can fire once or repeatedly and invoke a function to do any
	work. |timer|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はバックグラウンドで他のプロセスとメッセージを交換できます。これにより、何か仕事をさせ結果を Vim に送り返すようなサーバーを実現可能にします。|@ref{channel}|

Vim はジョブを開始させ、それと通信し、停止させられます。|@ref{job}| タイマーは、何かしらの仕事をする関数を、一定時間経過後に1回だけ、もしくは繰り返し実行することができます。|@ref{timer}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Repeat a series of commands.				|q|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 一連のコマンドを繰り返す
|@ref{q}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"q{c}" starts recording typed characters into named register {c}.
	A subsequent "q" stops recording.  The register can then be executed
	with the "@{c}" command.  This is very useful to repeat a complex
	action.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"q@{c@}" で名前付きレジスタ @{c@} にタイプする文字の記録を始めます。後に続く "q" は記録を終了します。そしてレジスタにあるコマンドは "@@@{c@}" コマンドで実行することができます。これは複雑な動作を繰り返すときに非常に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Flexible insert mode.					|ins-special-special|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 柔軟な挿入モード
|@ref{ins-special-special}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The arrow keys can be used in insert mode to move around in the file.
	This breaks the insert in two parts as far as undo and redo is
	concerned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを動き回るのに矢印キーを挿入モードで使うことができます。このことはアンドゥとリドゥを考えると挿入モードが 2 つに分かれることになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	CTRL-O can be used to execute a single Normal mode command.  This is
	almost the same as hitting <Esc>, typing the command and doing |a|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-O} は 1 つのノーマルモードのコマンドを実行するのに使うことができます。これはつまり @key{<Esc>} キーを打ってコマンドを打ってからそれから |@ref{a}| を打ったのとほとんど同じことです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Visual mode.						|Visual-mode|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ビジュアルモード
|@ref{Visual-mode}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Visual mode can be used to first highlight a piece of text and then
	give a command to do something with it.  This is an (easy to use)
	alternative to first giving the operator and then moving to the end of
	the text to be operated upon.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビジュアルモードは、初めにいくつかのテキストを選択してからそれに対してコマンドを実行するのに使うことができます。これは初めにオペレータコマンドを与えてからそのオペレータを施すテキストの最後まで移動するコマンドを実行するもう 1 つの (簡単な) 方法です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|v| and |V| are used to start Visual mode.  |v| works on characters
	and |V| on lines.  Move the cursor to extend the Visual area.  It is
	shown highlighted on the screen.  By typing "o" the other end of the
	Visual area can be moved.  The Visual area can be affected by an
	operator:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{v}| と |@ref{V}| はビジュアルモードを開始します。|@ref{v}| は文字ごとに選択し |@ref{V}| は行ごとに選択します。カーソルを動かしてビジュアル部分を広げ、その部分はスクリーン上でハイライトされます。"o" を打つことでビジュアルなテキスト部分の反対側の端が動かされることになります。ビジュアルなテキスト部分には次のオペレータを施すことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		d	delete
		c	change
		y	yank
		> or <	insert or delete indent
		!	filter through external program
		=	filter through indent
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item d @tab 削除
@item c @tab 変更
@item y @tab ヤンク
@item > または < @tab インデントを挿入/削除
@item ! @tab 外部プログラムを使ってフィルターを施す
@item = @tab インデントを通してフィルターを施す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		:	start |:| command for the Visual lines.
		gq	format text to 'textwidth' columns
		J	join lines
		~	swap case
		u	make lowercase
		U	make uppercase
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item : @tab ビジュアルな行に対して |@ref{:}| コマンドを始める
@item gq @tab '@option{textwidth}' 桁位置にテキストを整形する
@item J @tab 行を連結する
@item ~ @tab 大文字小文字を入れ換える
@item u @tab 小文字にする
@item U @tab 大文字にする
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	{Vi has no Visual mode, the name "visual" is used for Normal mode, to
	distinguish it from Ex mode}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi はビジュアルモードを持っていません、"visual" という名前はノーマルモードで Ex モードと区別するために使われています@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Block operators.					|visual-block|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ブロックオペレータ
|@ref{visual-block}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	With Visual mode a rectangular block of text can be selected.  Start
	Visual mode with CTRL-V.  The block can be deleted ("d"), yanked ("y")
	or its case can be changed ("~", "u" and "U").  A deleted or yanked
	block can be put into the text with the "p" and "P" commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
長方形のテキストがビジュアルモードを使って選択することができます。@kbd{CTRL-V} でビジュアルモードを開始します。選択されたブロックは "d" で削除したり 'y' でヤンクしたり大文字小文字を "~"、"u"、"U" で変えることができます。削除もしくはヤンクされたブロックは "p" か "P" コマンドでテキストに挿入することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Help system.						|:help|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ヘルプシステム
|@ref{:help}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Help is displayed in a window.  The usual commands can be used to
	move around, search for a string, etc.  Tags can be used to jump
	around in the help files, just like hypertext links.  The |:help|
	command takes an argument to quickly jump to the info on a subject.
	<F1> is the quick access to the help system.  The name of the help
	index file can be set with the 'helpfile' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプはウィンドウの中に表示されます。検索したりするテキストの中を移動する普通のコマンドはそのまま使えます。タグも複数のヘルプファイルの間を移動するのに使え、ハイパーテキストのリンクをクリックするような感覚です。|@ref{:help}| コマンドは引数を取りますので検索したい情報に素早くジャンプできます。@key{<F1>} を押して素早くヘルプシステムにアクセスすることもできます。ヘルプファイルのインデックスファイルは '@option{helpfile}' オプションで設定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Command-line editing and history.			|cmdline-editing|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec コマンドライン編集/履歴
|@ref{cmdline-editing}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	You can insert or delete at any place in the command-line using the
	cursor keys.  The right/left cursor keys can be used to move
	forward/backward one character.  The shifted right/left cursor keys
	can be used to move forward/backward one word.  CTRL-B/CTRL-E can be
	used to go to the begin/end of the command-line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルキーを使うことでコマンドラインのどの場所からでも挿入を行ったり削除を行ったりすることができます。右/左矢印キーは前/後に 1 つの文字移動するのに使うことができ、@key{Shift} キーを押しながら右/左矢印キーを押すと前/後に 1 つの単語移動することができます。@kbd{CTRL-B}/@kbd{CTRL-E} はコマンドラインの初め/終わりに移動するのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	{Vi: can only alter the last character in the line}
	{Vi: when hitting <Esc> the command-line is executed.  This is
	unexpected for most people; therefore it was changed in Vim.  But when
	the <Esc> is part of a mapping, the command-line is executed.  If you
	want the Vi behaviour also when typing <Esc>, use ":cmap ^V<Esc>
	^V^M"}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vi: 行の最後の文字だけを変更できます@}

@{Vi: <Esc> を押すとコマンドラインが実行されます。これはほとんどの人にとって予想外のことです。それゆえ Vim では変更されました。しかし、<Esc> がマッピングの一部であるときは、コマンドラインが実行されます。<Esc> を打ったときにも Vi の振る舞いをしたいなら、"@command{:cmap ^V<Esc> ^V^M}" を使ってください。@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							|cmdline-history|
	The command-lines are remembered.  The up/down cursor keys can be used
	to recall previous command-lines.  The 'history' option can be set to
	the number of lines that will be remembered.  There is a separate
	history for commands and for search patterns.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

|@ref{cmdline-history}| @*
コマンドラインは記録されます。上/下矢印キーを使うことで前のコマンドラインを呼び出すことができます。'@option{history}' オプションで覚えておく行数を設定することができます。検索パターンのコマンド履歴はまた別に分かれています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Command-line completion.				|cmdline-completion|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec コマンドライン補完
|@ref{cmdline-completion}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	While entering a command-line (on the bottom line of the screen)
	<Tab> can be typed to complete
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドライン (スクリーンの一番下で) でなんらかの作業をしているときに @key{<Tab>} キーを押すと補完を行うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	   what		example		~
	- command	:e<Tab>
	- tag		:ta scr<Tab>
	- option	:set sc<Tab>
	- option value  :set hf=<Tab>
	- file name	:e ve<Tab>
	- etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@headitem what @tab example
@item コマンド @tab :e<Tab>
@item タグ @tab :ta scr<Tab>
@item オプション @tab :set sc<Tab>
@item オプションの値 @tab :set hf=<Tab>
@item ファイル名 @tab :e ve<Tab>
@item その他 @tab
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If there are multiple matches, CTRL-N (next) and CTRL-P (previous)
	will walk through the matches.  <Tab> works like CTRL-N, but wraps
	around to the first match.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複数マッチしたものがある場合は、@kbd{CTRL-N} (次) と @kbd{CTRL-P} (前) でマッチしたものの間を移動することができます。@key{<Tab>} は @kbd{CTRL-N} のように振る舞いますが、マッチしたものの最後で押すと最初にマッチしたものに戻ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The 'wildchar' option can be set to the character for command-line
	completion, <Tab> is the default.  CTRL-D can be typed after an
	(incomplete) wildcard; all matches will be listed.  CTRL-A will insert
	all matches.  CTRL-L will insert the longest common part of the
	matches.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{wildchar}' オプションでコマンドライン補完に利用する文字を設定できます。デフォルトは <Tab> です。複数の補完候補がある不完全な状態で @kbd{CTRL-D} をタイプすることで、全ての補完候補を表示することができます。@kbd{CTRL-A} ではすべての候補を入力することができます。@kbd{CTRL-L} では候補内で、一致する最長部分までを入力します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Insert-mode completion.					|ins-completion|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 挿入モードでの補完
|@ref{ins-completion}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	In Insert mode the CTRL-N and CTRL-P keys can be used to complete a
	word that appears elsewhere.	|i_CTRL-N|
	With CTRL-X another mode is entered, through which completion can be
	done for:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
挿入モードで @kbd{CTRL-N} と @kbd{CTRL-P} を使うことでどこかに現れる単語を補完することができます。|@ref{i_CTRL-N}|

@kbd{CTRL-X} を使うことでもう 1 つのモードに入ることができます。どの補完を行うことができるかというと:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|i_CTRL-X_CTRL-F|	file names
	|i_CTRL-X_CTRL-K|	words from 'dictionary' files
	|i_CTRL-X_CTRL-T|	words from 'thesaurus' files
	|i_CTRL-X_CTRL-I|	words from included files
	|i_CTRL-X_CTRL-L|	whole lines
	|i_CTRL-X_CTRL-]|	words from the tags file
	|i_CTRL-X_CTRL-D|	definitions or macros
	|i_CTRL-X_CTRL-O|	Omni completion: clever completion
				specifically for a file type
	etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{i_CTRL-X_CTRL-F}| @tab ファイル名
@item |@ref{i_CTRL-X_CTRL-K}| @tab 辞書 '@option{dictionary}' ファイルにある単語
@item |@ref{i_CTRL-X_CTRL-T}| @tab 類語辞典 '@option{thesaurus}' ファイルにある単語
@item |@ref{i_CTRL-X_CTRL-I}| @tab インクルードされるファイルにある単語
@item |@ref{i_CTRL-X_CTRL-L}| @tab すべての行
@item |@ref{i_CTRL-X_CTRL-]}| @tab タグファイルにある単語
@item |@ref{i_CTRL-X_CTRL-D}| @tab マクロ定義
@item |@ref{i_CTRL-X_CTRL-O}| @tab オムニ補完: ファイルタイプなどに特化した賢い補完
@item など @tab
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Long line support.					|'wrap'| |'linebreak'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 長い行のサポート
|@ref{'wrap'}| |@ref{'linebreak'}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If the 'wrap' option is off, long lines will not wrap and only part
	of them will be shown.  When the cursor is moved to a part that is not
	shown, the screen will scroll horizontally.  The minimum number of
	columns to scroll can be set with the 'sidescroll' option.  The |zh|
	and |zl| commands can be used to scroll sideways.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{wrap}' オプションがオフであれば、長い行は折り返されずに行の一部分だけが表示されます。カーソルが表示されていない部分に移動するとスクリーンも横にスクロールします。横にスクロールする桁数の最小の値を '@option{sidescroll}' オプションで設定することができます。|@ref{zh}| と |@ref{zl}| コマンドは横スクロールに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Alternatively, long lines are broken in between words when the
	'linebreak' option is set.  This allows editing a single-line
	paragraph conveniently (e.g. when the text is later read into a DTP
	program).  Move the cursor up/down with the |gk| and |gj| commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
あるいは、'@option{linebreak}' オプションがセットされている場合は長い行は単語の間で切られます。こうすることで段落を 1 つの行にして編集することが容易になります (例: 後で編集中のテキストを DTP プログラムに持っていく場合)。カーソルを上下するには |@ref{gk}| と |@ref{gj}| コマンドを使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Text formatting.					|formatting|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec テキストの整形
|@ref{formatting}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The 'textwidth' option can be used to automatically limit the line
	length.  This supplements the 'wrapmargin' option of Vi, which was not
	very useful.  The |gq| operator can be used to format a piece of text
	(for example, |gqap| formats the current paragraph).  Commands for
	text alignment: |:center|, |:left| and |:right|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{textwidth}' オプションを設定することで行の長さを自動的に制限することができます。このオプションはあまり便利ではなかった Vi での '@option{wrapmargin}' オプションを補助するものです。|@ref{gq}| オペレータはテキストの一部分を整形するのに使うことができます (例えば、|@ref{gqap}| は現在の段落を整形します)。テキストの位置に関するコマンドは |@ref{:center}|, |@ref{:left}|, |@ref{:right}| です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Extended search patterns.				|pattern|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 拡張正規表現
|@ref{pattern}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	There are many extra items to match various text items.  Examples:
	A "\n" can be used in a search pattern to match a line break.
	"x\{2,4}" matches "x" 2 to 4 times.
	"\s" matches a white space character.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
様々なテキスト要素にマッチさせるための、多くの拡張正規表現の要素があります。たとえば "\n" は改行にマッチします。"x\@{2,4@}" は、"x" が 2 個から 4 個続くテキストにマッチします。"\s" は空白文字にマッチします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Directory, remote and archive browsing.			|netrw|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec ディレクトリ、リモート、アーカイブの閲覧
|@ref{netrw}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can browse the file system.  Simply edit a directory.  Move around
	in the list with the usual commands and press <Enter> to go to the
	directory or file under the cursor.
	This also works for remote files over ftp, http, ssh, etc.
	Zip and tar archives can also be browsed. |tar| |zip|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はファイルシステムをブラウズすることができます。単にディレクトリを編集します @{訳注: :e @{directory@} とする@}。そのリスト中を普通のコマンドを使って移動し、@key{<Enter>} を押すとカーソル下のディレクトリやファイルに移ります。

これは ftp, http, ssh など越しのリモートファイルにも機能します。zip と tar のアーカイブもブラウズすることができます。|@ref{tar}| |@ref{zip}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Edit-compile-edit speedup.				|quickfix|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 編集-コンパイル-編集 をスピードアップする
|@ref{quickfix}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The |:make| command can be used to run the compilation and jump to the
	first error.  A file with compiler error messages is interpreted.  Vim
	jumps to the first error.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:make}| コマンドを使うことでコンパイルしてから初めのエラーにジャンプすることができます。コンパイラのエラーメッセージが書かれたファイルを解析できます。最初のエラーにジャンプします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Each line in the error file is scanned for the name of a file, line
	number and error message.  The 'errorformat' option can be set to a
	list of scanf-like strings to handle output from many compilers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
エラーファイルのそれぞれの行はファイルの名前、行番号、エラーメッセージという風に調べられます。'@option{errorformat}' オプションは多くのコンパイラからの出力を扱うことができるように scanf のような形式の文字列のリストを指定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The |:cn| command can be used to jump to the next error.
	|:cl| lists all the error messages.  Other commands are available.
	The 'makeef' option has the name of the file with error messages.
	The 'makeprg' option contains the name of the program to be executed
	with the |:make| command.
	The 'shellpipe' option contains the string to be used to put the
	output of the compiler into the errorfile.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{:cn}| コマンドは次のエラーにジャンプするのに使うことができます。|@ref{:cl}| コマンドはすべてのエラーメッセージをリストします。

他のコマンドも使うことができます。'@option{makeef}' オプションはエラーメッセージが含まれるファイルの名前を指定します。'@option{makeprg}' オプションは |@ref{:make}| コマンドで実行するプログラムの名前を指定します。'@option{shellpipe}' オプションはコンパイラからの出力をエラーファイルに書き込むときに使われる文字列を指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Finding matches in files.				|:vimgrep|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 複数のファイルから検索する
|@ref{:vimgrep}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can search for a pattern in multiple files.  This uses the
	advanced Vim regexp pattern, works on all systems and also works to
	search in compressed files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
複数のファイルからパターンを検索することができます。この機能は Vim の高度な正規表現パターンを使い、すべてのシステム上で機能し、圧縮されたファイルも検索できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Improved indenting for programs.			|'cindent'|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec C プログラムのインデントを改善
|@ref{'cindent'}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'cindent' option is on the indent of each line is
	automatically adjusted.  C syntax is mostly recognized.  The indent
	for various styles can be set with 'cinoptions'.  The keys to trigger
	indenting can be set with 'cinkeys'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{cindent}' オプションがオンの時はそれぞれのインデントは自動的に調整されます。C の文法はだいたい解釈されますし、さまざまなスタイルでのインデントは '@option{cinoptions}' で設定することができます。インデントをするきっかけとなるキーワードは '@option{cinkeys}' で指定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Comments can be automatically formatted.  The 'comments' option can be
	set to the characters that start and end a comment.  This works best
	for C code, but also works for e-mail (">" at start of the line) and
	other types of text.  The |=| operator can be used to re-indent
	lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コメントも自動的に整形することができ、'@option{comments}' オプションでどの文字がコメントをスタートさせ終了させるのかを指定することができます。この機能は C のコードでもっともよく動作しますがメール (行の最初の ">") や他のタイプのテキストでもうまく動作します。|@ref{=}| オペレータで行を再インデントすることもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	For many other languages an indent plugin is present to support
	automatic indenting. |30.3|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他にも多くの言語に対して自動インデントをするためのインデントプラグインが提供されています。|@ref{30.3}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Searching for words in included files.			|include-search|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec インクルードされるファイルの中から単語を探す
|@ref{include-search}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The |[i| command can be used to search for a match of the word under
	the cursor in the current and included files.  The 'include' option
	can be set to a pattern that describes a command to include a file
	(the default is for C programs).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{[i}| コマンドはカーソルの下の単語をインクルードされるファイルの中から検索することができます。'@option{include}' オプションをセットすることでファイルをインクルードするコマンドのパターンを記述することができます (デフォルトでは C のプログラムで検索できるように設定してあります)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The |[I| command lists all matches, the |[_CTRL-I| command jumps to
	a match.
	The |[d|, |[D| and |[_CTRL-D| commands do the same, but only for
	lines where the pattern given with the 'define' option matches.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{[I}| コマンドはマッチしたすべてをリストし、|@ref{[_CTRL-I}| コマンドはマッチした場所にジャンプするコマンドです。

|@ref{[d}|, |@ref{[D}|, |@ref{[_CTRL-D}| も同様ですが、'@option{define}' オプションで指定されるパターンにマッチする行にのみします
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Automatic commands.					|autocommand|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 自動コマンド
|@ref{autocommand}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Commands can be automatically executed when reading a file, writing a
	file, jumping to another buffer, etc., depending on the file name.
	This is useful to set options and mappings for C programs,
	documentation, plain text, e-mail, etc.  This also makes it possible
	to edit compressed files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルを読み込んだり書き込んだり別のバッファにジャンプしたりなどする時に、ファイル名によって自動的にコマンドを実行することができます。これは C のプログラムを書いたり、ドキュメントを書いたり、普通のテキストを書いたりなどする時にオプションをセットしたりそれら特有のマッピングをしたりするときに便利です。これを利用することで圧縮されたファイルを編集することもできるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Scripts and Expressions.				|expression|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec コマンドと表現
|@ref{expression}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Commands have been added to form up a powerful script language.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
強力なスクリプト言語を形成するようにいくつかコマンドが追加されました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|:if|		Conditional execution, which can be used for example
			to set options depending on the value of $TERM.
	|:while|	Repeat a number of commands.
	|:for|		Loop over a list.
	|:echo|		Print the result of an expression.
	|:let|		Assign a value to an internal variable, option, etc.
			Variable types are Number, String, List and Dictionary.
	|:execute|	Execute a command formed by an expression.
	|:try|		Catch exceptions.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{:if}| @tab 条件によって実行します。例えば @env{$TERM} の値によってオプションを変更したりできます。
@item |@ref{:while}| @tab コマンドを繰り返します。
@item |@ref{:for}| @tab リストをわたるループ。
@item |@ref{:echo}| @tab 式の結果を表示します
@item |@ref{:let}| @tab 値を内部変数やオプションなどに割り当てます。変数の型は数値、文字列、リスト、辞書。
@item |@ref{:execute}| @tab 式からなるコマンドを実行します。
@item |@ref{:try}| @tab 例外を捕捉します。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	etc., etc.  See |eval|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
などなど。|@ref{eval}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Debugging and profiling are supported. |debug-scripts| |profile|
	If this is not enough, an interface is provided to |Python|, |Ruby|,
	|Tcl|, |Lua|, |Perl| and |MzScheme|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デバッグとプロファイリングがサポートされています。|@ref{debug-scripts}| |@ref{profile}|

もしこれで十分でないなら、|@ref{Python}|, |@ref{Ruby}|, |@ref{Tcl}|, |@ref{Lua}|, |@ref{Perl}|, |@ref{MzScheme}| のインターフェイスが提供されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Viminfo.						|viminfo-file|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec Viminfo
|@ref{viminfo-file}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The command-line history, marks and registers can be stored in a file
	that is read on startup.  This can be used to repeat a search command
	or command-line command after exiting and restarting Vim.  It is also
	possible to jump right back to where the last edit stopped with |'0|.
	The 'viminfo' option can be set to select which items to store in the
	.viminfo file.  This is off by default.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンドライン履歴やマークやレジスタの内容を起動時に読み込まれるファイルに保存しておくことができます。Vim を終了させた後、再び Vim を起動したときでも検索コマンドを繰り返したりコマンドラインを繰り返したりできます。|@ref{'0}| を使って最後に編集していた場所にジャンプすることもまた可能です。'@option{viminfo}' オプションで @file{.viminfo} ファイルに保存されるアイテムを選択することができます。初期値はオフです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Printing.						|printing|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 印刷
|@ref{printing}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The |:hardcopy| command sends text to the printer.  This can include
	syntax highlighting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド |@ref{:hardcopy}| はテキストをプリンタに送信します。構文強調も含まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Mouse support.						|mouse-using|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec マウスサポート
|@ref{mouse-using}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	The mouse is supported in the GUI version, in an xterm for Unix, for
	BSDs with sysmouse, for Linux with gpm, for MS-DOS, and Win32.  It
	can be used to position the cursor, select the visual area, paste a
	register, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスは GUI バージョンと Unix, sysmouse がある BSD, gpm がある Linux, MS-DOS, Win32 上の xterm でサポートされています。カーソルの場所を変えたりビジュアル領域を選択したりレジスタの内容を貼り付けたりするのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Usage of key names.					|<>| |key-notation|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec キーの名前の使い方
|@ref{<>}| |@ref{key-notation}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Special keys now all have a name like <Up>, <End>, etc.
	This name can be used in mappings, to make it easy to edit them.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特殊なキーはすべて @key{<Up>}, @key{<End>} などなどのような書き方ができるようになりました。この名前はマッピングでも使うことができますしそれらを編集するのが容易になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Editing binary files.					|edit-binary|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec バイナリファイルを編集する
|@ref{edit-binary}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Vim can edit binary files.  You can change a few characters in an
	executable file, without corrupting it.  Vim doesn't remove NUL
	characters (they are represented as <NL> internally).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はバイナリファイルを編集することができます。実行形式のファイルを壊すことなくいくつかの文字を変更することができます。Vim は NUL 文字を削除しません (内部では <NL> と表されています)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|-b|		command-line argument to start editing a binary file
	|'binary'|	Option set by |-b|.  Prevents adding an <EOL> for the
			last line in the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{-b}| @tab バイナリファイルの編集を始める時のコマンドライン引数
@item |@ref{'binary'}| @tab |@ref{-b}| によってセットされるオプションで、ファイルの最後の行に <EOL> を付加するのをやめさせます
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Multi-language support.					|multi-lang|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 多言語のサポート
|@ref{multi-lang}| @*
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Files in double-byte or multi-byte encodings can be edited.  There is
	UTF-8 support to be able to edit various languages at the same time,
	without switching fonts. |UTF-8|
	Messages and menus are available in different languages.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ダブルバイトやマルチバイトエンコーディングのファイルを編集できます。フォントを切り替えずに多言語を同時に編集可能な UTF-8 をサポートしています。|@ref{UTF-8}|

メッセージやメニューが多くの言語に翻訳されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Move cursor beyond lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 行を越えるカーソル移動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When the 'virtualedit' option is set the cursor can move all over the
	screen, also where there is no text.  This is useful to edit tables
	and figures easily.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{virtualedit}' がセットされていると、テキストがない場所を含め、画面全体どこでもカーソルを移動させることができます。これは表や図を容易に編集できて便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. Other vim features					*other-features*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{other-features}
@cindex other-features
@section 5. その他の Vim の機能
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A random collection of nice extra features.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その他の優れた機能をランダムに集めてみました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
When Vim is started with "-s scriptfile", the characters read from
"scriptfile" are treated as if you typed them.  If end of file is reached
before the editor exits, further characters are read from the console.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が "-s scriptfile" 付きで起動された場合、"scriptfile" から読み込まれる文字は実際あなたがそれをタイプしたように扱われます。もしエディタが終了する前にスクリプトファイルの終わりに到達した場合は、さらにコンソールから文字を読み込みます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "-w" option can be used to record all typed characters in a script file.
This file can then be used to redo the editing, possibly on another file or
after changing some commands in the script file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"-w" オプションはタイプした文字をすべてスクリプトファイルに記録するのに使うことができます。このファイルは後で別のファイルでその編集を繰り返したり、スクリプトファイルに修正を加えてから繰り返しを実行したりするのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "-o" option opens a window for each argument.  "-o4" opens four windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"-o" オプションはそれに続く引数の数だけウィンドウを開きます。"-o4" は 4 つのウィンドウを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vi requires several termcap entries to be able to work full-screen.  Vim only
requires the "cm" entry (cursor motion).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi はフルスクリーンで動作するためにいくつかの termcap のエントリが必要でした。Vim が必要とするのは "cm" エントリ (cursor motion) だけです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
In command mode:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec コマンドモードで:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the 'showcmd' option is set, the command characters are shown in the last
line of the screen.  They are removed when the command is finished.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{showcmd}' オプションがセットされていると、スクリーンの最後の行にコマンドの文字列が表示されます。これらはコマンドが終了した後に削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'ruler' option is set, the current cursor position is shown in the
last line of the screen.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{ruler}' オプションがセットされているとスクリーンの最後の行に現在のカーソルの位置が表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"U" still works after having moved off the last changed line and after "u".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"U" は最後に変更した行から離れた後でも、また "u" を実行した後でも動作します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Characters with the 8th bit set are displayed.  The characters between '~' and
0xa0 are displayed as "~?", "~@", "~A", etc., unless they are included in the
'isprint' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
8bit 目がセットされている文字は表示されます。その文字が '@option{isprint}' オプションに含まれていなければ、'~' と 0xa0 の間の文字は "~?"、"~@@"、"~A"、などなどのように表示されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"][" goes to the next ending of a C function ('}' in column 1).
"[]" goes to the previous ending of a C function ('}' in column 1).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"][" は C の関数の次の終わりに移動します (1 桁目が '@}' の行)。
"[]" は C の関数の前の終わりに移動します (1 桁目が '@}' の行)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"]f", "[f" and "gf" start editing the file whose name is under the cursor.
CTRL-W f splits the window and starts editing the file whose name is under
the cursor.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"]f"、"[f" と "gf" はカーソルの下のファイル名の編集を開始します。@kbd{CTRL-W f} はカーソルの下のファイル名の編集をウィンドウを分割してそこで開始します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"*" searches forward for the identifier under the cursor, "#" backward.
"K" runs the program defined by the 'keywordprg' option, with the identifier
under the cursor as argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"*" はカーソルの下の識別子を前方に検索し、"#" は後方に検索します。
"K" はカーソルの下の識別子を引数として '@option{keywordprg}' オプションに定義されているプログラムを呼び出します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"%" can be preceded with a count.  The cursor jumps to the line that
percentage down in the file.  The normal "%" function to jump to the matching
brace skips braces inside quotes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'%' は前に数を前置することでそのファイルのパーセント数の場所にジャンプします。数を前置しない場合はくくられているテキストの中では対応する括弧に移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
With the CTRL-] command, the cursor may be in the middle of the identifier.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-]} コマンドでは、カーソルは識別子の真ん中にあります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The used tags are remembered.  Commands that can be used with the tag stack
are CTRL-T, ":pop" and ":tag".  ":tags" lists the tag stack.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
使ったタグは覚えておかれます。タグスタックと共に使用されるコマンドは @kbd{CTRL-T} と "@command{:pop}" と "@command{:tag}" です。"@command{:tags}" はタグスタックの内容をリスト表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vi uses 'wrapscan' when searching for a tag.  When jumping to a tag Vi starts
searching in line 2 of another file.  It does not find a tag in line 1 of
another file when 'wrapscan' is not set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi はタグを検索するときに '@option{wrapscan}' を使用します。タグにジャンプすると、Vi は別のファイルの 2 行目から検索を開始します。'@option{wrapscan}' が設定されていない場合、他のファイルの 1 行目のタグを見つけられません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'tags' option can be set to a list of tag file names.  Thus multiple
tag files can be used.  For file names that start with "./", the "./" is
replaced with the path of the current file.  This makes it possible to use a
tags file in the same directory as the file being edited.
{Vi: always uses binary search in some versions}
{Vi does not have the security prevention for commands in tag files}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{tags}' オプションはタグファイル名のリストを設定することができます。ですので複数のタグファイルを使うことができます。ファイル名が '.' で始まる場合は '.' はそのファイルのパスに展開されます。こうすることで編集しているファイルがあるディレクトリと同じディレクトリのタグファイルを使うことができるようになります。

@{Vi: 一部のバージョンでは常に二分探索を使用します@}

@{Vi には、タグファイル内のコマンドに対するセキュリティ保護機能はありません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Previously used file names are remembered in the alternate file name list.
CTRL-^ accepts a count, which is an index in this list.
":files" command shows the list of alternate file names.
"#<N>" is replaced with the <N>th alternate file name in the list.
"#<" is replaced with the current file name without extension.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
前に編集されたファイルは代替ファイルリストに覚えておかれます。@kbd{CTRL-^} に数を前置することでこのリストのインデックスの番号のファイルにジャンプできます。"@command{:files}" コマンドで開いたファイルの一覧を見ることができます。"#<N>" はリスト内の<N>番目のファイルの名前で置換されます。"#<" は現在のファイル名から拡張子を取り除いたもので置換されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Search patterns have more features.  The <NL> character is seen as part of the
search pattern and the substitute string of ":s".  Vi sees it as the end of
the command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
検索パターンも強化されました。<NL> 文字を検索パターンや "@command{:s}" コマンドの文字列の一部に使うことができます。Vi では単にコマンドの終了と見なされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Searches can put the cursor on the end of a match and may include a character
offset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
検索ではマッチした最後にカーソルをおくこともできますし、オフセット文字を使って検索することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Count added to "~", ":next", ":Next", "n" and "N".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"~"、":next"、":Next"、"n"、"N" にカウントを前置することができるようになりました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The command ":next!" with 'autowrite' set does not write the file.  In vi the
file was written, but this is considered to be a bug, because one does not
expect it and the file is not written with ":rewind!".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{autowrite}' オプションがセットされている場合でも "@command{:next!}" コマンドはファイルを書き込みません。Vi ではファイルは上書きされましたが、これはバグだと思われます。というのもそういう動作は期待されませんし "@command{:rewind!}" コマンドでは書き込まれないからです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vi when entering a <CR> in replace mode deletes a character only when 'ai'
is set (but does not show it until you hit <Esc>).  Vim always deletes a
character (and shows it immediately).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi では置換モードで <CR> を打ち込んだときに文字を削除するのは 'ai' がセットされている場合のみでした (しかし @key{<Esc>} キーが押されるまでは表示されませんでした)。Vim は常に文字を削除します (またすぐに表示します)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Added :wnext command.  Same as ":write" followed by ":next".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{:wnext} コマンドが追加されました。"@command{:write}" コマンドを実行して "@command{:next}" コマンドを実行するのと同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ":w!" command always writes, also when the file is write protected.  In Vi
you would have to do ":!chmod +w %:S" and ":set noro".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:w!}" コマンドは上書き禁止されているファイルでも常に書き込みます。Vi では "@command{:!chmod+w %:S}" してから "@command{:set noro}" としなければなりませんでした。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When 'tildeop' has been set, "~" is an operator (must be followed by a
movement command).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{tildeop}' がセットされていると "~" はオペレータとして動作します (移動コマンドを後に続けます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
With the "J" (join) command you can reset the 'joinspaces' option to have only
one space after a period (Vi inserts two spaces).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"J" (連結)コマンドを実行するときにピリオドの後でスペースを挿入するのを 1 つだけにするように '@option{joinspaces}' オプションを再セットすることができます (Vi では 2 つのスペースが挿入されます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"cw" can be used to change white space formed by several characters (Vi is
confusing: "cw" only changes one space, while "dw" deletes all white space).
{Vi: "cw" when on a blank followed by other blanks changes only the first
blank; this is probably a bug, because "dw" deletes all the blanks}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"cw" はいくつかの文字で構成されるホワイトスペースを変更できます (Vi では "cw" はスペースを 1 つだけ変更するのに "dw" はすべてのホワイトスペースを削除するという紛らわしい仕様でした)。

@{Vi: ブランクの後に他のブランクが続く "cw" は、最初のブランクだけを変更します。"dw"はすべての空白を削除するので、これはおそらくバグです@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
"o" and "O" accept a count for repeating the insert (Vi clears a part of
display).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"o" と "O" は回数を前置することができます (Vi は表示の一部分を削除します)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Flags after Ex commands not supported (no plans to include it).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Ex コマンドの後につけるフラグはサポートされていません (予定もありません)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On non-UNIX systems ":cd" command shows current directory instead of going to
the home directory (there isn't one).  ":pwd" prints the current directory on
all systems.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX システム以外では "@command{:cd}" コマンドはホームディレクトリに移動するのではなく (ホームディレクトリはないです)、現在のディレクトリを表示します。"@command{:pwd}" はすべてのシステムで現在のディレクトリを表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After a ":cd" command the file names (in the argument list, opened files)
still point to the same files.  In Vi ":cd" is not allowed in a changed file;
otherwise the meaning of file names change.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:cd}" コマンドの後でもファイル名 (引数リストや開いたファイル)は元のファイルを指します。Vi ではファイルに変更があると "@command{:cd}" できません。そうでなければファイル名の解釈が変わってしまうからです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
":source!" command reads Vi commands from a file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:source!}" コマンドはファイルから Vi コマンドを読み込みます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
":mkexrc" command writes current modified options and mappings to a ".exrc"
file.  ":mkvimrc" writes to a ".vimrc" file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:mkexrc}" コマンドは現在の変更されているオプションとマッピングを "@file{.exrc}" ファイルに書き出すコマンドです。"@command{:mkvimrc}" は "@file{.vimrc}" ファイルに書き出します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
No check for "tail recursion" with mappings.  This allows things like
":map! foo ^]foo".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッピングで「最後が再帰的であるかどうか」のチェックはされません。つまり次のようなマッピングもできます。"@samp{:map! foo ^]foo}".
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a mapping starts with number, vi loses the count typed before it (e.g.
when using the mapping ":map g 4G" the command "7g" goes to line 4).  This is
considered a vi bug.  Vim concatenates the counts (in the example it becomes
"74G"), as most people would expect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッピングが数字で始まる場合は、Vi ではそのカウントが失われてしまっていました (例: ":map g 4G" というマッピングを使っていると "7g" は 4 行目に移動してしまいました)。これは Vi のバグだと考えられます。Vim では多くの人が期待する動作であるようにカウントを連結します (この例の場合は "74G" になります)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The :put! command inserts the contents of a register above the current line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{:put!} コマンドは現在の行の上にレジスタの内容を挿入します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "p" and "P" commands of vi cannot be repeated with "." when the putted
text is less than a line.  In Vim they can always be repeated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi での "p" と "P" コマンドは挿入されるテキストが 1 行より短い場合は "." で繰り返すことができませんでした。Vim では常に繰り返すことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
":noremap" command can be used to enter a mapping that will not be remapped.
This is useful to exchange the meaning of two keys.  ":cmap", ":cunmap" and
":cnoremap" can be used for mapping in command-line editing only.  ":imap",
":iunmap" and ":inoremap" can be used for mapping in insert mode only.
Similar commands exist for abbreviations: ":noreabbrev", ":iabbrev"
":cabbrev", ":iunabbrev", ":cunabbrev", ":inoreabbrev", ":cnoreabbrev".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:noremap}" コマンドは再マップされないマップを作るのに使うことができます。これは 2 つのキーの意味を交換するのに使うと便利です。

"@command{:cmap}", "@command{:cunmap}", "@command{:cnoremap}" はコマンドライン編集でのみ動作するマッピングです。

"@command{:imap}", "@command{:iunmap}", "@command{:inoremap}" は挿入モードのみで動作するマッピングを定義できます。

同様なコマンドは短縮入力にもあります: "@command{:noreabbrev}", "@command{:iabbrev}", "@command{:cabbrev}", "@command{:iunabbrev}", "@command{:cunabbrev}", "@command{:inoreabbrev}", "@command{:cnoreabbrev}"
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Vi the command ":map foo bar" would remove a previous mapping
":map bug foo".  This is considered a bug, so it is not included in Vim.
":unmap! foo" does remove ":map! bug foo", because unmapping would be very
difficult otherwise (this is vi compatible).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi では ":map foo bar" は前の ":map bug foo" というマッピングを削除していました。これはバグと思われますので Vim ではその仕様は含まれません。":unmap! foo" は "map! bug foo" というマッピングを削除します。なぜならそうでなければマッピングを外すのが非常に困難になるからです (これは Vi と同じ動作です)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The ':' register contains the last command-line.
The '%' register contains the current file name.
The '.' register contains the last inserted text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
':' レジスタは最後のコマンドラインを含んでいます。
'%' レジスタは現在のファイル名を含んでいます。
'.' レジスタは最後に挿入されたテキストを含んでいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
":dis" command shows the contents of the yank registers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:dis}" コマンドはヤンクレジスタの内容を表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-O/CTRL-I can be used to jump to older/newer positions.  These are the
same positions as used with the '' command, but may be in another file.  The
":jumps" command lists the older positions.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-O/CTRL-I} は古い/新しい場所に移動するのに使うことができます。これらの移動する場所は '' コマンドで移動する場所と同じですが、他のファイルの中でもありえます。"@command{:jumps}" コマンドは古い場所をリストします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'shiftround' option is set, an indent is rounded to a multiple of
'shiftwidth' with ">" and "<" commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{shiftround}' オプションがセットされていると ">" と "<" コマンドでは '@option{shiftwidth}' の倍数になるようにインデントは調整されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'scrolljump' option can be set to the minimum number of lines to scroll
when the cursor gets off the screen.  Use this when scrolling is slow.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{scrolljump}' オプションはスクリーンからカーソルが出たときにスクロールする最小の行数を設定することができます。もしスクロールが遅い場合はこれをセットしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'scrolloff' option can be set to the minimum number of lines to keep
above and below the cursor.  This gives some context to where you are
editing.  When set to a large number the cursor line is always in the middle
of the window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{scrolloff}' オプションでカーソルの上や下に保持しておく最小の行数を設定できます。これを設定しておくとカーソルの前後を見渡せるようになります。かなり大きい数字にセットしておけばカーソル行は常にウィンドウの中央に来ることになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Uppercase marks can be used to jump between files.  The ":marks" command lists
all currently set marks.  The commands "']" and "`]" jump to the end of the
previous operator or end of the text inserted with the put command.  "'[" and
"`[" do jump to the start. {Vi: no uppercase marks}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
大文字のマークはファイルを越えてジャンプするのに使うことができます。"@command{:marks}" コマンドは現在セットされているすべてのマークをリストします。"@command{']}" と "@command{`]}" は前に操作を行った場所の最後か、テキストを挿入したかプットした場所の最後に移動します。"@command{'[}" と "@command{`[}" は初めに移動します。
@{Vi: 大文字のマークはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'shelltype' option can be set to reflect the type of shell used on the
Amiga.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{shelltype}' オプションは Amiga 上で使われるシェルのタイプを反映させるのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'highlight' option can be set for the highlight mode to be used for
several commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{highlight}' オプションはいくつかのコマンドで使われるハイライトモードを設定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The CTRL-A (add) and CTRL-X (subtract) commands are new.  The count to the
command (default 1) is added to/subtracted from the number at or after the
cursor.  That number may be decimal, octal (starts with a '0') or hexadecimal
(starts with '0x').  Very useful in macros.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-A} (加算) と @kbd{CTRL-X} (減算) コマンドが新たに追加されました。カウントを前置することもでき (初期値 1)、カーソルの下もしくは後の数字をその値の分加算/減算するのに使うことができます。数は 10 進数、8 進数 (0 で始まります)、16 進数 (0x で始まります) でもよいです。マクロを使うときに非常に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
With the :set command the prefix "inv" can be used to invert boolean options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@command{:set} コマンドでは "inv" を前置することで二者択一のオプションは逆の意味にすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In both Vi and Vim you can create a line break with the ":substitute" command
by using a CTRL-M.  For Vi this means you cannot insert a real CTRL-M in the
text.  With Vim you can put a real CTRL-M in the text by preceding it with a
CTRL-V.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi と Vim の両方で "@command{:substitute}" コマンドで @kbd{CTRL-M} を使うことで改行を挿入することができます。Vi ではこのためにテキストに実際の @kbd{CTRL-M} を挿入することができなかったのですが、Vim では @kbd{CTRL-V} を前に挿入してから実際の @kbd{CTRL-M} をおくことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
In Insert mode:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 挿入モードで:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'revins' option is set, insert happens backwards.  This is for typing
Hebrew.  When inserting normal characters the cursor will not be shifted and
the text moves rightwards.  Backspace, CTRL-W and CTRL-U will also work in
the opposite direction.  CTRL-B toggles the 'revins' option.  In replace mode
'revins' has no effect.  Only when enabled at compile time.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{revins}' オプションがセットされていると挿入は逆方向に向かってなされます。これはヘブライ語を入力するためです。普通の文字を挿入するときはカーソルは逆方向になりませんしテキストは右方向に動きます。バックスペース、@kbd{CTRL-W}、@kbd{CTRL-U} もまた逆方向に動作します。置換モードではなんら影響しません。コンパイル時にのみ有効にすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The backspace key can be used just like CTRL-D to remove auto-indents.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オートインデントを削除するのにバックスペースキーをちょうど @kbd{CTRL-D} のように使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can backspace, CTRL-U and CTRL-W over line breaks if the 'backspace' (bs)
option includes "eol".  You can backspace over the start of insert if the
'backspace' option includes "start".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{backspace}' (bs) オプションが "@var{eol}" を含んでいると改行をこえてバックスペースしたり @kbd{CTRL-U} したり @kbd{CTRL-W} することができます。'@option{backspace}' が "@var{start}" を含んでいると挿入の初めをこえてバックスペースすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the 'paste' option is set, a few options are reset and mapping in insert
mode and abbreviation are disabled.  This allows for pasting text in windowing
systems without unexpected results.  When the 'paste' option is reset, the old
option values are restored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{paste}' オプションがセットされているといくつかのオプションが解除され挿入モードでのマッピングと短縮入力が使用不可になります。こうすることでウィンドウシステムでテキストを貼り付けるときに不測の結果が生じるのを避けることができます。'@option{paste}' オプションが解除されればオプションの前の値が復元されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-T/CTRL-D always insert/delete an indent in the current line, no matter
what column the cursor is in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-T}/@kbd{CTRL-D} はカーソルがどこの桁位置にあっても常に現在の行のインデントを挿入/削除します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-@ (insert previously inserted text) works always (Vi: only when typed as
first character).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-@@} (前に挿入したテキストを挿入する)は常に動作します (Vi: 初めの文字としてを打ち込んだときにのみ)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-A works like CTRL-@ but does not leave insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-A} は @kbd{CTRL-@@} のように動作しますが挿入モードから抜けません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-R {register} can be used to insert the contents of a register.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-R @{register@}} はレジスタの内容を挿入するのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the 'smartindent' option is set, C programs will be better auto-indented.
With 'cindent' even more.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{smartindent}' オプションがセットされていると、C プログラムはもっとうまく自動インデントされます。'@option{cindent}' オプションをセットしているとさらにうまくインデントされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-Y and CTRL-E can be used to copy a character from above/below the
current cursor position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@key{CTRL-Y} と @key{CTRL-E} は現在のカーソルの上/下の文字をコピーするのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After CTRL-V you can enter a three digit decimal number.  This byte value is
inserted in the text as a single character.  Useful for international
characters that are not on your keyboard.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@kbd{CTRL-V} を打った後に 3 桁の 8 進数を打つことができ、このバイトの値がテキストに 1 文字として挿入されます。キーボードからは打ち込めない内部の文字を使うときに便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the 'expandtab' (et) option is set, a <Tab> is expanded to the
appropriate number of spaces.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{expandtab}' (et) がセットされていると <Tab> は適切な数のスペースに展開されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The window always reflects the contents of the buffer (Vi does not do this
when changing text and in some other cases).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウは常にバッファの内容を反映します (Vi ではテキストを変更したりそのほかいくつかの場合では行われませんでした)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If Vim is compiled with DIGRAPHS defined, digraphs are supported.  A set of
normal digraphs is included.  They are shown with the ":digraph" command.
More can be added with ":digraph {char1}{char2} {number}".  A digraph is
entered with "CTRL-K {char1} {char2}" or "{char1} BS {char2}" (only when
'digraph' option is set).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が DIGRAPHS を定義してコンパイルされていればダイグラフがサポートされます。普通のダイグラフのセットが含まれるようになり、"@command{:digraph}" コマンドで見ることができます。"@command{:digraph @{char1@}@{char2@} @{number@}}" でさらに追加することもできます。"@kbd{CTRL-K @{char1@} @{char2@}}" とするか "@{char1@} @key{BS} @{char2@}" ('@option{digraph}' オプションがセットされている場合のみ) とすることでダイグラフを入力できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When repeating an insert, e.g. "10atest <Esc>" vi would only handle wrapmargin
for the first insert.  Vim does it for all.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
挿入をカウントを前置して行う場合、例 "10atest <Esc>"、Vi は初めの挿入に対してのみ wrapmargin を扱うことができましたが、Vim ではすべてに対して扱います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A count to the "i" or "a" command is used for all the text.  Vi uses the count
only for one line.  "3iabc<NL>def<Esc>" would insert "abcabcabc<NL>def" in Vi
but "abc<NL>defabc<NL>defabc<NL>def" in Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"i" か "a" コマンドでのカウント前置はすべてのテキストに対して利用できます。Vi では 1 つの行に対してのみカウントを前置できました。"3iabc<NL>def<Esc>" は "abcabcabc<NL>def" が Vi の動作で、"abc<NL>defabc<NL>defabc<NL>def" が Vim での動作です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
In Command-line mode:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec コマンドラインモードで:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<Esc> terminates the command-line without executing it.  In vi the command
line would be executed, which is not what most people expect (hitting <Esc>
should always get you back to command mode).  To avoid problems with some
obscure macros, an <Esc> in a macro will execute the command.  If you want a
typed <Esc> to execute the command like vi does you can fix this with
	":cmap ^V<Esc> ^V<CR>"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
<Esc> はコマンドラインを実行せずに抜けます。Vi ではコマンドラインを実行しますが、これはほとんどの人が予測する動作とは違いました (@key{<Esc>} を打つことで常にコマンドモードに戻るべきでしょう)。いくつかの曖昧なマクロでの問題を避けるため、マクロでの <Esc> はコマンドを実行します。もし <Esc> で Vi のようにコマンドを実行したい場合は次のように修正できます。
@verbatim
":cmap ^V<Esc> ^V<CR>"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
General:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 一般:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'ttimeout' option is like 'timeout', but only works for cursor and
function keys, not for ordinary mapped characters.  The 'timeoutlen' option
gives the number of milliseconds that is waited for.  If the 'esckeys' option
is not set, cursor and function keys that start with <Esc> are not recognized
in insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{ttimeout}' オプションは '@option{timeout}' オプションに似ていますが、カーソルかファンクションキーに対してのみ働きます。'@option{timeoutlen}' オプションは待つ時間をミリ秒単位で指定することができます。'@option{esckeys}' オプションがセットされていない場合、@key{<Esc>} キーで始まるカーソルとファンクションキーは挿入モードでは解釈されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There is an option for each terminal string.  Can be used when termcap is not
supported or to change individual strings.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
端末文字列がそれぞれオプションとしてあります。termcap がサポートされていなかったり独自の文字列に変更したい場合に利用することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'fileformat' option can be set to select the <EOL>: "dos" <CR><NL>, "unix"
<NL> or "mac" <CR>.
When the 'fileformats' option is not empty, Vim tries to detect the type of
<EOL> automatically.  The 'fileformat' option is set accordingly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{fileformat}' オプションは <EOL> を選択して設定するのに使います: "dos" <CR><NL>, "unix" <NL>, "mac" <CR>。

'@option{fileformats}' オプションが空でない場合、Vim は <EOL> のタイプを自動的に判断しようとします。'@option{fileformat}' オプションはそれに従ってセットされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On systems that have no job control (older Unix systems and non-Unix systems)
the CTRL-Z, ":stop" or ":suspend" command starts a new shell.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ジョブコントロールを持たないシステム (古い Unix システムと Unix 以外のシステム) では @kbd{CTRL-Z}, "@command{:stop}", "@command{:suspend}" コマンドは新しいシェルを起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If Vim is started on the Amiga without an interactive window for output, a
window is opened (and :sh still works).  You can give a device to use for
editing with the |-d| argument, e.g. "-d con:20/20/600/150".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
出力のための対話的なウィンドウなしで Vim が Amiga 上で起動された場合、ウィンドウが開かれます (そうして :sh コマンドは動作します)。|@ref{-d}| 引数で編集する装置を指定することができます (例: "-d con:20/20/600/150")。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The 'columns' and 'lines' options are used to set or get the width and height
of the display.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{columns}' と '@option{lines}' オプションはディスプレイの幅と高さを指定するのに使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Option settings are read from the first and last few lines of the file.
Option 'modelines' determines how many lines are tried (default is 5).  Note
that this is different from the Vi versions that can execute any Ex command
in a modeline (a major security problem).  |trojan-horse|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイルの最初と最後の数行はオプションをセットするために読み込まれます。'@option{modelines}' オプションがどれだけの数の行を読み込もうとするかを決めることができます (初期値は 5 です)。モードラインでどんな Ex コマンドも実行できる (重大なセキュリティ問題です) バージョンの Vi がありますがそれとは違うということに注意してください。|@ref{trojan-horse}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'insertmode' option is set (e.g. in .exrc), Vim starts in insert mode.
And it comes back there, when pressing <Esc>.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{insertmode}' オプションがセットされていると (例えば @file{.exrc} で) Vim は挿入モードで起動します。@key{<Esc>} キーを押すと元に戻ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Undo information is kept in memory.  Available memory limits the number and
size of change that can be undone.  This may be a problem with MS-DOS, is
hardly a problem on the Amiga and almost never with Unix and Win32.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
アンドゥの情報はメモリに保持されます。使用可能なメモリの量でアンドゥの回数とアンドゥ可能なサイズが制限されます。このことは MS-DOS では問題になるかもしれません。Amiga ではほとんど問題にならないですし、Unix と Win32 では大体において決して問題になることはないです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the 'backup' or 'writebackup' option is set: Before a file is overwritten,
a backup file (.bak) is made.  If the "backup" option is set it is left
behind.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{backup}' か '@option{writebackup}' オプションがセットされていると: ファイルを上書きする前にバックアップファイル (.bak) が作られます。"@option{backup}" オプションがセットされているとバックアップファイルは残されたままになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim creates a file ending in ".swp" to store parts of the file that have been
changed or that do not fit in memory.  This file can be used to recover from
an aborted editing session with "vim -r file".  Using the swap file can be
switched off by setting the 'updatecount' option to 0 or starting Vim with
the "-n" option.  Use the 'directory' option for placing the .swp file
somewhere else.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は変更されたファイルの一部分やメモリに入りきらないものを保持するためにファイルの最後が ".swp" であるファイルを作成します。このファイルはクラッシュした編集セッションを "vim -r file" として復元するのに使われます。'@option{updatecount}' オプションを 0 にするか Vim を "-n" オプションをつけて起動するとスワップファイルを使うのをやめさせることができます。.swp ファイルをどこか別の場所に作成させたい場合は '@option{directory}' オプションを設定してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim is able to work correctly on filesystems with 8.3 file names, also when
using messydos or crossdos filesystems on the Amiga, or any 8.3 mounted
filesystem under Unix.  See |'shortname'|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は 8.3 形式のファイルシステムでも正しく動作することができます。また Amiga 上での汚い DOS もしくは 雑種の DOS ファイルシステムでも使うことができますし、8.3 形式のファイルシステムを搭載したどんな Unix でも動作します。|@ref{'shortname'}| もご覧下さい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Error messages are shown at least one second (Vi overwrites error messages).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
エラーメッセージは少なくとも 1 秒は表示されます (Vi ではエラーメッセージは上書きされます)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If Vim gives the |hit-enter| prompt, you can hit any key.  Characters other
than <CR>, <NL> and <Space> are interpreted as the (start of) a command.
{Vi: only ":" commands are interpreted}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{hit-enter}| プロンプトが出た場合でもどんなキーでも打つことができます。@key{<CR>}, @key{<NL>}, @key{<Space>} 以外の文字はコマンド (の最初) として解釈されます。
@{Vi: "@command{:}" コマンドだけが解釈されます@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The contents of the numbered and unnamed registers is remembered when
changing files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
番号付きレジスタと名前なしレジスタの内容はファイルが変更されたときに覚えておかれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The "No lines in buffer" message is a normal message instead of an error
message, since that may cause a mapping to be aborted.
{Vi: error messages may be overwritten with other messages before you have a
chance to read them}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"No lines in buffer" メッセージはマッピングが拒否された理由で表示される、エラーメッセージではなく普通のメッセージです。
@{Vi: エラーメッセージは、あなたがこれらメッセージを読む前に、他のメッセージで上書きされるかもしれません。@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The AUX: device of the Amiga is supported.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Amiga の AUX: デバイスをサポートしています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Supported Vi features				*vi-features*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vi-features}
@cindex vi-features
@section 6. サポートされている Vi の機能
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim supports nearly all Vi commands and mostly in the same way.  That is when
the 'compatible' option is set and 'cpoptions' contains all flags.  What the
effect is of resetting 'compatible' and removing flags from 'cpoptions' can be
found at the help for the specific command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はほとんどすべての Vi コマンドを大半は同じやり方でサポートしています。それは、'@option{compatible}' オプションが設定されていて、'@option{cpoptions}' にすべてのフラグが含まれている場合です。'@option{compatible}' をリセットし、'@option{cpoptions}' からフラグを削除することによる影響は、特定のコマンドのヘルプで確認できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The help files used to mark features that are in Vim but not in Vi with {not
in Vi}.  However, since these remarks cluttered the help files we now do it
the other way around: Below is listed what Vi already supported.  Anything
else has been added by Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ヘルプファイルは、Vim にはあるが Vi にはない機能を @{not in Vi@} でマークするために使用していました。しかし、これらの備考はヘルプファイルを煩雑にしていたので、私たちは今それを反対の方法でやっています: 以下は Vi が既にサポートしているものの一覧です。これ以外のものは Vim によって追加されました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The following Ex commands are supported by Vi: ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 以下の Ex コマンドは Vi でサポートされています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
`:abbreviate`	enter abbreviation
`:append`	append text
`:args`		print the argument list
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item `@command{:abbreviate}` @tab 短縮入力を登録する
@item `@command{:append}` @tab テキストを追加する
@item `@command{:args}` @tab 引数リストを表示
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:cd`		change directory; Vi: no "cd -"
`:change`	replace a line or series of lines
`:chdir`	change directory
`:copy`		copy lines
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:cd}` @tab ディレクトリの移動
@item `@command{:change}` @tab 変更リストを表示する
@item `@command{:chdir}` @tab ディレクトリの移動
@item `@command{:copy}` @tab 行のコピー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:delete`	delete lines
`:edit`		edit a file
`:exit`		same as `:xit`
`:file`		show or set the current file name; Vi: without the column number
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:delete}` @tab 行を削除
@item `@command{:edit}` @tab ファイルの編集
@item `@command{:exit}` @tab `@command{:xit}` と同じ
@item `@command{:file}` @tab カレントファイルの名前を設定または表示
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:global`	execute commands for matching lines
`:insert`	insert text
`:join`		join lines; Vi: not :join!
`:k`		set a mark
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:global}` @tab パターンにマッチした行でコマンドを実行する
@item `@command{:insert}` @tab テキストを挿入
@item `@command{:join}` @tab 行の結合。Vi: join! はない
@item `@command{:k}` @tab マークを設定
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:list`		print lines
`:map`		show or enter a mapping
`:mark`		set a mark
`:move`		move lines
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:list}` @tab 行を表示
@item `@command{:map}` @tab マップの設定または表示
@item `@command{:mark}` @tab マークを設定
@item `@command{:move}` @tab 行を移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:Next`		go to previous file in the argument list {Vi: no count}
`:next`		go to next file in the argument list {Vi: no count}
`:number`	print lines with line number
`:open`		start open mode (not implemented in Vim)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:Next}` @tab 引数リストの 1 つ前のファイルを編集 @{Vi: count はない@}
@item `@command{:next}` @tab 引数リストの次のファイルを開く @{Vi: count はない@}
@item `@command{:number}` @tab 行番号を表示
@item `@command{:open}` @tab open モードを開始 (Vim では未実装)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:pop`		jump to older entry in tag stack (only in some versions)
`:preserve`	write all text to swap file {Vi: might also exit}
`:previous`	same as `:Next` {Vi: only in some versions}
`:print`	print lines
`:put`		insert contents of register in the text
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:pop}` @tab タグスタックの 1 つ古いエントリへジャンプ (一部のバージョンでのみ)
@item `@command{:preserve}` @tab すべてのテキストをスワップファイルに書き出す @{Vi: 終了するかもしれない@}
@item `@command{:previous}` @tab `@command{:Next}`と同じ @{Vi: 一部のバージョンでのみ@}
@item `@command{:print}` @tab 行単位で印刷する
@item `@command{:put}` @tab テキストにレジスタの内容を挿入
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:quit`		quit Vi
`:read`		read file into the text
`:recover`	recover a file from a swap file {Vi: recovers in another way
		and sends mail if there is something to recover}
`:rewind`	go to the first file in the argument list; no ++opt
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:quit}` @tab Vi を終了
@item `@command{:read}` @tab テキストにファイルを挿入
@item `@command{:recover}` @tab スワップファイルからファイルを復元 @{Vi: 別の方法で回復し、回復するものがあればメールを送信する@}
@item `@command{:rewind}` @tab 引数リストの先頭のファイルを開く。++opt はない
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:set`		set option; but not `:set inv{option}`, `:set option&`,
		`:set all&`, `:set option+=value`, `:set option^=value`
		`:set option-=value` `:set option<`
`:shell`	escape to a shell
`:source`	read Vi or Ex commands from a file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:set}` @tab オプションを設定する。しかし `@command{:set inv@{option@}}`, `@command{:set option&}`, `@command{:set all&}`, `@command{:set option+=value}`, `@command{:set option^=value}`, `@command{:set option-=value}`, `@command{:set option<}` はない
@item `@command{:shell}` @tab シェルを実行する
@item `@command{:source}` @tab Vi or Ex コマンドをファイルから読み込む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:stop`		suspend the editor or escape to a shell
`:substitute`	find and replace text; Vi: no '&', 'i', 's', 'r' or 'I' flag,
		confirm prompt only supports 'y' and 'n', no highlighting
`:suspend`	same as ":stop"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:stop}` @tab エディタをサスペンドするかシェルにエスケープする
@item `@command{:substitute}` @tab テキストの検索と置換。Vi: '&', 'i', 's', 'r' または 'I' フラグ, 確認プロンプトは 'y' と 'n' のみサポート, ハイライトなし
@item `@command{:suspend}` @tab "@command{:stop}" と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:t`		same as ":copy"
`:tag`		jump to tag
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:t}` @tab "@command{:copy}" と同じ
@item `@command{:tag}` @tab タグへジャンプする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:unabbreviate`	remove abbreviation
`:undo`		undo last change {Vi: only one level}
`:unmap`	remove mapping
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:unabbreviate}` @tab 短縮入力を削除
@item `@command{:undo}` @tab 最後の変更を取り消す @{Vi: 1 レベルのみ@}
@item `@command{:unmap}` @tab マップを削除
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:vglobal`	execute commands for not matching lines
`:version`	print version number and other info
`:visual`	same as ":edit", but turns off "Ex" mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:vglobal}` @tab パターンにマッチしない行でコマンドを実行する
@item `@command{:version}` @tab バージョン番号その他の情報を表示
@item `@command{:visual}` @tab "@command{:edit}" と同じ、ただし "Ex" モードから抜ける
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:wq`		write to a file and quit Vi
`:write`	write to a file
`:xit`		write if buffer changed and quit Vi
`:yank`		yank lines into a register
`:z`		print some lines {not in all versions of Vi}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:wq}` @tab ファイルに保存して Vi を終了する
@item `@command{:write}` @tab ファイルに保存
@item `@command{:xit}` @tab バッファが変更されていたら保存し、Vi を終了する
@item `@command{:yank}` @tab 行をレジスタへヤンク
@item `@command{:z}` @tab いくつかの行を表示 @{Vi のすべてのバージョンにはない@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:!`		filter lines or execute an external command
`:"`		comment
`:#`		same as ":number"
`:*`		execute contents of a register
`:&`		repeat last ":substitute"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:!}` @tab 行をフィルタにかける、または、外部コマンドを実行する
@item `@command{:"}` @tab コメント
@item `@command{:#}` @tab "@command{:number}" と同じ
@item `@command{:*}` @tab レジスタの内容を実行する
@item `@command{:&}` @tab 最後に実行した "@command{:substitute}" を繰り返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
`:<`		shift lines one 'shiftwidth' left
`:=`		print the cursor line number
`:>`		shift lines one 'shiftwidth' right
`:@`		execute contents of a register; but not `:@`; `:@@` only in
		some versions
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item `@command{:<}` @tab '@option{shiftwidth}' 1 つ分だけ行を左へシフト
@item `@command{:=}` @tab カーソルのある行の行番号を表示
@item `@command{:>}` @tab '@option{shiftwidth}' 1 つ分だけ行を右へシフト
@item `@command{:@@}` @tab レジスタの内容を実行。しかし `@command{:@@}` はない。`@command{:@@@@}` は一部のバージョンでのみ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Common for these commands is that Vi doesn't support the ++opt argument on
`:edit` and other commands that open a file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドに共通するのは、Viが `@command{:edit}` やファイルを開く他のコマンドの ++opt 引数をサポートしていないことです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The following Normal mode commands are supported by Vi: ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 以下のノーマルモードコマンドはViでサポートされています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
note: See the beginning of |normal-index| for the meaning of WORD, N, Nmove
and etc in the description text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
説明文中の WORD, N, Nmove などの意味については、|@ref{normal-index}| の先頭を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
|CTRL-B|	scroll N screens Backwards
|CTRL-C|	interrupt current (search) command
|CTRL-D|	scroll Down N lines (default: half a screen); Vim scrolls
		'scroll' screen lines, Vi scrolls file lines; makes a
		difference when lines wrap
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item |@ref{CTRL-B}| @tab N 画面後方にスクロールする
@item |@ref{CTRL-C}| @tab 現在の(検索)コマンドを中断する
@item |@ref{CTRL-D}| @tab N 行(デフォルト: 画面の半分の行数)下にスクロールする。Vim は 'scroll' 画面行をスクロールし、Vi はファイル行をスクロールする。行が折り返されると違いが出る。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|CTRL-E|	scroll N lines upwards (N lines Extra)
|CTRL-F|	scroll N screens Forward
|CTRL-G|	display current file name and position
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{CTRL-E}| @tab N 行上にスクロールする (N 行余分)
@item |@ref{CTRL-F}| @tab N 画面前方にスクロールする
@item |@ref{CTRL-G}| @tab カレントファイル名と位置を表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|<BS>|		same as "h"
|CTRL-H|	same as "h"
|<NL>|		same as "j"
|CTRL-J|	same as "j"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{<BS>}| @tab "h" と同じ
@item |@ref{CTRL-H}| @tab "h" と同じ
@item |@ref{<NL>}| @tab "j" と同じ
@item |@ref{CTRL-J}| @tab "j" と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|CTRL-L|	redraw screen
|<CR>|		cursor to the first CHAR N lines lower
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{CTRL-L}| @tab 画面を再描画する
@item |@ref{<CR>}| @tab カーソルを N 行下の最初の文字へ移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|CTRL-M|	same as <CR>
|CTRL-N|	same as "j"
|CTRL-P|	same as "k"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{CTRL-M}| @tab <CR> と同じ
@item |@ref{CTRL-N}| @tab "j" と同じ
@item |@ref{CTRL-P}| @tab "k" と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|CTRL-R|	in some Vi versions: same as CTRL-L
|CTRL-T|	jump to N older Tag in tag list
|CTRL-U|	N lines Upwards (default: half a screen) {Vi used file lines
		while Vim scrolls 'scroll' screen lines; makes a difference
		when lines wrap}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{CTRL-R}| @tab 一部のViバージョン: CTRL-L と同じ
@item |@ref{CTRL-T}| @tab タグリストの N 個古いタグにジャンプする
@item |@ref{CTRL-U}| @tab N 行上へスクロールする (デフォルト: 画面の半分の行数)
@{Vi はファイル行を使っていたが、Vim は 'scroll' 画面の行をスクロールする。行が折り返されると違いが出る@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|CTRL-Y|	scroll N lines downwards
|CTRL-Z|	suspend program (or start new shell)
|CTRL-]|	:ta to ident under cursor {Vi: identifier after the cursor}
|CTRL-^|	edit alternate file {Vi: no count}
|<Space>|	same as "l"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{CTRL-Y}| @tab N 行下へスクロールする
@item |@ref{CTRL-Z}| @tab プログラムを中断する (または新しいシェルを起動する)
@item |@ref{CTRL-]}| @tab カーソル下の識別子で :ta する @{Vi: カーソルの後の識別子@}
@item |@ref{CTRL-^}| @tab 代替ファイルを編集する @{Vi: count はない@}
@item |@ref{<Space>}| @tab "l" と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|!|		filter Nmove text through the {filter} command
|!!|		filter N lines through the {filter} command
"		use register {a-zA-Z0-9.%#:-"} for next delete, yank or put
		(uppercase to append) ({.%#:} only work with put)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{!}| @tab @{filter@} コマンドで Nmove テキストをフィルタ処理する
@item |@ref{!!}| @tab @{filter@} コマンドで N 行をフィルタ処理する
@item " @tab 次の削除、ヤンク、貼り付けにレジスタ @{a-zA-Z0-9.%#:-"@} を使う
(大文字は追記する) (@{.%#:@} は貼り付けでのみ動作する)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|$|		cursor to the end of Nth next line
|%|		find the next (curly/square) bracket on this line and go to
		its match, or go to matching comment bracket, or go to
		matching preprocessor directive (Vi: no count supported)
|&|		repeat last :s
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{$}| @tab カーソルを N 番目の次の行の行末へ移動する
@item |@ref{%}| @tab 現在の行の次の (波/角) 括弧を検索し、そのマッチに移動するか、マッチするコメント括弧に移動するか、またはマッチするプリプロセッサディレクティブに移動する (Vi: count は未サポート)
@item |@ref{&}| @tab 最後の :s を繰り返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|'|		jump to mark (Vi: only lowercase marks)
|(|		cursor N sentences backward
|)|		cursor N sentences forward
|+|		same as <CR>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{'}| @tab マークにジャンプする (Vi: 小文字のマークのみ)
@item |@ref{\(}| @tab カーソルを N 文後方に移動する
@item |@ref{\)}| @tab カーソルを N 文前方に移動する
@item |@ref{+}| @tab <CR> と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|,|		repeat latest f, t, F or T in opposite direction N times
|-|		cursor to the first CHAR N lines higher
|.|		repeat last change with count replaced with N
|/|		search forward for the Nth occurrence of {pattern}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{@comma{}}| @tab 最後の f, t, F または T を反対方向に N 回繰り返す
@item |@ref{-}| @tab カーソルを N 行上の最初の文字へ移動する
@item |@ref{.}| @tab 置き換えられた最後の変更を N 回繰り返す
@item |@ref{/}| @tab @{pattern@} の N 番目の出現箇所を前方に検索する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|0|		cursor to the first char of the line
|:|		start entering an Ex command
|;|		repeat latest f, t, F or T N times
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{0}| @tab カーソルを行の最初の文字へ移動する
@item |@ref{:}| @tab Ex コマンドの入力を開始する
@item |@ref{;}| @tab 最後の f, t, F または T を N 回繰り返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|<|		shift Nmove lines one 'shiftwidth' leftwards
|<<|		shift N lines one 'shiftwidth' leftwards
|=|		filter Nmove lines through "indent"
|==|		filter N lines through "indent"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{<}| @tab Nmove 行を '@option{shiftwidth}' 1 つ分左にシフトする
@item |@ref{<<}| @tab N 行を '@option{shiftwidth}' 1 つ分左にシフトする
@item |@ref{=}| @tab "indent" で Nmove 行をフィルタリングする
@item |@ref{==}| @tab "indent" で N 行をフィルタリングする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|>|		shift Nmove lines one 'shiftwidth' rightwards
|>>|		shift N lines one 'shiftwidth' rightwards
|?|		search backward for the Nth previous occurrence of {pattern}
|@|		execute the contents of register {a-z} N times
		{Vi: only named registers}
|@@|		repeat the previous @{a-z} N times
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{>}| @tab Nmove 行を '@option{shiftwidth}' 1 つ分右にシフトする
@item |@ref{>>}| @tab N 行を '@option{shiftwidth}' 1 つ分右にシフトする
@item |@ref{?}| @tab @{pattern@} の N 番目の出現箇所を後方に検索する
@item |@ref{@@}| @tab レジスタ @{a-z@} の内容を N 回実行する
@{Vi: 名前付きレジスタのみ@}
@item |@ref{@@@@}| @tab 前の @{a-z@} を N 回繰り返す
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|A|		append text after the end of the line N times
|B|		cursor N WORDS backward
|C|		change from the cursor position to the end of the line
|D|		delete the characters under the cursor until the end of the
		line and N-1 more lines [into register x]; synonym for "d$"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{A}| @tab 行末の後にテキストを N 回追加する
@item |@ref{B}| @tab カーソルを N WORD 後方へ移動する
@item |@ref{C}| @tab カーソル位置から行末まで変更する
@item |@ref{D}| @tab カーソルの下の文字を行の終わりまで、さらに N-1 行まで削除する [レジスタ x へ]。"d$" と同義
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|E|		cursor forward to the end of WORD N
|F|		cursor to the Nth occurrence of {char} to the left
|G|		cursor to line N, default last line
|H|		cursor to line N from top of screen
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{E}| @tab カーソルを前方の N WORD の終わりに移動する
@item |@ref{F}| @tab カーソルを左に N 番目に現れる @{char@} に移動する
@item |@ref{G}| @tab カーソルを N 行目に移動する。デフォルトは最終行
@item |@ref{H}| @tab カーソルを画面上から N 行目に移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|I|		insert text before the first CHAR on the line N times
|J|		Join N lines; default is 2
|L|		cursor to line N from bottom of screen
|M|		cursor to middle line of screen
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{I}| @tab 行の最初の文字の前にテキストを N 回挿入する
@item |@ref{J}| @tab N 行を連結する。デフォルトは 2
@item |@ref{L}| @tab カーソルを画面下から N 行目に移動する
@item |@ref{M}| @tab カーソルを画面の中央の行に移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|N|		repeat the latest '/' or '?' N times in opposite direction
|O|		begin a new line above the cursor and insert text, repeat N
		times {Vi: blank [count] screen lines}
|P|		put the text [from register x] before the cursor N times
		{Vi: no count}
|Q|		switch to "Ex" mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{N}| @tab 最後の '/' か '?' を反対方向に N 回繰り返す
@item |@ref{O}| @tab カーソルの上に改行してテキストを挿入し、N 回繰り返す
@{Vi: 空白の [count] 画面行@}
@item |@ref{P}| @tab カーソル前にテキストを N 回貼り付ける [レジスタ x から]
@{Vi: count はない@}
@item |@ref{Q}| @tab "Ex" モードへ切り替える
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|R|		enter replace mode: overtype existing characters, repeat the
		entered text N-1 times
|S|		delete N lines [into register x] and start insert; synonym for
		"cc".
|T|		cursor till after Nth occurrence of {char} to the left
|U|		undo all latest changes on one line
		{Vi: while not moved off of the last modified line}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{R}| @tab 置換モードに入る: 既存の文字を上書きする。入力したテキストを N-1 回繰り返す
@item |@ref{S}| @tab N 行を [レジスタ x へ入れ] 削除し、挿入を開始する。"cc" と同義
@item |@ref{T}| @tab カーソルを左に N 番目に現れる @{char@} の後ろまで移動する
@item |@ref{U}| @tab 1 行のすべての最新の変更を元に戻す
@{Vi: 最後に変更された行から移動していない間@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|W|		cursor N WORDS forward
|X|		delete N characters before the cursor [into register x]
|Y|		yank N lines [into register x]; synonym for "yy"
|ZZ|		store current file if modified, and exit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{W}| @tab カーソルを N WORD 前方に移動する
@item |@ref{X}| @tab カーソルの前の N 文字を削除する [レジスタ x に入れる]
@item |@ref{Y}| @tab N 行ヤンクする [レジスタ x に]。"yy" と同義
@item |@ref{ZZ}| @tab 変更されていれば現在のファイルを保存して終了する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|[[|		cursor N sections backward
|]]|		cursor N sections forward
|^|		cursor to the first CHAR of the line
|_|		cursor to the first CHAR N - 1 lines lower
|`|		cursor to the mark {a-zA-Z0-9}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{[[}| @tab カーソルを N セクション後方に移動する
@item |@ref{]]}| @tab カーソルを N セクション前方に移動する
@item |@ref{^}| @tab カーソルを行の最初の文字に移動する
@item |@ref{_}| @tab カーソルを N-1 行下の最初の文字に移動する
@item |@ref{`}| @tab カーソルをマーク @{a-zA-Z0-9@} へ移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|a|		append text after the cursor N times
|b|		cursor N words backward
|c|		delete Nmove text [into register x] and start insert
|cc|		delete N lines [into register x] and start insert
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{a}| @tab カーソルの後ろにテキストを N 回追加する
@item |@ref{b}| @tab カーソルを N word 後方に移動する
@item |@ref{c}| @tab Nmove テキストを削除して [register x へ入れ] 挿入を開始する
@item |@ref{cc}| @tab N 行削除して [register x へ入れ] 挿入を開始する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|d|		delete Nmove text [into register x]
|dd|		delete N lines [into register x]
|e|		cursor forward to the end of word N
|f|		cursor to Nth occurrence of {char} to the right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{d}| @tab Nmove テキストを削除する [レジスタ x へ入れる]
@item |@ref{dd}| @tab N 行を削除する [レジスタ x へ入れる]
@item |@ref{e}| @tab カーソルを前方の N word の終わりに移動する
@item |@ref{f}| @tab カーソルを右に N 番目に現れる @{char@} に移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|h|		cursor N chars to the left
|i|		insert text before the cursor N times
|j|		cursor N lines downward
|k|		cursor N lines upward
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{h}| @tab カーソルを左に N 文字移動する
@item |@ref{i}| @tab カーソルの前にテキストを N 回挿入する
@item |@ref{j}| @tab カーソルを N 行下に移動する
@item |@ref{k}| @tab カーソルを N 行上に移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|l|		cursor N chars to the right
|m|		set mark {A-Za-z} at cursor position
|n|		repeat the latest '/' or '?' N times
|o|		begin a new line below the cursor and insert text
		{Vi: blank [count] screen lines}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{l}| @tab カーソルを右に N 文字移動する
@item |@ref{m}| @tab カーソル位置にマーク @{A-Za-z@} を設定する
@item |@ref{n}| @tab 最後の '/' か '?' を N 回繰り返す
@item |@ref{o}| @tab カーソルの下に改行してテキストを挿入する
@{Vi: 空白の [count] 画面行@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|p|		put the text [from register x] after the cursor N times
		{Vi: no count}
|r|		replace N chars with {char} {Vi: CTRL-V <CR> still replaces
		with a line break, cannot replace something with a <CR>}
|s|		(substitute) delete N characters [into register x] and start
		insert
|t|		cursor till before Nth occurrence of {char} to the right
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{p}| @tab カーソル後にテキストを N 回貼り付ける [レジスタ x から]
@{Vi: count はない@}
@item |@ref{r}| @tab N 文字を @{char@} に置き換える
@{Vi: CTRL-V <CR> は依然として改行に置き換えらる。何かを <CR> に置き換えることはできない@}
@item |@ref{s}| @tab (置換え) N 文字を削除して [レジスタ x へ入れ] 挿入を開始する
@item |@ref{t}| @tab カーソルを右に N 番目に現れる @{char@} の前まで移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|u|		undo changes {Vi: only one level}
|w|		cursor N words forward
|x|		delete N characters under and after the cursor [into register
		x]
|y|		yank Nmove text [into register x]
|yy|		yank N lines [into register x]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{u}| @tab 変更を元に戻す @{Vi: 1 レベルのみ@}
@item |@ref{w}| @tab カーソルを N word 前方に移動する
@item |@ref{x}| @tab カーソル下およびカーソルの後の N 文字を削除する [レジスタ x へ入れる]
@item |@ref{y}| @tab Nmove テキストをヤンクする [レジスタ x へ入れる]
@item |@ref{yy}| @tab N 行をヤンクする [レジスタ x へ入れる]
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|z<CR>|		current line to the top
|z-|		current line to the bottom
|z+|		cursor on line N
|z^|		cursor on line N
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{z<CR>}| @tab 現在の行を先上位へ
@item |@ref{z-}| @tab 現在の行を最下位へ
@item |@ref{z+}| @tab カーソルを N 行目上へ
@item |@ref{z^}| @tab カーソルを N 行目上へ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
|{|		cursor N paragraphs backward
|		cursor to column N
|}|		cursor N paragraphs forward
|~|		switch case of N characters under the cursor; Vim: depends on
		'tildeop' {Vi: no count, no 'tildeop'}
|<Del>|		same as "x"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{@{}| @tab カーソルを N 段落後方へ移動する
@item | @tab カーソルを N 桁位置へ移動する
@item |@ref{@}}| @tab カーソルを N 段落前方へ移動する
@item |@ref{~}| @tab カーソルの下の N 文字の大文字と小文字を切り替える。Vim: 'tildeop' に依る@{Vi: count はない、'@option{tildeop}' はない@}
@item |@ref{<Del>}| @tab "x" と同じ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The following commands are supported in Insert mode by Vi: ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 以下のコマンドは Vi の挿入モードでサポートされています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
CTRL-@		insert previously inserted text and stop insert
		{Vi: only when typed as first char, only up to 128 chars}
CTRL-C		quit insert mode, without checking for abbreviation, unless
		'insertmode' set.
CTRL-D		delete one shiftwidth of indent in the current line
		{Vi: CTRL-D works only when used after autoindent}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item CTRL-@@ @tab 前に挿入したテキストを挿入して挿入モードを停止する
@{Vi: 最初の文字として入力した場合のみ。最大 128 文字まで@}
@item CTRL-C @tab '@option{insertmode}' が設定されていなければ、略語をチェックせずに挿入モードを終了する
@item CTRL-D @tab 現在の行の shiftwidth 1 つ分のインデントを削除する
@{Vi: CTRL-D は自動インデントの後に使用した場合にのみ機能する@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<BS>		delete character before the cursor {Vi: does not delete
		autoindents, does not cross lines, does not delete past start
		position of insert}
CTRL-H		same as <BS>
<Tab>		insert a <Tab> character
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item <BS> @tab カーソルの前の文字を削除する
@{Vi: 自動インデントを削除しない、行をまたがない、挿入の過去の開始位置を削除しない@}
@item CTRL-H @tab <BS> と同じ
@item <Tab> @tab <Tab> 文字を挿入する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
CTRL-I		same as <Tab>
<NL>		same as <CR>
CTRL-J		same as <CR>
<CR>		begin new line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item CTRL-I @tab <Tab> と同じ
@item <NL> @tab <CR> と同じ
@item CTRL-J @tab <CR> と同じ
@item <CR> @tab 改行する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
CTRL-M		same as <CR>
CTRL-T		insert one shiftwidth of indent in current line {Vi: only when
		in indent}
CTRL-V {char}	insert next non-digit literally {Vi: no decimal byte entry}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item CTRL-M @tab <CR> と同じ
@item CTRL-T @tab 現在の行に shiftwidth 1 つ分のインデントを挿入する
@{Vi: インデント内の場合のみ@}
@item CTRL-V @{char@} @tab 次の非数字を文字通りに挿入する
@{Vi: 10 進数バイトエントリなし@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
CTRL-W		delete word before the cursor
CTRL-Z		when 'insertmode' set: suspend Vi
<Esc>		end insert mode (unless 'insertmode' set)
CTRL-[		same as <Esc>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item CTRL-W @tab カーソルの前の単語を削除する
@item CTRL-Z @tab '@option{insertmode}' が設定されている場合: Vi を中断する
@item <Esc> @tab 挿入モードを終了する ('@option{insertmode}' が設定されていなければ)
@item CTRL-[ @tab <Esc> と同じ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
0 CTRL-D	delete all indent in the current line
^ CTRL-D	delete all indent in the current line, restore it in the next
		line
<Del>		delete character under the cursor
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 0 CTRL-D @tab 現在行のすべてのインデントを削除する
@item ^ CTRL-D @tab 現在行のすべてのインデントを削除し、次行にそれを復元する
@item <Del> @tab カーソル下の文字を削除する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The following options are supported by Vi: ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 以下のオプションは Vi でサポートされています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
'autoindent'	  'ai'	    take indent for new line from previous line
			    {Vi does this slightly differently: After the
			    indent is deleted when typing <Esc> or <CR>, the
			    cursor position when moving up or down is after
			    the deleted indent; Vi puts the cursor somewhere
			    in the deleted indent}.
'autowrite'	  'aw'	    automatically write file if changed
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item 'autoindent' 'ai'
新しい行のために前の行のインデントを使う
@{Vi はこれとは少し違ったやり方をする: <Esc> や<CR> を打ったときにインデントが削除された後、上下に移動したときのカーソル位置は削除されたインデントの後である。Vi は削除されたインデントのどこかにカーソルを置く@}
@item 'autowrite' 'aw'
変更された場合は自動的にファイルに書き込む
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'directory'	  'dir'     list of directory names for the swap file
			    {Vi: directory to put temp file in, defaults to
			    "/tmp"}
'edcompatible'	  'ed'	    toggle flags of ":substitute" command
'errorbells'	  'eb'	    ring the bell for error messages
'ignorecase'	  'ic'	    ignore case in search patterns
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'directory' 'dir'
スワップファイルのディレクトリ名のリスト
@{Vi: 一時ファイルを入れるディレクトリ。デフォルトは "/tmp"@}
@item 'edcompatible' 'ed'
"@command{:substitute}" コマンドのフラグを切り替える
@item 'errorbells' 'eb'
エラーメッセージのベルを鳴らす
@item 'ignorecase' 'ic'
検索パターンの大文字小文字を無視する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'lines'			    number of lines in the display
'lisp'			    automatic indenting for Lisp {Vi: Does it a little
			    bit differently}
'list'			    show <Tab> and <EOL>
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'lines'
ディスプレイの行数
@item 'lisp'
Lisp 用の自動インデント @{Vi: ちょっとだけ違う@}
@item 'list'
<Tab> と <EOL> を表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'magic'			    changes special characters in search patterns
'modeline'	  'ml'	    recognize 'modelines' at start or end of file
				{called modelines in some Vi versions}
'number'	  'nu'	    print the line number in front of each line
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'magic'
検索パターンの特別な文字を変更する
@item 'modeline' 'ml'
ファイルの先頭または末尾の '@option{modelines}' を認識する
@{一部の Vi バージョンでは modelines と呼ばれている@}
@item 'number' 'nu'
各行の前に行番号を表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'paragraphs'	  'para'    nroff macros that separate paragraphs
'prompt'	  'prompt'  enable prompt in Ex mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'paragraphs' 'para'
段落を区切る nroff マクロ
@item 'prompt' 'prompt'
Ex モードでプロンプトを有効にする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'readonly'	  'ro'	    disallow writing the buffer {Vim sets 'readonly'
				when editing a file with `:view`}
'remap'			    allow mappings to work recursively
'report'		    threshold for reporting nr. of lines changed
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'readonly' 'ro'
バッファへの書き込みを禁止する
@{Vimは `@command{:view}` でファイルを編集する場合は '@option{readonly}' を設定する@}
@item 'remap'
マッピングの再帰を許可する
@item 'report'
レポートのしきい値の行数の変更
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'scroll'	  'scr'     lines to scroll with CTRL-U and CTRL-D
'sections'	  'sect'    nroff macros that separate sections
'shell'		  'sh'	    name of shell to use for external commands
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'scroll' 'scr'
@kbd{CTRL-U} と @kbd{CTRL-D} のスクロール行数
@item 'sections' 'sect'
セクションを区切る nroff マクロ
@item 'shell' 'sh'
外部コマンドに使用するシェルの名前
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'shiftwidth'	  'sw'	    number of spaces to use for (auto)indent step
'showmatch'	  'sm'	    briefly jump to matching bracket if insert one
'showmode'	  'smd'     message on status line to show current mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'shiftwidth' 'sw'
(自動) インデントステップに使用するスペースの数
@item 'showmatch' 'sm'
括弧を挿入する場合は、対応する括弧に簡単にジャンプする
@item 'showmode' 'smd'
現在のモードを示すステータス行のメッセージ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'tabstop'	  'ts'	    number of spaces that <Tab> in file uses
'taglength'	  'tl'	    number of significant characters for a tag
'tags'		  'tag'     list of file names used by the tag command
			    {Vi: default is "tags /usr/lib/tags"}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'tabstop' 'ts'
ファイル内の <Tab> が使用するスペースの数
@item 'taglength' 'tl'
タグの有効文字数
@item 'tags' 'tag'
tag コマンドで使用されているファイル名のリスト
@{Vi: デフォルトは "tags /usr/lib/tags"@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'tagstack'	  'tgst'    push tags onto the tag stack {not in all versions
				of Vi}
'term'			    name of the terminal
'terse'			    shorten some messages
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'tagstack' 'tgst'
タグをタグスタックにプッシュする
@{すべての Vi のバージョンにはない@}
@item 'term'
端末名
@item 'terse'
いくつかのメッセージを短くする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'timeout'	  'to'	    time out on mappings and key codes
'timeoutlen'	  'tm'	    time for 'timeout' {only in some Vi versions}
'ttytype'	  'tty'     alias for 'term'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'timeout' 'to'
マッピングとキーコードのタイムアウト
@item 'timeoutlen' 'tm'
'@option{timeout}' の時間 @{一部の Vi バージョンでのみ@}
@item 'ttytype' 'tty'
'@option{term}' の別名
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'verbose'	  'vbs'     give informative messages {only in some Vi
				versions as a boolean option}
'warn'			    warn for shell command when buffer was changed
'window'	  'wi'	    nr of lines to scroll for CTRL-F and CTRL-B
			    {Vi also uses the option to specify the number of
			    displayed lines}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'verbose' 'vbs'
有益なメッセージを与える @{ブール値オプションとして一部の Vi バージョンでのみ@}
@item 'warn'
バッファが変更されたときにシェルコマンドを警告する
@item 'window' 'wi'
@kbd{CTRL-F} と @kbd{CTRL-B} のスクロール行数
@{表示する行数を指定するためにも Vi はオプションを使用する@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
'wrapmargin'	  'wm'	    chars from the right where wrapping starts
			    {Vi: works differently and less usefully}
'wrapscan'	  'ws'	    searches wrap around the end of the file
'writeany'	  'wa'	    write to file with no need for "!" override
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 'wrapmargin' 'wm'
折り返しが始まる右からの文字 @{Vi: 異なった働きをする。そしてあまり役に立たない@}
@item 'wrapscan' 'ws'
検索はファイルの末尾で折り返す
@item 'writeany' 'wa'
"!" を必要とせずにファイルに書き込む
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Also see |missing-options|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{missing-options}| も参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. Command-line arguments				*cmdline-arguments*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{cmdline-arguments}
@cindex cmdline-arguments
@section 7. コマンドライン引数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Different versions of Vi have different command-line arguments.  This can be
confusing.  To help you, this section gives an overview of the differences.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
異なるバージョンの Vi では異なるコマンドライン引数があります。これはちょっと紛らわしいですので便宜のためにこの章では違いの概略を説明します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Five variants of Vi will be considered here:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
5 つの種類の Vi がここでは考慮されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Elvis	Elvis version 2.1b
	Nvi	Nvi version 1.79
	Posix	Posix 1003.2
	Vi	Vi version 3.7 (for Sun 4.1.x)
	Vile	Vile version 7.4 (incomplete)
	Vim	Vim version 5.2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item Elvis @tab Elvis version 2.1b
@item Nvi @tab Nvi version 1.79
@item Posix @tab Posix 1003.2
@item Vi @tab Vi version 3.7 (Sun 4.1.x)
@item Vile @tab Vile version 7.4 (不完全)
@item Vim @tab Vim version 5.2
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Only Vim is able to accept options in between and after the file names.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim だけがファイル名の後でもオプションを受け付けます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
+{command}	Elvis, Nvi, Posix, Vi, Vim: Same as "-c {command}".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item +@{command@}
Elvis, Nvi, Posix, Vi, Vim: "-c @{command@}" と同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-		Nvi, Posix, Vi: Run Ex in batch mode.
		Vim: Read file from stdin (use -s for batch mode).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -
@itemize
@item Nvi, Posix, Vi: Ex をバッチモードで起動します
@item Vim: 標準入力からファイルを読み込みます (バッチモードを使うには -s を利用してください)。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--		Vim: End of options, only file names are following.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}
Vim: オプションの終わりです。この後はファイル名のみ書くことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--cmd {command}	Vim: execute {command} before sourcing vimrc files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}cmd @{command@}
Vim: vimrc ファイルを読み込む前に @{command@} を実行します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--echo-wid	Vim: GTK+ echoes the Window ID on stdout
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}echo-wid
Vim: GTK+ がウィンドウの ID を標準出力に書き出します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--help		Vim: show help message and exit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}help
Vim: ヘルプメッセージを表示して終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--literal	Vim: take file names literally, don't expand wildcards.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}literal
Vim: ファイル名のワイルドカードを処理しません
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--nofork	Vim: same as |-f|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}nofork
Vim: |@ref{-f}| と同じです
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--noplugin[s]	Vim: Skip loading plugins.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}noplugin[s]
Vim: プラグインの読み込みをしません
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote	Vim: edit the files in another Vim server
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote
Vim: 他の Vim サーバーでそのファイルの編集をします
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-expr {expr}	Vim: evaluate {expr} in another Vim server
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-expr @{expr@}
Vim: 他の Vim サーバーで @{expr@} を評価します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-send {keys}	Vim: send {keys} to a Vim server and exit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-send @{keys@}
Vim: Vim サーバーに @{Keys@} を送って終了します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-silent {file}	Vim: edit the files in another Vim server if possible
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-silent @{file@}
Vim: 可能なら他の Vim サーバーでファイルの編集をします
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-wait	Vim: edit the files in another Vim server and wait for it
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-wait
Vim: 他の Vim サーバーでファイルの編集をして、それが終わるまで待機します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-wait-silent	Vim: like --remote-wait, no complaints if not possible
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-wait-silent
Vim: @minus{}@minus{}remote-waitと同じですが、それが不可能な場合でもエラーをだしません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--role {role}	Vim: GTK+ 2: set role of main window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}role @{role@}
Vim: GTK+ 2: メインウィンドウの role を設定します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--serverlist	Vim: Output a list of Vim servers and exit
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}serverlist
Vim: Vim サーバーのリストを出力して終了します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--servername {name}	Vim: Specify Vim server name
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}servername @{name@}
Vim: Vim サーバーの名前を指定します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--socketid {id}		Vim: GTK window socket to run Vim in
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}socketid @{id@}
Vim: Vim を起動する GTK ウィンドウの socket
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--windowid {id}		Vim: Win32 window ID to run Vim in
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}windowid @{id@}
Vim: Vim を起動する Win32 のウィンドウ ID
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--version	Vim: show version message and exit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}version
Vim: バージョンメッセージを表示して終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-?		Vile: print usage summary and exit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -?
Vile: 簡単な使い方を表示して終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-a		Elvis: Load all specified file names into a window (use -o for
		Vim).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -a
Elvis: 指定されたファイル名をそれぞれ 1 つのウィンドウに読み込みます (Vim では -o を使ってください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-A		Vim: Start in Arabic mode (when compiled with Arabic).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -A
Vim: アラビア語モードで起動します (その機能が組み込まれているなら)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-b {blksize}	Elvis: Use {blksize} blocksize for the session file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -b @{blksize@}
Elvis: ファイルのセッションに @{blksize@} のブロックサイズを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-b		Vim: set 'binary' mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -b
Vim: '@option{binary}' モードをセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-C		Vim: Compatible mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -C
Vim: Vi 互換モードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-c {command}	Elvis, Nvi, Posix, Vim: run {command} as an Ex command after
		loading the edit buffer.
		Vim: allow up to 10 "-c" arguments
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -c @{command@}
@itemize
@item Elvis, Nvi, Posix, Vim: ファイルを編集バッファにロードした後 @{command@} を Ex コマンドとして走らせます。
@item Vim: 10 個まで "-c" 引数をとることができます。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-d {device}	Vim: Use {device} for I/O (Amiga only). {only when compiled
		without the |+diff| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -d @{device@}
Vim: I/O に @{device@} を使います (Amiga のみ)。@{|@ref{+diff}| の機能を外してコンパイルされたときのみ@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-d		Vim: start with 'diff' set. |vimdiff|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -d
Vim: '@option{diff}' を設定して起動します |@ref{vimdiff}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-dev {device}	Vim: Use {device} for I/O (Amiga only).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -dev @{device@}
Vim: I/O に @{device@} を使います (Amiga のみ)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-D		Vim: debug mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -D
Vim: デバッグモード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-e		Elvis, Nvi, Vim: Start in Ex mode, as if the executable is
		called "ex".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -e
Elvis, Nvi, Vim: あたかも "ex" が起動されたように Ex モードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-E		Vim: Start in improved Ex mode |gQ|, like "exim".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -E
Vim: "exim"のように、より良い Ex モードで起動します |@ref{gQ}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-f		Vim: Run GUI in foreground (Amiga: don't open new window).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -f
Vim: GUI をフォアグラウンドジョブとして起動します (Amiga: 新たにウィンドウを開きません)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-f {session}	Elvis: Use {session} as the session file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -f @{session@}
Elvis: @{session@} をセッションファイルとして使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-F		Vim: Start in Farsi mode (when compiled with Farsi).
		Nvi: Fast start, don't read the entire file when editing
		starts.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -F
@itemize
@item Vim: ペルシアモードで起動します (Farsi 付きでコンパイルされている場合)。
@item Nvi: 編集を開始するときにファイルのすべてを読み込まず素早く起動します。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-G {gui}	Elvis: Use the {gui} as user interface.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -G @{gui@}
Elvis: @{gui@} をユーザーインターフェイスとして使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-g		Vim: Start GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -g
Vim: GUI で起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-g N		Vile: start editing at line N
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -g N
Vile: N 行目から編集を開始します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-h		Vim: Give help message.
		Vile: edit the help file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -h
@itemize
@item Vim: ヘルプメッセージを表示します。
@item Vile: ヘルプファイルを編集します。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-H		Vim: start Hebrew mode (when compiled with it).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -H
Vim: ヘブライモードで起動します (ヘブライオプションをつけてコンパイルされている場合)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-i		Elvis: Start each window in Insert mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -i
Elvis: それぞれのウィンドウを挿入モードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-i {viminfo}	Vim: Use {viminfo} for viminfo file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -i @{viminfo@}
Vim: @{viminfo@} を Viminfo ファイルとして使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-L		Vim: Same as "-r" {only in some versions of Vi: "List
		recoverable edit sessions"}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -L
Vim: "-r" と同じです。@{Vi の一部のバージョンでのみ: "回復可能な編集セッションを一覧表示"@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-l		Nvi, Vi, Vim: Set 'lisp' and 'showmatch' options.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -l
Nvi, Vi, Vim: '@option{lisp}' と '@option{showmatch}' オプションをセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-m		Vim: Modifications not allowed to be written, resets 'write'
		option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -m
Vim: 変更を書き込むことを禁止し、'@option{write}' オプションを解除します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-M		Vim: Modifications not allowed, resets 'modifiable' and the
		'write' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -M
Vim: 変更を加えることを禁止し、'@option{write}' オプションと '@option{modifiable}' オプションを解除します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-N		Vim: No-compatible mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -N
Vim: 互換モードではないモードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-n		Vim: No swap file used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -n
Vim: スワップファイルを使いません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-nb[args]	Vim: open a NetBeans interface connection
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -nb[args]
Vim: NetBeans への接続を開きます
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-O[N]		Vim: Like -o, but use vertically split windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -O[N]
Vim: -o と同じですが、ウィンドウを縦分割します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-o[N]		Vim: Open [N] windows, or one for each file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -o[N]
Vim: [N] 個のウィンドウを開きます。もしくは各ファイルに 1 個ずつウィンドウを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-p[N]		Vim: Open [N] tab pages, or one for each file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -p[N]
Vim: [N] 個のタブページを開きます。もしくは各ファイルに 1 個ずつタブページを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-P {parent-title} Win32 Vim: open Vim inside a parent application window
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -P @{parent-title@}
Win32 Vim: 親となるアプリケーションの内側で Vim を開きます
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-q {name}	Vim: Use {name} for quickfix error file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -q @{name@}
Vim: @{name@} を quickfix エラーファイルとして使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-q{name}	Vim: Idem.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -q@{name@}
Vim: 同上。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-R		Elvis, Nvi, Posix, Vile, Vim: Set the 'readonly' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -R
Elvis, Nvi, Posix, Vile, Vim: '@option{readonly}' オプションをセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-r		Elvis, Nvi, Posix, Vi, Vim: Recovery mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -r
Elvis, Nvi, Posix, Vi, Vim: 復元モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-S		Nvi: Set 'secure' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -S
Nvi: '@option{secure}' オプションをセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-S {script}	Vim: source script after starting up.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -S @{script@}
Vim: 起動後にスクリプトを実行します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-s		Nvi, Posix, Vim: Same as "-" (silent mode), when in Ex mode.
		Elvis: Sets the 'safer' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -s
@itemize
@item Nvi, Posix, Vim: Ex モードでは "-" (サイレントモード) と同じです。
@item Elvis: '@option{safer}' オプションをセットします。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-s {scriptin}	Vim: Read from script file {scriptin}; only when not in Ex
		mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -s @{scriptin@}
Vim: @{scriptin@} からスクリプトを読み込みます; Ex モードでないときにのみ有効です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-s {pattern}	Vile: search for {pattern}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -s @{pattern@}
Vile: @{pattern@} を検索します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-t {tag}	Elvis, Nvi, Posix, Vi, Vim: Edit the file containing {tag}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -t @{tag@}
Elvis, Nvi, Posix, Vi, Vim: @{tag@} を含むファイルを編集します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-t{tag}		Vim: Idem.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -t@{tag@}
Vim: 同上。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-T {term}	Vim: Set terminal name to {term}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -T @{term@}
Vim: @{term@} に端末名をセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-u {vimrc}	Vim: Read initializations from {vimrc} file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -u @{vimrc@}
Vim: @{vimrc@} ファイルを初期化ファイルとして読み込みます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-U {gvimrc}	Vim: Read GUI initializations from {gvimrc} file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -U @{gvimrc@}
Vim: @{gvimrc@} ファイルを GUI 初期化ファイルとして読み込みます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-v		Nvi, Posix, Vi, Vim: Begin in Normal mode (visual mode, in Vi
		terms).
		Vile: View mode, no changes possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -v
@itemize
@item Nvi, Posix, Vi, Vim: ノーマルモードで起動します (Vi ではビジュアルモードを意味していました)。
@item Vile: 閲覧モードで起動し、変更は不可です。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-V		Elvis, Vim: Verbose mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -V
Elvis, Vim: 冗長なモードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-V{nr}		Vim: Verbose mode with specified level.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -V@{nr@}
Vim: 特定レベルの冗長なモードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-w {size}	Elvis, Posix, Nvi, Vi, Vim: Set value of 'window' to {size}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -w @{size@}
Elvis, Posix, Nvi, Vi, Vim: '@option{window}'の値を @{size@} にセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-w{size}	Nvi, Vi: Same as "-w {size}".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -w@{size@}
Nvi, Vi: "-w @{size@}" と同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
-w {name}	Vim: Write to script file {name} (must start with non-digit).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -w @{name@}
Vim: スクリプトファイル @{name@} に書き込みます (non-digit で起動しなければなりません)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-W {name}	Vim: Append to script file {name}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -W @{name@}
Vim: スクリプトファイル @{name@} に追加します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-x		Vi, Vim: Ask for encryption key.  See |encryption|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -x
Vi, Vim: 暗号鍵の入力を尋ねさせます。|@ref{encryption}| もご覧下さい。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-X		Vim: Don't connect to the X server.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -X
Vim: Xサーバーに接続しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-y		Vim: Start in easy mode, like |evim|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -y
Vim: |@ref{evim}| のように簡単モードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-Z		Vim: restricted mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -Z
Vim: 制限モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
@{cmdfile}	Vile: use {cmdfile} as startup file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @@@{cmdfile@}
Vile: @{cmdfile@} を初期化ファイルに使います。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. POSIX compliance				*posix* *posix-compliance*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{posix}
@anchor{posix-compliance}
@cindex posix
@cindex posix-compliance
@section 8. POSIX 準拠
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In 2005 the POSIX test suite was run to check the compatibility of Vim.  Most
of the test was executed properly.  There are the few things where Vim
is not POSIX compliant, even when run in Vi compatibility mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
2005年、Vim の互換性をチェックするために POSIX テストを行いました。テストのほとんどはパスしました。Vi 互換モードで実行したときでも POSIX 準拠でない点が 2, 3 ありました。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*$VIM_POSIX*
Set the $VIM_POSIX environment variable to have 'cpoptions' include the POSIX
flags when Vim starts up.  This makes Vim run as POSIX as it can.  That's
a bit different from being Vi compatible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@anchor{$VIM_POSIX}
@vindex $VIM_POSIX
Vim 起動時にオプション '@option{cpoptions}' に POSIX フラグを含めるには、環境変数 @env{$VIM_POSIX} を設定してください。そうすると Vim ができるだけ POSIX に従うようになります。これは Vi 互換であることとは少し違います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can find the Posix specification for Vi here:
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/vi.html
And the related Ex specification:
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi の POSIX 仕様についてはここにあります: @*
@url{https://pubs.opengroup.org/onlinepubs/9699919799/utilities/vi.html}

および関連する Ex 仕様: @*
@url{https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is where Vim does not behave as POSIX specifies and why:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 以下は Vim が POSIX 仕様に従わない点とその理由です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*posix-screen-size*
	The $COLUMNS and $LINES environment variables are ignored by Vim if
	the size can be obtained from the terminal in a more reliable way.
	Add the '|' flag to 'cpoptions' to have $COLUMNS and $LINES overrule
	sizes obtained in another way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{posix-screen-size}
@cindex posix-screen-size
Vim は端末からより確かな方法でサイズが得られると、環境変数 @env{$COLUMN}S と @env{$LINES} を無視します。'@option{cpoptions}' にフラグ '@var{l}' を加えると @env{$COLUMNS} と @env{$LINES} が他の方法で得られたサイズを上書きするようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "{" and "}" commands don't stop at a "{" in the original Vi, but
	POSIX specifies it does.  Add the '{' flag to 'cpoptions' if you want
	it the POSIX way.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オリジナルの Vi ではコマンド "@{" と "@}" は "@{" で止まりませんが、POSIX は止まるように指定しています。POSIX 流を望むなら '@option{cpoptions}' にフラグ '@env{@{}' を加えてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The "D", "o" and "O" commands accept a count.  Also when repeated.
	Add the '#' flag to 'cpoptions' if you want to ignore the count.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コマンド "D", "o", "O" がカウントを受け付けます。繰り返されたときもです。カウントを無視するようにしたければ '@option{cpoptions}' にフラグ '@var{#}' を加えてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The ":cd" command fails if the current buffer is modified when the '.'
	flag is present in 'cpoptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{cpoptions}' にフラグ '@var{.}' が入っていると、バッファが変更されているときコマンド "@command{:cd}" が失敗します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	There is no ATTENTION message, the "A" flag is added to 'shortmess'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi にはATTENTION メッセージはありません。ATTENTION メッセージを出さなくするには '@option{shortmess}' にフラグ "@var{A}" を加えてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These are remarks about running the POSIX test suite:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec POSIX テストの実行についての注意:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- vi test 33 sometimes fails for unknown reasons
- vi test 250 fails; behavior will be changed in a new revision
    http://www.opengroup.org/austin/mailarchives/ag-review/msg01710.html
    (link no longer works, perhaps it's now:
    https://www.opengroup.org/sophocles/show_mail.tpl?CALLER=show_archive.tpl&source=L&listname=austin-review-l&id=1711)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item vi テスト 33 はときどき未知の理由のために失敗します
@item vi テスト 250 が失敗します。新しいバージョンで挙動が変更されるでしょう。
@url{http://www.opengroup.org/austin/mailarchives/ag-review/msg01710.html}
(今はリンク切れ。現在の場所はおそらくここ:
@url{https://www.opengroup.org/sophocles/show_mail.tpl?CALLER=show_archive.tpl&source=L&listname=austin-review-l&id=1711})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- vi test 310 fails; exit code non-zero when any error occurred?
- ex test 24 fails because test is wrong.  Changed between SUSv2 and SUSv3.
- ex tests 47, 48, 49, 72, 73 fail because .exrc file isn't read in silent
  mode and $EXINIT isn't used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item vi テスト 310 が失敗します。エラーが起きたとき終了コードが非ゼロになる？
@item ex テスト 24 が失敗します。テストが間違っているためです。SUSv2 と SUSv3 の間に変更されました。
@item ex テスト 47, 48, 49, 72, 73 が失敗します。サイレントモードでは @file{.exrc} は読み込まれず、@env{$EXINIT} が使われないためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- ex tests 76, 78 fail because echo is used instead of printf. (fixed)
    Also: problem with \s not changed to space.
- ex test 355 fails because 'window' isn't used for "30z".
- ex test 368 fails because shell command isn't echoed in silent mode.
- ex test 394 fails because "=" command output isn't visible in silent mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ex テスト 76, 78 が失敗します。printf の代わりに echo が使われるためです (修正されました)。また、\s がスペースに変更されない問題があります。
@item ex テスト 355 が失敗します。"30z" のときに '@option{window}' が使われないためです。
@item ex テスト 368 が失敗します。サイレントモードでシェルコマンドがエコーされないためです。
@item ex テスト 394 が失敗します。コマンド "=" の出力がサイレントモードで見えないためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- ex test 411 fails because test file is wrong, contains stray ':'.
- ex test 475 and 476 fail because reprint output isn't visible in silent mode.
- ex test 480 and 481 fail because the tags file has spaces instead of a tab.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ex テスト 411 が失敗します。テストファイルが迷子の ':' を含んで正しくないためです。
@item ex テスト 475, 476 が失敗します。サイレントモードでリプリント出力が見えないためです。
@item ex テスト 480, 481 が失敗します。tags ファイルがタブでなくスペースを含んでいるためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- ex test 502 fails because .exrc isn't read in silent mode.
- ex test 509 fails because .exrc isn't read in silent mode. and exit code is
  1 instead of 2.
- ex test 534 fails because .exrc isn't read in silent mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ex テスト 502 が失敗します。サイレントモードで @file{.exrc} が読まれないためです。
@item ex テスト 509 が失敗します。サイレントモードで @file{.exrc} が読まれないためです。また、終了コードが2でなく1になるためです。
@item ex テスト 534 が失敗します。サイレントモードで @file{.exrc} が読まれないためです。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
