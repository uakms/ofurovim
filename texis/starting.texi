@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node starting.txt, , , 目次
@unnumbered Vim の起動、起動引数や初期化に関して
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*starting.txt*  For Vim version 8.1.  Last change: 2019 Jun 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*starting.txt*  For Vim バージョン 8.1.  Last change: 2019 Jun 02


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Starting Vim						*starting*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{starting}
@cindex starting
@cindex Vim の起動
@section Vim の起動
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Vim arguments		|vim-arguments|
2. Vim on the Amiga		|starting-amiga|
3. Running eVim			|evim-keys|
4. Initialization		|initialization|
5. $VIM and $VIMRUNTIME		|$VIM|
6. Suspending			|suspend|
7. Exiting			|exiting|
8. Saving settings		|save-settings|
9. Views and Sessions		|views-sessions|
10. The viminfo file		|viminfo-file|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. Vim の起動引数 @tab |@ref{vim-arguments}|
@item 2. Amiga 版の Vim @tab |@ref{starting-amiga}|
@item 3. eVim について @tab |@ref{evim-keys}|
@item 4. 初期化 @tab |@ref{initialization}|
@item 5. $VIM と $VIMRUNTIME @tab |@ref{$VIM}|
@item 6. サスペンド @tab |@ref{suspend}|
@item 7. 終了 @tab |@ref{exiting}|
@item 8. 設定の保存 @tab |@ref{save-settings}|
@item 9. ビューとセッション @tab |@ref{views-sessions}|
@item 10. viminfo ファイル @tab |@ref{viminfo-file}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Vim arguments					*vim-arguments*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vim-arguments}
@cindex vim-arguments
@cindex Vim の起動引数
@section 1. Vim の起動引数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Most often, Vim is started to edit a single file with the command
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
たいていは 1 つのファイルを編集するために次のようなコマンドで Vim を起動します
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim filename					*-vim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-vim}
@cindex -vim
@verbatim
vim filename
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
More generally, Vim is started with:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
より一般的に言えば、Vim は次の書式で起動することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim [option | filename] ..
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
vim [option | filename] ..
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Option arguments and file name arguments can be mixed, and any number of them
can be given.  However, watch out for options that take an argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション引数とファイル引数は混在させ、幾つでも与える事ができます。しかし引数を取るオプションには注意が必要です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For compatibility with various Vi versions, see	|cmdline-arguments|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
さまざまな Vi のバージョンとの互換性に付いては |@ref{cmdline-arguments}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Exactly one out of the following five items may be used to choose how to
start editing:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
正確には、以下の 5 つの項目から 1 つを選んで編集が開始されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-file* *---*
filename	One or more file names.  The first one will be the current
		file and read into the buffer.  The cursor will be positioned
		on the first line of the buffer.
		To avoid a file name starting with a '-' being interpreted as
		an option, precede the arglist with "--", e.g.: >
			vim -- -filename
<		All arguments after the "--" will be interpreted as file names,
		no other options or "+command" argument can follow.
		For behavior of quotes on MS-Windows, see |win32-quotes|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-file}
@anchor{---}
@cindex -file
@cindex @minus{}@minus{}@minus{}
@table @asis
@item filename
1 つ以上のファイル名が与えられた場合。まずは最初の 1 つが編集ファイルとしてバッファに読み込まれます。カーソルはそのバッファの 1 行目に置かれます。

'-' で始まるファイル名を指定するには、オプションと区別するために、引数に "@samp{--}" を置きます。例:
@verbatim
vim -- -filename
@end verbatim
"@samp{--}" の後の全ての引数はファイル名として解釈されるので、その他のオプションや引数 "+command" は使用することができません。

MS-Windows におけるクォートの動作については |@ref{win32-quotes}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--*
-		This argument can mean two things, depending on whether Ex
		mode is to be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{@minus{}@minus{}}
@cindex @minus{}@minus{}
@item -
この引数は Ex モードで起動するかどうかで意味が異なります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Starting in Normal mode: >
			vim -
			ex -v -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ノーマルモードで起動する場合:
@verbatim
vim -
ex -v -
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		Start editing a new buffer, which is filled with text
		that is read from stdin.  The commands that would normally be
		read from stdin will now be read from stderr.  Example: >
			find . -name "*.c" -print | vim -
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
標準入力から読み込まれたテキストの新規バッファの編集を始めます。通常は標準入力から読み込まれたであろうコマンドは、現在、標準エラー出力から読み込まれるでしょう。例:
@verbatim
find . -name "*.c" -print | vim -
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		The buffer will not be marked as modified, so that it's easy
		to exit.  Be careful to mark it as modified if you don't want
		to accidentally lose it.  Example: >
			ls | view -
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{訳注: 以下の文はすべて "view -" に対する説明と思われる。@}

簡単に終了できるように、バッファに「変更(modified)」のマークは付けらません。バッファの内容を思いがけず失いたくない場合は、変更とマークするよう気を付けてください。例:
@verbatim
ls | view -
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Starting in Ex mode: >
			ex -
			vim -e -
			exim -
			vim -E
<		Start editing in silent mode.  See |-s-ex|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Ex モードで起動する場合:
@verbatim
ex -
vim -e -
exim -
vim -E -
@end verbatim
サイレントモードで起動します。|@ref{-s-ex}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-t* *-tag*
-t {tag}	A tag.  "tag" is looked up in the tags file, the associated
		file becomes the current file, and the associated command is
		executed.  Mostly this is used for C programs, in which case
		"tag" often is a function name.  The effect is that the file
		containing that function becomes the current file and the
		cursor is positioned on the start of the function (see
		|tags|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-t}
@anchor{-tag}
@cindex -t
@cindex -tag
@item -t @{tag@}
タグで開きます。@{tag@} は tags ファイルから検索され、関連づけられたファイルが現在のファイルとなり、関連づけられたコマンドが実行されます。大抵これは C プログラムを編集するときに使用され、この場合 @{tag@} は関数名である事が多い。それにより、その関数を含んでいるファイルが現在のファイルとなり、カーソルがその関数の先頭に置かれます (|@ref{tags}| を参照してください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-q* *-qf*
-q [errorfile]	QuickFix mode.  The file with the name [errorfile] is read
		and the first error is displayed.  See |quickfix|.
		If [errorfile] is not given, the 'errorfile' option is used
		for the file name.  See 'errorfile' for the default value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-q}
@anchor{-qf}
@cindex -q
@cindex -qf
@item -q [errorfile]
quickfix モードで開きます。[errorfile] に指定したファイルが読み込まれ、最初のエラーが表示されます。|@ref{quickfix}| を参照してください。

[errorfile] が与えられない場合、オプション '@option{errorfile}' がファイル名として使用されます。省略値に関しては '@option{errorfile}' を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
(nothing)	Without one of the four items above, Vim will start editing a
		new buffer.  It's empty and doesn't have a file name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item (nothing)
上記の 4 つのうち、どれも指定せずに Vim を起動すると、新しいバッファが用意されます。これは名前のない空のバッファです。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
The startup mode can be changed by using another name instead of "vim", which
is equal to giving options:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
起動時のモードはプログラム名を "vim" とは別の名前にすることで指定できます。それは次のようにオプションを与えたのと同じです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
ex	vim -e	    Start in Ex mode (see |Ex-mode|).		    *ex*
exim	vim -E	    Start in improved Ex mode (see |Ex-mode|).	    *exim*
			(normally not installed)
view	vim -R	    Start in read-only mode (see |-R|).		    *view*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@c テーブルの幅がおかしくなるのでこのアンカーを外に出しておく
@anchor{ex}
@cindex ex
@multitable @columnfractions .2 .2 .6
@item ex @tab vim -e @tab Ex モードで起動 (|@ref{Ex-mode}| を参照してください)。
@anchor{exim}
@cindex exim
@item exim @tab vim -E @tab 改良版 Ex モードで起動 (|@ref{Ex-mode}| を参照してください)。(通常はインストールされません)
@anchor{view}
@cindex view
@item view @tab vim -R @tab 読み込み専用モードで起動 (|@ref{-R}| を参照してください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
gvim	vim -g	    Start the GUI (see |gui|).			    *gvim*
gex	vim -eg	    Start the GUI in Ex mode.			  *gex*
gview	vim -Rg	    Start the GUI in read-only mode.		  *gview*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{gvim}
@cindex gvim
@item gvim @tab vim -g @tab GUI で起動 (|@ref{gui}| を参照してください)。
@anchor{gex}
@cindex gex
@item gex @tab vim -eg @tab GUI の Ex モードで起動。
@anchor{gview}
@cindex gview
@item gview @tab vim -Rg @tab GUI の読み込み専用モードで起動。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
rvim	vim -Z	    Like "vim", but in restricted mode (see |-Z|)   *rvim*
rview	vim -RZ	    Like "view", but in restricted mode.	  *rview*
rgvim	vim -gZ	    Like "gvim", but in restricted mode.	  *rgvim*
rgview	vim -RgZ    Like "gview", but in restricted mode.	  *rgview*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{rvim}
@cindex rvim
@item rvim @tab vim -Z @tab "vim" の制限モードで起動 (|@ref{-Z}| を参照してください)。
@anchor{rview}
@cindex rview
@item rview @tab vim -RZ @tab "view" の制限モード。
@anchor{rgvim}
@cindex rgvim
@item rgvim @tab vim -gZ @tab "gvim" の制限モード。
@anchor{rgview}
@cindex rgview
@item rgview @tab vim -RgZ @tab "gview" の制限モード。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
evim    vim -y      Easy Vim: set 'insertmode' (see |-y|)	    *evim*
eview   vim -yR     Like "evim" in read-only mode		  *eview*
vimdiff vim -d	    Start in diff mode |diff-mode|
gvimdiff vim -gd    Start in diff mode |diff-mode|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{evim}
@cindex evim
@item evim @tab vim -y @tab 簡易操作の Vim (|@ref{-y}| を参照してください)
@anchor{eview}
@cindex eview
@item eview @tab vim -yR @tab "evim" と同じ。読み込み専用モード。
@item vimdiff @tab vim -d @tab 差分モードで起動 |@ref{diff-mode}|
@item gvimdiff @tab vim -gd @tab 差分モードで起動 |@ref{diff-mode}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additional characters may follow, they are ignored.  For example, you can have
"gvim-5" to start the GUI.  You must have an executable by that name then, of
course.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらの別名の後ろに付けられる文字は無視されます。たとえば GUI で起動するのに "gvim-5" という名前を付けることができます。もちろんその名前で実行可能なファイルがなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On Unix, you would normally have one executable called Vim, and links from the
different startup-names to that executable.  If your system does not support
links and you do not want to have several copies of the executable, you could
use an alias instead.  For example: >
	alias view   vim -R
	alias gvim   vim -g
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX では通常、Vim という名前の実行可能ファイルが 1 つあり、それに対して違う名前のリンクが用意されます。使用しているシステムがリンクをサポートせず、実行ファイルのコピーを幾つも作りたくないのであれば、リンクの代わりにエイリアスを使うことができます。例:
@verbatim
alias view   vim -R
alias gvim   vim -g
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*startup-options*
The option arguments may be given in any order.  Single-letter options can be
combined after one dash.  There can be no option arguments after the "--"
argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{startup-options}
@cindex startup-options
オプション引数はどんな順番で与えても良い。1 文字のオプションは 1 つのダッシュ (-) の後に組み合わせます。引数 "@minus{}@minus{}" の後にはオプション引数を置くことはできません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On VMS all option arguments are assumed to be lowercase, unless preceded with
a slash.  Thus "-R" means recovery and "-/R" readonly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
VMS では全てのオプション引数は小文字であるとみなされます。大文字を指定するにはスラッシュを前に置きます。つまり "-R" でリカバリモード、"-/R" で読み込み専用となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--help							*-h* *--help* *-?*
-?
-h		Give usage (help) message and exit.
		See |info-message| about capturing the text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-h}
@anchor{--help}
@anchor{-?}
@cindex -h
@cindex @minus{}@minus{}help
@cindex -?
@table @asis
@item @minus{}@minus{}help
@itemx -?
@itemx -h
使用法( ヘルプ) を表示して終了します。

そのテキストを保存するには |@ref{info-message}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--version*
--version	Print version information and exit.  Same output as for
		|:version| command.
		See |info-message| about capturing the text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--version}
@cindex @minus{}@minus{}version
@item @minus{}@minus{}version
バージョン情報を表示して終了します。出力は |@ref{:version}| コマンドと一緒です。

そのテキストを保存するには |@ref{info-message}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--noplugin*
--noplugin	Skip loading plugins.  Resets the 'loadplugins' option.

		Note that the |-u| argument may also disable loading plugins:
			argument   load: vimrc files  plugins  defaults.vim ~
			(nothing)	     yes	yes	  yes
			-u NONE		     no		no	  no
			-u DEFAULTS	     no		no	  yes
			-u NORC		     no		yes	  no
			--noplugin	     yes	no	  yes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--noplugin}
@cindex @minus{}@minus{}noplugin
@item @minus{}@minus{}noplugin
プラグインを読み込みません。'@option{loadplugins}' オプションをオフにします。
@quotation
@strong{Note:} @*
|@ref{-u}| 引数でもプラグインを読み込まないようにできることに注意してください:
@multitable @columnfractions .25 .25 .25 .25
@headitem 引数 @tab vimrcファイル @tab プラグイン @tab defaults.vim
@item なし @tab yes @tab yes @tab yes
@item -u NONE @tab no @tab no @tab no
@item -u DEFAULTS @tab no @tab no @tab yes
@item -u NORC @tab no @tab yes @tab no
@item --noplugin @tab yes @tab no @tab yes
@end multitable
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--startuptime {fname}					*--startuptime*
		During startup write timing messages to the file {fname}.
		This can be used to find out where time is spent while loading
		your .vimrc, plugins and opening the first file.
		When {fname} already exists new messages are appended.
		(Only available when compiled with the |+startuptime|
		feature).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--startuptime}
@cindex @minus{}@minus{}startuptime
@item @minus{}@minus{}startuptime @{fname@}
起動処理の間、経過時間のメッセージをファイル @{fname@} に書き出します。@file{.vimrc} やプラグインの読み込み、最初のファイルの読み込みにおいて、どこで時間がかかっているかを調べるために役に立ちます。

@{fname@} が既に存在するときはそのファイルに追記されます。

@{|@ref{+startuptime}| 付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--literal*
--literal	Take file names literally, don't expand wildcards.  Not needed
		for Unix, because Vim always takes file names literally (the
		shell expands wildcards).
		Applies to all the names, also the ones that come before this
		argument.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--literal}
@cindex @minus{}@minus{}literal
@item @minus{}@minus{}literal
ファイル名を文字どおりに解釈します。ワイルドカードを展開しません。Vim は常にファイル名を文字どおりに解釈する (シェルがワイルドカードを展開する) ので、Unix では必要ありません。

全てのファイル名に適用されます。この引数の前に指定したものも同じです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-+*
+[num]		The cursor will be positioned on line "num" for the first
		file being edited.  If "num" is missing, the cursor will be
		positioned on the last line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-+}
@cindex -+
@item +[num]
最初に編集されるファイルの "num" 行目にカーソルを置いて開きます。"num" がなかった場合には、カーソルは最終行に置かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-+/*
+/{pat}		The cursor will be positioned on the first line containing
		"pat" in the first file being edited (see |pattern| for the
		available search patterns).  The search starts at the cursor
		position, which can be the first line or the cursor position
		last used from |viminfo|. To force a search from the first
		line use "+1 +/pat".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-+/}
@cindex -+/
@item +/@{pat@}
最初に編集されるファイルの、"pat" を含む最初の行にカーソルを置いて起動します (指定可能な検索パターンについては |@ref{pattern}| を参照してください)。検索はカーソル位置から開始されます。カーソルの位置は最初の行か、もしくは |@ref{viminfo}| から復元された最後に使われた位置の場合もあります。必ず最初の行から検索したい場合は "+1 +/pat" を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
+{command}						*-+c* *-c*
-c {command}	{command} will be executed after the first file has been
		read (and after autocommands and modelines for that file have
		been processed).  "command" is interpreted as an Ex command.
		If the "command" contains spaces, it must be enclosed in
		double quotes (this depends on the shell that is used).
		Example: >
			vim  "+set si"  main.c
			vim  "+find stdio.h"
			vim  -c "set ff=dos"  -c wq  mine.mak
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-+c}
@anchor{-c}
@cindex -+c
@cindex -c
@item +@{command@}
@itemx -c @{command@}
最初のファイルが読み込まれた後 (加えてそのファイルに適用される autocommand と modeline が処理された後) に @{command@} が実行されます。"command" は Ex コマンドとして解釈されます。"command" にスペースを含んでいる場合には、ダブルクォートで挟まれている必要があります (これは使われているシェルに依存します)。例:
@verbatim
vim  "+set si"  main.c
vim "+find stdio.h"
vim  -c "set ff=dos"  -c wq  mine.mak
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Note: You can use up to 10 "+" or "-c" arguments in a Vim
		command.  They are executed in the order given.  A "-S"
		argument counts as a "-c" argument as well.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Vim コマンドの引数として "+" か "-c" をあわせ、最大 10 個まで使うことができることに注意してください。これらの引数は与えられた順番で実行されます。"-S" 引数は "-c" として同じように数えます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--cmd {command}						*--cmd*
		{command} will be executed before processing any vimrc file.
		Otherwise it acts like -c {command}.  You can use up to 10 of
		these commands, independently from "-c" commands.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--cmd}
@cindex @minus{}@minus{}cmd
@item @minus{}@minus{}cmd @{command@}
vimrc ファイルを処理する前に @{command@} を実行します。それ以外は -c @{command@} と同じです。"-c" 引数とは別に 10 個まで使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-S*
-S {file}	The {file} will be sourced after the first file has been read.
		This is an easy way to do the equivalent of: >
			-c "source {file}"
<		It can be mixed with "-c" arguments and repeated like "-c".
		The limit of 10 "-c" arguments applies here as well.
		{file} cannot start with a "-".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-S}
@cindex -S
@item -S @{file@}
最初のファイルが読み込まれた後に @{file@} を実行します。これは次のものを簡単にしたものです:
@verbatim
-c "source {file}"
@end verbatim
"-c" と混ぜて使うことができ、複数指定することができます。"-c" と合わせて 10 個まで指定することができます。@{file@} の先頭文字には "-" は使えません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Do not use this for running a script to do some work and exit
		Vim, you won't see error messages.  Use |-u| instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
作業をして Vim を終了するスクリプトを実行するのには使わないでください、エラーメッセージが見えないでしょう。代わりに |@ref{-u}| を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-S		Works like "-S Session.vim".  Only when used as the last
		argument or when another "-" option follows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -S
"-S Session.vim" と同じ。最後の引数として使われたときや、その後に他のオプション引数が続いたときのみこのように解釈されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-r*
-r		Recovery mode.  Without a file name argument, a list of
		existing swap files is given.  With a file name, a swap file
		is read to recover a crashed editing session.  See
		|crash-recovery|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-r}
@cindex -r
@cindex リカバリモードで起動する
@item -r
リカバリモード。ファイル名の引数なしで実行した場合には、存在するスワップファイルのリストが表示されます。ファイルを指定すると、クラッシュしたセッションを復活させるために、スワップファイルが読み込まれます。|@ref{crash-recovery}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-L*
-L		Same as -r.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-L}
@cindex -L
@item -L
-r と同じ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-R*
-R		Readonly mode.  The 'readonly' option will be set for all the
		files being edited.  You can still edit the buffer, but will
		be prevented from accidentally overwriting a file.  If you
		forgot that you are in View mode and did make some changes,
		you can overwrite a file by adding an exclamation mark to
		the Ex command, as in ":w!".  The 'readonly' option can be
		reset with ":set noro" (see the options chapter, |options|).
		Subsequent edits will not be done in readonly mode.  Calling
		the executable "view" has the same effect as the -R argument.
		The 'updatecount' option will be set to 10000, meaning that
		the swap file will not be updated automatically very often.
		See |-M| for disallowing modifications.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-R}
@cindex -R
@cindex 読み込み専用モードで起動する
@item -R
読み込み専用モード。オプション '@option{readonly}' が、編集される全てのファイルに設定されます。これにより、まだバッファを編集することはできるけれども、偶然にファイルを上書きしてしまうようなことを防ぐことができます。もしも、読み込み専用モードにいることを忘れてバッファへ変更を行ったとしても、"@command{:w!}" のように Ex コマンドに「ビックリマーク」を付けることで上書きすることが可能です。

'@option{readonly}' オプションは "@command{:set noro}" としてオフに設定することが可能です (オプションを説明した章 |@ref{options}| を参照してください)。その後の編集は読み込み専用モードではなくなります。実行ファイルを "@command{view}" として起動した場合は、この -R 引数と同じ動作になります。オプション '@option{updatecount}' は 10000 に設定され、これはスワップファイルがそう頻繁には自動更新されなくなるということです。

変更を不許可とするには |@ref{-M}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-m*
-m		Modifications not allowed to be written.  The 'write' option
		will be reset, so that writing files is disabled.  However,
		the 'write' option can be set to enable writing again.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-m}
@cindex -m
@item -m
変更を保存できなくします。オプション '@option{write}' がオフに設定され、ファイルを保存することができなくなります。オプション '@option{write}' をオンにすれば、再び保存することが可能になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-M*
-M		Modifications not allowed.  The 'modifiable' option will be
		reset, so that changes are not allowed.  The 'write' option
		will be reset, so that writing files is disabled.  However,
		the 'modifiable' and 'write' options can be set to enable
		changes and writing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-M}
@cindex -M
@item -M
変更できないようにします。オプション '@option{modifiable}' がオフに設定され、変更を加えることができなくなります。さらに、オプション '@option{write}' がオフに設定され、ファイルを保存することができなくなります。'@option{modifiable}' と '@option{write}' をオンにすれば、変更を加えて保存できるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*-Z* *restricted-mode* *E145* *E981*
-Z		Restricted mode.  All commands that make use of an external
		shell are disabled.  This includes suspending with CTRL-Z,
		":sh", filtering, the system() function, backtick expansion
		and libcall().
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-Z}
@anchor{restricted-mode}
@anchor{E145}
@anchor{E981}
@cindex -Z
@cindex restricted-mode
@erindex E145
@erindex E981
@cindex 制限モードで起動する
@item -Z
制限モード。外部シェルを実行するあらゆるコマンドの使用を許可しません。これにはサスペンドである @kbd{CTRL-Z} や、"@command{:sh}"、フィルタリング、system() 関数、バッククォートの評価、libcall() が含まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Also disallowed are delete(), rename(), mkdir(), job_start(),
		etc.
		Interfaces, such as Python, Ruby and Lua, are also disabled,
		since they could be used to execute shell commands.  Perl uses
		the Safe module.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

delete(), rename(), mkdir(), job_start() なども許可されていません。

Python, Ruby, Lua などのインターフェイスも、シェルコマンドの実行に使用される可能性があるため無効になっています。PerlはSafe モジュールを使用しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Note that the user may still find a loophole to execute a
		shell command, it has only been made difficult.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
ユーザーはまだシェルコマンドを実行する抜け穴を見つけるかもしれないことに注意してください。それが困難になっただけなのです。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-g*
-g		Start Vim in GUI mode.  See |gui|. For the opposite see |-v|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-g}
@cindex -g
@cindex GUI モードで起動する
@item -g
Vim を GUI モードで起動します。|@ref{gui}| を参照してください。逆は |@ref{-v}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-v*
-v		Start Ex in Vi mode.  Only makes a difference when the
		executable is called "ex" or "gvim".  For gvim the GUI is not
		started if possible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-v}
@cindex -v
@cindex Ex を Vi モードで起動する
@item -v
Ex を Vi モードで起動します。実行ファイルが "ex" や "gvim" である時にだけ、違いが現れます。gvim では可能ならは "GUI" ではないモードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-e*
-e		Start Vim in Ex mode |Q|.  Only makes a difference when the
		executable is not called "ex".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-e}
@cindex -e
@cindex Vim を Ex モードで起動する
@item -e
Vim を Ex モードで起動します |@ref{Q}|。実行ファイルの名前が "ex" 以外の時に意味があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-E*
-E		Start Vim in improved Ex mode |gQ|.  Only makes a difference
		when the executable is not called "exim".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-E}
@cindex -E
@item -E
Vim を改良版 Ex モードで起動します |@ref{gQ}|。実行ファイルの名前が "exim" 以外の時に意味があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-s-ex*
-s		Silent or batch mode.  Only when Vim was started as "ex" or
		when preceded with the "-e" argument.  Otherwise see |-s|,
		which does take an argument while this use of "-s" doesn't.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-s-ex}
@cindex -s-ex
@cindex バッチモードで起動する
@item -s
サイレント (もしくはバッチ) モード。Vim が "ex" で起動されるか、このオプションよりも先に "-e" が付いていた場合にだけ働きます。そうでない場合には |@ref{-s}| を参照してください。|@ref{-s}| として使うときには引数をとります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		To be used when Vim is used to execute Ex commands from a file
		instead of a terminal.  Switches off most prompts and
		informative messages.  Also warnings and error messages.
		The output of these commands is displayed (to stdout):
			:print
			:list
			:number
			:set      to display option values.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
端末の替わりにファイルから Ex コマンドを実行する場合に使用されます。ほとんどのプロンプトとメッセージは抑制されます。警告とエラーのメッセージも抑制されます。次のコマンドの出力は標準出力へ表示されます:
@verbatim
:print
:list
:number
:set      オプション値を表示するため。
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		When 'verbose' is non-zero messages are printed (for
		debugging, to stderr).
		'term' and $TERM are not used.
		If Vim appears to be stuck try typing "qa!<Enter>".  You don't
		get a prompt thus you can't see Vim is waiting for you to type
		something.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{verbose}' が 0 以外のときにはメッセージは抑制されずに標準エラー出力へ表示されます (デバッグ用)。'@option{term}' と @env{$TERM} は考慮されません。Vim が停止しているようだったら "qa!@key{<Enter>}" と入力してみてください。

Vim がユーザーの入力を待っているときでもプロンプトは表示されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Initializations are skipped (except the ones given with the
		"-u" argument).
		Example: >
			vim -e -s  < thefilter  thefile
<		For the opposite, to see errors from the script, execute the
		file with the |-u| flag: >
			vim -u thefilter thefile
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

初期化処理はスキップされます (このオプションが引数 "-u" と一緒に使われた場合は除きます)。

例:
@verbatim
vim -e -s < thefilter  thefile
@end verbatim
逆に、スクリプトからのエラーを見るには |@ref{-u}| フラグを付けファイルを実行します:
@verbatim
vim -u thefilter thefile
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-b*
-b		Binary mode.  File I/O will only recognize <NL> to separate
		lines.  The 'expandtab' option will be reset.  The 'textwidth'
		option is set to 0.  'modeline' is reset.  The 'binary' option
		is set.  This is done after reading the vimrc/exrc files but
		before reading any file in the arglist.  See also
		|edit-binary|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-b}
@cindex -b
@cindex バイナリモードで起動する
@item -b
バイナリモード。ファイルを入出力する再に <NL> だけを行のセパレータとして認識するようになります。オプション '@option{expandtab}' は無効化されます。オプション '@option{textwidth}' は 0 に設定されます。'@option{modeline}' はオフに設定されます。オプション '@option{binary}' がオンに設定されます。これは vimrc/exrc のファイルが読み込まれた直後、引数で与えられたファイルが読み込まれるよりも前に行われます。|@ref{edit-binary}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-l*
-l		Lisp mode.  Sets the 'lisp' and 'showmatch' options on.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-l}
@cindex -l
@cindex Lisp モードで起動する
@item -l
Lisp モード。オプション '@option{lisp}' と '@option{showmatch}' をオンに設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-A*
-A		Arabic mode.  Sets the 'arabic' option on.  (Only when
		compiled with the |+arabic| features (which include
		|+rightleft|), otherwise Vim gives an error message
		and exits.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-A}
@cindex -A
@cindex アラビア語モードで起動する
@item -A
アラビア語モード。オプション '@option{arabic}' をオンに設定します。|@ref{+arabic}| (これは |@ref{+rightleft}| も含んでいる) が有効なときにだけ使用できます。そうでないときには Vim はエラーメッセージを出力して終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-F*
-F		This was used for Farsi mode, which has been removed.
		See |farsi.txt|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-F}
@cindex -F
@cindex ペルシア語モードで起動する
@item -F
これは Farsi (ペルシア語モード) で使用されていましたが削除されました。|@ref{farsi.txt}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-H*
-H		Hebrew mode.  Sets the 'hkmap' and 'rightleft' options on.
		(Only when compiled with the |+rightleft| feature, otherwise
		Vim gives an error message and exits.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-H}
@cindex -H
@cindex ヘブライ語モードで起動する
@item -H
Hebrew (ヘブライ語)モード。オプション '@option{hkmap}' と '@option{rightleft}' をオンに設定します。

@{|@ref{+rightleft}| を有効にしてコンパイルした時にだけ使用することができます。そうでない場合 Vim はエラーメッセージを表示して終了します@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-V* *verbose*
-V[N]		Verbose.  Sets the 'verbose' option to [N] (default: 10).
		Messages will be given for each file that is ":source"d and
		for reading or writing a viminfo file.  Can be used to find
		out what is happening upon startup and exit.
		Example: >
			vim -V8 foobar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-V}
@anchor{verbose}
@cindex -V
@cindex verbose
@item -V[N]
詳細表示をします。オプション '@option{verbose}' を [N] に設定します (N を省略した場合は 10 が設定されます)。"@command{:source}" が実行される度、@file{viminfo} の読み書きを行う度に情報が表示されます。Vim の起動時と終了時の動作を調べるときに便利です。

例:
@verbatim
vim -V8 foobar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-V[N]{filename}
		Like -V and set 'verbosefile' to {filename}.  The result is
		that messages are not displayed but written to the file
		{filename}.  {filename} must not start with a digit.
		Example: >
			vim -V20vimlog foobar
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -V[N]@{filename@}
-V と同様で、さらに '@option{verbosefile}' を @{filename@} に設定します。その結果、メッセージは表示されずにファイル @{filename@} に書き出されます。@{filename@} は数字で始まってはなりません。

例:
@verbatim
vim -V20vimlog foobar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-D*
-D		Debugging.  Go to debugging mode when executing the first
		command from a script. |debug-mode|
		{not available when compiled without the |+eval| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-D}
@cindex -D
@cindex デバッグモードで起動する
@item -D
デバッグします。スクリプトの最初のコマンドを実行するところからデバッグを開始します。|@ref{debug-mode}|

@{|@ref{+eval}| が有効な場合のみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-C*
-C		Compatible mode.  Sets the 'compatible' option.  You can use
		this to get 'compatible', even though a .vimrc file exists.
		Keep in mind that the command ":set nocompatible" in some
		plugin or startup script overrules this, so you may end up
		with 'nocompatible' anyway.  To find out, use: >
			:verbose set compatible?
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-C}
@cindex -C
@cindex 互換モードで起動する
@item -C
互換モード。オプション '@option{compatible}' をオンに設定します。@file{.vimrc} ファイルが存在する場合にも Vi との互換性を得ることができます。プラグインや起動時スクリプトで "@command{:set nocompatible}" とすると、このオプションより優先されるため、起動後には '@option{nocompatible}' になってしまうでしょう。どこで最後に設定されたかを調べるには次のコマンドを使います:
@verbatim
:verbose set compatible?
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		Several plugins won't work with 'compatible' set.  You may
		want to set it after startup this way: >
			vim "+set cp" filename
<		Also see |compatible-default|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{compatible}' がオンになっていると動かないプラグインもあります。起動処理の後でこれをセットするにはこのようにします:
@verbatim
vim "+set cp" filename
@end verbatim
|@ref{compatible-default}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-N*
-N		Not compatible mode.  Resets the 'compatible' option.  You can
		use this to get 'nocompatible', when there is no .vimrc file
		or when using "-u NONE".
		Also see |compatible-default|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-N}
@cindex -N
@cindex 非互換モードで起動する
@item -N
非互換モード。オプション '@option{compatible}' をオフに設定します。@file{.vimrc} ファイルがないときや、"-u NONE" としているときに、'@option{nocompatible}' (Vim の拡張を有効) にすることができます。|@ref{compatible-default}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-y* *easy*
-y		Easy mode.  Implied for |evim| and |eview|.  Starts with
		'insertmode' set and behaves like a click-and-type editor.
		This sources the script $VIMRUNTIME/evim.vim.  Mappings are
		set up to work like most click-and-type editors, see
		|evim-keys|.  The GUI is started when available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-y}
@anchor{easy}
@cindex -y
@cindex easy
@cindex 簡易モードで起動する
@item -y
簡易モード。|@ref{evim}| や |@ref{eview}| と同じ。'@option{insertmode}' をオンに設定して起動し、モードレスエディタのように振舞います。このスイッチを指定すると、$VIMRUNTIME/evim.vim が自動的に読み込まれ、一般的なエディタと同じ操作ができるようなマッピングが設定されます。

|@ref{evim-keys}| を参照してください。利用可能なら GUI が使用されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-n*
-n		No swap file will be used.  Recovery after a crash will be
		impossible.  Handy if you want to view or edit a file on a
		very slow medium (e.g., a floppy).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-n}
@cindex -n
@item -n
スワップファイルを使用しません。クラッシュしたときに編集していたファイルを復旧することはできなくなります。フロッピーディスクのような非常に低速なメディアのファイルを読んだり編集したいときに有用です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be done with ":set updatecount=0".  You can switch it
		on again by setting the 'updatecount' option to some value,
		e.g., ":set uc=100".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

"@command{:set updatecount=0}" と設定するのと同じです。オプション '@option{updatecount}' に 0 より大きい値を設定することで、スワップファイルの使用を有効にすることができます。例えば、"@command{:set uc=100}"。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		NOTE: Don't combine -n with -b, making -nb, because that has a
		different meaning: |-nb|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
-n と -b を合わせて -nb としないように注意してください。-nb には別の意味があります: |@ref{-nb}|。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		'updatecount' is set to 0 AFTER executing commands from a
		vimrc file, but before the GUI initializations.  Thus it
		overrides a setting for 'updatecount' in a vimrc file, but not
		in a gvimrc file.  See |startup|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{vimrc} ファイルの実行解釈の直後で、GUI が初期化される前に '@option{updatecount}' が 0 に設定されます。よって @file{vimrc} ファイルの中で '@option{updatecount}' を設定しても上書きされてしまいますが、@file{gvimrc} での設定は上書きされません。|@ref{startup}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		When you want to reduce accesses to the disk (e.g., for a
		laptop), don't use "-n", but set 'updatetime' and
		'updatecount' to very big numbers, and type ":preserve" when
		you want to save your work.  This way you keep the possibility
		for crash recovery.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ディスクへのアクセスを減らしたいのならば (ノート PC を使用している場合など)、"-n" を使用する替わりに、'@option{updatetime}' を設定し、'@option{updatecount}' に非常に大きい値を設定して、編集中のファイルを保存する時に "@command{:preserve}" を利用すると良いでしょう。この方法だとクラッシュからの復旧の可能性を保てます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-o*
-o[N]		Open N windows, split horizontally.  If [N] is not given,
		one window is opened for every file given as argument.  If
		there is not enough room, only the first few files get a
		window.  If there are more windows than arguments, the last
		few windows will be editing an empty file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-o}
@cindex -o
@item -o[N]
N 個のウィンドウを水平分割して開きます。[N] が与えられない場合には、引数で指定された全てのファイルに対して 1 個のウィンドウが開かれます。画面に十分な広さがない場合には、始めのほうの数個のファイルだけがウィンドウを伴って表示されます。逆にファイルの数よりもウィンドウの数が多く指定された場合、多い分のウィンドウは空ファイルの編集用として開かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-O*
-O[N]		Open N windows, split vertically.  Otherwise it's like -o.
		If both the -o and the -O option are given, the last one on
		the command line determines how the windows will be split.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-O}
@cindex -O
@item -O[N]
N 個のウィンドウを垂直分割して開きます。それ以外は |@ref{-o}| と同じ。-o と -O が両方指定されたときは最後に指定された方を使用します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-p*
-p[N]		Open N tab pages.  If [N] is not given, one tab page is opened
		for every file given as argument.  The maximum is set with
		'tabpagemax' pages (default 10).  If there are more tab pages
		than arguments, the last few tab pages will be editing an
		empty file.  Also see |tabpage|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-p}
@cindex -p
@item -p[N]
N 個のタブページを開きます。[N] が省略されると、引数として与えられた各ファイルに対し 1 つずつタブページを開きます。最大値は '@option{tabpagemax}' ページ (既定値は 10) です。引数よりも多くのタブページが作られる場合は、最後の数個のタブページは空ファイルを開きます。|@ref{tabpage}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-T*
-T {terminal}	Set the terminal type to "terminal".  This influences the
		codes that Vim will send to your terminal.  This is normally
		not needed, because Vim will be able to find out what type
		of terminal you are using.  (See |terminal-info|.)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-T}
@cindex -T
@item -T @{terminal@}
端末の種類を "terminal" に設定します。これは Vim がユーザーの端末へ送るコードに影響を与えます。Vim はユーザーが使用している端末の種類を自分で判断することができるので、通常これは必要がありません。(|@ref{terminal-info}| を参照してください。)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--not-a-term*
--not-a-term	Tells Vim that the user knows that the input and/or output is
		not connected to a terminal.  This will avoid the warning and
		the two second delay that would happen.
		Also avoids the "Reading from stdin..." message.
		Also avoids the "N files to edit" message.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--not-a-term}
@cindex @minus{}@minus{}not-a-term
@item @minus{}@minus{}not-a-term
入力と出力 (もしくはどちらか一方) が端末に接続されていないと、ユーザーが知っていることを Vim に伝えます。これにより警告が表示され 2 秒間の遅延が発生するのを避けられます。

"Reading from stdin..." のメッセージを避けることもできます。

"N files to edit" のメッセージを避けることもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--ttyfail*
--ttyfail	When the stdin or stdout is not a terminal (tty) then exit
		right away.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--ttyfail}
@cindex @minus{}@minus{}ttyfail
@item @minus{}@minus{}ttyfail
標準入力か標準出力が端末 (tty) でない場合、すぐに終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-d*
-d		Start in diff mode, like |vimdiff|.
		{not available when compiled without the |+diff| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-d}
@cindex -d
@cindex 差分モードで起動する
@item -d
差分モードで起動します。|@ref{vimdiff}| と同じ。

@{|@ref{+diff}| が有効な場合のみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-d {device}	Only on the Amiga and when not compiled with the |+diff|
		feature.  Works like "-dev".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item -d @{device@}
@{device@} Amiga 専用機能。|@ref{+diff}| が無効な場合のみ利用可能。|@ref{-dev}| と同じように機能します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-dev*
-dev {device}	Only on the Amiga: The {device} is opened to be used for
		editing.
		Normally you would use this to set the window position and
		size: "-d con:x/y/width/height", e.g.,
		"-d con:30/10/600/150".  But you can also use it to start
		editing on another device, e.g., AUX:.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-dev}
@cindex -dev
@item -dev @{device@}
Amiga 専用機能: @{device@} が編集用に開かれます。普通、ウィンドウの位置とサイズを設定するために "-d con:x/y/width/height" の形式で指定します。例えば "-d con:30/10/600/150"。しかしその他の AUX: のようなデバイスの編集を開始することにも使用できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-f*
-f		GUI: Do not disconnect from the program that started Vim.
		'f' stands for "foreground".  If omitted, the GUI forks a new
		process and exits the current one.  "-f" should be used when
		gvim is started by a program that will wait for the edit
		session to finish (e.g., mail or readnews).  If you want gvim
		never to fork, include 'f' in 'guioptions' in your |gvimrc|.
		Careful: You can use "-gf" to start the GUI in the foreground,
		but "-fg" is used to specify the foreground color.  |gui-fork|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-f}
@cindex -f
@item -f
GUI: Vim を起動したプログラム (プロセス) から独立しません。'f' は "foreground" を意味します。省略すると、GUI 版の Vim は新しいプロセスへ fork して、現在のプロセスは終了してしまいます。gvim の編集セッションが終わるのを待つプログラム (メールソフトやニュースリーダーなど) には、"-f" を使うべきでしょう。gvim が fork しないようにするには、自分の @file{.gvimrc} の中で '@option{guioptions}' に '@var{f}' を加えてください。
@quotation
@strong{Careful:} @*
"-gf" で GUI をフォアグラウンドで実行開始できますが、"-fg" だと前景色の設定になってしまいます。|@ref{gui-fork}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Amiga: Do not restart Vim to open a new window.  This
		option should be used when Vim is started by a program that
		will wait for the edit session to finish (e.g., mail or
		readnews).  See |amiga-window|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Amiga: Vim を新しいウィンドウで起動しません。編集作業が終わるのを待つプログラム (メールソフトやニュースリーダー) によって Vim が起動される時に、このオプションは使用されます。|@ref{amiga-window}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		MS-Windows: This option is not supported.  However, when
		running Vim with an installed vim.bat or gvim.bat file it
		works.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-Windows: このオプションはサポートされません。vim.bat や gvim.bat 経由で起動した場合は機能します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
							*--nofork*
--nofork	GUI: Do not fork.  Same as |-f|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--nofork}
@cindex @minus{}@minus{}nofork
@item @minus{}@minus{}nofork
GUI: fork しません。|@ref{-f}| と同じ。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*-u* *E282*
-u {vimrc}	The file {vimrc} is read for initializations.  Most other
		initializations are skipped; see |initialization|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-u}
@anchor{E282}
@cindex -u
@erindex E282
@item -u @{vimrc@}
初期化のためにファイル @{vimrc@} が読込まれます。その他の初期化はスキップされます。|@ref{initialization}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		This can be used to start Vim in a special mode, with special
		mappings and settings.  A shell alias can be used to make
		this easy to use.  For example: >
			alias vimc vim -u ~/.c_vimrc !*
<		Also consider using autocommands; see |autocommand|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これにより特殊なマッピングや設定をした、特殊なモードで Vim を起動することができます。これを簡単に使用するにはシェルのエイリアスが使えるでしょう。例:
@verbatim
alias vimc vim -u ~/.c_vimrc !*
@end verbatim
autocommand を使うことも考慮すべきである。|@ref{autocommand}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		When {vimrc} is equal to "NONE" (all uppercase), all
		initializations from files and environment variables are
		skipped, including reading the |gvimrc| file when the GUI
		starts.  Loading plugins is also skipped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{vimrc@} に "NONE" (全て大文字) が指定された時には、設定ファイルや環境変数による初期化、@file{.gvimrc} による GUI の初期化も含め、全て省略されます。プラグインも読み込まれません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		When {vimrc} is equal to "NORC" (all uppercase), this has the
		same effect as "NONE", but loading plugins is not skipped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{vimrc@} が "NORC" (全部大文字) のときは "NONE" と同じように処理されますが、プラグインは読み込まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		When {vimrc} is equal to "DEFAULTS" (all uppercase), this has
		the same effect as "NONE", but the |defaults.vim| script is
		loaded, which will also set 'nocompatible'.  Also see
		|--clean|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{vimrc@} が "DEFAULTS" (全部大文字) のときは "NONE" と同じように処理されますが、|@ref{defaults.vim}| スクリプトが読み込まれます。また、'@option{nocompatible}' が設定されます。|@ref{--clean}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Using the "-u" argument with another argument than DEFAULTS
		has the side effect that the 'compatible' option will be on by
		default.  This can have unexpected effects.  See
		|'compatible'|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"DEFAULTS" 以外の引数と共に "-u" 引数を使用すると、副作用としてオプション '@option{compatible}' がデフォルトでオンに設定されます。これは予期せぬ動作を引き起こすかもしれません。|@ref{'compatible'}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-U* *E230*
-U {gvimrc}	The file {gvimrc} is read for initializations when the GUI
		starts.  Other GUI initializations are skipped.  When {gvimrc}
		is equal to "NONE", no file is read for GUI initializations at
		all.  |gui-init|
		Exception: Reading the system-wide menu file is always done.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-U}
@anchor{E230}
@cindex -U
@erindex E230
@item -U @{gvimrc@}
GUI がスタートする時にファイル @{gvimrc@} が読込まれます。その他の GUI 初期化はスキップされます。@{gvimrc@} に NONE が指定された場合、初期化ファイルは何も読込まれません。|@ref{gui-init}|

例外: システムのメニューファイルは常に読込まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-i*
-i {viminfo}	The file "viminfo" is used instead of the default viminfo
		file.  If the name "NONE" is used (all uppercase), no viminfo
		file is read or written, even if 'viminfo' is set or when
		":rv" or ":wv" are used.  See also |viminfo-file|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-i}
@cindex -i
@item -i @{viminfo@}
デフォルトの @file{viminfo} の代わりにファイル @{viminfo@} を使用します。"NONE" (全て大文字)が指定された場合には、'@option{viminfo}' が指定されたり、"@command{:rv}" や "@command{:wv}" が使われても、@file{viminfo} は読み書きともに使用されません。|@ref{viminfo-file}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*--clean*
--clean		Similar to "-u DEFAULTS -U NONE -i NONE":
		- initializations from files and environment variables is
		  skipped
		- 'runtimepath' and 'packpath' are set to exclude home
		  directory entries (does not happen with -u DEFAULTS).
		- the |defaults.vim| script is loaded, which implies
		  'nocompatible': use Vim defaults
		- no |gvimrc| script is loaded
		- no viminfo file is read or written
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--clean}
@cindex @minus{}@minus{}clean
@item @minus{}@minus{}clean
"-u DEFAULTS -U NONE -i NONE" と同様:
@itemize
@item ファイルや環境変数からの初期化はスキップされます。
@item '@option{runtimepath}' と '@option{packpath}' は ホームディレクトリの項目は除かれて設定されます (これは -u DEFAULTS を使うと生じません)。
@item |@ref{defaults.vim}| スクリプトが読み込まれます。これは '@option{nocompatible}' を含みます: Vim のデフォルトを使います。
@item |@ref{gvimrc}| スクリプトは読み込まれません。
@item viminfo ファイルは読み書きされません。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-x*
-x		Use encryption to read/write files.  Will prompt for a key,
		which is then stored in the 'key' option.  All writes will
		then use this key to encrypt the text.  The '-x' argument is
		not needed when reading a file, because there is a check if
		the file that is being read has been encrypted, and Vim asks
		for a key automatically. |encryption|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-x}
@cindex -x
@item -x
ファイルの読み書き時に暗号化を施します。暗号の鍵としてオプション '@option{key}' に設定された値を使用します。全ての書き込みは、テキストに対して鍵を使って暗号化を行ってからなされます。ファイルを読込む時には、Vim は暗号化ファイルかチェックし、自動的に鍵を聞いてくるので、引数 '-x' は必要ではありません。|@ref{encryption}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-X*
-X		Do not try connecting to the X server to get the current
		window title and copy/paste using the X clipboard.  This
		avoids a long startup time when running Vim in a terminal
		emulator and the connection to the X server is slow.
		See |--startuptime| to find out if affects you.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-X}
@cindex -X
@item -X
X サーバーと通信しません。そうして、カレントウィンドウのタイトルを取得したり、X のクリップボードを使ったコピー/ペーストを使用したりしません。端末エミュレータで Vim を使用するときに X サーバーとの通信速度が遅い場合にそれを回避できます。

効果があるか確かめるには |@ref{--startuptime}| を使ってください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Only makes a difference on Unix or VMS, when compiled with the
		|+X11| feature.  Otherwise it's ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

Unix か VMS で |@ref{+X11}| が有効な場合のみ意味があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		To disable the connection only for specific terminals, see the
		'clipboard' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

特定の端末を使用するときだけ通信を無効にするには、オプション '@option{clipboard}' を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		When the X11 Session Management Protocol (XSMP) handler has
		been built in, the -X option also disables that connection as
		it, too, may have undesirable delays.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

X11 Session Management Protocol (XSMP) の処理が組み込まれている場合、その通信にも大きな延滞が生じるため、無効にします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		When the connection is desired later anyway (e.g., for
		client-server messages), call the |serverlist()| function.
		This does not enable the XSMP handler though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

(例えばクライアントとサーバーが通信するため) あとから X サーバーとの通信をつなげるには |@ref{serverlist()}| 関数を呼び出します。ただし XSMP の処理は有効にはなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-s*
-s {scriptin}	The script file "scriptin" is read.  The characters in the
		file are interpreted as if you had typed them.  The same can
		be done with the command ":source! {scriptin}".  If the end
		of the file is reached before the editor exits, further
		characters are read from the keyboard.  Only works when not
		started in Ex mode, see |-s-ex|.  See also |complex-repeat|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-s}
@cindex -s
@item -s @{scriptin@}
スクリプトファイル @{scriptin@} が読込まれます。ファイルの中のキャラクタは、全てユーザーがタイプしたものとして解釈されます。エディタが終了する前にファイルの終端に達した場合、以降のキャラクタはキーボードから読込まれます。Ex モード動作時には働きません、|@ref{-s-ex}| を参照してください。|@ref{complex-repeat}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-w_nr*
-w {number}
-w{number}	Set the 'window' option to {number}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-w_nr}
@cindex -w_nr
@item -w @{number@}
@itemx -w@{number@}
オプション '@option{window}' を @{number@} に設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-w*
-w {scriptout}	All the characters that you type are recorded in the file
		"scriptout", until you exit Vim.  This is useful if you want
		to create a script file to be used with "vim -s" or
		":source!".  When the "scriptout" file already exists, new
		characters are appended.  See also |complex-repeat|.
		{scriptout} cannot start with a digit.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-w}
@cindex -w
@item -w @{scriptout@}
Vim を終了するまで、ユーザーが入力した全部の文字が記録され、ファイル @{scriptout@} に書き出されます。これは "vim -s" や ":source!" で読込まれるスクリプトファイルを作成するのに役立ちます。既にファイル "scriptout" が存在する場合には、そのファイルに追加保存します。|@ref{complex-repeat}| も参照してください。

@{scriptout@} は数字で始まってはいけません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*-W*
-W {scriptout}	Like -w, but do not append, overwrite an existing file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-W}
@cindex -W
@item -W @{scriptout@}
-w と似ていますが、アペンド (追加) せずに、既にあるファイルを上書きします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote [+{cmd}] {file} ...
		Open the {file} in another Vim that functions as a server.
		Any non-file arguments must come before this.
		See |--remote|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote [+@{cmd@}] @{file@} ...
サーバーとして機能している他の Vim で @{file@} を開きます。この引数の前にファイルを指定することはできません。|@ref{--remote}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-silent [+{cmd}] {file} ...
		Like --remote, but don't complain if there is no server.
		See |--remote-silent|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-silent [+@{cmd@}] @{file@} ...
@minus{}@minus{}remote と同じ。ただしサーバーがなくてもメッセージを出しません。|@ref{--remote-silent}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-wait [+{cmd}] {file} ...
		Like --remote, but wait for the server to finish editing the
		file(s).
		See |--remote-wait|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-wait [+@{cmd@}] @{file@} ...
@minus{}@minus{}remote と同じ。ただしサーバーが終了するまで待機します。|@ref{--remote-wait}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-wait-silent [+{cmd}] {file} ...
		Like --remote-wait, but don't complain if there is no server.
		See |--remote-wait-silent|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-wait-silent [+@{cmd@}] @{file@} ...
@minus{}@minus{}remote-wait と同じ。ただしサーバーがなくてもメッセージを出しません。|@ref{--remote-wait-silent}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--servername {name}
		Specify the name of the Vim server to send to or to become.
		See |--servername|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}servername @{name@}
Vim サーバーの名前を指定します。これは通信先のサーバー名、あるいは起動する Vim が使用する名前です。|@ref{--servername}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-send {keys}
		Send {keys} to a Vim server and exit.
		See |--remote-send|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-send @{keys@}
@{keys@} を Vim サーバーに送り、終了します。|@ref{--remote-send}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--remote-expr {expr}
		Evaluate {expr} in another Vim that functions as a server.
		The result is printed on stdout.
		See |--remote-expr|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}remote-expr @{expr@}
Vim サーバーで @{expr@} を評価し、その結果を標準出力に出力します。|@ref{--remote-expr}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--serverlist	Output a list of Vim server names and exit.  See
		|--serverlist|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @minus{}@minus{}serverlist
稼動している Vim サーバーの一覧を出力します。|@ref{--serverlist}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--socketid {id}						*--socketid*
		GTK+ GUI Vim only.  Make gvim try to use GtkPlug mechanism, so
		that it runs inside another window.  See |gui-gtk-socketid|
		for details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--socketid}
@cindex @minus{}@minus{}socketid
@item @minus{}@minus{}socketid @{id@}
GTK+ GUI の Vim のみ。GtkPlug を使用し、別アプリケーションのウィンドウで起動するようにします。詳細は |@ref{gui-gtk-socketid}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--windowid {id}						*--windowid*
		Win32 GUI Vim only.  Make gvim try to use the window {id} as a
		parent, so that it runs inside that window.  See
		|gui-w32-windowid| for details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--windowid}
@cindex @minus{}@minus{}windowid
@item @minus{}@minus{}windowid @{id@}
Win32 GUI の Vim のみ。ウィンドウ @{id@} を親ウィンドウにしようと試みます。成功するとそのウィンドウの内側で起動します。詳しくは |@ref{gui-w32-windowid}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--echo-wid						*--echo-wid*
		GTK+ GUI Vim only.  Make gvim echo the Window ID on stdout,
		which can be used to run gvim in a kpart widget.  The format
		of the output is: >
			WID: 12345\n
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--echo-wid}
@cindex @minus{}@minus{}echo-wid
@item @minus{}@minus{}echo-wid
GTK+ GUI の Vim のみ。ウィンドウの ID を標準出力に出力します。この値は gvim を kpart ウィジェットに埋め込むのに使用できます。出力の書式は:
@verbatim
WID: 12345\n
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
--role {role}						*--role*
		GTK+ 2 GUI only.  Set the role of the main window to {role}.
		The window role can be used by a window manager to uniquely
		identify a window, in order to restore window placement and
		such.  The --role argument is passed automatically when
		restoring the session on login.  See |gui-gnome-session|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{--role}
@cindex @minus{}@minus{}role
@item @minus{}@minus{}role @{role@}
GTK+ 2 GUI のみ。メインウィンドウの役割 (role) を @{role@} に設定します。ウィンドウの役割はウィンドウマネージャーがウィンドウを識別して、ウィンドウの位置等を復元するのに使われます。この引数はログイン時にセッションを復元するときに自動的に使用されます。|@ref{gui-gnome-session}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-P {parent-title}				*-P* *MDI* *E671* *E672*
		Win32 only: Specify the title of the parent application.  When
		possible, Vim will run in an MDI window inside the
		application.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-P}
@anchor{MDI}
@anchor{E671}
@anchor{E672}
@cindex -P
@cindex MDI
@erindex E671
@erindex E672
@item -P @{parent-title@}
Win32 のみ。親になるアプリケーションのタイトルを指定します。可能であれば Vim はその MDI アプリケーションのウィンドウ内で起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		{parent-title} must appear in the window title of the parent
		application.  Make sure that it is specific enough.
		Note that the implementation is still primitive.  It won't
		work with all applications and the menu doesn't work.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

@{parent-title@} が親アプリケーションのウィンドウのタイトルに使われていて、明確に区別できる必要があります。
@quotation
@strong{Note:} @*
まだ簡単に実装されているだけであることに注意してください。全てのアプリケーションで動くわけではありません。メニューは機能しません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
-nb							*-nb*
-nb={fname}
-nb:{hostname}:{addr}:{password}
		Attempt connecting to Netbeans and become an editor server for
		it.  The second form specifies a file to read connection info
		from.  The third form specifies the hostname, address and
		password for connecting to Netbeans. |netbeans-run|
		{only available when compiled with the |+netbeans_intg|
		feature; if not then -nb will make Vim exit}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{-nb}
@cindex -nb
@item -nb -nb=@{fname@} -nb:@{hostname@}:@{addr@}:@{password@}
Netbeans と接続し、エディタサーバーになります。2 番目の型は接続情報を格納したファイルを指定します。3 番目の型は Netbeans に接続するためのホスト名、アドレス、パスワードを指定します。|@ref{netbeans-run}|

@{|@ref{+netbeans_intg}| 機能つきでコンパイルされたときのみ有効; もしそうでなければ、-nb は Vim を終了させるでしょう@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the executable is called "view", Vim will start in Readonly mode.  This is
useful if you can make a hard or symbolic link from "view" to "vim".
Starting in Readonly mode can also be done with "vim -R".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
実行ファイルの名前が "view" なら、Vim は読込み専用モードで起動します。"view" から "vim" へハードリンクかシンボリックリンクを作成すると便利でしょう。"vim -R" とすることでも読込み専用モードで起動できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the executable is called "ex", Vim will start in "Ex" mode.  This means it
will accept only ":" commands.  But when the "-v" argument is given, Vim will
start in Normal mode anyway.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
実行ファイルの名前が "ex" なら、Vim は Ex モードで起動します。これは ":" コマンドだけしか使えないことを意味しています。しかし引数 "-v" が与えられれば、Vim は常にノーマルモードで起動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additional arguments are available on unix like systems when compiled with
X11 GUI support.  See |gui-resources|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
unix 互換のシステムで X11 GUI サポートが有効なら、さらに多くの引数が利用可能です。|@ref{gui-resources}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Vim on the Amiga					*starting-amiga*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{starting-amiga}
@cindex starting-amiga
@cindex Amiga 版の Vim
@section 2. Amiga 版の Vim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Starting Vim from the Workbench				*workbench*
-------------------------------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{workbench}
@cindex workbench
@unnumberedsubsec Vim を Workbench から起動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim can be started from the Workbench by clicking on its icon twice.  It will
then start with an empty buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Workbench 上でアイコンを 2 度クリックすれば Vim を起動することができます。そうすると空のバッファで起動するでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim can be started to edit one or more files by using a "Project" icon.  The
"Default Tool" of the icon must be the full pathname of the Vim executable.
The name of the ".info" file must be the same as the name of the text file.
By clicking on this icon twice, Vim will be started with the file name as
current file name, which will be read into the buffer (if it exists).  You can
edit multiple files by pressing the shift key while clicking on icons, and
clicking twice on the last one.  The "Default Tool" for all these icons must
be the same.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"Project" アイコンを使用することで、1 つ以上のファイルを開くことができます。アイコンの "Default Tool" には Vim の実行ファイルの完全なパスを設定し、"@file{.info}" ファイルの名前には、編集するテキストファイルの名前を設定します。このアイコンを 2 度クリックすると、Vim が起動してそのファイルを (そのファイルがあれば) 開きます。シフトキーを押しながらアイコンをクリックし、最後のファイルを 2 度クリックすることで、複数のファイルを開くことができます。これら全てのアイコンの "Default Tool" は同じでなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is not possible to give arguments to Vim, other than file names, from the
workbench.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Workbench からではファイル名以外の引数は、Vim へ与えることができません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim window						*amiga-window*
----------
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{amiga-window}
@cindex amiga-window
@unnumberedsubsec Vim ウィンドウ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will run in the CLI window where it was started.  If Vim was started with
the "run" or "runback" command, or if Vim was started from the workbench, it
will open a window of its own.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は起動された CLI ウィンドウの中で動作します。Vim が "run" や "runback" コマンド、あるいや Workbench から起動された場合には、自分自身でウィンドウを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Technical detail:
	To open the new window a little trick is used.  As soon as Vim
	recognizes that it does not run in a normal CLI window, it will
	create a script file in "t:".  This script file contains the same
	command as the one Vim was started with, and an "endcli" command.
	This script file is then executed with a "newcli" command (the "c:run"
	and "c:newcli" commands are required for this to work).  The script
	file will hang around until reboot, or until you delete it.  This
	method is required to get the ":sh" and ":!" commands to work
	correctly.  But when Vim was started with the -f option (foreground
	mode), this method is not used.  The reason for this is that
	when a program starts Vim with the -f option it will wait for Vim to
	exit.  With the script trick, the calling program does not know when
	Vim exits.  The -f option can be used when Vim is started by a mail
	program which also waits for the edit session to finish.  As a
	consequence, the ":sh" and ":!" commands are not available when the
	-f option is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item 技術的詳細:
新しいウィンドウを開くためにちょっとしたトリックを使います。Vim は普通の CLI ウィンドウの中で起動されていないことを検出するとすぐに、"t:" にあるスクリプトファイルを作成します。このスクリプトファイルには Vim を起動したのと同じコマンドに加えて "endcli" コマンドが含まれています。このスクリプトファイルは "newcli" コマンドと一緒に実行されます (これが行われる時には "c:run" と "c:newcli" コマンドが必要です)。

スクリプトファイルはリブートするか、手動で消すまで存在しつづけます。この方法は "@command{:sh}" と "@command{:!}" コマンドが正しく機能する必要があります。しかし Vim が -f オプション (フォアグラウンドモード) で起動された時には、この方法は使われません。Vim を -f オプションで起動した時には、その終了を待つからです。

スクリプトのトリックを使うと、Vim を呼び出したプログラムはその終了を知ることができません。オプション -f はメールプログラムなど編集のセッションが終わったことを検出したい場合に、Vim を起動する方法として使用されます。だからオプション -f が指定された時には、"@command{:sh}" と "@command{:!}" コマンドは使用することができません。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will automatically recognize the window size and react to window
resizing.  Under Amiga DOS 1.3, it is advised to use the fastfonts program,
"FF", to speed up display redrawing.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は自動的にウィンドウのサイズを認識して対応します。Amiga DOS 1.3 の元では、表示の更新速度を上げるために、fastfonts のプログラム "FF" の支援を受けて動作します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Running eVim							*evim-keys*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{evim-keys}
@cindex evim-keys
@cindex eVim について
@section 3. eVim について
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
EVim runs Vim as click-and-type editor.  This is very unlike the original Vi
idea.  But it helps for people that don't use Vim often enough to learn the
commands.  Hopefully they will find out that learning to use Normal mode
commands will make their editing much more effective.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
EVim は Vim をモードレスエディタとして実行します。これは Vi らしくない発想ではありますが、Vim の操作方法を覚えられるほどには使用しない人の助けになります。ノーマルモードのコマンドを覚えることで編集作業がより簡単になるということを利用者が感付いてくれれば幸いです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In Evim these options are changed from their default value:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Evim では以下のオプションが標準設定から変更されます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set nocompatible	Use Vim improvements
	:set insertmode		Remain in Insert mode most of the time
	:set hidden		Keep invisible buffers loaded
	:set backup		Keep backup files (not for VMS)
	:set backspace=2	Backspace over everything
	:set autoindent		auto-indent new lines
	:set history=50		keep 50 lines of Ex commands
	:set ruler		show the cursor position
	:set incsearch		show matches halfway typing a pattern
	:set mouse=a		use the mouse in all modes
	:set hlsearch		highlight all matches for a search pattern
	:set whichwrap+=<,>,[,]  <Left> and <Right> wrap around line breaks
	:set guioptions-=a	non-Unix only: don't do auto-select
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .35 .65
@item :set nocompatible @tab Vi にはない Vim 独自の機能を使います
@item :set insertmode @tab 常時挿入モードを使用します
@item :set hidden @tab 非表示になったバッファを開放しません
@item :set backup @tab バックアップファイルを消しません (VMS 以外)
@item :set backspace=2 @tab どこでもバックスペースを使用できるようにします
@item :set autoindent @tab 新しい行を入力するときに自動的にインデントします
@item :set history=50 @tab Ex コマンドの使用履歴を 50 回前まで記録します
@item :set ruler @tab カーソルの位置を表示します
@item :set incsearch @tab 検索時、入力途中にマッチ箇所を表示します
@item :set mouse=a @tab 全てのモードでマウスを使います
@item :set hlsearch @tab 検索した文字を強調表示します
@item :set whichwrap+=<,>,[,] @tab @key{<Left>} と @key{<Right>} を使った左右の移動で行を跨ぎます
@item :set guioptions-=a @tab 非 Unix のみ。選択時に自動的にコピーしません
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Key mappings:
	<Down>		moves by screen lines rather than file lines
	<Up>		idem
	Q		does "gq", formatting, instead of Ex mode
	<BS>		in Visual mode: deletes the selection
	CTRL-X		in Visual mode: Cut to clipboard
	<S-Del>		idem
	CTRL-C		in Visual mode: Copy to clipboard
	<C-Insert>	idem
	CTRL-V		Pastes from the clipboard (in any mode)
	<S-Insert>	idem
	CTRL-Q		do what CTRL-V used to do
	CTRL-Z		undo
	CTRL-Y		redo
	<M-Space>	system menu
	CTRL-A		select all
	<C-Tab>		next window, CTRL-W w
	<C-F4>		close window, CTRL-W c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
キーマッピング:
@multitable @columnfractions .25 .75
@item <Down> @tab 実際の行ではなく表示された行の単位で移動します
@item <Up> @tab 同上
@item Q @tab "gq" コマンドで文章整形します
@item <BS> @tab ビジュアルモードで選択範囲を削除します
@item CTRL-X @tab ビジュアルモードで選択範囲を切り取ってクリップボードにコピーします
@item <S-Del> @tab 同上
@item CTRL-C @tab ビジュアルモードで選択範囲をクリップボードにコピーします
@item <C-Insert> @tab 同上
@item CTRL-V @tab クリップボードから貼り付けます (どのモードでも)
@item <S-Insert> @tab 同上
@item CTRL-Q @tab 本来の @kbd{CTRL-V} の機能
@item CTRL-Z @tab 元に戻します (undo)
@item CTRL-Y @tab やり直します (redo)
@item <M-Space> @tab システムメニューを表示します
@item CTRL-A @tab 全てを選択します
@item <C-Tab> @tab 次のウィンドウへ。@kbd{CTRL-W w} と同じ
@item <C-F4> @tab ウィンドウを閉じます。@kbd{CTRL-W c} と同じ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Additionally:
- ":behave mswin" is used |:behave|
- syntax highlighting is enabled
- filetype detection is enabled, filetype plugins and indenting is enabled
- in a text file 'textwidth' is set to 78
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
追記:
@itemize
@item "@command{:behave mswin}" が使用されます |@ref{:behave}|
@item 構文強調表示が有効になります
@item ファイルタイプ別の機能が有効になります。ファイルタイプ用のプラグインやインデントが使用されます。
@item テキストファイルでは '@option{textwidth}' が 78 に設定されます
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
One hint: If you want to go to Normal mode to be able to type a sequence of
commands, use CTRL-L. |i_CTRL-L|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@strong{Hint:} @*
ノーマルモードのコマンドを連続して使用するには @kbd{CTRL-L} を使用します。|@ref{i_CTRL-L}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Initialization				*initialization* *startup*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{initialization}
@anchor{startup}
@cindex initialization
@cindex startup
@cindex 初期化
@unnumberedsubsec 初期化
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This section is about the non-GUI version of Vim.  See |gui-fork| for
additional initialization when starting the GUI.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このセクションは Vim の非 GUI バージョンについて書きます。GUI をスタートさせた時の追加の初期化は |@ref{gui-fork}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
At startup, Vim checks environment variables and files and sets values
accordingly.  Vim proceeds in this order:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
スタート時に、Vim は環境変数とファイルを調べ、然るべく値を設定します。Vim はこの順序で取り掛かかります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Set the 'shell' and 'term' option		*SHELL* *COMSPEC* *TERM*
	The environment variable SHELL, if it exists, is used to set the
	'shell' option.  On MS-DOS and Win32, the COMSPEC variable is used
	if SHELL is not set.
	The environment variable TERM, if it exists, is used to set the 'term'
	option.  However, 'term' will change later when starting the GUI (step
	8 below).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{SHELL}
@anchor{COMSPEC}
@anchor{TERM}
@cindex SHELL
@cindex COMSPEC
@cindex TERM
@enumerate
@item オプション '@option{shell}' と '@option{term}' を設定する

環境変数 @env{SHELL} が存在するなら、オプション '@option{shell}' を設定するのに使われます。MS-DOS と Win32 では @env{SHELL} が設定されていない場合 @env{COMSPEC} の値が使用されます。

環境変数 @env{TERM} が存在するなら、オプション '@option{term}' を設定するのに使われます。しかし、後で GUI を開始するときに '@option{term}' は変更されます (下のステップ 8 を参照してください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
2. Process the arguments
	The options and file names from the command that start Vim are
	inspected.  Buffers are created for all files (but not loaded yet).
	The |-V| argument can be used to display or log what happens next,
	useful for debugging the initializations.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 引数を処理する

Vim を起動するときに指定したオプション引数やファイル名を調べます。指定されたファイルのバッファを作成します (まだ読み込みません)。引数 |@ref{-V}| を使うと、初期化処理のデバッグ用にこれ以降で起こることを表示したりログに書き出したりできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
3. Execute Ex commands, from environment variables and/or files
	An environment variable is read as one Ex command line, where multiple
	commands must be separated with '|' or "<NL>".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 環境変数とファイルの Ex コマンドを実行する

環境変数の値は 1 つの Ex コマンドラインとして読まれるので、複数のコマンドを実行したい時には '|' か "<NL>" で区切る必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*vimrc* *exrc*
	A file that contains initialization commands is called a "vimrc" file.
	Each line in a vimrc file is executed as an Ex command line.  It is
	sometimes also referred to as "exrc" file.  They are the same type of
	file, but "exrc" is what Vi always used, "vimrc" is a Vim specific
	name.  Also see |vimrc-intro|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vimrc}
@anchor{exrc}
@cindex vimrc
@cindex exrc

"@file{vimrc}" ファイルは初期化コマンドを含んだファイルです。@file{vimrc} ファイルは 1 行ずつ Ex コマンドとして実行されます。"exrc" とほぼ等価です。それらは同じタイプのファイルですが、"exrc" が常に Vi によって使われるのに対して、"vimrc" は Vim 特有のものです。|@ref{vimrc-intro}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Places for your personal initializations:
		Unix		$HOME/.vimrc or $HOME/.vim/vimrc
		OS/2		$HOME/.vimrc, $HOME/vimfiles/vimrc
				or $VIM/.vimrc (or _vimrc)
		MS-Windows	$HOME/_vimrc, $HOME/vimfiles/vimrc
				or $VIM/_vimrc
		Amiga		s:.vimrc, home:.vimrc, home:vimfiles:vimrc
				or $VIM/.vimrc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
個人の初期化ファイルの配置場所:
@multitable @columnfractions .2 .8
@item Unix @tab $HOME/.vimrc, $HOME/.vim/vimrc
@item OS/2 @tab $HOME/.vimrc, $HOME/vimfiles/vimrc, $VIM/.vimrc (または _vimrc)
@item MS-Windows @tab $HOME/_vimrc, $HOME/vimfiles/vimrc, $VIM/_vimrc
@item Amiga @tab s:.vimrc, home:.vimrc, home:vimfiles:vimrc, $VIM/.vimrc
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The files are searched in the order specified above and only the first
	one that is found is read.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
初期化ファイルは上記の順に検索され、最初に見つかったものだけが読み込まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	RECOMMENDATION: Put all your Vim configuration stuff in the
	$HOME/.vim/ directory ($HOME/vimfiles/ for MS-Windows). That makes it
	easy to copy it to another system.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
推奨: Vim の設定ファイルは全て $HOME/.vim/ ディレクトリ (MS-Windows では $HOME/vimfiles/) に置いてください。そうすれば設定ファイルを別のシステムにコピーするのが容易になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If Vim was started with "-u filename", the file "filename" is used.
	All following initializations until 4. are skipped. $MYVIMRC is not
	set.
	"vim -u NORC" can be used to skip these initializations without
	reading a file.  "vim -u NONE" also skips loading plugins.  |-u|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が "-u filename" で起動された場合、デフォルトの vimrc の代わりに "filename" が使われます。続く初期化処理の 4. までがスキップされます。@env{$MYVIMRC} は設定されません。

"vim -u NORC" によりファイルを読み込むことなくこれらの初期化を省略することができます。"vim -u NONE" を使用するとさらにプラグインも読み込みません。|@ref{-u}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	If Vim was started in Ex mode with the "-s" argument, all following
	initializations until 4. are skipped.  Only the "-u" option is
	interpreted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
起動引数 "-s" により Vim が Ex モードで起動されたなら、続く 4. までの初期化処理がスキップされます。オプション "-u" だけが処理されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*evim.vim*
     a. If vim was started as |evim| or |eview| or with the |-y| argument, the
	script $VIMRUNTIME/evim.vim will be loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{evim.vim}
@cindex evim.vim
@itemize @bullet
@item a. Vim を |@ref{evim}| や |@ref{eview}| として、あるいは |@ref{-y}| 引数を指定して起動すると $VIMRUNTIME/evim.vim が実行されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*system-vimrc*
     b. For Unix, MS-DOS, MS-Windows, OS/2, VMS, Macintosh, RISC-OS and Amiga
	the system vimrc file is read for initializations.  The path of this
	file is shown with the ":version" command.  Mostly it's "$VIM/vimrc".
	Note that this file is ALWAYS read in 'compatible' mode, since the
	automatic resetting of 'compatible' is only done later.  Add a ":set
	nocp" command if you like.
	For the Macintosh the $VIMRUNTIME/macmap.vim is read (not on
	MacVim.app, this only applies to the older Carbon version).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{system-vimrc}
@cindex system-vimrc
@item b. Unix, MS-DOS, MS-Windows, OS/2, VMS, Macintosh, RISC-OS そして Amiga では、システムの vimrc ファイルが初期化のために読み込まれます。このファイルのパスは "@command{:version}" コマンドによって確認できmasu。普通は "$VIM/vimrc" です。
@quotation
@strong{Note:} @*
このファイルは 'compatible' モードであっても読み込まれます。'compatible' の自動リセットはこれが終わった後に行われることになっています。必要ならば "@command{:set nocp}" コマンドを追加します。
@end quotation
Macintosh では $VIMRUNTIME/macmap.vim が読み込まれます (MacVim.app 上ではそうではなく、これは古い Carbon 版にのみ当てはまります)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	  *VIMINIT* *.vimrc* *_vimrc* *EXINIT* *.exrc* *_exrc* *$MYVIMRC*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{VIMINIT}
@anchor{.vimrc}
@anchor{_vimrc}
@anchor{EXINIT}
@anchor{.exrc}
@anchor{_exrc}
@anchor{$MYVIMRC}
@cindex VIMINIT
@cindex .vimrc
@cindex _vimrc
@cindex EXINIT
@cindex .exrc
@cindex _exrc
@cindex $MYVIMRC
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
     c. Five places are searched for initializations.  The first that exists
	is used, the others are ignored.  The $MYVIMRC environment variable is
	set to the file that was first found, unless $MYVIMRC was already set
	and when using VIMINIT.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item c. 初期化のために 5 つの場所が検索されます。最初に見つかったものが使用され、残りは無視されます。ここまでで環境変数 @env{$MYVIMRC} が設定されていなく、VIMINIT を使っていないなら、@env{$MYVIMRC} に最初に見つかったファイルが設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	I   The environment variable VIMINIT (see also |compatible-default|) (*)
	    The value of $VIMINIT is used as an Ex command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize @bullet
@item I 環境変数 @env{VIMINIT} (|@ref{compatible-default}| も参照してください) (*) その内容は Ex コマンドとして解釈されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	II  The user vimrc file(s):
		    "$HOME/.vimrc"	   (for Unix and OS/2) (*)
		    "$HOME/.vim/vimrc"	   (for Unix and OS/2) (*)
		    "s:.vimrc"		   (for Amiga) (*)
		    "home:.vimrc"	   (for Amiga) (*)
		    "home:vimfiles:vimrc"  (for Amiga) (*)
		    "$VIM/.vimrc"	   (for OS/2 and Amiga) (*)
		    "$HOME/_vimrc"	   (for MS-DOS and Win32) (*)
		    "$HOME/vimfiles/vimrc" (for MS-DOS and Win32) (*)
		    "$VIM/_vimrc"	   (for MS-DOS and Win32) (*)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item II ユーザー vimrc ファイル:
@multitable @columnfractions .5 .5
@item "$HOME/.vimrc" @tab (for Unix and OS/2) (*)
@item "$HOME/.vim/vimrc" @tab (for Unix and OS/2) (*)
@item "s:.vimrc" @tab (for Amiga) (*)
@item "home:.vimrc" @tab (for Amiga) (*)
@item "home:vimfiles:vimrc" @tab (for Amiga) (*)
@item "$VIM/.vimrc" @tab (for OS/2 and Amiga) (*)
@item "$HOME/_vimrc" @tab (for MS-DOS and Win32) (*)
@item "$HOME/vimfiles/vimrc" @tab (for MS-DOS and Win32) (*)
@item "$VIM/_vimrc" @tab (for MS-DOS and Win32) (*)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Note: For Unix, OS/2 and Amiga, when ".vimrc" does not exist,
		"_vimrc" is also tried, in case an MS-DOS compatible file
		system is used.  For MS-DOS and Win32 ".vimrc" is checked
		after "_vimrc", in case long file names are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
Unix, OS/2 そして Amiga では、".vimrc" がなかった場合には、MS-DOS 互換のファイルシステムを使用することを考え、"_vimrc" も試みられます。MS-DOS と Win32 では "_vimrc" を探したあとで、ロングファイルネームの仕組みを使用して ".vimrc" が探されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Note: For MS-DOS and Win32, "$HOME" is checked first.  If no
		"_vimrc" or ".vimrc" is found there, "$VIM" is tried.
		See |$VIM| for when $VIM is not set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
MS-DOS と Win32 では "$HOME" がまず検査されます。"_vimrc" と ".vimrc" のどちらもない場合には、"$VIM" が調べられます。$VIM が設定されていない場合については |@ref{$VIM}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	III The environment variable EXINIT.
	    The value of $EXINIT is used as an Ex command line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item III 環境変数 EXINIT。その内容は Ex コマンドとして解釈されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	IV  The user exrc file(s).  Same as for the user vimrc file, but with
	    "vimrc" replaced by "exrc".  But only one of ".exrc" and "_exrc" is
	    used, depending on the system.  And without the (*)!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item IV ユーザーの exrc ファイル。vimrc と同じですが、vimrc が exrc によって置き換えられています。しかし ".exrc" と "_exrc" のどちらか 1 つだけが使われます。これはシステムによります。(*) の注釈は適用されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	V   The default vimrc file, $VIMRUNTIME/defaults.vim.  This sets up
	    options values and has "syntax on" and "filetype on" commands,
	    which is what most new users will want.  See |defaults.vim|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item V デフォルトの $VIMRUNTIME/defaults.vim を読み込みます。これは、大半の新規ユーザーが必要するであろう各種オプションを設定し、"syntax on" 及び "filetype on" コマンドを含んでいます。|@ref{defaults.vim}| を参照してください。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
     d. If the 'exrc' option is on (which is NOT the default), the current
	directory is searched for three files.  The first that exists is used,
	the others are ignored.
	-  The file ".vimrc" (for Unix, Amiga and OS/2) (*)
		    "_vimrc" (for MS-DOS and Win32) (*)
	-  The file "_vimrc" (for Unix, Amiga and OS/2) (*)
		    ".vimrc" (for MS-DOS and Win32) (*)
	-  The file ".exrc"  (for Unix, Amiga and OS/2)
		    "_exrc"  (for MS-DOS and Win32)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item d. '@option{exrc}' オプションがオン (初期状態ではオフ) の場合、現在のディレクトリで 3 つのファイルが検索されます。最初に見つかったものだけが使用され、残りは無視されます。
@multitable @columnfractions .2 .8
@item - The file @tab ".vimrc" (for Unix, Amiga and OS/2) (*)
@item @tab "_vimrc" (for MS-DOS and Win32) (*)
@item - The file @tab "_vimrc" (for Unix, Amiga and OS/2) (*)
@item @tab ".vimrc" (for MS-DOS and Win32) (*)
@item - The file @tab ".exrc"  (for Unix, Amiga and OS/2)
@item @tab "_exrc"  (for MS-DOS and Win32)
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
     (*) Using this file or environment variable will cause 'compatible' to be
	 off by default.  See |compatible-default|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
(*) このファイルを使用するか環境変数を使用した場合、自動的に '@option{compatible}' オプションがオフに設定されます。|@ref{compatible-default}| を参照してください。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
     Note: When using the |mzscheme| interface, it is initialized after loading
     the vimrc file.  Changing 'mzschemedll' later has no effect.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
|@ref{mzscheme}| インターフェイスを使用する場合は、@file{vimrc} ファイルの読み込み後に初期化されることに注意してください。それより後に '@option{mzschemedll}' を変更しても効果はありません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
4. Load the plugin scripts.					*load-plugins*
	This does the same as the command: >
		:runtime! plugin/**/*.vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{load-plugins}
@cindex load-plugins
@item プラグインスクリプトを読み込む

次のコマンドと同じことを実行します:
@verbatim
:runtime! plugin/**/*.vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<	The result is that all directories in the 'runtimepath' option will be
	searched for the "plugin" sub-directory and all files ending in ".vim"
	will be sourced (in alphabetical order per directory), also in
	subdirectories.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプション '@option{runtimepath}' に指定された各ディレクトリのサブディレクトリ "plugin" にある拡張子が ".vim" となっているファイルを実行します (各ディレクトリごとに名前順で実行される)。サブディレクトリに対しても再帰的に検索されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	However, directories in 'runtimepath' ending in "after" are skipped
	here and only loaded after packages, see below.
	Loading plugins won't be done when:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ただし "after" において変更した '@option{runtimepath}' 内のディレクトリはこの手順をスキップし、after パッケージだけを読み込みます。下の説明を参照してください。次の場合にはプラグインを読み込みません:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	- The 'loadplugins' option was reset in a vimrc file.
	- The |--noplugin| command line argument is used.
	- The |--clean| command line argument is used.
	- The "-u NONE" command line argument is used |-u|.
	- When Vim was compiled without the |+eval| feature.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item vimrc ファイルでオプション '@option{loadplugins}' がオフに設定された。
@item 起動時の引数に |@ref{--noplugin}| が指定された。
@item 起動時の引数に |@ref{--clean}| が指定された。
@item 起動時の引数に "-u NONE" が指定された |@ref{-u}|。
@item |@ref{+eval}| の機能を無効にして Vim をコンパイルした。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	Note that using "-c 'set noloadplugins'" doesn't work, because the
	commands from the command line have not been executed yet.  You can
	use "--cmd 'set noloadplugins'" or "--cmd 'set loadplugins'" |--cmd|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
引数に "-c set noloadplugins" と指定しても意味がないことに注意してください。このコマンドはこの時点ではまだ実行されません。"--cmd 'set noloadplugins'" または "--cmd 'set loadplugins'" を使うことができます |@ref{--cmd}|。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	Packages are loaded.  These are plugins, as above, but found in the
	"start" directory of each entry in 'packpath'.  Every plugin directory
	found is added in 'runtimepath' and then the plugins are sourced.  See
	|packages|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
パッケージが読み込まれます。'@option{packpath}' 内の各エントリの "start" ディレクトリの下で見つかったプラグインだけが上記の要領で読み込まれます。見つけた plugin ディレクトリはすべて '@option{runtimepath}' に追加され、すべてのプラグインが読み込まれます。詳細は |@ref{packages}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	The plugins scripts are loaded, as above, but now only the directories
	ending in "after" are used.  Note that 'runtimepath' will have changed
	if packages have been found, but that should not add a directory
	ending in "after".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プラグインスクリプトが読み込まれますが、上で言及したように、ここでは "after" で終わるディレクトリに限られます。パッケージが見つかった際には '@option{runtimepath}' が変更されます、"after" で終わるディレクトリは追加されないことに注意してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
5. Set 'shellpipe' and 'shellredir'
	The 'shellpipe' and 'shellredir' options are set according to the
	value of the 'shell' option, unless they have been set before.
	This means that Vim will figure out the values of 'shellpipe' and
	'shellredir' for you, unless you have set them yourself.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{shellpipe}' と '@option{shellredir}' を設定する

それ以前に設定されていなければ、'shell' オプションに従って '@option{shellpipe}' と '@option{shellredir}' オプションが設定されます。つまり自分で設定しなくても、Vim が適切な '@option{shellpipe}' と '@option{shellredir}' の値を設定してくれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
6. Set 'updatecount' to zero, if "-n" command argument used
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item "-n" コマンド引数が使用されていたら、'@option{updatecount}' を 0 に設定する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
7. Set binary options
	If the "-b" flag was given to Vim, the options for binary editing will
	be set now.  See |-b|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item バイナリオプションを設定する

Vim の起動時に "-b" フラグが与えられた場合、この時点でバイナリ編集用のフラグが設定されます。|@ref{-b}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
8. Perform GUI initializations
	Only when starting "gvim", the GUI initializations will be done.  See
	|gui-init|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item GUI の初期化を行う

"gvim" として起動された場合、GUI の初期化が行われます。|@ref{gui-init}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
9. Read the viminfo file
	If the 'viminfo' option is not empty, the viminfo file is read.  See
	|viminfo-file|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item viminfo ファイルを読み込む

'@option{viminfo}' オプションが空でなければ、viminfo ファイルが読み込まれます。|@ref{viminfo-file}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
10. Read the quickfix file
	If the "-q" flag was given to Vim, the quickfix file is read.  If this
	fails, Vim exits.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item  quickfix ファイルを読み込む

Vim に "-q" フラグが与えられた場合、quickfix ファイルが読み込まれます。これに失敗すると Vim は終了します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
11. Open all windows
	When the |-o| flag was given, windows will be opened (but not
	displayed yet).
	When the |-p| flag was given, tab pages will be created (but not
	displayed yet).
	When switching screens, it happens now.  Redrawing starts.
	If the "-q" flag was given to Vim, the first error is jumped to.
	Buffers for all windows will be loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 全てのウィンドウを開く

|@ref{-o}| フラグが与えられた場合、ウィンドウが開きます (しかしまだ表示されません)。|@ref{-p}| フラグが与えられた場合、タブページが作られます (しかしまだ表示されません)。

スクリーンが切り替えられると、描画が始まります。"-q" フラグが Vim に与えられた場合、最初のエラーにジャンプします。全てのバッファがロードされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
12. Execute startup commands
	If a "-t" flag was given to Vim, the tag is jumped to.
	The commands given with the |-c| and |+cmd| arguments are executed.
	If the 'insertmode' option is set, Insert mode is entered.
	The starting flag is reset, has("vim_starting") will now return zero.
	The |v:vim_did_enter| variable is set to 1.
	The |VimEnter| autocommands are executed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item スタートアップコマンドが実行される

"-t" フラグが Vim に与えられた場合、タグにジャンプします。
|@ref{-c}| と |@ref{+cmd}| 引数で与えられたコマンドが実行されます。
'@option{insertmode}' オプションがセットされていると、挿入モードに入ります。
スタートフラグがリセットされ、has("vim_starting") がゼロを返すようになります。
|@ref{v:vim_did_enter}| 変数が 1 にセットされます。
|@ref{VimEnter}| の autocommand が実行されます。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The $MYVIMRC or $MYGVIMRC file will be set to the first found vimrc and/or
gvimrc file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
最初に見つかった vimrc, gvimrc が @env{$MYVIMRC}, @env{$MYGVIMRC} に設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Some hints on using initializations ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex 初期化のヒント
@unnumberedsubsec 初期化のヒント
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Standard setup:
Create a vimrc file to set the default settings and mappings for all your edit
sessions.  Put it in a place so that it will be found by 3b:
	~/.vimrc	(Unix and OS/2)
	s:.vimrc	(Amiga)
	$VIM\_vimrc	(MS-DOS and Win32)
Note that creating a vimrc file will cause the 'compatible' option to be off
by default.  See |compatible-default|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item スタンダードセットアップ:
全ての編集セッションに有効な、デフォルト設定とキーマッピングを設定する vimrc ファイルを作成します。それを既に 3b で述べた位置に置きます:
@multitable @columnfractions .5 .5
@item ~/.vimrc @tab (Unix and OS/2)
@item s:.vimrc @tab (Amiga)
@item $VIM\_vimrc @tab (MS-DOS and Win32)
@end multitable
@quotation
@strong{Note:} @*
vimrc ファイルを作るとデフォルトで '@option{compatible}' オプションがオフに設定されます。|@ref{compatible-default}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Local setup:
Put all commands that you need for editing a specific directory only into a
vimrc file and place it in that directory under the name ".vimrc" ("_vimrc"
for MS-DOS and Win32).  NOTE: To make Vim look for these special files you
have to turn on the option 'exrc'.  See |trojan-horse| too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ローカルセットアップ:
特定のディレクトリだけにおいて編集時に必要になるコマンドを vimrc ファイルに書き、そのディレクトリに ".vimrc" (MS-DOS と Win32 は "_vimrc") という名前で置きます。
@quotation
@strong{Note:} @*
Vim に、これらのファイルを見るように指定するには、'@option{exrc}' オプションをオンにする必要があることに注意してください。|@ref{trojan-horse}| (トロイの木馬) も参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
System setup:
This only applies if you are managing a Unix system with several users and
want to set the defaults for all users.  Create a vimrc file with commands
for default settings and mappings and put it in the place that is given with
the ":version" command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item システムセットアップ:
これは複数人で使う UNIX システムを管理し、全員のデフォルト設定を行いたい時に適用されます。デフォルト設定とキーマッピングを行うコマンドを @file{vimrc} ファイルに記述し、"@command{:version}" コマンドで表示される場所に置きます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Saving the current state of Vim to a file ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex Vim の現在状態をファイルに保存する
@unnumberedsubsec Vim の現在状態をファイルに保存する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Whenever you have changed values of options or when you have created a
mapping, then you may want to save them in a vimrc file for later use.  See
|save-settings| about saving the current state of settings to a file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションの値を変えたときや、キーマッピングを作成した時には、それらを後で再利用するために vimrc ファイルに保存したいでしょう。現在の設定状態をファイルに保存するためには |@ref{save-settings}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Avoiding setup problems for Vi users ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex Vi ユーザーの設定の問題の回避
@unnumberedsubsec Vi ユーザーの設定の問題の回避
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vi uses the variable EXINIT and the file "~/.exrc".  So if you do not want to
interfere with Vi, then use the variable VIMINIT and the file "vimrc" instead.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vi は環境変数 @env{EXINIT} とファイル "@file{~/.exrc}" を初期化に使用します。もし (Vim の設定が) Vi に干渉して欲しくないならば、それらを使う替わりに VIMINIT と vimrc を使用します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Amiga environment variables ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex Amiga の環境変数
@unnumberedsubsec Amiga の環境変数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On the Amiga, two types of environment variables exist.  The ones set with the
DOS 1.3 (or later) setenv command are recognized.  See the AmigaDos 1.3
manual.  The environment variables set with the old Manx Set command (before
version 5.0) are not recognized.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Amiga には 2 種類の環境変数が存在します。1 つは DOS 1.3 (かそれ以上) の setenv コマンドで、これは Vim によって認識されます。Amiga Dos 1.3 のマニュアルを参照してください。古い Manx の Set コマンド (バージョン 5.0 以前) の環境変数は、認識されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MS-DOS line separators ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@cindex MS-DOS の行区切り文字
@unnumberedsubsec MS-DOS の行区切り文字
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On MS-DOS-like systems (MS-DOS itself, Win32, and OS/2), Vim assumes that all
the vimrc files have <CR> <NL> pairs as line separators.  This will give
problems if you have a file with only <NL>s and have a line like
":map xx yy^M".  The trailing ^M will be ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
MS-DOS 風 (MS-DOS 自身、Win32、そして OS/2) では、全ての vimrc ファイルは行区切文字として <CR> <NL> を使用していると仮定します。<NL> だけを行区切文字として持つファイルや、":map xx yy^M" のような設定のファイルを使う場合、問題を引き起こします。末尾の @samp{^M} は無視されてしまうでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Vi compatible default value ~
						     *compatible-default*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{compatible-default}
@cindex compatible-default
@cindex Vi と互換性のあるデフォルトの値
@unnumberedsubsec Vi と互換性のあるデフォルトの値
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
When Vim starts, the 'compatible' option is on.  This will be used when Vim
starts its initializations.  But as soon as:
- a user vimrc file is found, or
- a vimrc file in the current directory is found, or
- the "VIMINIT" environment variable is set, or
- the "-N" command line argument is given, or
- the "--clean" command line argument is given, or
- the |defaults.vim| script is loaded, or
- a gvimrc file was found,
then the option will be set to 'nocompatible'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim が起動すると、オプション '@option{compatible}' がオンに設定されます。これは初期化時に使用されます。しかし以下の条件のいずれかに当てはまると、直ちに '@option{nocompatible}' が設定されます。
@itemize
@item ユーザーの vimrc ファイルが見つかる
@item カレントディレクトリに vimrc ファイルが見つかる
@item 環境変数 "VIMINIT" が設定されている
@item 起動引数 "-N" が指定されている
@item 起動引数 "--clean" が指定されている
@item |@ref{defaults.vim}| スクリプトがロードされる
@item gvimrc が見つかる
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that this does NOT happen when a system-wide vimrc file was found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
上記はシステムの vimrc ファイルでは発生しないことに注意してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This has the side effect of setting or resetting other options (see
'compatible').  But only the options that have not been set or reset will be
changed.  This has the same effect like the value of 'compatible' had this
value when starting Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これには他のオプションを設定やリセットする副作用があります ('@option{compatible}' を参照してください)。しかし変更されるのは、設定やリセットされていないオプションに限られます。これは、Vim 起動時に '@option{compatible}' の値に起こるのと同様の作用となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
'compatible' is NOT reset, and |defaults.vim| is not loaded:
- when Vim was started with the |-u| command line argument, especially with
  "-u NONE", or
- when started with the |-C| command line argument, or
- when the name of the executable ends in "ex". (This has been done to make
  Vim behave like "ex", when it is started as "ex")
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{compatible}' はリセットされず、|@ref{defaults.vim}| が読み込まれない:
@itemize
@item Vim が |@ref{-u}| 起動引数で起動され、特にそれが "-u NONE" であった。または…
@item |@ref{-C}| 起動引数で起動された。または…
@item 実行ファイルの名前が "ex" で終わっていた。(これは Vim を "ex" として起動した場合には、"ex" のように動作させるための仕様です)
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
But there is a side effect of setting or resetting 'compatible' at the moment
a .vimrc file is found: Mappings are interpreted the moment they are
encountered.  This makes a difference when using things like "<CR>".  If the
mappings depend on a certain value of 'compatible', set or reset it before
giving the mapping.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{compatible}' を @file{.vimrc} で設定すると副作用が発生します。マッピングは見つかった時点で解釈されるので、"<CR>" のようなものを使う時に違いが生じます。もしもマッピングが '@option{compatible}' の値に依存している場合、そのマッピングを定義する前に '@option{compatible}' を設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Defaults without a .vimrc file ~
							*defaults.vim*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{defaults.vim}
@cindex defaults.vim
@cindex .vimrc ファイルが無い際のデフォルト
@unnumberedsubsec .vimrc ファイルが無い際のデフォルト
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If Vim is started normally and no user vimrc file is found, the
$VIMRUNTIME/defaults.vim script is loaded.  This will set 'compatible' off,
switch on syntax highlighting and a few more things.  See the script for
details.  NOTE: this is done since Vim 8.0, not in Vim 7.4. (it was added in
patch 7.4.2111 to be exact).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を普通に起動してユーザー vimrc ファイルが見つからない場合には、$VIMRUTIME/defaults.vim スクリプトが読み込まれます。このスクリプトは '@option{compatible}' をオフにし、シンタックスハイライトを有効にする他、幾つかのことを実施します。詳細はそのスクリプトを参照してください。
@quotation
@strong{Note:} @*
これは正確には Vim 8.0 からではなく 7.4.2111 から導入されました。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This should work well for new Vim users.  If you create your own .vimrc, it is
recommended to add these lines somewhere near the top: >
	unlet! skip_defaults_vim
	source $VIMRUNTIME/defaults.vim
Then Vim works like before you had a .vimrc. Copying $VIMRUNTIME/vimrc_example
is way to do this.  Alternatively, you can copy defaults.vim to your .vimrc
and modify it (but then you won't get updates when it changes).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これは Vim の新規ユーザーにとって良く機能します。自分で .vimrc を作る際には、その最上部のほうに以下の 2 行を追加することが推奨されます:
@verbatim
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim
@end verbatim
$VIMRUNTIME/vimrc_example をコピーすることでも、同じことができます。他の方法として、defaults.vim 自体をあなたの .vimrc にコピーし、変更をすることもできます。(ただしこの方法では、将来 defaults.vim が変更された際に、そのアップデートは反映されません)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you don't like some of the defaults, you can still source defaults.vim and
revert individual settings.  See the defaults.vim file for hints on how to
revert each item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしも defaults.vim の一部が気に入らない場合でも、まず defaults.vim を読み込んでから、個々の設定を変更することができます。個別の項目をどのように変更するべきかのヒントとして defaults.vim ファイルを参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*skip_defaults_vim*
If you use a system-wide vimrc and don't want defaults.vim to change settings,
set the "skip_defaults_vim" variable.  If this was set and you want to load
defaults.vim from your .vimrc, first unlet skip_defaults_vim, as in the
example above.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{skip_defaults_vim}
@cindex skip_defaults_vim
システムワイドの vimrc を使っていて defaults.vim を使いたくない場合には、"skip_defaults_vim" 変数を設定します。これが設定された状態で、自分の .vimrc で defaults.vim を読み込みたい場合には、上で示した例のように、最初に unlet skip_defaults_vim を行うと良いでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Avoiding trojan horses ~
							*trojan-horse*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{trojan-horse}
@cindex trojan-horse
@cindex トロイの木馬を回避する
@unnumberedsubsec トロイの木馬を回避する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
While reading the "vimrc" or the "exrc" file in the current directory, some
commands can be disabled for security reasons by setting the 'secure' option.
This is always done when executing the command from a tags file.  Otherwise it
would be possible that you accidentally use a vimrc or tags file that somebody
else created and contains nasty commands.  The disabled commands are the ones
that start a shell, the ones that write to a file, and ":autocmd".  The ":map"
commands are echoed, so you can see which keys are being mapped.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のディレクトリにある "vimrc" や "exrc" を読み込むときに、'@option{secure}' オプションを設定することで、安全性のために幾つかのコマンドを無効にすることができます。タグファイル内のコマンドを実行する際にも常にこれが行われます。そうでないと他人が作成した悪意を持ったコマンドを、偶然実行してしまう可能性があります。使用不可になるコマンドは、シェルを起動するものと、ファイルに書き込むものと、そして "@command{:autocmd}" です。"@command{:map}" コマンドは表示され、どのようなマッピングがなされたか確認することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	If you want Vim to execute all commands in a local vimrc file, you
can reset the 'secure' option in the EXINIT or VIMINIT environment variable or
in the global "exrc" or "vimrc" file.  This is not possible in "vimrc" or
"exrc" in the current directory, for obvious reasons.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ローカルな vimrc ファイル内で全てのコマンドを実行したい場合には、EXINIT か VIMINIT 環境変数か、グローバルな "exrc" もしくは "vimrc" ファイルで '@option{secure}' オプションをオフに設定します。現在のディレクトリにある "vimrc" と "exrc" からは、理由は明らですが、これは設定できません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	On Unix systems, this only happens if you are not the owner of the
vimrc file.  Warning: If you unpack an archive that contains a vimrc or exrc
file, it will be owned by you.  You won't have the security protection.  Check
the vimrc file before you start Vim in that directory, or reset the 'exrc'
option.  Some Unix systems allow a user to do "chown" on a file.  This makes
it possible for another user to create a nasty vimrc and make you the owner.
Be careful!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
UNIX システムでは、vimrc ファイルの所有権がユーザーにないときだけ '@option{secure}' が適用されます。
@quotation
@strong{警告:} @*
vimrc か exrc を含むアーカイブを展開したときには、そのファイルはあなた自身のものになります。そこには安全性保護などありません。Vim を起動する前に現在のディレクトリに vimrc ファイルがないかチェックするか、'@option{exrc}' オプションをオフに設定したほうが良いでしょう。幾つかの UNIX システムでは一般ユーザーがファイルに "chown" を行うことを許しているものがあります。これは別のユーザーが悪意に満ちた vimrc を作成し、所有者を貴方にすることを可能にしています。注意してください！
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	When using tag search commands, executing the search command (the last
part of the line in the tags file) is always done in secure mode.  This works
just like executing a command from a vimrc/exrc in the current directory.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
タグサーチコマンドを使う時には、実行されるサーチコマンド (タグファイルの各行の最後の部分) は常に安全なモードで行われます。これは現在のディレクトリにある vimrc/exrc からコマンドが実行されるのと、ちょうど同じように動作します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
If Vim startup is slow ~
							*slow-start*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{slow-start}
@cindex slow-start
@cindex Vim の起動が遅いときには
@unnumberedsubsec Vim の起動が遅いときには
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If Vim takes a long time to start up, use the |--startuptime| argument to find
out what happens.  There are a few common causes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim の起動に時間がかかる場合は |@ref{--startuptime}| 引数を使って原因を探すことができます。よくある原因としては次のようなものがあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- If the Unix version was compiled with the GUI and/or X11 (check the output
  of ":version" for "+GUI" and "+X11"), it may need to load shared libraries
  and connect to the X11 server.  Try compiling a version with GUI and X11
  disabled.  This also should make the executable smaller.
  Use the |-X| command line argument to avoid connecting to the X server when
  running in a terminal.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item Unix で GUI や X11 を有効にしている場合 ("@command{:version}" の出力で "+GUI" と "+X11" をチェック)、共有ライブラリをロードし X11 サーバーに接続する必要があります。GUI と X11 を無効にしてコンパイルしたバージョンを試してください。これにより実行ファイルが小さくもなるでしょう。

CUI 端末で Vim を起動するときの引数に |@ref{-X}| を指定すると、X サーバーと接続しないようにできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- If you have "viminfo" enabled, the loading of the viminfo file may take a
  while.  You can find out if this is the problem by disabling viminfo for a
  moment (use the Vim argument "-i NONE", |-i|).  Try reducing the number of
  lines stored in a register with ":set viminfo='20,<50,s10".  |viminfo-file|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item "viminfo" を使用している場合、viminfo ファイルを読み込むのに少し時間がかかります。viminfo が原因ならば一時的に viminfo を無効にすることによって確認することができます (Vim を引数 "-i NONE" で起動します。|@ref{-i}|)。"@command{:set viminfo='20,<50,s10}" と設定して、レジスタに保存される行数を減らしてみるのも良いでしょう。|@ref{viminfo-file}|。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Intro message ~
							*:intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:intro}
@cindex :intro
@cindex 紹介メッセージ
@unnumberedsubsec 紹介メッセージ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
When Vim starts without a file name, an introductory message is displayed (for
those who don't know what Vim is).  It is removed as soon as the display is
redrawn in any way.  To see the message again, use the ":intro" command (if
there is not enough room, you will see only part of it).
   To avoid the intro message on startup, add the 'I' flag to 'shortmess'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ファイル名を与えずに Vim を起動した場合、(Vim のことを知らない人に向けて) 紹介メッセージが表示されます。そのメッセージはなんらかの操作によって画面が再描画されるとすぐに消されます。もう一度メッセージを見るには、"@command{:intro}" コマンドを使用します (表示するスペースがなければ一部だけが表示されます)。

起動時に紹介メッセージを表示しないようにするには '@option{shortmess}' に '@var{I}' フラグを追加します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*info-message*
The |--help| and |--version| arguments cause Vim to print a message and then
exit.  Normally the message is sent to stdout, thus can be redirected to a
file with: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{info-message}
@cindex info-message
起動引数に |@ref{--help}| や |@ref{--version}| を指定すると Vim はメッセージを出力して終了します。通常はそのメッセージは標準出力に送られるので、リダイレクトしてファイルに書き込むことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim --help >file
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
vim --help >file
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
From inside Vim: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim でその出力を取り込むには:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:read !vim --help
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:read !vim --help
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using gvim, it detects that it might have been started from the desktop,
without a terminal to show messages on.  This is detected when both stdout and
stderr are not a tty.  This breaks the ":read" command, as used in the example
above.  To make it work again, set 'shellredir' to ">" instead of the default
">&": >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
gvim は標準出力と標準エラー出力が端末に繋がってないときに、自身がデスクトップから起動され、メッセージを出力する端末がないものと判断します。このせいで上記の "@command{:read}" コマンドを使用した例は使えません。使用できるようにするには '@option{shellredir}' を標準設定の "@var{>&}" から "@var{>}" へ変更します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	:set shellredir=>
	:read !gvim --help
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:set shellredir=>
:read !gvim --help
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This still won't work for systems where gvim does not use stdout at all
though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしこのようにしても gvim が標準出力を使用しないようなシステムでは機能しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
5. $VIM and $VIMRUNTIME
								*$VIM*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{$VIM}
@cindex $VIM
@cindex $VIM と $VIMRUNTIME
@section 5. $VIM と $VIMRUNTIME
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The environment variable "$VIM" is used to locate various user files for Vim,
such as the user startup script ".vimrc".  This depends on the system, see
|startup|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
環境変数の "@env{$VIM}" は、設定ファイル "@file{.vimrc}" のような、Vim が使用するさまざまなファイルの置き場所を見つけるために利用されます。"@env{$VIM}" の値はシステムに依存します。|@ref{startup}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To avoid the need for every user to set the $VIM environment variable, Vim
will try to get the value for $VIM in this order:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
全てのユーザーが環境変数 @env{$VIM} を設定しなくてすむように、Vim は次の順番で @env{$VIM} の値を決定します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. The value defined by the $VIM environment variable.  You can use this to
   make Vim look in a specific directory for its support files.  Example: >
	setenv VIM /home/paul/vim
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
環境変数 @env{$VIM} が定義されていればそれを使います。@env{$VIM} を定義して Vim が使用するファイルをそのディレクトリから探し出すようにできます。例:
@verbatim
setenv VIM /home/paul/vim
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. The path from 'helpfile' is used, unless it contains some environment
   variable too (the default is "$VIMRUNTIME/doc/help.txt": chicken-egg
   problem).  The file name ("help.txt" or any other) is removed.  Then
   trailing directory names are removed, in this order: "doc", "runtime" and
   "vim{version}" (e.g., "vim54").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{helpfile}' が問題のある環境変数を含んでいなければその値を使います (標準設定は "$VIMRUNTIME/doc/help.txt" であり、これはニワトリと卵の問題を含んでいます)。ファイル名 ("help.txt" など) の部分は取り除かれます。そしてディレクトリ名の最後が "doc", "runtime", "vim@{version@}" (例えば "vim54")、のどれかならそれも取り除かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. For MSDOS, Win32 and OS/2 Vim tries to use the directory name of the
   executable.  If it ends in "/src", this is removed.  This is useful if you
   unpacked the .zip file in some directory, and adjusted the search path to
   find the vim executable.  Trailing directory names are removed, in this
   order: "runtime" and "vim{version}" (e.g., "vim54").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
MSDOS, Win32, OS/2, では Vim の実行可能ファイルがあるディレクトリを使用します。ディレクトリ名の最後が "/src" ならそれは取り除かれます。配布されている Vim 一式の @file{.zip} ファイルをあるディレクトリに展開し、検索パスを調整して使っているようなら有用です。ディレクトリ名の最後が "runtime" か "vim@{version@}" (例えば "vim54") ならそれは取り除かれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
4. For Unix the compile-time defined installation directory is used (see the
   output of ":version").
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
Unix ではコンパイル時に指定したインストール先のディレクトリを使用します ("@command{:version}" の出力を見て確認できます)。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Once Vim has done this once, it will set the $VIM environment variable.  To
change it later, use a ":let" command like this: >
	:let $VIM = "/home/paul/vim/"
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このうちのどれかが使用できるなら Vim は環境変数 @env{$VIM} を設定します。あとからその値を変更するには "@command{:let}" コマンドを次のように使います:
@verbatim
:let $VIM = "/home/paul/vim/"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
								*$VIMRUNTIME*
The environment variable "$VIMRUNTIME" is used to locate various support
files, such as the on-line documentation and files used for syntax
highlighting.  For example, the main help file is normally
"$VIMRUNTIME/doc/help.txt".
You don't normally set $VIMRUNTIME yourself, but let Vim figure it out.  This
is the order used to find the value of $VIMRUNTIME:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{$VIMRUNTIME}
@cindex $VIMRUNTIME
環境変数の "@env{$VIMRUNTIME}" は、ヘルプファイルや構文強調表示の定義ファイルのような、Vim が使用するさまざまな支援ファイルの置き場所を見つけるために使用されます。例えば、主要なヘルプファイルは通常は "$VIMRUNTIME/doc/help.txt" です。普通はユーザーが自分で @env{$VIMRUNTIME} を設定せずに、Vim に設定させます。Vim は次の順番で @env{$VIMRUNTIME} の値を探します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. If the environment variable $VIMRUNTIME is set, it is used.  You can use
   this when the runtime files are in an unusual location.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
環境変数 @env{$VIMRUNTIME} が設定されていればそれを使います。ランタイムファイルを特殊な場所に置くときに設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. If "$VIM/vim{version}" exists, it is used.  {version} is the version
   number of Vim, without any '-' or '.'.  For example: "$VIM/vim54".  This is
   the normal value for $VIMRUNTIME.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
"$VIM/vim@{version@}" ディレクトリがあればそれを使います。@{version@} は Vim のバージョン番号から '-' や '.' を除いた部分です。例えば "$VIM/vim54"。これは @env{$VIMRUNTIME} として一般的な値です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. If "$VIM/runtime" exists, it is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
"$VIM/runtime" ディレクトリがあればそれを使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
4. The value of $VIM is used.  This is for backwards compatibility with older
   versions.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
@env{$VIM} の値を使います。これは古いバージョンとの互換性のためです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
5. When the 'helpfile' option is set and doesn't contain a '$', its value is
   used, with "doc/help.txt" removed from the end.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
オプション '@option{helpfile}' が設定されていて '@var{$}' を含んでいないとき、その値を使用します。最後の "doc/help.txt" は取り除かれます。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For Unix, when there is a compiled-in default for $VIMRUNTIME (check the
output of ":version"), steps 2, 3 and 4 are skipped, and the compiled-in
default is used after step 5.  This means that the compiled-in default
overrules the value of $VIM.  This is useful if $VIM is "/etc" and the runtime
files are in "/usr/share/vim/vim54".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Unix でコンパイル時に @env{$VIMRUNTIME} の初期値を設定した場合 ("@command{:version}" の出力をみて確認できます)、2 から 4 は無視されます。そして 5 を試したあとにコンパイル時に設定した値が使用されます。つまり @env{$VIM} の値を使わずにコンパイル時に設定した値を使用するということです。これは @env{$VIM} が "@var{/etc}" でランタイムファイルが "/usr/share/vim/vim54" にあるような場合に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Once Vim has done this once, it will set the $VIMRUNTIME environment variable.
To change it later, use a ":let" command like this: >
	:let $VIMRUNTIME = "/home/piet/vim/vim54"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このうちのどれかが使用できるなら Vim は環境変数 @env{$VIMRUNTIME} を設定します。あとからその値を変更するには "@command{:let}" コマンドを次のように使います:
@verbatim
:let $VIMRUNTIME = "/home/piet/vim/vim54"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In case you need the value of $VIMRUNTIME in a shell (e.g., for a script that
greps in the help files) you might be able to use this: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
シェル内で @env{$VIMRUNTIME} の値が必要な場合 (例えば、ヘルプファイルを grep するスクリプトなど) は、次のようにすれば得られます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	VIMRUNTIME=`vim -e -T dumb --cmd 'exe "set t_cm=\<C-M>"|echo $VIMRUNTIME|quit' | tr -d '\015' `
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
VIMRUNTIME=`vim -e -T dumb --cmd 'exe "set t_cm=\<C-M>"|echo $VIMRUNTIME|quit' | tr -d '\015' `
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
6. Suspending						*suspend*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{suspend}
@cindex suspend
@cindex サスペンド
@section 6. サスペンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*iconize* *iconise* *CTRL-Z* *v_CTRL-Z*
CTRL-Z			Suspend Vim, like ":stop".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{iconize}
@anchor{iconise}
@anchor{CTRL-Z}
@anchor{v_CTRL-Z}
@cindex iconize
@cindex iconise
@kindex CTRL-Z
@kindex v_CTRL-Z
@table @asis
@item CTRL-Z
"@command{:stop}" のように Vim をサスペンドします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			Works in Normal and in Visual mode.  In Insert and
			Command-line mode, the CTRL-Z is inserted as a normal
			character.  In Visual mode Vim goes back to Normal
			mode.
			Note: if CTRL-Z undoes a change see |mswin.vim|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

ノーマルモードとビジュアルモードで動作します。挿入モードとコマンドラインモードでは、@kbd{CTRL-Z} は通常のキャラクタ文字として入力・挿入されます。ビジュアルモードで使用したときはサスペンドから復帰するとノーマルモードになります。
@quotation
@strong{Note:} @*
@kbd{CTRL-Z} がアンドゥになる場合は |@ref{mswin.vim}| を参照してください。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
:sus[pend][!]	or			*:sus* *:suspend* *:st* *:stop*
:st[op][!]		Suspend Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sus}
@anchor{:suspend}
@anchor{:st}
@anchor{:stop}
@pindex :sus
@pindex :suspend
@pindex :st
@pindex :stop
@item :sus[pend][!] または
@itemx :st[op][!]
Vim をサスペンドします。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			If the '!' is not given and 'autowrite' is set, every
			buffer with changes and a file name is written out.
			If the '!' is given or 'autowrite' is not set, changed
			buffers are not written, don't forget to bring Vim
			back to the foreground later!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

'@option{autowrite}' がオンのときに '!' を付けなかったときには、ファイル名を持つ未保存のバッファは全て保存されます。'!' を付けたときや、'@option{autowrite}' がオフのときには、未保存のバッファは保存されないので、後で Vim をフォアグラウンドに戻すのを忘れてはなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In the GUI, suspending is implemented as iconising gvim.  In Windows 95/NT,
gvim is minimized.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
GUI モードでは、サスペンドは gvim のアイコン化として実装されています。Windows 95/NT では、gvim は最小化されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
On many Unix systems, it is possible to suspend Vim with CTRL-Z.  This is only
possible in Normal and Visual mode (see next chapter, |vim-modes|).  Vim will
continue if you make it the foreground job again.  On other systems, CTRL-Z
will start a new shell.  This is the same as the ":sh" command.  Vim will
continue if you exit from the shell.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
多くの UNIX システムでは、Vim を @kbd{CTRL-Z} でサスペンドすることが可能です。これはノーマルモードとビジュアルモードにおいて有効です (次の章 |@ref{vim-modes}| を参照してください)。Vim を再びフォアグラウンドに戻せば、続きの作業を行うことができます。それ以外のシステムでは、@kbd{CTRL-Z} は新しいシェルをスタートさせます。これはコマンド "@command{:sh}" と同じです。この場合、シェルを終了させれば Vim で続きの作業を行うことができます。@{訳注: |@ref{vim-modes}| に何がある？@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In X-windows the selection is disowned when Vim suspends.  this means you
can't paste it in another application (since Vim is going to sleep an attempt
to get the selection would make the program hang).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
X-windows では Vim をサスペンドするとセレクションの所有権が失われます。つまり選択していた内容を他のアプリケーションにコピーすることができません (そうしないと Vim が停止しているのでセレクションを得ようとしたプログラムがフリーズしてしまいます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
7. Exiting						*exiting*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{exiting}
@cindex exiting
@cindex 終了
@section 7. 終了
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are several ways to exit Vim:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim を終了する方法はいくつかあります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Close the last window with `:quit`.  Only when there are no changes.
- Close the last window with `:quit!`.  Also when there are changes.
- Close all windows with `:qall`.  Only when there are no changes.
- Close all windows with `:qall!`.  Also when there are changes.
- Use `:cquit`.  Also when there are changes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 最後のウィンドウを `@command{:quit}` で閉じる。変更がない場合にのみ。
@item 最後のウィンドウを `@command{:quit!}` で閉じる。変更がある場合にも。
@item 全てのウィンドウを `@command{:qall}` で閉じる。変更が一切ない場合にのみ。
@item 全てのウィンドウを `@command{:qall!}` で閉じる。変更がある場合にも。
@item `@command{:cquit}` を使う。変更がある場合にも。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using `:cquit` or when there was an error message Vim exits with exit
code 1.  Errors can be avoided by using `:silent!` or with `:catch`.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
`@command{:cquit}` を使ったり、エラーメッセージがある場合には、Vim は終了コード 1 で終了します。エラーは `@command{:silent!}` または `@command{:catch}` を使うことで避けられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
8. Saving settings					*save-settings*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{save-settings}
@cindex save-settings
@cindex 設定の保存
@section 8. 設定の保存
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Mostly you will edit your vimrc files manually.  This gives you the greatest
flexibility.  There are a few commands to generate a vimrc file automatically.
You can use these files as they are, or copy/paste lines to include in another
vimrc file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
多くの人は @file{vimrc} ファイルを手作業で編集しているでしょう。この機能はそのような人に優れた利便性を提供します。@file{vimrc} ファイルを自動的に作成するコマンドが用意されていて、作成したファイルをそのまま、もしくは一部分だけをコピーして使用することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:mk* *:mkexrc*
:mk[exrc] [file]	Write current key mappings and changed options to
			[file] (default ".exrc" in the current directory),
			unless it already exists.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:mk}
@anchor{:mkexrc}
@pindex :mk
@pindex :mkexrc
@table @asis
@item :mk[exrc] [file]
現在のキーマッピングと変更されているオプションを [file] に保存します ([file] を省略するとカレントディレクトリの ".exrc" に保存されます)。[file] がすでにあるときには保存しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:mk[exrc]! [file]	Always write current key mappings and changed
			options to [file] (default ".exrc" in the current
			directory).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :mk[exrc]! [file]
現在のキーマッピングと変更されているオプションを [file] に保存します ([file] を省略するとカレントディレクトリの ".exrc" に保存されます)。[file] がすでにあるときには上書き保存します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:mkv* *:mkvi* *:mkvimrc*
:mkv[imrc][!] [file]	Like ":mkexrc", but the default is ".vimrc" in the
			current directory.  The ":version" command is also
			written to the file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:mkv}
@anchor{:mkvi}
@anchor{:mkvimrc}
@pindex :mkv
@pindex :mkvi
@pindex :mkvimrc
@item :mkv[imrc][!] [file]
"@command{:mkexrc}" と同じだが [file] を省略したときにカレントディレクトリの "@file{.vimrc}" に保存します。コマンド "@command{:version}" もファイルに書き込まれます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These commands will write ":map" and ":set" commands to a file, in such a way
that when these commands are executed, the current key mappings and options
will be set to the same values.  The options 'columns', 'endofline',
'fileformat', 'key', 'lines', 'modified', 'scroll', 'term', 'textmode',
'ttyfast' and 'ttymouse' are not included, because these are terminal or file
dependent.  Note that the options 'binary', 'paste' and 'readonly' are
included, this might not always be what you want.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらのコマンドは "@command{:map}" コマンドや "@command{:set}" コマンドをファイルに書き込みます。書き込んだコマンドを実行するとキーマッピングやオプションが現在と同じように設定されます。オプションの '@option{columns}', '@option{endofline}', '@option{fileformat}', '@option{key}', '@option{lines}', '@option{modified}', '@option{scroll}', '@option{term}', '@option{textmode}', '@option{ttyfast}', '@option{ttymouse}' は端末やファイルに依存するため含まれません。
@quotation
@strong{Note:} @*
オプションの '@option{binary}', '@option{paste}', '@option{readonly}' が含まれることに注意してください。これは必ずしも望むような動作ではないかもしれません。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When special keys are used in mappings, The 'cpoptions' option will be
temporarily set to its Vim default, to avoid the mappings to be
misinterpreted.  This makes the file incompatible with Vi, but makes sure it
can be used with different terminals.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マッピングに特殊なキーが使われているときは、マッピングが正しく解釈されるように、オプション '@option{cpoptions}' が一時的に初期値に戻されます。Vi との互換性はなくなりますが、別の端末でもそのマッピングを使用できるようになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Only global mappings are stored, not mappings local to a buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
グローバルなマッピングだけが保存されます。バッファローカルなマッピングは保存されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A common method is to use a default ".vimrc" file, make some modifications
with ":map" and ":set" commands and write the modified file.  First read the
default ".vimrc" in with a command like ":source ~piet/.vimrc.Cprogs", change
the settings and then save them in the current directory with ":mkvimrc!".  If
you want to make this file your default .vimrc, move it to your home directory
(on Unix), s: (Amiga) or $VIM directory (MS-DOS).  You could also use
autocommands |autocommand| and/or modelines |modeline|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
一般的な方法は、デフォルトの "@file{.vimrc}" ファイルを使い、"@command{:map}" や "@command{:set}" コマンドで設定を変更し、それをファイルに保存するというものです。まず "@command{:source ~piet/.vimrc.Cprogs}" のようなコマンドでデフォルトの "@file{.vimrc}" を読み込み、実際に設定を変更してから、"@command{:mkvimrc!}" を使ってカレントディレクトリに設定を保存します。もしもこのファイルをデフォルトの @file{.vimrc} にしたいならば、UNIX ではホームディレクトリへ、Amiga ならば s: へ、MS-DOS ならば @env{$VIM} ディレクトリへそのファイルを移動します。オートコマンド |@ref{autocommand}| やモードライン |@ref{modeline}| も、同じ方法を使って設定することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*vimrc-option-example*
If you only want to add a single option setting to your vimrc, you can use
these steps:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{vimrc-option-example}
@cindex vimrc-option-example
@file{vimrc} にオプションの設定を 1 つだけ加えるには次のようにします:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Edit your vimrc file with Vim.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item Vim で @file{vimrc} ファイルを開きます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Play with the option until it's right.  E.g., try out different values for
   'guifont'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 期待どおりになるようにオプションを設定します。例えば、'@option{guifont}' を設定していろんなフォントを試します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. Append a line to set the value of the option, using the expression register
   '=' to enter the value.  E.g., for the 'guifont' option: >
   o:set guifont=<C-R>=&guifont<CR><Esc>
<  [<C-R> is a CTRL-R, <CR> is a return, <Esc> is the escape key]
   You need to escape special characters, esp. spaces.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item オプションを設定する行を追加します。値を入力するのに '=' レジスタを使用します。例えば、オプション '@option{guifont}' の設定を加えるには:
@verbatim
o:set guifont=<C-R>=&guifont<CR><Esc>
@end verbatim
[<C-R> は @kbd{CTRL-R}, @key{<CR>} はエンターキー, @key{<Esc>} はエスケープキー]

特別な文字 (特にスペース) はエスケープする必要があります。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that when you create a .vimrc file, this can influence the 'compatible'
option, which has several side effects.  See |'compatible'|.
":mkvimrc", ":mkexrc" and ":mksession" write the command to set or reset the
'compatible' option to the output file first, because of these side effects.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
@file{.vimrc} ファイルを作成するときには、いくつかの副作用を持つオプション '@option{compatible}' が影響することに注意してください。|@ref{'compatible'}| を参照してください。副作用を防ぐため、"@command{:mkvimrc}", "@command{:mkexrc}", "@command{:mksession}" は最初にオプション '@option{compatible}' の設定を出力します。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
9. Views and Sessions					*views-sessions*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{views-sessions}
@cindex views-sessions
@cindex ビューとセッション
@section 9. ビューとセッション (Views and Sessions)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is introduced in sections |21.4| and |21.5| of the user manual.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーマニュアルの |@ref{21.4}| と |@ref{21.5}| で簡単に紹介されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*View* *view-file*
A View is a collection of settings that apply to one window.  You can save a
View and when you restore it later, the text is displayed in the same way.
The options and mappings in this window will also be restored, so that you can
continue editing like when the View was saved.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{View}
@anchor{view-file}
@cindex View
@cindex view-file
ビューとは、あるウィンドウに適用された設定の集合です。ビューを保存しておいて、あとからそれを復元することで、開いていたテキストをまた同じように表示することができます。ウィンドウに関連したオプションやマッピングも復元されるので、ビューを保存したときと同じ状態で作業を再開することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*Session* *session-file*
A Session keeps the Views for all windows, plus the global settings.  You can
save a Session and when you restore it later the window layout looks the same.
You can use a Session to quickly switch between different projects,
automatically loading the files you were last working on in that project.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{Session}
@anchor{session-file}
@cindex Session
@cindex session-file
セッションとは、全てのウィンドウのビューとグローバルな設定のことです。セッションを保存しておいて、あとからそれを復元することで、各ウィンドウのレイアウトを元に戻すことができます。セッションを利用してすばやくプロジェクト (作業単位) を切り替えることが可能で、そのプロジェクトで開いていたファイルを自動的に開くことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Views and Sessions are a nice addition to viminfo-files, which are used to
remember information for all Views and Sessions together |viminfo-file|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ビューとセッションは @file{viminfo} ファイルを拡張した便利な機能です。ビューとセッションを @file{viminfo} ファイル (|@ref{viminfo-file}|) と併用することで全ての情報を記録することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You can quickly start editing with a previously saved View or Session with the
|-S| argument: >
	vim -S Session.vim
<
All this is {not available when compiled without the |+mksession| feature}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
保存しておいたビューやセッションを素早く再開するには引数 |@ref{-S}| を使います:
@verbatim
vim -S Session.vim
@end verbatim
これら全ては @{|@ref{+mksession}| が有効な場合のみ利用可能な機能@} です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:mks* *:mksession*
:mks[ession][!] [file]	Write a Vim script that restores the current editing
			session.
			When [!] is included an existing file is overwritten.
			When [file] is omitted "Session.vim" is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:mks}
@anchor{:mksession}
@pindex :mks
@pindex :mksession
@table @asis
@item :mks[ession][!] [file]
現在のセッションを復元するための Vim script を作成します。[!] を付けたときはファイルを上書保存します。[file] を省略したときは "Session.vim" に保存します。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The output of ":mksession" is like ":mkvimrc", but additional commands are
added to the file.  Which ones depends on the 'sessionoptions' option.  The
resulting file, when executed with a ":source" command:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:mksession}" の出力は "@command{:mkvimrc}" の出力に似ていますが、さらにいくつかのコマンドが追加されています。どのコマンドが出力されるかはオプション '@option{sessionoptions}' に依存します。保存したファイルは、コマンド "@command{:source}" で実行すると次の効果があります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. Restores global mappings and options, if 'sessionoptions' contains
   "options".  Script-local mappings will not be written.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
'@option{sessionoptions}' に "@var{options}" が含まれているときは、グローバルなマッピングとオプションを復元します。スクリプトローカルなマッピングは復元されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. Restores global variables that start with an uppercase letter and contain
   at least one lowercase letter, if 'sessionoptions' contains "globals".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{sessionoptions}' に "@var{globals}" が含まれているときは、大文字で始まって 1 つ以上の小文字を含む名前を持ったグローバルな変数を復元します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. Unloads all currently loaded buffers.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
現在読み込まれているバッファを全て開放します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
4. Restores the current directory if 'sessionoptions' contains "curdir", or
   sets the current directory to where the Session file is if 'sessionoptions'
   contains "sesdir".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{sessionoptions}' に "@var{curdir}" が含まれているときは、カレントディレクトリを復元します。あるいは、'@option{sessionoptions}' に "@var{sesdir}" が含まれているときは、カレントディレクトリをセッションファイルが保存されているディレクトリに変更します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
5. Restores GUI Vim window position, if 'sessionoptions' contains "winpos".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{sessionoptions}' に "@var{winpos}" が含まれているときは、GUI ウィンドウの位置を復元します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
6. Restores screen size, if 'sessionoptions' contains "resize".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{sessionoptions}' に "@var{resize}" が含まれているときは、スクリーンのサイズを復元します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
7. Reloads the buffer list, with the last cursor positions.  If
   'sessionoptions' contains "buffers" then all buffers are restored,
   including hidden and unloaded buffers.  Otherwise only buffers in windows
   are restored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{sessionoptions}' に "@var{buffers}" が含まれているときは、バッファリストと各バッファにおけるカーソルの位置を復元します。隠れ (hidden) バッファや開放済み (unloaded) バッファも含めて、全てのバッファを復元します。"@var{buffers}" が含まれていないときは、ウィンドウに表示されているバッファのみが復元されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
8. Restores all windows with the same layout.  If 'sessionoptions' contains
   "help", help windows are restored.  If 'sessionoptions' contains "blank",
   windows editing a buffer without a name will be restored.
   If 'sessionoptions' contains "winsize" and no (help/blank) windows were
   left out, the window sizes are restored (relative to the screen size).
   Otherwise, the windows are just given sensible sizes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
全てのウィンドウとそのレイアウトを復元します。'@option{sessionoptions}' に "@var{help}" が含まれているときは、ヘルプウィンドウも復元します。'@option{sessionoptions}' に "@var{blank}" が含まれているときは、無名のバッファを編集していたウィンドウも復元します。

'@option{sessionoptions}' に "@var{winsize}" が含まれていて、ヘルプウィンドウや無名バッファのウィンドウが除外されていないときは、ウィンドウのサイズも復元します (スクリーンサイズに比例します)。"@var{winsize}" が含まれていないときは、ウィンドウは妥当なサイズになります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
9. Restores the Views for all the windows, as with |:mkview|.  But
   'sessionoptions' is used instead of 'viewoptions'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
各ウィンドウのビューを |@ref{:mkview}| の機能と同じように復元します。しかし '@option{viewoptions}' ではなく '@option{sessionoptions}' が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
10. If a file exists with the same name as the Session file, but ending in
   "x.vim" (for eXtra), executes that as well.  You can use *x.vim files to
   specify additional settings and actions associated with a given Session,
   such as creating menu items in the GUI version.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
セッションファイルと同じ名前で最後が "x.vim" (eXtra の x) という名前のファイルがあればそのファイルを実行します。この仕組を使ってセッションに関連した処理や設定、例えば GUI のメニューを作成するなど、を行うことができます。

@{訳注: セッションファイルが SESSION.vim なら SESSIONx.vim が実行されます。@}
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
After restoring the Session, the full filename of your current Session is
available in the internal variable "v:this_session" |this_session-variable|.
An example mapping: >
  :nmap <F2> :wa<Bar>exe "mksession! " . v:this_session<CR>:so ~/sessions/
This saves the current Session, and starts off the command to load another.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
セッションを復元すると、内部変数の "@var{v:this_session}" (|@ref{this_session-variable}|) を使って現在のセッションの名前 (フルパス) を利用できます。それを利用したマッピングの例:
@verbatim
:nmap <F2> :wa<Bar>exe "mksession! " . v:this_session<CR>:so ~/sessions/
@end verbatim
これは現在のセッションを保存してから、別のセッションを開こうとするものです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A session includes all tab pages, unless "tabpages" was removed from
'sessionoptions'. |tab-page|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{sessionoptions}' から "@var{tabpages}" が除かれていない限り、セッションはすべてのタブページを含みます。|@ref{tab-page}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The |SessionLoadPost| autocmd event is triggered after a session file is
loaded/sourced.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
セッションファイルが読み込まれると、自動コマンドイベント |@ref{SessionLoadPost}| が発生します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
						*SessionLoad-variable*
While the session file is loading the SessionLoad global variable is set to 1.
Plugins can use this to postpone some work until the SessionLoadPost event is
triggered.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{SessionLoad-variable}
@cindex SessionLoad-variable
セッションファイルを読み込んでいる間、グローバル変数 SessionLoad は 1 になります。プラグインはこれを使ってイベント SessionLoadPost が発生するまで、なんらかの作業を後回しにすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:mkvie* *:mkview*
:mkvie[w][!] [file]	Write a Vim script that restores the contents of the
			current window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:mkvie}
@anchor{:mkview}
@pindex :mkvie
@pindex :mkview
@table @asis
@item :mkvie[w][!] [file]
現在のウィンドウの状態を復元するための Vim script を作成します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			When [!] is included an existing file is overwritten.
			When [file] is omitted or is a number from 1 to 9, a
			name is generated and 'viewdir' prepended.  When the
			last path part of 'viewdir' does not exist, this
			directory is created.  E.g., when 'viewdir' is
			"$VIM/vimfiles/view" then "view" is created in
			"$VIM/vimfiles".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

[!] を付けたときはファイルを上書保存します。

[file] を省略したり、1 から 9 の数字を指定したときは、'@option{viewdir}' に指定されたディレクトリに適切な名前で保存されます。'@option{viewdir}' の最後に指定されたパスが存在しないときにはそのディレクトリも作成されます。例えば、'@option{viewdir}' が "$VIM/vimfiles/view" なら "$VIM/vimfiles" の中に "view" が作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			An existing file is always overwritten then.  Use
			|:loadview| to load this view again.
			When [file] is the name of a file ('viewdir' is not
			used), a command to edit the file is added to the
			generated file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

[file] を省略、もしくは数字を指定した場合は、常に上書き保存されます。ビューを復元するときには |@ref{:loadview}| を使用します。

[file] にファイル名を指定すると、編集を再開するためのコマンドがそのファイルに保存されます (この場合は '@option{viewdir}' は使われません)。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The output of ":mkview" contains these items:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:mkview}" の出力は次の項目を含んでいます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
1. The argument list used in the window.  When the global argument list is
   used it is reset to the global list.
   The index in the argument list is also restored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item
ウィンドウで使用している引数リストを復元します。グローバルな引数リストを使っているときにはそれが使用されます。引数リストのインデックスも復元されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
2. The file being edited in the window.  If there is no file, the window is
   made empty.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ウィンドウで編集していたファイルを開きます。編集していたファイルがなければ、空のウィンドウが作成されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
3. Restore mappings, abbreviations and options local to the window if
   'viewoptions' contains "options" or "localoptions".  For the options it
   restores only values that are local to the current buffer and values local
   to the window.
   When storing the view as part of a session and "options" is in
   'sessionoptions', global values for local options will be stored too.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{viewoptions}' が "@var{options}" か "@var{localoptions}" を含んでいるときは、そのバッファやウィンドウに特有な (ローカルな)、マッピング、短縮 (abbreviations)、オプション、を復元します。

セッションの一部としてビューを保存するときに、'@option{sessionoptions}' に "@var{options}" が含まれているときは、オプションのグローバルな値とローカルな値が両方保存されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
4. Restore folds when using manual folding and 'viewoptions' contains
   "folds".  Restore manually opened and closed folds.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
'@option{viewoptions}' が "@var{folds}" を含んでいるときは、手作業で設定した折畳みを復元します。折畳みの開閉状態も復元します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
5. The scroll position and the cursor position in the file.  Doesn't work very
   well when there are closed folds.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ファイルにおけるカーソルとスクロールの位置を復元します。閉じた折畳みがあるとうまく機能しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
6. The local current directory, if it is different from the global current
   directory and 'viewoptions' contains "curdir".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item
ローカルなカレントディレクトリを復元します。グローバルなカレントディレクトリと違っている場合、かつ "@var{curdir}" が '@option{viewoptions}' を含んでいる場合でのみ。

@{訳注: |@ref{current-directory}|@}
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that Views and Sessions are not perfect:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
ビューとセッションは完璧ではないことに注意してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- They don't restore everything.  For example, defined functions, autocommands
  and ":syntax on" are not included.  Things like register contents and
  command line history are in viminfo, not in Sessions or Views.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 全てを復元するわけではありません。例えば、関数、オートコマンド、"@command{:syntax on}"、などは含まれません。レジスタやコマンドラインの履歴などは、ビューやセッションではなく、@file{viminfo} に保存されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Global option values are only set when they differ from the default value.
  When the current value is not the default value, loading a Session will not
  set it back to the default value.  Local options will be set back to the
  default value though.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item グローバルなオプションの設定は、その値を初期設定から変更していた場合のみ保存されます。現在の設定が初期設定とは違うときにセッションを復元しても、初期設定には戻りません。しかしながら、ローカルなオプションは初期設定に戻されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Existing mappings will be overwritten without warning.  An existing mapping
  may cause an error for ambiguity.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 既存のマッピングは警告なく上書きされます。そのようなときはよく分からないエラーが発生するでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- When storing manual folds and when storing manually opened/closed folds,
  changes in the file between saving and loading the view will mess it up.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 手動で設定した折畳みや、その開閉状態を復元すると表示が乱れることがあります。それはビューを保存してから復元する間に、編集していたファイルを変更した場合です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The Vim script is not very efficient.  But still faster than typing the
  commands yourself!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Vim script はまったくもって効率的ではありません。しかしそうは言っても、自分でコマンドを再入力するよりは断然早いです。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*:lo* *:loadview*
:lo[adview] [nr]	Load the view for the current file.  When [nr] is
			omitted, the view stored with ":mkview" is loaded.
			When [nr] is specified, the view stored with ":mkview
			[nr]" is loaded.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:lo}
@anchor{:loadview}
@pindex :lo
@pindex :loadview
@table @asis
@item :lo[adview] [nr]
編集中のファイルに関連したビューを読み込みます。 [nr] を省略すると、"@command{:mkview}" で保存したビューが読み込まれます。[nr] を付けた場合は、"@command{:mkview [nr]}" で保存したビューが読み込まれます。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The combination of ":mkview" and ":loadview" can be used to store up to ten
different views of a file.  These are remembered in the directory specified
with the 'viewdir' option.  The views are stored using the file name.  If a
file is renamed or accessed through a (symbolic) link the view will not be
found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:mkview}" と "@command{:loadview}" の組は、1 つのファイルに対して全部で 10 個のビューを管理できます。ビューは '@option{viewdir}' で指定したディレクトリに保存されます。ビューはファイル名を利用して管理されています。そのため、ファイルの名前を変更したり、(シンボリック) リンクファイルを使ってアクセスした場合は、対応するビューを見つけることができません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You might want to clean up your 'viewdir' directory now and then.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
たまには '@option{viewdir}' をきれいに掃除するといいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To automatically save and restore views for *.c files: >
	au BufWinLeave *.c mkview
	au BufWinEnter *.c silent loadview
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{*.c} ファイルを編集するときにビューを自動的に保存、復元するには:
@verbatim
au BufWinLeave *.c mkview
au BufWinEnter *.c silent loadview
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
10. The viminfo file				*viminfo* *viminfo-file* *E136*
						*E575* *E576* *E577*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo}
@anchor{viminfo-file}
@anchor{E136}
@anchor{E575}
@anchor{E576}
@anchor{E577}
@cindex viminfo
@cindex viminfo-file
@erindex E136
@erindex E575
@erindex E576
@erindex E577
@cindex viminfo ファイル
@section 10. viminfo ファイル
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If you exit Vim and later start it again, you would normally lose a lot of
information.  The viminfo file can be used to remember that information, which
enables you to continue where you left off.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いったん Vim を終了させ、後に再び起動する時には、通常多くの情報が失われてしまいます。@file{viminfo} ファイルは終了する時の情報を保存しておくのに使用され、それにより再起動した時には同じ状態で編集セッションを続けることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
This is introduced in section |21.3| of the user manual.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ユーザーマニュアルの |@ref{21.3}| で簡単に紹介されています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The viminfo file is used to store:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
viminfo ファイルにはこんなものを記憶できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The command line history.
- The search string history.
- The input-line history.
- Contents of non-empty registers.
- Marks for several files.
- File marks, pointing to locations in files.
- Last search/substitute pattern (for 'n' and '&').
- The buffer list.
- Global variables.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item コマンドラインの履歴
@item 検索文字列の履歴
@item 入力 (|@ref{input()}|) の履歴
@item レジスタの内容
@item 複数のファイルのマーク
@item ファイルの中の位置を指し示すマーク
@item 最後の検索/置換パターン ('n' と '&' のため)
@item バッファのリスト
@item グローバル変数
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The viminfo file is not supported when the |+viminfo| feature has been
disabled at compile time.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コンパイル時に |@ref{+viminfo}| 機能が無効にされていたら、@file{viminfo} ファイルはサポートされません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
You could also use a Session file.  The difference is that the viminfo file
does not depend on what you are working on.  There normally is only one
viminfo file.  Session files are used to save the state of a specific editing
Session.  You could have several Session files, one for each project you are
working on.  Viminfo and Session files together can be used to effectively
enter Vim and directly start working in your desired setup. |session-file|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
セッションファイルも使用することができます。@file{viminfo} ファイルは「している仕事」に依存しない、という点で異なります。通常 @file{viminfo} ファイルは 1 つしか存在しません。セッションファイルは、ある特定の編集作業の状態を保存するのに使います。セッションファイルは、作業しているプロジェクト毎に複数作成することが可能です。@file{Viminfo} もセッションファイルどちらも、Vim をスタートしてすぐに好みの設定を行うという目的のために、効果的に使用できます。|@ref{session-file}|
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*viminfo-read*
When Vim is started and the 'viminfo' option is non-empty, the contents of
the viminfo file are read and the info can be used in the appropriate places.
The |v:oldfiles| variable is filled.  The marks are not read in at startup
(but file marks are).  See |initialization| for how to set the 'viminfo'
option upon startup.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-read}
@cindex viminfo-read
Vim が起動した時に '@option{viminfo}' オプションが空でなかったら、@file{viminfo} ファイルが読み込まれ、その情報は適切に使用されます。変数 |@ref{v:oldfiles}| がセットされる。起動時にはマークは読み込まれません (しかしファイルマークは読み込まれます)。起動時に '@option{viminfo}' オプションをどうやって設定するのかは |@ref{initialization}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*viminfo-write*
When Vim exits and 'viminfo' is non-empty, the info is stored in the viminfo
file (it's actually merged with the existing one, if one exists).  The
'viminfo' option is a string containing information about what info should be
stored, and contains limits on how much should be stored (see 'viminfo').
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-write}
@cindex viminfo-write
Vim が終了する時に '@option{viminfo}' が空でなかったら、情報が @file{viminfo} ファイルに保存されます (もし既に存在した場合には、それと合併 (マージ) されます)。'@option{viminfo}' オプションは、どのような情報を保存するか、またどのくらいの量を保存するべきかその限界を指定する為の情報を含む文字列です。(|@ref{'viminfo'}| を参照してください)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Merging happens in two ways.  Most items that have been changed or set in the
current Vim session are stored, and what was not changed is filled from what
is currently in the viminfo file.  For example:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マージは 2 つの方法で実施されます。Vim のセッション中で変更や (訳注:新たに) 設定された大半のアイテムは保存され、変更されなかったものは既存の @file{viminfo} ファイルのものが流用されます。例えば:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Vim session A reads the viminfo, which contains variable START.
- Vim session B does the same
- Vim session A sets the variables AAA and BOTH and exits
- Vim session B sets the variables BBB and BOTH and exits
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item Vim セッション A が、変数 START の含まれた viminfo を読み込む
@item Vim セッション B が、同様に viminfo を読み込む
@item Vim セッション A が、変数 AAA と BOTH を設定し終了する
@item Vim セッション B が、変数 BBB と BOTH を設定し終了する
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Now the viminfo will have:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
こうすると viminfo は次のようになるでしょう:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
   START - it was in the viminfo and wasn't changed in session A or B
   AAA   - value from session A, session B kept it
   BBB   - value from session B
   BOTH  - value from session B, value from session A is lost
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .15 .85
@item START @tab - 元から viminfo にあったものは、セッション A 及び B に拠らず維持される
@item AAA @tab - セッション A 由来の値は B により維持される
@item BBB @tab - セッション B 由来の値
@item BOTH @tab - セッション B 由来の値、A の値は失われる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*viminfo-timestamp*
For some items a timestamp is used to keep the last changed version.  Here it
doesn't matter in which sequence Vim sessions exit, the newest item(s) are
always kept.  This is used for:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-timestamp}
@cindex viminfo-timestamp
幾つかのアイテムには、最後に変更された値を優先するために、タイムスタンプを用いています。これにより Vim セッションの終了順序に関係なく、最新のアイテムが維持されます。タイムスタンプは以下のアイテムに導入されています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The command line history.
- The search string history.
- The input-line history.
- Contents of non-empty registers.
- The jump list
- File marks
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item コマンドラインの履歴
@item 検索文字列の履歴
@item 入力行の履歴
@item 空ではないレジスタの値
@item ジャンプリスト
@item ファイルのマーク
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
The timestamp feature was added before Vim 8.0.  Older versions of Vim,
starting with 7.4.1131, will keep the items with timestamp, but not use them.
Thus when using both an older and a newer version of Vim the most recent data
will be kept.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このタイムスタンプ機能自体は Vim 8.0 よりも以前に追加されました。Vim 7.4.1131 以降の Vim 7.4 では各アイテムにタイムスタンプを記録していますが、使ってはいません。そのため古い Vim と新しい Vim を混在して使う場合には、常に新しいデータが維持されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Notes for Unix:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note: Unix における注意点:}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The file protection for the viminfo file will be set to prevent other users
  from being able to read it, because it may contain any text or commands that
  you have worked with.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item @file{viminfo} ファイルには入力したテキストや、使用したコマンドが記載されているので、他人に覗かれないように保護 (パーミッション設定) したほうが良いでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- If you want to share the viminfo file with other users (e.g. when you "su"
  to another user), you can make the file writable for the group or everybody.
  Vim will preserve this when replacing the viminfo file.  Be careful, don't
  allow just anybody to read and write your viminfo file!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 複数のユーザーで @file{viminfo} ファイルを共有したい時 (例えば他のユーザーへ "su" する  時など) には、グループもしくは全員に @file{viminfo} ファイルへの書き込み権限を与えることができます。Vim はその @file{viminfo} ファイルを置き換えるときに権限を維持します。しかし、あなたの @file{viminfo} ファイルを誰にでも読ませたり書かせたりしないように注意してください！
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- Vim will not overwrite a viminfo file that is not writable by the current
  "real" user.  This helps for when you did "su" to become root, but your
  $HOME is still set to a normal user's home directory.  Otherwise Vim would
  create a viminfo file owned by root that nobody else can read.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 現在の "本当" のユーザーによって書き込み不能な @file{viminfo} ファイルは、Vim は決して上書きしません。これは "su" で root ユーザーになった時、しかし @env{$HOME} がまだ通常ユーザーのホームディレクトリのままの時の助けとなります。そうでないと Vim は root 所有の、他の誰にも読めない @file{viminfo} ファイルを作成してしまいます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The viminfo file cannot be a symbolic link.  This is to avoid security
  issues.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item @file{viminfo} ファイルはシンボリックリンクであってはなりません。セキュリティ上の問題を避けるためです。
@end itemize
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Marks are stored for each file separately.  When a file is read and 'viminfo'
is non-empty, the marks for that file are read from the viminfo file.  NOTE:
The marks are only written when exiting Vim, which is fine because marks are
remembered for all the files you have opened in the current editing session,
unless ":bdel" is used.  If you want to save the marks for a file that you are
about to abandon with ":bdel", use ":wv".  The '[' and ']' marks are not
stored, but the '"' mark is.  The '"' mark is very useful for jumping to the
cursor position when the file was last exited.  No marks are saved for files
that start with any string given with the "r" flag in 'viminfo'.  This can be
used to avoid saving marks for files on removable media (for MS-DOS you would
use "ra:,rb:", for Amiga "rdf0:,rdf1:,rdf2:").
The |v:oldfiles| variable is filled with the file names that the viminfo file
has marks for.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マークは個々のファイルに対して別々に保存されます。ファイルが読み込まれ '@option{viminfo}' が空でない場合、@file{viminfo} ファイルからマーク情報が読み込まれます。
@quotation
@strong{Note:} @*
マークは Vim が正常に終了したときにだけ保存されます。また、Vim の起動中に開かれた "@command{:bdel}" されていないファイル全てのマークが記録されます。もしも "@command{:bdel}" で破棄したファイルについてマークを保存しておきたいのならば、"@command{:wv}" を使います。

'[' と ']' のマークは保存されませんが、'"' は保存されます。'"' マークはファイルを開いたときに前回のカーソル位置を復元するのに非常に便利です。

'@option{viminfo}' に文字 "@var{r}" が与えられた時には、一切のマーク情報は記録されません。これはリムーバブルメディア上のファイルのマークが保存されるのを避ける場合に使います (MS-DOS では "ra:,rb:" を、Amiga では "rdf0:,rdf1:,rdf2:" を使います)。

@file{viminfo} ファイルにマークが記録されているファイルの名前が |@ref{v:oldfiles}| のリストに追加されます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*viminfo-file-marks*
Uppercase marks ('A to 'Z) are stored when writing the viminfo file.  The
numbered marks ('0 to '9) are a bit special.  When the viminfo file is written
(when exiting or with the ":wviminfo" command), '0 is set to the current cursor
position and file.  The old '0 is moved to '1, '1 to '2, etc.  This
resembles what happens with the "1 to "9 delete registers.  If the current
cursor position is already present in '0 to '9, it is moved to '0, to avoid
having the same position twice.  The result is that with "'0", you can jump
back to the file and line where you exited Vim.  To do that right away, try
using this command: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-file-marks}
@cindex viminfo-file-marks
大文字のマーク ('A から 'Z) は @file{viminfo} ファイルが書かれるときに、保存されます。数字のマーク ('0 から '9) はちょっと特別です。

@file{viminfo} ファイルが書き込まれる時 (終了時、もしくは "@command{:wviminfo}" コマンド実行時)に、'0 が現在のファイルの現在のカーソル位置に設定されます。古い '0 は '1 になり、'1 は '2 になり、以下同様。"1 から "9 の削除レジスタに起こることに似ています。

'0 に記憶する位置が '1 から '9 に既出であった時には、同じ位置が 2 度記憶されるのではなく、そのレジスタが '0 に浮き上がってきます。結果として "'0" を使用すると、最後に Vim を終了した時のファイルとその行に戻ることができます。

起動後直ちにそれを行うには、次のコマンドを試します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	vim -c "normal '0"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
vim -c "normal '0"
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
In a csh compatible shell you could make an alias for it: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
csh 互換なシェルではエイリアスをこんな風に使用して:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	alias lvim vim -c '"'normal "'"0'"'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
alias lvim vim -c '"'normal "'"0'"'
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For a bash-like shell: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
bash ライクなシェルでは:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	alias lvim='vim -c "normal '\''0"'
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
alias lvim='vim -c "normal '\''0"'
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Use the "r" flag in 'viminfo' to specify for which files no marks should be
remembered.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特定のファイルのマークを保存しないようにするには '@option{viminfo}' に "@var{r}" フラグを追加します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
VIMINFO FILE NAME					*viminfo-file-name*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-file-name}
@cindex viminfo-file-name
@cindex Viminfo ファイルの名前
@unnumberedsubsec Viminfo ファイルの名前
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- The default name of the viminfo file is "$HOME/.viminfo" for Unix and OS/2,
  "s:.viminfo" for Amiga, "$HOME\_viminfo" for MS-DOS and Win32.  For the last
  two, when $HOME is not set, "$VIM\_viminfo" is used.  When $VIM is also not
  set, "c:\_viminfo" is used.  For OS/2 "$VIM/.viminfo" is used when $HOME is
  not set and $VIM is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item @file{viminfo} ファイルの名前を特に指定しない時は、Unix と OS/2 では "$HOME/.viminfo" に、Amiga では "s:.viminfo" に、MS-DOS と Win32 では "$HOME\_viminfo" になります。MS-DOS と Win32 で、@env{$HOME} が設定されていない時には、"$VIM\_viminfo" になります。@env{$VIM} も設定されていない時には "c:\_viminfo" が使われます。OS/2 では、@env{$HOME} が設定されず @env{$VIM} が設定されていれば "$VIM/.viminfo" となります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The 'n' flag in the 'viminfo' option can be used to specify another viminfo
  file name |'viminfo'|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{viminfo}' オプションの '@var{n}' フラグは、別の名前の @file{viminfo} ファイルを使うために、そのファイル名を指定するのに使用されます |@ref{'viminfo'}|。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The "-i" Vim argument can be used to set another file name, |-i|.  When the
  file name given is "NONE" (all uppercase), no viminfo file is ever read or
  written.  Also not for the commands below!
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item Vim の起動引数 "-i" も、@file{viminfo} として別のファイルを指定するのに使用できます |@ref{-i}|。ファイル名として "NONE" (全て大文字) が与えられると、@file{viminfo} ファイルは使用 (読み込みも書き込みも) されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The 'viminfofile' option can be used like the "-i" argument.  In fact, the
  value form the "-i" argument is stored in the 'viminfofile' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item '@option{viminfofile}' オプションは "-i" 引数のように使うことができます。実際、"-i" 引数の値形式は '@option{viminfofile}' オプション内に保存されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- For the commands below, another file name can be given, overriding the
  default and the name given with 'viminfo' or "-i" (unless it's NONE).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 起動後に、コマンドで別の名前を与えると、デフォルト名や '@option{viminfo}' や "-i" で与えた名前を上書きすることができます ("-i" は NONE が指定されていない時に限ります)。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CHARACTER ENCODING					*viminfo-encoding*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-encoding}
@cindex viminfo-encoding
@cindex 文字エンコーディング
@unnumberedsubsec 文字エンコーディング
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The text in the viminfo file is encoded as specified with the 'encoding'
option.  Normally you will always work with the same 'encoding' value, and
this works just fine.  However, if you read the viminfo file with another
value for 'encoding' than what it was written with, some of the text
(non-ASCII characters) may be invalid.  If this is unacceptable, add the 'c'
flag to the 'viminfo' option: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{viminfo} ファイルのテキストはオプション '@option{encoding}' で指定したエンコーディングで保存されます。通常は '@option{encoding}' の設定はいつも同じなので、問題なく機能します。しかしながら、もしも @file{viminfo} ファイルを読み込むときに、'@option{encoding}' の設定が @file{viminfo} ファイルを保存したときとは違うエンコーディングに設定されていると、いくつかのテキスト (ASCII 以外の文字) は不正な文字になってしまいます。それを回避するには、オプション '@option{viminfo}' に '@var{c}' フラグを追加します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:set viminfo+=c
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:set viminfo+=c
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Vim will then attempt to convert the text in the viminfo file from the
'encoding' value it was written with to the current 'encoding' value.  This
requires Vim to be compiled with the |+iconv| feature.  Filenames are not
converted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そうすると Vim は、@file{viminfo} ファイルを保存したときの '@option{encoding}' から現在の '@option{encoding}' へとテキストを変換します。これを利用するには |@ref{+iconv}| が有効になっている必要があります。ファイル名は変換されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
MANUALLY READING AND WRITING				*viminfo-read-write*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-read-write}
@cindex viminfo-read-write
@cindex viminfo ファイルを手動で読み書きする
@unnumberedsubsec viminfo ファイルを手動で読み書きする
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Two commands can be used to read and write the viminfo file manually.  This
can be used to exchange registers between two running Vim programs: First
type ":wv" in one and then ":rv" in the other.  Note that if the register
already contained something, then ":rv!" would be required.  Also note
however that this means everything will be overwritten with information from
the first Vim, including the command line history, etc.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{viminfo} ファイルを手動で読み書きするのに 2 つのコマンドが用意されています。これは同時に起動している複数の Vim 間で、レジスタの内容を交換するのに利用できます: まず片方で "@command{:wv}" をしてから、もう片方で "@command{:rv}" をします。既にレジスタに何かを記憶している場合には、"@command{:rv!}" する必要があることに注意してください。またこれを行うとコマンドラインの履歴を含む全ての情報が、送り側の Vim のもので上書きされてしまうことにも注意してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The viminfo file itself can be edited by hand too, although we suggest you
start with an existing one to get the format right.  It is reasonably
self-explanatory once you're in there.  This can be useful in order to
create a second file, say "~/.my_viminfo" which could contain certain
settings that you always want when you first start Vim.  For example, you
can preload registers with particular data, or put certain commands in the
command line history.  A line in your .vimrc file like >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@file{viminfo} ファイル自体を手で編集することもできますが、Vim によって作られる正しいフォーマットの @file{viminfo} を元にすることを推奨します。一度試してみればどういう構造になっているかよく分かるでしょう。これを覚えておけば、Vim を起動したときにいつでも設定しておきたい内容を、"~/.my_viminfo" というようなファイルに用意しておくときに重宝します。例としては、あるデータをレジスタに予め読み込んでおくとか、コマンドライン履歴に特定のコマンドをいれるとか、そういう使い方があります。@file{.vimrc} ファイルに次の 1 行を入れておけば
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	:rviminfo! ~/.my_viminfo
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
:rviminfo! ~/.my_viminfo
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
can be used to load this information.  You could even have different viminfos
for different types of files (e.g., C code) and load them based on the file
name, using the ":autocmd" command (see |:autocmd|).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その情報を読み込むことができます。ファイルの種類によって (C コードだとか vim スクリプトだとか)、異なる @file{viminfo} を持ち、"@command{:autocmd}" を組み合わせることでファイル名に基づいたりしながら、それらを使用することもできます (|@ref{:autocmd}|) を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*viminfo-errors*
When Vim detects an error while reading a viminfo file, it will not overwrite
that file.  If there are more than 10 errors, Vim stops reading the viminfo
file.  This was done to avoid accidentally destroying a file when the file
name of the viminfo file is wrong.  This could happen when accidentally typing
"vim -i file" when you wanted "vim -R file" (yes, somebody accidentally did
that!).  If you want to overwrite a viminfo file with an error in it, you will
either have to fix the error, or delete the file (while Vim is running, so
most of the information will be restored).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{viminfo-errors}
@cindex viminfo-errors
Vim が @file{viminfo} ファイルを読み込み中にエラーを検出すると、ファイルの上書きはされなくなります。もしも 10 個以上のエラーがある場合には、それ以上 @file{viminfo} ファイルを読み込むのを止めます。

こうするのは @file{viminfo} ファイル内のファイル名が間違っている場合、突発的にそのファイルを破壊してしまうのを避けるためです。これは "vim -R file" としたいときに、誤って "vim -i file" とタイプしてしまうと起こり得ます (そう、偶然何人かが実際にそうしてしまいましたよ！！)。

@file{viminfo} ファイルにエラーがあったけれども @file{viminfo} を上書きしたいのならば、エラーを修正するか、またはファイルを消すかのどちらかが必要です (Vim の実行中は、ほとんどの情報が回復してしまいます)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						   *:rv* *:rviminfo* *E195*
:rv[iminfo][!] [file]	Read from viminfo file [file] (default: see above).
			If [!] is given, then any information that is
			already set (registers, marks, |v:oldfiles|, etc.)
			will be overwritten
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:rv}
@anchor{:rviminfo}
@anchor{E195}
@pindex :rv
@pindex :rviminfo
@erindex E195
@table @asis
@item :rv[iminfo][!] [file]
@file{viminfo} ファイルを [file] (デフォルト:上記参照) から読込みます。[!] が与えれらた場合、既に設定されている情報 (レジスタ、マーク、|@ref{v:oldfiles}|、その他) は上書きされます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
			*:wv* *:wviminfo* *E137* *E138* *E574* *E886* *E929*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:wv}
@anchor{:wviminfo}
@anchor{E137}
@anchor{E138}
@anchor{E574}
@anchor{E886}
@anchor{E929}
@pindex :wv
@pindex :wviminfo
@erindex E137
@erindex E138
@erindex E574
@erindex E886
@erindex E929
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:wv[iminfo][!] [file]	Write to viminfo file [file] (default: see above).
			The information in the file is first read in to make
			a merge between old and new info.  When [!] is used,
			the old information is not read first, only the
			internal info is written.  If 'viminfo' is empty, marks
			for up to 100 files will be written.
			When you get error "E929: Too many viminfo temp files"
			check that no old temp files were left behind (e.g.
			~/.viminf*) and that you can write in the directory of
			the .viminfo file.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :wv[iminfo][!] [file]
@file{viminfo} ファイルを [file] (デフォルト: 上記参照) として保存します。まず既存のファイルの (古い) 情報が読み込まれ、Vim 内部の (新しい) 情報とマージ (合併) されてから、ファイルに保存されます。[!] を指定すると古い情報は読み込まれず、Vim 内部の情報だけが保存されます。'@option{viminfo}' が空 ("") に設定されている場合は、100 個のファイルのマークが書き出されます。

"E929: Too many viminfo temp files" ("E929: 一時 @file{viminfo} ファイルが多過ぎます！") というエラーが出たときには、古い一時ファイル (例えば ~/.viminf*) が残っていないことを確かめ、@file{.viminfo} ファイルを保存するディレクトリの書込み権限を確認してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
						*:ol* *:oldfiles*
:ol[dfiles]		List the files that have marks stored in the viminfo
			file.  This list is read on startup and only changes
			afterwards with `:rviminfo!`.  Also see |v:oldfiles|.
			The number can be used with |c_#<|.
			The output can be filtered with |:filter|, e.g.: >
				filter /\.vim/ oldfiles
<			The filtering happens on the file name.
			{only when compiled with the |+eval| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:ol}
@anchor{:oldfiles}
@pindex :ol
@pindex :oldfiles
@item :ol[dfiles]
@file{viminfo} ファイルにマークが記録されているファイルのリストを表示します。起動時にこのリストが読み込まれ、`@command{:rviminfo!}` を行った後でのみ変更されます。|@ref{v:oldfiles}| も参照してください。このリストで表示される番号は |@ref{c_#<}| で使うことができます。出力は |@ref{:filter}| でフィルタリングできます。例:
@verbatim
filter /\.vim/ oldfiles
@end verbatim
ファイル名に対してフィルタリングが行われます。

@{|@ref{+eval}| 機能付きでコンパイルされたときのみ有効@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:bro[wse] ol[dfiles][!]
			List file names as with |:oldfiles|, and then prompt
			for a number.  When the number is valid that file from
			the list is edited.
			If you get the |press-enter| prompt you can press "q"
			and still get the prompt to enter a file number.
			Use ! to abandon a modified buffer. |abandon|
			{not when compiled with tiny or small features}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :bro[wse] ol[dfiles][!]
|@ref{:oldfiles}| と同じようにファイルのリストを表示し、番号の入力を待ちます。有効な番号が入力されると、リスト中のそのファイルを開きます。

|@ref{press-enter}| プロンプトが表示されたときは "@key{q}" を押すとファイル番号を入力するプロンプトに戻れます。! をつけると変更中のバッファを破棄します。|@ref{abandon}|

@{tiny または small でコンパイルされたときは利用できない@}
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
