@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node popup.txt, , , 目次
@unnumbered ポップアップウィンドウのサポート
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*popup.txt*  For Vim version 8.1.  Last change: 2019 Nov 17


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*popup.txt*    For Vim バージョン 8.1.  Last change: 2019 Nov 17


		  VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Displaying text in a floating window.			*popup* *popup-window*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup}
@anchor{popup-window}
@cindex popup
@cindex popup-window
フローティングウィンドウにテキストを表示します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
1. Introduction			|popup-intro|
   Window position and size	|popup-position|
   Closing the popup window	|popup-close|
   Popup buffer and window	|popup-buffer|
2. Functions			|popup-functions|
   Details			|popup-function-details|
3. Usage			|popup-usage|
   popup_create() arguments	|popup_create-arguments|
   Popup text properties	|popup-props|
   Position popup with textprop	|popup-textprop-pos|
   Popup filter			|popup-filter|
   Popup callback		|popup-callback|
   Popup scrollbar		|popup-scrollbar|
   Popup mask			|popup-mask|
4. Examples			|popup-examples|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. 前書き @tab |@ref{popup-intro}|
@item ウィンドウの位置とサイズ @tab |@ref{popup-position}|
@item ポップアップウィンドウを閉じる @tab |@ref{popup-close}|
@item ポップアップバッファとウィンドウ @tab |@ref{popup-buffer}|
@item 2. 関数 @tab |@ref{popup-functions}|
@item 詳細 @tab |@ref{popup-function-details}|
@item 3. 使用方法 @tab |@ref{popup-usage}|
@item popup_create() の引数 @tab |@ref{popup_create-arguments}|
@item ポップアップテキストプロパティ @tab |@ref{popup-props}|
@item ポップアップと textprop の位置 @tab |@ref{popup-textprop-pos}|
@item ポップアップフィルタ @tab |@ref{popup-filter}|
@item ポップアップコールバック @tab |@ref{popup-callback}|
@item ポップアップスクロールバー @tab |@ref{popup-scrollbar}|
@item ポップアップマスク @tab |@ref{popup-mask}|
@item 4. 例 @tab |@ref{popup-examples}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
{not available if the |+textprop| feature was disabled at compile time}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{|@ref{+textprop}| 機能が無効でコンパイルされたときは使用できません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Introduction						*popup-intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-intro}
@cindex popup-intro
@section 1. 前書き
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
We are talking about popup windows here, text that goes on top of the regular
windows and is under control of a plugin.  You cannot edit the text in the
popup window like with regular windows.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここではポップアップウィンドウ、つまり通常のウィンドウの上に表示され、プラグインの管理下にあるテキストについて話しをします。通常のウィンドウのようにポップアップウィンドウのテキストを編集することはできません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A popup window can be used for such things as:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウは、次のような用途に使用できます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- briefly show a message without overwriting the command line
- prompt the user with a dialog
- display contextual information while typing
- give extra information for auto-completion
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item コマンドラインを上書きせずに簡単にメッセージを表示する
@item ユーザーにダイアログを表示する
@item タイプ中にコンテキスト情報を表示する
@item 自動補完のための追加情報を与える
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The text in the popup window can be colored with |text-properties|.  It is
also possible to use syntax highlighting.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウのテキストは |@ref{text-properties}| で色を付けることができます。構文ハイライトを使用することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The default color used is "Pmenu".  If you prefer something else use the
"highlight" argument or the 'wincolor' option, e.g.: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトの色は "@var{Pmenu}" です。他の何かを好むならば、"@var{highlight}" 引数または '@option{wincolor}' オプションを使用してください。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	hi MyPopupColor ctermbg=lightblue guibg=lightblue
	call setwinvar(winid, '&wincolor', 'MyPopupColor')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
hi MyPopupColor ctermbg=lightblue guibg=lightblue
call setwinvar(winid, '&wincolor', 'MyPopupColor')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
'hlsearch' highlighting is not displayed in a popup window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
'@option{hlsearch}' ハイライトはポップアップウィンドウに表示されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A popup window has a window-ID like other windows, but behaves differently.
The size can be up to the whole Vim window and it overlaps other windows.
Popup windows can also overlap each other.  The "zindex" property specifies
what goes on top of what.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウは他のウィンドウと同様にウィンドウ ID を持ちますが、動作が異なります。サイズは Vim ウィンドウ全体に及ぶことがあり、それは他のウィンドウと重なります。ポップアップウィンドウも互いに重なり合うことがあります。"zindex" プロパティは、何の上に何があるかを指定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The popup window contains a buffer, and that buffer is always associated with
the popup window.  The window cannot be in Normal, Visual or Insert mode, it
does not get keyboard focus.  You can use functions like `setbufline()` to
change the text in the buffer.  There are more differences from how this
window and buffer behave compared to regular windows and buffers, see
|popup-buffer|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウにはバッファがあり、そのバッファは常にポップアップウィンドウに関連付けられています。このウィンドウはノーマル、ビジュアル、挿入モードにはできません。キーボードフォーカスは得られません。`@command{setbufline()}` のような関数を使ってバッファ内のテキストを変更することができます。このウィンドウとバッファは通常のウィンドウとバッファの振る舞いと比較して、たくさんの違いがあります。|@ref{popup-buffer}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If this is not what you are looking for, check out other popup functionality:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これがあなたが探しているものではない場合は、他のポップアップ機能をチェックしてください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- popup menu, see |popup-menu|
- balloon, see |balloon-eval|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item ポップアップメニューは |@ref{popup-menu}| を参照してください。
@item バルーンは |@ref{balloon-eval}| を参照してください。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
WINDOW POSITION AND SIZE				*popup-position*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-position}
@cindex popup-position
@unnumberedsubsec ウィンドウの位置とサイズ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The height of the window is normally equal to the number of, possibly
wrapping, lines in the buffer.  It can be limited with the "maxheight"
property.  You can use empty lines to increase the height or the "minheight"
property.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの高さは、通常、バッファ内の折り返しの行数と同じです。"maxheight" プロパティで制限することができます。高さを増やすために空の行を使うか、または "minheight" プロパティを使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The width of the window is normally equal to the longest line in the buffer.
It can be limited with the "maxwidth" property.  You can use spaces to
increase the width or use the "minwidth" property.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウの幅は、通常、バッファ内の最長の行と同じです。"maxwidth" プロパティで制限することができます。スペースを使って幅を広げるか、または "minwidth" プロパティを使うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default the 'wrap' option is set, so that no text disappears.  Otherwise,
if there is not enough space then the window is shifted left in order to
display more text.  When right-aligned the window is shifted right to display
more text.  The shifting can be disabled with the "fixed" property.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは '@option{wrap}' オプションが設定されているのでテキストは消えません。または、十分なスペースがない場合、ウィンドウは左に移動してテキストをさらに表示します。右寄せの場合、ウィンドウは右に移動してテキストをさらに表示します。この移動については "fixed" プロパティで無効にすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim tries to show the popup in the location you specify.  In some cases, e.g.
when the popup would go outside of the Vim window, it will show it somewhere
nearby.  E.g. if you use `popup_atcursor()` the popup normally shows just above
the current cursor position, but if the cursor is close to the top of the Vim
window it will be placed below the cursor position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は指定した場所にポップアップを表示しようとします。場合によっては、ポップアップが Vim のウィンドウの外側に出ると、他の近い場所に表示されます。例えば、`@command{popup_atcursor()}` を使用すると、ポップアップは現在のカーソル位置のすぐ上に表示されますが、カーソルが Vim のウィンドウの最上部に近い場合は、カーソル位置の下に配置されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the screen scrolls up for output of an Ex command, popups move too, so
that they will not cover the output.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Ex コマンドの出力のために画面がスクロールアップすると、ポップアップも移動するので、ポップアップは出力を隠しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The current cursor position is displayed even when it is under a popup window.
That way you can still see where it is, even though you cannot see the text
that it is in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在のカーソル位置はポップアップウィンドウの下にあっても表示されます。この方法では、テキストが表示されていない場合でも、その場所を確認することができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
CLOSING THE POPUP WINDOW				*popup-close*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-close}
@cindex popup-close
@unnumberedsubsec ポップアップウィンドウを閉じる
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Normally the plugin that created the popup window is also in charge of closing
it.  If somehow a popup hangs around, you can close all of them with: >
	call popup_clear()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
通常、ポップアップウィンドウを生成したプラグインは、これを閉じることもまた担当します。もしもプラグインがどういうわけかハングアップしてしまったなら、次のようにしてポップアップウィンドウのすべてを閉じることができます:
@verbatim
call popup_clear()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
Some popups, such as notifications, close after a specified time.  This can be
set with the "time" property on `popup_create()`.
Otherwise, a popup can be closed by clicking on the X in the top-right corner
or by clicking anywhere inside the popup.  This must be enabled with the
"close" property.  It is set by default for notifications.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------

通知のようなポップアップは一定時間後に閉じます。これは `@command{popup_create()}` の "@var{time}" プロパティで設定することができます。

一方で、ポップアップは右上角の X をクリックしたり、ポップアップの内側のどこかをクリックすることによって閉じることもできます。このためには "@var{close}" プロパティを有効にする必要があります。既定では通知に設定されています。@{訳注: "close" の値が "none" になっている@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP BUFFER AND WINDOW					*popup-buffer*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-buffer}
@cindex popup-buffer
@unnumberedsubsec ポップアップバッファとウィンドウ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If a popup function is called to create a popup from text, a new buffer is
created to hold the text and text properties of the popup window.  The buffer
is always associated with the popup window and manipulation is restricted:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしもポップアップ関数がテキストからポップアップを作成するために呼ばれた場合は、ポップアップウィンドウのテキストとテキストプロパティを保持するための新しいバッファが作成されます。バッファは常にポップアップウィンドウに関連付けられていて、操作は制限されています:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- the buffer has no name
- 'buftype' is "popup"
- 'swapfile' is off
- 'bufhidden' is "hide"
- 'buflisted' is off
- 'undolevels' is -1: no undo at all
- all other buffer-local and window-local options are set to their Vim default
  value.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 無名バッファ
@item '@option{buftype}' は "@var{popup}"
@item '@option{swapfile}' は off
@item '@option{bufhidden}' は "@var{hide}"
@item '@option{buflisted}' は off
@item '@option{undolevels}' は -1: アンドゥはできません
@item 他のすべてのバッファローカルおよびウィンドウローカルオプションは Vim のデフォルト値に設定されています
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
It is possible to change the specifically mentioned options, but anything
might break then, so better leave them alone.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
具体的に言及されたオプションを変更することは可能ですが、何かが壊れてしまう可能性があるので、そのままにしておくほうが望ましいでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The window does have a cursor position, but the cursor is not displayed.  In
fact, the cursor in the underlying window is displayed, as if it peeks through
the popup, so you can see where it is.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウにはカーソル位置がありますが、カーソルは表示されません。実際、下にあるウィンドウのカーソルは、ポップアップを覗くように表示されるため、どこにあるかを確認できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To execute a command in the context of the popup window and buffer use
`win_execute()`.  Example: >
	call win_execute(winid, 'syntax enable')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウとバッファのコンテキストでコマンドを実行するには `@command{win_execute()}` を使用してください。例:
@verbatim
call win_execute(winid, 'syntax enable')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Options can be set on the window with `setwinvar()`, e.g.: >
	call setwinvar(winid, '&wrap', 0)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
オプションは `@command{setwinvar()}` を使ってウィンドウ上で設定することができます。例:
@verbatim
call setwinvar(winid, '&wrap', 0)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
And options can be set on the buffer with `setbufvar()`, e.g.: >
	call setbufvar(winbufnr(winid), '&filetype', 'java')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そしてオプションは `@command{setbufvar()}` を使ってバッファに設定することができます。例:
@verbatim
call setbufvar(winbufnr(winid), '&filetype', 'java')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
You can also use `win_execute()` with a ":setlocal" command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@command{:setlocal}" コマンドを `@command{win_execute()}` で使用することもできます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
2. Functions						*popup-functions*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-functions}
@cindex popup-functions
@section 2. 関数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Creating a popup window:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウを作成:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_create()|	centered in the screen
	|popup_atcursor()|	just above the cursor position, closes when
				the cursor moves away
	|popup_beval()|		at the position indicated by v:beval_
				variables, closes when the mouse moves away
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item |@ref{popup_create()}| @tab 画面の中央に
@item |@ref{popup_atcursor()}| @tab カーソル位置のすぐ上に。カーソルが移動すると閉じる
@item |@ref{popup_beval()}| @tab v:beval_ 変数によって指示されたその位置。マウスが移動すると閉じる
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_notification()|	show a notification for three seconds
	|popup_dialog()|	centered with padding and border
	|popup_menu()|		prompt for selecting an item from a list
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{popup_notification()}| @tab 3 秒間通知を表示する
@item |@ref{popup_dialog()}| @tab パディングとボーダーありで中央に
@item |@ref{popup_menu()}| @tab リストから項目を選択するためのプロンプト
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Manipulating a popup window:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウの操作:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_hide()|		hide a popup temporarily
	|popup_show()|		show a previously hidden popup
	|popup_move()|		change the position and size of a popup
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item |@ref{popup_hide()}| @tab ポップアップを一時的に隠す
@item |@ref{popup_show()}| @tab 以前に隠されたポップアップを表示する
@item |@ref{popup_move()}| @tab ポップアップの位置とサイズを変更する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_setoptions()|	override options of a popup
	|popup_settext()|	replace the popup buffer contents
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item |@ref{popup_setoptions()}| @tab ポップアップのオプションを上書きする
@item |@ref{popup_settext()}| @tab ポップアップバッファの内容を置き換える
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Closing popup windows:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウを閉じる:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_close()|		close one popup
	|popup_clear()|		close all popups
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item |@ref{popup_close()}| @tab 1 つのポップアップを閉じる
@item |@ref{popup_clear()}| @tab すべてのポップアップを閉じる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Filter functions:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フィルタ関数:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_filter_menu()|	select from a list of items
	|popup_filter_yesno()|	blocks until 'y' or 'n' is pressed
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item |@ref{popup_filter_menu()}| @tab アイテムのリストから選択する
@item |@ref{popup_filter_yesno()}| @tab '@key{y}' または '@key{n}' が押されるまでブロックする
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Other:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
その他:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	|popup_getoptions()|	get current options for a popup
	|popup_getpos()|	get actual position and size of a popup
	|popup_locate()|	find popup window at a screen position
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .4 .6
@item |@ref{popup_getoptions()}| @tab ポップアップの現在のオプションを取得する
@item |@ref{popup_getpos()}| @tab ポップアップの実際の位置とサイズを取得する
@item |@ref{popup_locate()}| @tab スクリーン位置でポップアップウィンドウを検索する
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DETAILS						*popup-function-details*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-function-details}
@cindex popup-function-details
@unnumberedsubsec 詳細
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_atcursor({what}, {options})			*popup_atcursor()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{popup_atcursor()}
@findex popup_atcursor()
@item popup_atcursor(@{what@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Show the {what} above the cursor, and close it when the cursor
		moves.  This works like: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルの上に @{what@} を表示して、カーソルが移動したら閉じます。これは次のように動作します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			call popup_create({what}, #{
				\ pos: 'botleft',
				\ line: 'cursor-1',
				\ col: 'cursor',
				\ moved: 'WORD',
				\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_create({what}, {
        \ 'pos': 'botleft',
        \ 'line': 'cursor-1',
        \ 'col': 'cursor',
        \ 'moved': 'WORD',
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		Use {options} to change the properties.
		If "pos" is passed as "topleft" then the default for "line"
		becomes "cursor+1".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プロパティを変更するには @{options@} を使用します。もしも "pos" が "topleft" として渡されたなら、"line" へのデフォルトは "cursor+1" になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetText()->popup_atcursor({})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetText()->popup_atcursor({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_beval({what}, {options})			*popup_beval()*
		Show the {what} above the position from 'ballooneval' and
		close it when the mouse moves.  This works like: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_beval()}
@pindex popup_beval()
@item popup_beval(@{what@}, @{options@})
'@option{ballooneval}' からの位置 @{what@} を表示して、マウスが移動した時に閉じます。これは次のように動作します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		  let pos = screenpos(v:beval_winnr, v:beval_lnum, v:beval_col)
		  call popup_create({what}, #{
			\ pos: 'botleft',
			\ line: pos.row - 1,
			\ col: pos.col,
			\ mousemoved: 'WORD',
			\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
let pos = screenpos(v:beval_winnr, v:beval_lnum, v:beval_col)
call popup_create({what}, #{
      \ pos: 'botleft',
      \ line: pos.row - 1,
      \ col: pos.col,
      \ mousemoved: 'WORD',
      \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		Use {options} to change the properties.
		See |popup_beval_example| for an example.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
特性を変更するには @{options@} を使います。例については |@ref{popup_beval_example}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetText()->popup_beval({})
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetText()->popup_beval({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*popup_clear()*
popup_clear()	Emergency solution to a misbehaving plugin: close all popup
		windows for the current tab and global popups.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_clear()}
@findex popup_clear()
@item popup_clear()
不作法にふるまうプラグインに対する緊急の解決策: グローバルポップアップとカレントタブポップアップをすべて閉じます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_close({id} [, {result}])				*popup_close()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_close()}
@findex popup_close()
@item popup_close(@{id@} [, @{result@}])
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Close popup {id}.  The window and the associated buffer will
		be deleted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップ @{id@} を閉じます。ウィンドウと関連するバッファは削除されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the popup has a callback it will be called just before the
		popup window is deleted.  If the optional {result} is present
		it will be passed as the second argument of the callback.
		Otherwise zero is passed to the callback.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップがコールバックを持つ場合は、ポップアップウィンドウが削除される直前に呼び出されます。オプションの @{result@} が存在する場合、それはコールバックの第 2 引数として渡されます。そうでなければ、ゼロがコールバックに渡されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_close()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_close()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_create({what}, {options})				*popup_create()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_create()}
@findex popup_create()
@item popup_create(@{what@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Open a popup window showing {what}, which is either:
		- a buffer number
		- a string
		- a list of strings
		- a list of text lines with text properties
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次のどれかである @{what@} を見せるポップアップウィンドウを開きます:
@itemize
@item バッファ番号
@item 文字列
@item 文字列のリスト
@item テキストプロパティを持つテキスト行のリスト
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		When {what} is not a buffer number, a buffer is created with
		'buftype' set to "popup".  That buffer will be wiped out once
		the popup closes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{what@} がバッファ番号ではない場合、バッファは '@option{buftype}' オプションに "@var{popup}" を設定した状態で作成されます。ひとたびポップアップが閉じられると、このバッファは消去されるでしょう。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		{options} is a dictionary with many possible entries.
		See |popup_create-arguments| for details.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{options@} は多くのエントリがある辞書です。詳細は |@ref{popup_create-arguments}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns a window-ID, which can be used with other popup
		functions.  Use `winbufnr()` to get the number of the buffer
		in the window: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ウィンドウ ID を返します。これは他のポップアップ関数で使用することができます。ウィンドウ内のバッファの番号を取得するには `@command{winbufnr()}` を使用してください:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			let winid = popup_create('hello', {})
			let bufnr = winbufnr(winid)
			call setbufline(bufnr, 2, 'second line')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
let winid = popup_create('hello', {})
let bufnr = winbufnr(winid)
call setbufline(bufnr, 2, 'second line')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		In case of failure zero is returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
失敗した場合はゼロが返されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetText()->popup_create({})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetText()->popup_create({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_dialog({what}, {options})				*popup_dialog()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_dialog()}
@findex popup_dialog()
@item popup_dialog(@{what@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Just like |popup_create()| but with these default options: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{popup_create()}| と同じですが、これらのデフォルトのオプションになります:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			call popup_create({what}, #{
				\ pos: 'center',
				\ zindex: 200,
				\ drag: 1,
				\ border: [],
				\ padding: [],
				\ mapping: 0,
				\})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_create({what}, #{
        \ pos: 'center',
        \ zindex: 200,
        \ drag: 1,
        \ border: [],
        \ padding: [],
        \ mapping: 0,
        \})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		Use {options} to change the properties. E.g. add a 'filter'
		option with value 'popup_filter_yesno'.  Example: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プロパティを変更するには @{options@} を使用します。例: 値 '@var{popup_filter_yesno}' を持つ '@option{filter}' オプションを追加します。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			call popup_create('do you want to quit (Yes/no)?', #{
				\ filter: 'popup_filter_yesno',
				\ callback: 'QuitCallback',
				\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_create('do you want to quit (Yes/no)?', #{
        \ filter: 'popup_filter_yesno',
        \ callback: 'QuitCallback',
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<		By default the dialog can be dragged, so that text below it
		can be read if needed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトではダイアログはドラッグすることができるので、必要であればその下のテキストを読むことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetText()->popup_dialog({})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetText()->popup_dialog({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_filter_menu({id}, {key})				*popup_filter_menu()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item popup_filter_menu(@{id@}, @{key@})
@anchor{popup_filter_menu()}
@findex popup_filter_menu()
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Filter that can be used for a popup. These keys can be used:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップに使用できるフィルタ。これらのキーを使用することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    j <Down>		select item below
		    k <Up>		select item above
		    <Space> <Enter>	accept current selection
		    x Esc CTRL-C	cancel the menu
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item @key{j} @key{<Down>} @tab 下の項目を選択する
@item @key{k} @key{<Up>} @tab 上の項目を選択する
@item @key{<Space>} @key{<Enter>} @tab 現在の選択を受け入れる
@item @key{x} @key{Esc} @kbd{CTRL-C} @tab メニューをキャンセルする
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Other keys are ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他のキーは無視されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		A match is set on that line to highlight it, see
		|popup_menu()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
行をハイライトするためにマッチがセットされます。|@ref{popup_menu()}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		When the current selection is accepted the "callback" of the
		popup menu is invoked with the index of the selected line as
		the second argument.  The first entry has index one.
		Cancelling the menu invokes the callback with -1.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在の選択が受け入れられると、選択された行のインデックスを第 2 引数としてポップアップメニューの "callback" が呼び出されます。最初のエントリのインデックスは 1 です。メニューをキャンセルすると、-1 でコールバックが呼び出されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		To add shortcut keys, see the example here:
		|popup_menu-shortcut-example|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ショートカットキーを追加する場合: |@ref{popup_menu-shortcut-example}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_filter_yesno({id}, {key})				*popup_filter_yesno()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_filter_yesno()}
@findex popup_filter_yesno()
@item popup_filter_yesno(@{id@}, @{key@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Filter that can be used for a popup. It handles only the keys
		'y', 'Y' and 'n' or 'N'.  Invokes the "callback" of the
		popup menu with the 1 for 'y' or 'Y' and zero for 'n' or 'N'
		as the second argument.  Pressing Esc and 'x' works like
		pressing 'n'.  CTRL-C invokes the callback with -1.  Other
		keys are ignored.
		See the example here: |popup_dialog-example|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップに使用できるフィルタ。キー '@key{y}'、'@key{Y}' および '@key{n}' または '@key{N}' のみを処理します。第 2 引数として '@key{y}' または '@key{Y}' に 1、'@key{n}' または '@key{N}' に 0 を指定して、ポップアップメニューの "callback" を呼び出します。@key{Esc} と '@key{x}' を押すと、'@key{n}' を押すのと同じように機能します。@kbd{CTRL-C} は -1 でコールバックを呼び出します。他のキーは無視されます。

|@ref{popup_dialog-example}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_findinfo()					*popup_findinfo()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_findinfo()}
@findex popup_findinfo()
@item popup_findinfo()
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Get the |window-ID| for the popup info window, as it used by
		the popup menu.  See |complete-popup|.  The info popup is
		hidden when not used, it can be deleted with |popup_clear()|
		and |popup_close()|.  Use |popup_show()| to reposition it to
		the item in the popup menu.
		Returns zero if there is none.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップメニューで使用されているポップアップ情報ウィンドウの |@ref{window-ID}| を取得します。|@ref{complete-popup}| を参照してください。ポップアップ情報は、使用されていない場合は非表示になり、|@ref{popup_clear()}| または |@ref{popup_close()}| で削除できます。ポップアップメニューの項目に再配置するには |@ref{popup_show()}| を使用します。ない場合は 0 を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_findpreview()					*popup_findpreview()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_findpreview()}
@findex popup_findpreview()
@item popup_findpreview()
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Get the |window-ID| for the popup preview window.
		Return zero if there is none.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアッププレビューウィンドウの |@ref{window-ID}| を取得します。ない場合は 0 を返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_getoptions({id})					*popup_getoptions()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_getoptions()}
@findex popup_getoptions()
@item popup_getoptions(@{id@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Return the {options} for popup {id} in a Dict.
		A zero value means the option was not set.  For "zindex" the
		default value is returned, not zero.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
popup @{id@} の @{options@} を辞書で返します。ゼロ値はオプションが設定されなかったことを意味します。"zindex" の場合、デフォルト値が返されます。ゼロではありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The "moved" entry is a list with line number, minimum and
		maximum column, [0, 0, 0] when not set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"moved" エントリは、行番号、最小桁と最大桁のリストで、未設定時は [0, 0, 0] です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The "mousemoved" entry is a list with screen row, minimum and
		maximum screen column, [0, 0, 0] when not set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"mousemoved" エントリはスクリーン行、最小桁と最大桁のリストで、未設定時は [0, 0, 0] です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		"firstline" is the property set on the popup, unlike the
		"firstline" obtained with |popup_getpos()| which is the actual
		buffer line at the top of the popup window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"firstline" は、ポップアップウィンドウの上部にある実際のバッファ行である |@ref{popup_getpos()}| で取得される "firstline" とは異なり、ポップアップに設定されたプロパティです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		"border" and "padding" are not included when all values are
		zero.  When all values are one then an empty list is included.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべての値がゼロの場合、"border" と "padding" は含まれません。すべての値が 1 の場合、空のリストが含まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		"borderhighlight" is not included when all values are empty.
		"scrollbarhighlight" and "thumbhighlight" are only included
		when set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
すべての値が空の場合、"borderhighlight" は含まれません。設定されているときのみ "scrollbarhighlight" と "thumbhighlight" が含まれます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		"tabpage" will be -1 for a global popup, zero for a popup on
		the current tabpage and a positive number for a popup on
		another tabpage.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
グローバルポップアップの場合 "tabpage" には -1 が設定され、カレントタブページの場合は 0 、別のタブページの場合は正の整数が設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		"textprop", "textpropid" and "textpropwin" are only present
		when "textprop" was set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"textprop", "textpropid" および "textpropwin" は、"textprop" が設定されている場合にのみ与えられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If popup window {id} is not found an empty Dict is returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウ @{id@} が見つからない場合は空の辞書が返されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_getoptions()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_getoptions()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_getpos({id})					*popup_getpos()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_getpos()}
@findex popup_getpos()
@item popup_getpos(@{id@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Return the position and size of popup {id}.  Returns a Dict
		with these entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップ @{id@} の位置とサイズを返します。これらのエントリを持つ辞書を返します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    col		screen column of the popup, one-based
		    line	screen line of the popup, one-based
		    width	width of the whole popup in screen cells
		    height	height of the whole popup in screen cells
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item col @tab ポップアップの画面の桁、1 から始まる
@item line @tab ポップアップの画面の行、1 から始まる
@item width @tab 画面セル内のポップアップ全体の幅
@item height @tab 画面セル内のポップアップ全体の高さ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    core_col	screen column of the text box
		    core_line	screen line of the text box
		    core_width	width of the text box in screen cells
		    core_height	height of the text box in screen cells
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item core_col @tab テキストボックスの画面の桁
@item core_line @tab テキストボックスの画面の行
@item core_width @tab 画面セル内のテキストボックスの幅
@item core_height @tab 画面セル内のテキストボックスの高さ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    firstline	line of the buffer at top (1 unless scrolled)
				(not the value of the "firstline" property)
		    lastline	line of the buffer at the bottom (updated when
				the popup is redrawn)
		    scrollbar	non-zero if a scrollbar is displayed
		    visible	one if the popup is displayed, zero if hidden
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item firstline @tab トップにおけるバッファの行 (スクロールされていなければ 1) @*
("firstline" のプロパティの値ではありません)
@item lastline @tab 下端のバッファの行
@item scrollbar @tab スクロールバーが表示されているなら非ゼロ
@item visible @tab ポップアップが表示されている場合は 1、非表示の場合は 0
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Note that these are the actual screen positions.  They differ
		from the values in `popup_getoptions()` for the sizing and
		positioning mechanism applied.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
これらは実際の画面位置です。適用されるサイズと位置のメカニズムに関して `@command{popup_getoptions()}` の値とは異なります。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The "core_" values exclude the padding and border.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"core_" 値はパディングとボーダーを除外しています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If popup window {id} is not found an empty Dict is returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウ @{id@} が見つからない場合は空の辞書が返されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_getpos()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_getpos()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_hide({id})						*popup_hide()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_hide()}
@findex popup_hide()
@item popup_hide(@{id@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If {id} is a displayed popup, hide it now. If the popup has a
		filter it will not be invoked for so long as the popup is
		hidden.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{id@} がポップアップ表示されている場合、それを非表示にします。ポップアップがフィルタを持っている場合は、ポップアップが非表示になっている限り呼び出されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If window {id} does not exist nothing happens.  If window {id}
		exists but is not a popup window an error is given. *E993*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E993}
@erindex E993
ウィンドウ @{id@} が存在しない場合は何も起こりません。ウィンドウ @{id@} が存在するがポップアップウィンドウではない場合、エラーが発生します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_hide()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_hide()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_locate({row}, {col})				 *popup_locate()*
		Return the |window-ID| of the popup at screen position {row}
		and {col}.  If there are multiple popups the one with the
		highest zindex is returned.  If there are no popups at this
		position then zero is returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_locate()}
@pindex popup_locate()
@item popup_locate(@{row@}, @{col@})
スクリーン位置 @{row@} と @{col@} におけるポップアップの |@ref{window-ID}| を返します。もしも複数のポップアップがあるなら、一番大きい zindex をもつものが返されます。もしもこの位置にポップアップがないのなら、ゼロが返されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_menu({what}, {options})				 *popup_menu()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_menu()}
@findex popup_menu()
@item popup_menu(@{what@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Show the {what} near the cursor, handle selecting one of the
		items with cursorkeys, and close it an item is selected with
		Space or Enter. {what} should have multiple lines to make this
		useful.  This works like: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
カーソルの近くに @{what@} を表示し、カーソルキーで項目の 1 つを選択して処理し、それを閉じるには、@key{Space} または @key{Enter} で項目を選択します。これを有効にするには、@{what@} に複数の行が必要です。これは次のように機能します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			call popup_create({what}, #{
				\ pos: 'center',
				\ zindex: 200,
				\ drag: 1,
				\ wrap: 0,
				\ border: [],
				\ cursorline: 1,
				\ padding: [0,1,0,1],
				\ filter: 'popup_filter_menu',
				\ mapping: 0,
				\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_create({what}, #{
        \ pos: 'center',
        \ zindex: 200,
        \ drag: 1,
        \ wrap: 0,
        \ border: [],
        \ cursorline: 1,
        \ padding: [0,1,0,1],
        \ filter: 'popup_filter_menu',
        \ mapping: 0,
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		The current line is highlighted with a match using
		"PopupSelected", or "PmenuSel" if that is not defined.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
現在行は、"PopupSelected" を使用してマッチでハイライトされます。"PopupSelected" が未定義の場合は、"PmenuSel" が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Use {options} to change the properties.  Should at least set
		"callback" to a function that handles the selected item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
プロパティを変更するには @{options@} を使用します。少なくとも "callback" を選択された項目を扱う関数に設定するべきです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Example: >
			func ColorSelected(id, result)
			   " use a:result
			endfunc
			call popup_menu(['red', 'green', 'blue'], #{
				\ callback: 'ColorSelected',
				\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
func ColorSelected(id, result)
   " use a:result
endfunc
call popup_menu(['red', 'green', 'blue'], #{
        \ callback: 'ColorSelected',
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<		Can also be used as a |method|: >
			GetChoices()->popup_menu({})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetChoices()->popup_menu({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_move({id}, {options})					*popup_move()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_move()}
@findex popup_move()
@item popup_move(@{id@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Move popup {id} to the position specified with {options}.
		{options} may contain the items from |popup_create()| that
		specify the popup position:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップ @{id@} を @{options@} で指定された位置に移動します。@{options@} にはポップアップ位置を指定する |@ref{popup_create()}| 由来の項目を含むことができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			line
			col
			pos
			maxheight
			minheight
			maxwidth
			minwidth
			fixed
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .9 .1
@item line @tab
@item col @tab
@item pos @tab
@item maxheight @tab
@item minheight @tab
@item maxwidth @tab
@item minwidth @tab
@item fixed @tab
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		For {id} see `popup_hide()`.
		For other options see |popup_setoptions()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{id@} については `@command{popup_hide()}` を参照してください。その他のオプションについては |@ref{popup_setoptions()}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_move(options)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_move(options)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_notification({what}, {options})			 *popup_notification()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_notification()}
@findex popup_notification()
@item popup_notification(@{what@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Show the {what} for 3 seconds at the top of the Vim window.
		This works like: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim のウィンドウの上部に @{what@} を 3 秒間表示します。これは次のように動作します:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			call popup_create({what}, #{
				\ line: 1,
				\ col: 10,
				\ minwidth: 20,
				\ time: 3000,
				\ tabpage: -1,
				\ zindex: 300,
				\ drag: 1,
				\ highlight: 'WarningMsg',
				\ border: [],
				\ close: 'click',
				\ padding: [0,1,0,1],
				\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_create({what}, #{
        \ line: 1,
        \ col: 10,
        \ minwidth: 20,
        \ time: 3000,
        \ tabpage: -1,
        \ zindex: 300,
        \ drag: 1,
        \ highlight: 'WarningMsg',
        \ border: [],
        \ close: 'click',
        \ padding: [0,1,0,1],
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<		The PopupNotification highlight group is used instead of
		WarningMsg if it is defined.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
PopupNotification ハイライトグループが定義されている場合は、WarningMsg の代わりに使用されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Without the |+timers| feature the popup will not disappear
		automatically, the user has to click in it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{+timers}| 機能がないと、ポップアップは自動的に消えないでしょう。ユーザーはこれをクリックしなければなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The position will be adjusted to avoid overlap with other
		notifications.
		Use {options} to change the properties.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
他の通知と重ならないように位置が調整されます。プロパティを変更するには @{options@} を使用します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetText()->popup_notification({})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetText()->popup_notification({})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_show({id})						*popup_show()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_show()}
@findex popup_show()
@item popup_show(@{id@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If {id} is a hidden popup, show it now.
		For {id} see `popup_hide()`.
		If {id} is the info popup it will be positioned next to the
		current popup menu item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{id@} が非表示のポップアップの場合はそれを表示します。@{id@} については `@command{popup_hide()}` を参照してください。

@{id@} が情報ポップアップの場合、現在のポップアップメニュー項目の隣に配置されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
popup_setoptions({id}, {options})			*popup_setoptions()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_setoptions()}
@findex popup_setoptions()
@item popup_setoptions(@{id@}, @{options@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Override options in popup {id} with entries in {options}.
		These options can be set:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップ @{id@} のオプションを @{options@} のエントリで上書きします。これらのオプションを設定することができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			border
			borderchars
			borderhighlight
			callback
			close
			cursorline
			drag
			filter
			firstline
			flip
			highlight
			mapping
			mask
			moved
			padding
			resize
			scrollbar
			scrollbarhighlight
			thumbhighlight
			time
			title
			wrap
			zindex
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .9 .1
@item border @tab
@item borderchars @tab
@item borderhighlight @tab
@item callback @tab
@item close @tab
@item cursorline @tab
@item drag @tab
@item filter @tab
@item firstline @tab
@item flip @tab
@item highlight @tab
@item mapping @tab
@item mask @tab
@item moved @tab
@item resize @tab
@item padding @tab
@item scrollbar @tab
@item scrollbarhighlight @tab
@item thumbhighlight @tab
@item time @tab
@item title @tab
@item wrap @tab
@item zindex @tab
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		The options from |popup_move()| can also be used.
		For "hidden" use |popup_hide()| and |popup_show()|.
		"tabpage" cannot be changed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{popup_move()}| からのオプションも使用することができます。"hidden" のために |@ref{popup_hide()}| と |@ref{popup_show()}| を使用します。"tabpage" は変更することはできません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_setoptions(options)
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_setoptions(options)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
popup_settext({id}, {text})				*popup_settext()*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_settext()}
@findex popup_settext()
@item popup_settext(@{id@}, @{text@})
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Set the text of the buffer in popup win {id}. {text} is the
		same as supplied to |popup_create()|, except that a buffer
		number is not allowed.
		Does not change the window size or position, other than caused
		by the different text.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップウィンドウ @{id@} でバッファのテキストを設定します。@{text@} は |@ref{popup_create()}| に提供されるものと同じです。ただしバッファ番号は認められていません。

テキストの違いが生じる以外ではウィンドウのサイズや位置を変更しません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Can also be used as a |method|: >
			GetPopup()->popup_settext('hello')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetPopup()->popup_settext('hello')
@end verbatim
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. Usage						*popup-usage*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-usage}
@cindex popup-usage
@section 3. 使用方法
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
POPUP_CREATE() ARGUMENTS			 *popup_create-arguments*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_create-arguments}
@cindex popup_create-arguments
@unnumberedsubsec POPUP_CREATE() の引数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The first argument of |popup_create()| (and the second argument to
|popup_settext()|) specifies the text to be displayed, and optionally text
properties.  It is in one of four forms:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{popup_create()}| の最初の引数 (と |@ref{popup_settext()}| の第 2 引数) は表示されるテキストと、オプションでテキストプロパティを指定します。それは 4 つの形式のうちの 1 つです:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- a buffer number
- a string
- a list of strings
- a list of dictionaries, where each dictionary has these entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item バッファ番号
@item 文字列
@item 文字列のリスト
@item 辞書のリスト。各辞書は次のエントリを持ちます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	text		String with the text to display.
	props		A list of text properties.  Optional.
			Each entry is a dictionary, like the third argument of
			|prop_add()|, but specifying the column in the
			dictionary with a "col" entry, see below:
			|popup-props|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item text @tab 表示するテキストを含む文字列。
@item props @tab テキストプロパティのリスト。任意。各エントリは |@ref{prop_add()}| の第 3 引数のような辞書ですが、辞書の "@var{col}" エントリを使って桁を指定します。以下を参照してください: |@ref{popup-props}|。
@end multitable
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If you want to create a new buffer yourself use |bufadd()| and pass the buffer
number to popup_create().
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
自分で新しいバッファを作成したい場合は、|@ref{bufadd()}| を使用して、バッファ番号を popup_create() に渡します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
It is not possible to use the buffer of a terminal window. *E278*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E278}
@erindex E278
端末ウィンドウのバッファを使用することはできません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The second argument of |popup_create()| is a dictionary with options:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{popup_create()}| の第 2 引数は任意の辞書です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	line		Screen line where to position the popup.  Can use a
			number or "cursor", "cursor+1" or "cursor-1" to use
			the line of the cursor and add or subtract a number of
			lines.  If omitted the popup is vertically centered.
			The first line is 1.
			When using "textprop" the number is relative to the
			text property and can be negative.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item line @tab ポップアップを配置する画面の行。数値または、カーソルの行を使用して行数を加算または減算するには、"cursor"、"cursor+1"、または "cursor-1" を使用することができます。省略した場合、ポップアップは垂直方向の中央に配置されます。最初の行は 1 です。

"textprop" を使用する場合、数値はテキストプロパティに関連していて、負の値にすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	col		Screen column where to position the popup.  Can use a
			number or "cursor" to use the column of the cursor,
			"cursor+9" or "cursor-9" to add or subtract a number
			of columns.  If omitted the popup is horizontally
			centered.  The first column is 1.
			When using "textprop" the number is relative to the
			text property and can be negative.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item col @tab ポップアップを配置する画面の桁。数値または、カーソルの桁を使用するには "cursor" を使用し、桁を加算または減算するには "cursor+9" または "cursor-9" を使用することができます。省略した場合、ポップアップは水平方向の中央に配置されます。最初の桁は 1 です。

"textprop" を使用する場合、数値はテキストプロパティに関連していて、負の値にすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	pos		"topleft", "topright", "botleft" or "botright":
			defines what corner of the popup "line" and "col" are
			used for.  When not set "topleft" is used.
			Alternatively "center" can be used to position the
			popup in the center of the Vim window, in which case
			"line" and "col" are ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item pos @tab "topleft"、"topright"、"botleft" または "botright": ポップアップのどのコーナーに "line" と "col" が使われるかを定義します。設定されていない場合は "topleft" が使用されます。あるいは "center" を使ってポップアップを Vim のウィンドウの中央に配置することもできます。その場合は "line" と "col" は無視されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	posinvert	When FALSE the value of "pos" is always used.  When
			TRUE (the default) and the popup does not fit
			vertically and there is more space on the other side
			then the popup is placed on the other side of the
			position indicated by "line".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item posinvert @tab FALSE の場合、"pos" の値が常に使われます。TRUE (デフォルト) の場合と、ポップアップが垂直にフィットしない場合と、別の方向にスペースがある場合は "line" で示された別の場所に配置されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	textprop	When present the popup is positioned next to a text
			property with this name and will move when the text
			property moves.  Use an empty string to remove.  See
			|popup-textprop-pos|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item textprop @tab 指定した場合、ポップアップはこの名前のテキストプロパティの隣に配置され、テキストプロパティが移動すると移動します。削除するには空の文字列を使用してください。|@ref{popup-textprop-pos}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	textpropwin	What window to search for the text property.  When
			omitted or invalid the current window is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item textpropwin @tab テキストプロパティを検索するウィンドウ。省略または無効な場合、現在のウィンドウが使用されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	textpropid	Used to identify the text property when "textprop" is
			present. Use zero to reset.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item textpropid @tab "textprop" が指定された場合にテキストプロパティを識別するために使用されます。0 を使用してリセットします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	fixed		When FALSE (the default), and:
			 - "pos" is "botleft" or "topleft", and
			 - "wrap" is off, and
			 - the popup would be truncated at the right edge of
			   the screen, then
			the popup is moved to the left so as to fit the
			contents on the screen.  Set to TRUE to disable this.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item fixed @tab FALSE (デフォルト) の場合は:
@itemize
@item "pos" は "botleft" または "topleft" で、
@item "wrap" はオフで、
@item ポップアップは画面の右端で切り捨てられ、
@end itemize
ポップアップは画面の内容に合うように左に移動されます。これを無効にするには、TRUEに設定します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	flip		When TRUE (the default) and the position is relative
			to the cursor, flip to below or above the cursor to
			avoid overlap with the |popupmenu-completion| or
			another popup with a higher "zindex".  When there is
			no space above/below the cursor then show the popup to
			the side of the popup or popup menu.
			{not implemented yet}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item flip @tab TRUE (デフォルト) かつ位置がカーソルからの相対位置である場合は、|@ref{popupmenu-completion}| または、より高い "zindex" を持つ別のポップアップと重ならないようにカーソルの下または上に動かします。カーソルの上/下にスペースがない場合は、ポップアップまたはポップアップメニューの横にポップアップを表示します。

@{未実装@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	maxheight	Maximum height of the contents, excluding border and
			padding.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item maxheight @tab コンテンツの最大高さ (ボーダーとパディングを除く)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	minheight	Minimum height of the contents, excluding border and
			padding.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item minheight @tab コンテンツの最小高さ (ボーダーとパディングを除く)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	maxwidth	Maximum width of the contents, excluding border,
			padding and scrollbar.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item maxwidth @tab コンテンツの最大幅 (ボーダーとパディングとスクロールバーを除く)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	minwidth	Minimum width of the contents, excluding border,
			padding and scrollbar.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item minwidth @tab コンテンツの最小幅 (ボーダーとパディングとスクロールバーを除く)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	firstline	First buffer line to display.  When larger than one it
			looks like the text scrolled up.  When out of range
			the last buffer line will at the top of the window.
			Set to zero to leave the position as set by commands.
			Also see "scrollbar".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item firstline @tab 表示する最初のバッファ行。1 より大きい場合は、テキストが上にスクロールしたように見えます。範囲外の場合、最後のバッファ行はウィンドウの最上部に表示されます。コマンドによって設定された位置のままにするには、0 に設定します。"scrollbar" も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	hidden		When TRUE the popup exists but is not displayed; use
			`popup_show()` to unhide it.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item hidden @tab TRUE の場合、ポップアップは存在するけれども表示はされません。表示するには `@command{popup_show()}` を使います。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	tabpage		When -1: display the popup on all tab pages.
			When 0 (the default): display the popup on the current
			tab page.
			Otherwise the number of the tab page the popup is
			displayed on; when invalid the popup is not created
			and an error is given. *E997*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item tabpage @tab -1 の場合: すべてのタブページにポップアップを表示します。

0 (デフォルト) の場合: カレントタブページにポップアップを表示します。

@anchor{E997}
@erindex E997
それ以外の場合は、ポップアップが表示されるタブページの番号。無効な場合はポップアプは表示されずエラーになます。

@{-1 と 0 のみ実装@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	title		Text to be displayed above the first item in the
			popup, on top of any border.  If there is no top
			border one line of padding is added to put the title
			on.  You might want to add one or more spaces at the
			start and end as padding.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item title @tab ポップアップの最初の項目の上、ボーダーの上に表示されるテキスト。上枠がない場合は、タイトルを付けるために 1 行のパディングが追加されます。最初と最後に 1 つ以上のスペースをパディングとして追加することを薦めます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	wrap		TRUE to make the lines wrap (default TRUE).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item wrap @tab 行を折り返す場合は TRUE (デフォルトは TRUE)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	drag		TRUE to allow the popup to be dragged with the mouse
			by grabbing at the border.  Has no effect if the
			popup does not have a border. As soon as dragging
			starts and "pos" is "center" it is changed to
			"topleft".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item drag @tab ボーダーを掴んでマウスでポップアップをドラッグできるようにする場合は TRUE。ポップアップにボーダーがない場合は効果がありません。"pos" が "center" の場合は、ドラッグが始まるとすぐに "topleft" に変更されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	resize		TRUE to allow the popup to be resized with the mouse
			by grabbing at the bottom right corner.  Has no effect
			if the popup does not have a border.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item resize @tab TRUE を設定すると、マウスで右下隅をつかんでポップアップのサイズを変更できます。ポップアップにボーダーがない場合は効果がありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	close		When "button" an X is displayed in the top-right, on
			top of any border, padding or text.  When clicked on
			the X the popup will close.  Any callback is invoked
			with the value -2.
			When "click" any mouse click in the popup will close
			it.
			When "none" (the default) mouse clicks do not close
			the popup window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item close @tab "@var{button}" の時は、どのようなボーダ、パディング、テキスト上であっても X が右上に表示されます。X をクリックするとポップアップは閉じられます。どのようなコールバックも -2 の値で呼び出されます。

"@var{click}" の時は、ポップアップ内ならどのようなマウスクリックでも閉じられます。

"@var{none}" (これが既定) の時は、マウスクリックでポップアップウィンドウは閉じられません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	highlight	Highlight group name to use for the text, stored in
			the 'wincolor' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item highlight @tab '@option{wincolor}' オプションに格納されている、テキストに使用するハイライトグループ名。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	padding		List with numbers, defining the padding
			above/right/below/left of the popup (similar to CSS).
			An empty list uses a padding of 1 all around.  The
			padding goes around the text, inside any border.
			Padding uses the 'wincolor' highlight.
			Example: [1, 2, 1, 3] has 1 line of padding above, 2
			columns on the right, 1 line below and 3 columns on
			the left.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item padding @tab ポップアップの上/右/下/左のパディングを定義する数値のリスト (CSS と同様)。空のリストは、すべて 1 のパディングを使用します。パディングは、テキストをボーダーの内側で囲みまし。パディングは 'wincolor' ハイライトを使います。

例: [1, 2, 1, 3] は上に 1 行、右に 2 桁、下に 1 行、左に 3 桁のパディングにします。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	border		List with numbers, defining the border thickness
			above/right/below/left of the popup (similar to CSS).
			Only values of zero and non-zero are recognized.
			An empty list uses a border all around.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item border @tab ポップアップの上/右/下/左のボーダーの太さを定義する数値のリスト (CSS と同様)。ゼロとゼロ以外の値のみが認識されます。空のリストは、周囲にボーダーを使用します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	borderhighlight	List of highlight group names to use for the border.
			When one entry it is used for all borders, otherwise
			the highlight for the top/right/bottom/left border.
			Example: ['TopColor', 'RightColor', 'BottomColor,
			'LeftColor']
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item borderhighlight @tab ボーダーに使用するハイライトグループ名のリスト。1 つのエントリの場合はそれがすべてのボーダーに使用され、それ以外の場合は上/右/下/左のボーダーのハイライトになります。

例: ['TopColor', 'RightColor', 'BottomColor, 'LeftColor']
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	borderchars	List with characters, defining the character to use
			for the top/right/bottom/left border.  Optionally
			followed by the character to use for the
			topleft/topright/botright/botleft corner.
			Example: ['-', '|', '-', '|', '┌', '┐', '┘', '└']
			When the list has one character it is used for all.
			When the list has two characters the first is used for
			the border lines, the second for the corners.
			By default a double line is used all around when
			'encoding' is "utf-8" and 'ambiwidth' is "single",
			otherwise ASCII characters are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item borderchars @tab 上/右/下/左のボーダーに使用する文字を定義します、文字のリスト。左上/右上/右下/左下の隅に使用する文字が任意で続きます。

例: ['-', '|', '-', '|', '┌', '┐', '┘', '└']

リストに 1 文字が含まれている場合は、それがすべてに使用されます。リストに 2 文字が含まれている場合、最初の文字はボーダーに使用され、2 番目の文字はコーナーに使用されます。

'@option{encoding}' が "@var{utf-8}" かつ '@option{ambiwidth}' が "@var{single}" のときはデフォルトで 2 重線が使われます。それ以外の場合は ASCII 文字が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	scrollbar	non-zero: show a scrollbar when the text doesn't fit.
			zero: do not show a scrollbar.  Default is non-zero.
			Also see |popup-scrollbar|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item scrollbar @tab
非ゼロ: テキストがポップアップの大きさに適応していなければ、スクロールバーを表示します。 @*
ゼロ: スクロールバーを表示しません

既定は非ゼロです。|@ref{popup-scrollbar}| も参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	scrollbarhighlight  Highlight group name for the scrollbar. The
			background color is what matters.  When not given then
			PmenuSbar is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item scrollbarhighlight @tab スクロールバーのためのハイライトグループ名。背景色は重要です。与えられていないときは PmenuSbar が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	thumbhighlight  Highlight group name for the scrollbar thumb. The
			background color is what matters.  When not given then
			PmenuThumb is used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item thumbhighlight @tab スクロールバーのつまみのためのハイライトグループ名。背景色は重要です。与えられていないときは PmenuThumb が使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	zindex		Priority for the popup, default 50.  Minimum value is
			1, maximum value is 32000.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item zindex @tab ポップアップの優先度。デフォルトは 50。最小値は 1、最大値は 32000。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	mask		A list of lists with coordinates, defining parts of
			the popup that are transparent.  See |popup-mask|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item mask @tab 透明なポップアップの一部を定義している座標リストのリスト。|@ref{popup-mask}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	time		Time in milliseconds after which the popup will close.
			When omitted |popup_close()| must be used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item time @tab ポップアップが閉じるまでの時間 (msec)。省略した場合は |@ref{popup_close()}| を使用する必要があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	moved		Specifies to close the popup if the cursor moved:
			- "any": if the cursor moved at all
			- "word": if the cursor moved outside |<cword>|
			- "WORD": if the cursor moved outside |<cWORD>|
			- "expr": if the cursor moved outside |<cexpr>|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item moved @tab カーソルが移動した場合にポップアップを閉じるように指定します:
@itemize
@item "any": 少しでもカーソルが移動した場合
@item "word": カーソルが |@ref{<cword>}| の外側に移動した場合
@item "WORD": カーソルが |@ref{<cWORD>}| の外側に移動した場合
@item "expr": カーソルが |@ref{<cexpr>}| の外側に移動した場合
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			- [{start}, {end}]: if the cursor moved before column
			  {start} or after {end}
			- [{lnum}, {start}, {end}]: if the cursor moved away
			  from line {lnum}, before column {start} or after
			  {end}
			- [0, 0, 0] do not close the popup when the cursor
			  moves
			The popup also closes if the cursor moves to another
			line or to another window.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item [@{start@}, @{end@}]: カーソルが桁 @{start@} の前、または @{end@} の後に移動した場合
@item [@{lnum@}, @{start@}, @{end@}]: カーソルが行 @{lnum@} から離れた場合、または、桁が @{start@} の前、または @{end@} の後に移動した場合
@item [0, 0, 0]: カーソルが移動してもポップアップを閉じません
@end itemize
カーソルが別の行または別のウィンドウに移動した場合もポップアップは閉じます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	mousemoved	Like "moved" but referring to the mouse pointer
			position
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item mousemoved @tab "moved" に似ていますが、マウスポインタの位置を参照します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	cursorline	non-zero: Highlight the cursor line. Also scrolls the
				  text to show this line (only works properly
				  when 'wrap' is off).
			zero: 	  Do not highlight the cursor line.
			Default is zero, except for |popup_menu()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item cursorline @tab
ゼロ以外: カーソル行をハイライトします。またこの行を表示するためにテキストをスクロールします (たぶん '@option{wrap}' がオフの時のみに動作します)。@*
ゼロ: カーソル行をハイライトしません。@*
既定はゼロで、他のものについては |@ref{popup_menu()}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	filter		A callback that can filter typed characters, see
			|popup-filter|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item filter @tab 入力した文字をフィルタ処理できるコールバック。|@ref{popup-filter}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	mapping		Allow for key mapping.  When FALSE and the popup is
			visible and has a filter callback key mapping is
			disabled.  Default value is TRUE.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item mapping @tab キーマッピングを許可します。FALSE で、かつポップアップが表示され、フィルターコールバックがある場合、キーマッピングは無効になっています。 デフォルト値は TRUE です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	filtermode	In which modes the filter is used (same flags as with
			|hasmapto()| plus "a"):
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item filtermode @tab どのモードでフィルターが使用されるか (|@ref{hasmapto()}| と同じフラグと "a"):
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				n	Normal mode
				v	Visual and Select mode
				x	Visual mode
				s	Select mode
				o	Operator-pending mode
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item n @tab ノーマルモード
@item v @tab ビジュアルまたは選択モード
@item x @tab ビジュアルモード
@item s @tab 選択モード
@item o @tab オペレータ待機モード
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
				i	Insert mode
				l	Language-Argument ("r", "f", "t", etc.)
				c	Command-line mode
				a	all modes
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item i @tab 挿入モード
@item l @tab 言語引数 ("r", "f", "t" 等)
@item c @tab コマンドラインモード
@item a @tab すべてのモード
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			The default value is "a".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルト値は "a" です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	callback	A callback that is called when the popup closes, e.g.
			when using |popup_filter_menu()|, see |popup-callback|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item callback @tab ポップアップが閉じたときに呼び出されるコールバック。例えば、|@ref{popup_filter_menu()}| を使用する場合、|@ref{popup-callback}| を参照してください。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Depending on the "zindex" the popup goes under or above other popups.  The
completion menu (|popup-menu|) has zindex 100.  For messages that occur for a
short time the suggestion is to use zindex 1000.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"zindex" に応じて、ポップアップは他のポップアップの下または上に移動します。補完メニュー (|@ref{popup-menu}|) は zindex 100 です。短時間表示されるメッセージについては、zindex 1000 を使用することを薦めます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default text wraps, which causes a line in {lines} to occupy more than one
screen line.  When "wrap" is FALSE then the text outside of the popup or
outside of the Vim window will not be displayed, thus truncated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトではテキストは折り返され、それによって @{lines@} の行が複数の画面行を占めるようになります。"wrap" が FALSE の場合、ポップアップの外側または Vim のウィンドウの外側のテキストは、表示されずに切り捨てられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP TEXT PROPERTIES					*popup-props*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-props}
@cindex popup-props
@unnumberedsubsec ポップアップテキストプロパティ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These are similar to the third argument of |prop_add()| except:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
これらは |@ref{prop_add()}| の第 3 引数と同じです。ただし:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- "lnum" is always the current line in the list
- "bufnr" is always the buffer of the popup
- "col" is in the Dict instead of a separate argument
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item "lnum" は常にリストの現在の行
@item "bufnr" は常にポップアップのバッファ
@item "col" は別の引数ではなく辞書内
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
So we get:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そういうわけで、以下が得られます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	col		starting column, counted in bytes, use one for the
			first column.
	length		length of text in bytes; can be zero
	end_lnum	line number for the end of the text
	end_col		column just after the text; not used when "length" is
			present; when {col} and "end_col" are equal, this is a
			zero-width text property
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item col @tab 開始桁 (バイト単位)。最初の桁には 1 を使用します
@item length @tab テキストの長さ (バイト)。ゼロ指定が可能
@item end_lnum @tab テキストの終わりの行番号
@item end_col @tab テキストの直後の桁。"length" が与えられた場合は使用されません。@{col@} と "end_col" が等しい場合、これは幅ゼロのテキストプロパティです
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	id		user defined ID for the property; when omitted zero is
			used
	type		name of the text property type, as added with
			|prop_type_add()|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item id @tab プロパティのユーザー定義 ID。省略時はゼロが使用されます
@item type @tab |@ref{prop_type_add()}| で追加されたテキストプロパティタイプの名前
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POSITION POPUP WITH TEXTPROP				*popup-textprop-pos*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-textprop-pos}
@cindex popup-textprop-pos
@unnumberedsubsec ポップアップと textprop の位置
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Positioning a popup next to a text property causes the popup to move when text
is inserted or deleted.  The popup functions like a tooltip.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティの隣にポップアップを配置すると、テキストが挿入または削除されたときにポップアップが移動します。ポップアップはツールチップのように機能します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
These steps are needed to make this work:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
この動作をさせるには、次の手順が必要です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Define a text property type, it defines the name. >
	call prop_type_add('popupMarker', {})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item テキストプロパティタイプを定義して、その名前を定義する:
@verbatim
call prop_type_add('popupMarker', {})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Place a text property at the desired text: >
	let lnum = {line of the text}
	let col = {start column of the text}
	let len = {length of the text}
	let propId = {arbitrary but unique number}
	call prop_add(lnum, col, #{
		\ length: len,
		\ type: 'popupMarker',
		\ id: propId,
		\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 目的のテキストにテキストプロパティを配置する:
@verbatim
let lnum = {line of the text}
let col = {start column of the text}
let len = {length of the text}
let propId = {arbitrary but unique number}
call prop_add(lnum, col, #{
        \ length: len,
        \ type: 'popupMarker',
        \ id: propId,
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- Create a popup: >
	let winid = popup_create('the text', #{
		\ pos: 'botleft',
		\ textprop: 'popupMarker',
		\ textpropid: propId,
		\ border: [],
		\ padding: [0,1,0,1],
		\ close: 'click',
		\ })
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ポップアップを作成する:
@verbatim
let winid = popup_create('the text', #{
        \ pos: 'botleft',
        \ textprop: 'popupMarker',
        \ textpropid: propId,
        \ border: [],
        \ padding: [0,1,0,1],
        \ close: 'click',
        \ })
@end verbatim
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
By default the popup is positioned at the corner of the text, opposite of the
"pos" specified for the popup.  Thus when the popup uses "botleft", the
bottom-left corner of the popup is positioned next to the top-right corner of
the text property:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは、ポップアップは、ポップアップに指定された "pos" の反対側のテキストの隅に配置されます。したがって、ポップアップが "botleft" を使用する場合、ポップアップの左下隅はテキストプロパティの右上隅の隣に配置されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			  +----------+
			  | the text |
			  +----------+
	just some PROPERTY as an example
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
                  +----------+
                  | the text |
                  +----------+
just some PROPERTY as an example
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here the text property is on "PROPERTY".  Move the popup to the left by
passing a negative "col" value to popup_create().  With "col: -5" you get:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ここで、テキストプロパティは "PROPERTY" にあります。負の "col" 値を popup_create() に渡すことにより、ポップアップを左に移動します。"col: -5" を使用すると、以下が得られます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		     +----------+
		     | the text |
		     +----------+
	just some PROPERTY as an example
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
             +----------+
             | the text |
             +----------+
just some PROPERTY as an example
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the text property moves out of view then the popup will be hidden.
If the window for which the popup was defined is closed, the popup is closed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティがビューの外に移動すると、ポップアップは非表示になります。ポップアップが定義されたウィンドウが閉じられた場合、ポップアップは閉じられます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the popup cannot fit in the desired position, it may show at a nearby
position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップが目的の位置に収まらない場合、近くの位置に表示される場合があります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some hints:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかのヒント:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- To avoid collision with other plugins the text property type name has to be
  unique.  You can also use the "bufnr" item to make it local to a buffer.
- You can leave out the text property ID if there is only ever one text
  property visible.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item 他のプラグインとの衝突を避けるために、テキストプロパティタイプ名は一意である必要があります。"bufnr" 項目を使用して、バッファに対してローカルにすることもできます。
@item テキストプロパティが 1 つしか表示されていない場合は、テキストプロパティ ID を省略できます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
- The popup may be in the way of what the user is doing, making it close with
  a click, as in the example above, helps for that.
- If the text property is removed the popup is closed.  Use something like
  this: >
	call prop_remove(#{type: 'popupMarker', id: propId})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item ポップアップは、ユーザーの操作の邪魔になる場合があります。上記の例のように、クリックするだけで閉じることができるのが役立ちます。
@item テキストプロパティが削除されると、ポップアップは閉じられます。このような感じで使用します:
@verbatim
call prop_remove(#{type: 'popupMarker', id: propId})
@end verbatim
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP FILTER						*popup-filter*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-filter}
@cindex popup-filter
@unnumberedsubsec ポップアップフィルタ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A callback that gets any typed keys while a popup is displayed.  The filter is
not invoked when the popup is hidden.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップが表示されている間にタイプされたキーを取得するコールバック。ポップアップが非表示になっていると、フィルタは呼び出されません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The filter can return TRUE to indicate the key has been handled and is to be
discarded, or FALSE to let Vim handle the key as usual in the current state.
In case it returns FALSE and there is another popup window visible, that
filter is also called.  The filter of the popup window with the highest zindex
is called first.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フィルタは、キーが処理されて破棄されることを示すために TRUE を返すか、または現在の状態で Vim に通常通りキーを処理させるために FALSE を返します。FALSE が返され、別のポップアップウィンドウが表示されている場合は、そのフィルタも呼び出されます。最も高い zindex を持つポップアップウィンドウのフィルタが最初に呼び出されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The filter function is called with two arguments: the ID of the popup and the
key as a string, e.g.: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
フィルタ関数は 2 つの引数、ポップアップ ID と文字列としてのキーで呼び出されます。例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	func MyFilter(winid, key)
	  if a:key == "\<F2>"
	    " do something
	    return 1
	  endif
	  if a:key == 'x'
	    call popup_close(a:winid)
	    return 1
	  endif
	  return 0
	endfunc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
func MyFilter(winid, key)
  if a:key == "\<F2>"
    " do something
    return 1
  endif
  if a:key == 'x'
    call popup_close(a:winid)
    return 1
  endif
  return 0
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
<							*popup-filter-mode*
The "filtermode" property can be used to specify in what mode the filter is
invoked.  The default is "a": all modes.  When using "nvi" Command-line mode
is not included, so that any command typed on the command line is not
filtered.  However, to get to Command-line mode the filter must not consume
":".  Just like it must not consume "v" to allow for entering Visual mode.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-filter-mode}
@cindex popup-filter-mode
"filtermode" プロパティを使用して、フィルターを呼び出すモードを指定できます。デフォルトは "a": すべてのモードです。"nvi" コマンドラインモードが含まれない場合、コマンドラインで入力されたコマンドはフィルタリングされません。ただし、コマンドラインモードに移行するには、フィルターで ":" を使用しないでください。ビジュアルモードに入るために "v" を消費してはいけないように。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*popup-mapping*
Normally the key is what results after any mapping, since the keys pass on as
normal input if the filter does not use it.  If the filter consumes all the
keys, set the "mapping" property to zero so that mappings do not get in the
way.  This is default for |popup_menu()| and |popup_dialog()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-mapping}
@cindex popup-mapping
通常、キーは、フィルターが使用しない場合にキーが通常の入力として渡されるため、マッピング後に結果として得られるものです。フィルターがすべてのキーを消費する場合、マッピングが邪魔にならないように、"mapping" プロパティを 0 に設定します。これは、|@ref{popup_menu()}| および |@ref{popup_dialog()}| のデフォルトです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Some recommended key actions:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
いくつかの推奨されるキー動作:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	x		close the popup (see note below)
	cursor keys	select another entry
	Tab		accept current suggestion
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .2 .8
@item x @tab ポップアップを閉じる (下記の note を参照)
@item cursor keys @tab 別のエントリを選択
@item Tab @tab 現在の提案を受け入れる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A mouse click arrives as <LeftMouse>.  The coordinates can be obtained with
|getmousepos()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
マウスクリックは <LeftMouse> として届きます。座標は |@ref{getmousepos()}| から得ることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim provides standard filters |popup_filter_menu()| and
|popup_filter_yesno()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim は標準のフィルタ |@ref{popup_filter_menu()}| と |@ref{popup_filter_yesno()}| を提供します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that "x" is the normal way to close a popup.  You may want to use Esc,
but since many keys start with an Esc character, there may be a delay before
Vim recognizes the Esc key.  If you do use Esc, it is recommended to set the
'ttimeoutlen' option to 100 and set 'timeout' and/or 'ttimeout'.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"x" はポップアップを閉じる通常の方法です。Esc を使いたくなるかもしれませんが、多くのキーは Esc 文字で始まるので、Vim が @key{Esc} キーを認識するまでに時間がかかることがあります。Esc を使用する場合は、'@option{ttimeoutlen}' オプションを 100 に設定し、'@option{timeout}' または '@option{ttimeout}'、あるいはその両方を設定することを薦めます。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP CALLBACK						*popup-callback*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-callback}
@cindex popup-callback
@unnumberedsubsec ポップアップコールバック
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A callback that is invoked when the popup closes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップが閉じたときに呼び出されるコールバック。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The callback is invoked with two arguments: the ID of the popup window and the
result, which could be an index in the popup lines, or whatever was passed as
the second argument of `popup_close()`.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
コールバックは 2 つの引数で呼び出されます: ポップアップウィンドウ ID と結果、それはポップアップ行のインデックスか、あるいは `@command{popup_close()}` の第 2 引数として渡されたものです。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the popup is force-closed, e.g. because the cursor moved or CTRL-C was
pressed, the number -1 is passed to the callback.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップが強制終了された場合、例えば、カーソルが移動したか @kbd{CTRL-C} が押された場合、-1 がコールバックに渡されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Example: >
	func SelectedColor(id, result)
	   echo 'choice made: ' .. a:result
	endfunc
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
func SelectedColor(id, result)
   echo 'choice made: ' .. a:result
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP SCROLLBAR						*popup-scrollbar*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-scrollbar}
@cindex popup-scrollbar
@unnumberedsubsec ポップアップスクロールバー
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
If the text does not fit in the popup a scrollbar is displayed on the right of
the window.  This can be disabled by setting the "scrollbar" option to zero.
When the scrollbar is displayed mouse scroll events, while the mouse pointer
is on the popup, will cause the text to scroll up or down as you would expect.
A click in the upper half of the scrollbar will scroll the text down one line.
A click in the lower half will scroll the text up one line.  However, this is
limited so that the popup does not get smaller.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストがポップアップの大きさに適応していないなら、ウィンドウの右側にスクロールバーが表示されます。これは "scrollbar" オプションをゼロに設定することで表示することができます。スクロールバーが表示されているときに、マウスポインタがポップアップの上にある間は、マウススクロールのイベントはあなたが期待する通りに、テキストを上下にスクロールさせる動作になります。スクロールバーの上半分をクリックすると、テキストを 1 行下にスクロールします。スクロールバーの下半分をクリックすると、テキストを 1 行上にスクロールします。しかしながら、これは制限されていますので、ポップアップは小さくはなりません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
POPUP MASK						*popup-mask*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-mask}
@cindex popup-mask
@unnumberedsubsec ポップアップマスク
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To minimize the text that the popup covers, parts of it can be made
transparent.  This is defined by a "mask" which is a list of lists, where each
list has four numbers:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ポップアップに被せるテキストを最小化するために、この一部分は透明化することができます。これは リストのリストである "mask" によって定義されています。それぞれのリストは 4 つの項目を持ちます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    col		start column, positive for counting from the left, 1 for
		leftmost, negative for counting from the right, -1 for
		rightmost
    endcol	last column, like "col"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item col @tab 桁の開始。左から数える正の値で 1 が一番左。右から数える負の値で -1 が一番右。
@item endcol @tab 桁の終わり。"col" と同様。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
    line	start line, positive for counting from the top, 1 for top,
		negative for counting from the bottom, -1 for bottom
    endline	end line, like "line"
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item line @tab 行の開始。上から数える正の値で 1 が一番上。下から数える負の値で -1 が一番下。
@item endline @tab 行の終わり。"line" と同様。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
For example, to make the last 10 columns of the last line transparent:
	[[-10, -1, -1, -1]]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例えば、最終行のうしろ 10 桁を透明化するには:
@verbatim
[[-10, -1, -1, -1]]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To make the four corners transparent:
	[[1, 1, 1, 1], [-1, -1, 1, 1], [1, 1, -1, -1], [-1, -1, -1, -1]]
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
4 つの角を透明化するには:
@verbatim
[[1, 1, 1, 1], [-1, -1, 1, 1], [1, 1, -1, -1], [-1, -1, -1, -1]]
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
4. Examples						*popup-examples*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup-examples}
@cindex popup-examples
@section 3. 例
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
TODO: more interesting examples
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
やること: 興味深い例をもっと
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
					*popup_dialog-example*
Prompt the user to press y/Y or n/N: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_dialog-example}
@cindex popup_dialog-example
@unnumberedsubsec ユーザーに y/Y か n/N を押すように促す:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	func MyDialogHandler(id, result)
	   if a:result
	      " ... 'y' or 'Y' was pressed
	   endif
	endfunc

	call popup_dialog('Continue? y/n', #{
		\ filter: 'popup_filter_yesno',
		\ callback: 'MyDialogHandler',
		\ })
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
func MyDialogHandler(id, result)
   if a:result
      " ... 'y' or 'Y' was pressed
   endif
endfunc

call popup_dialog('Continue? y/n', #{
        \ filter: 'popup_filter_yesno',
        \ callback: 'MyDialogHandler',
        \ })
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
					*popup_menu-shortcut-example*
Extend popup_filter_menu() with shortcut keys: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_menu-shortcut-example}
@cindex popup_menu-shortcut-example
@unnumberedsubsec popup_filter_menu() をショートカットで拡張できるようにする:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	call popup_menu(['Save', 'Cancel', 'Discard'], #{
		\ filter: 'MyMenuFilter',
		\ callback: 'MyMenuHandler',
		\ })

	func MyMenuFilter(id, key)
	  " Handle shortcuts
	  if a:key == 'S'
	     call popup_close(a:id, 1)
	     return 1
	  endif
	  if a:key == 'C'
	     call popup_close(a:id, 2)
	     return 1
	  endif
	  if a:key == 'D'
	     call popup_close(a:id, 3)
	     return 1
	  endif

	  " No shortcut, pass to generic filter
	  return popup_filter_menu(a:id, a:key)
	endfunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
call popup_menu(['Save', 'Cancel', 'Discard'], #{
        \ filter: 'MyMenuFilter',
        \ callback: 'MyMenuHandler',
        \ })

func MyMenuFilter(id, key)
  " Handle shortcuts
  if a:key == 'S'
     call popup_close(a:id, 1)
     return 1
  endif
  if a:key == 'C'
     call popup_close(a:id, 2)
     return 1
  endif
  if a:key == 'D'
     call popup_close(a:id, 3)
     return 1
  endif

  " No shortcut, pass to generic filter
  return popup_filter_menu(a:id, a:key)
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
					*popup_beval_example*
Example for using a popup window for 'ballooneval': >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{popup_beval_example}
@cindex popup_beval_example
@unnumberedsubsec '@option{ballooneval}' のためのポップアップウィンドウの使用例:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set ballooneval balloonevalterm
	set balloonexpr=BalloonExpr()
	let s:winid = 0
	let s:last_text = ''

	func BalloonExpr()
	  if s:winid && popup_getpos(s:winid) != {}
	    " previous popup window still shows
	    if v:beval_text == s:last_text
	      " Still the same text, keep the existing popup
	      return ''
	    endif
	    call popup_close(s:winid)
	  endif
	  let s:winid = popup_beval(v:beval_text, #{mousemoved: 'word'})
	  let s:last_text = v:beval_text
	  return ''
	endfunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
set ballooneval balloonevalterm
set balloonexpr=BalloonExpr()
let s:winid = 0
let s:last_text = ''

func BalloonExpr()
  if s:winid && popup_getpos(s:winid) != {}
    " previous popup window still shows
    if v:beval_text == s:last_text
      " Still the same text, keep the existing popup
      return ''
    endif
    call popup_close(s:winid)
  endif
  let s:winid = popup_beval(v:beval_text, #{mousemoved: 'word'})
  let s:last_text = v:beval_text
  return ''
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
If the text has to be obtained asynchronously return an empty string from the
expression function and call popup_beval() once the text is available.  In
this example simulated with a timer callback: >
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
ひとたびテキストが利用できるようにな、もしもテキストを非同期的に得られるなら、式関数から空の文字列を返し、popup_beval() を呼び出します。タイマーコールバックをシミュレートした例：
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	set ballooneval balloonevalterm
	set balloonexpr=BalloonExpr()
	let s:winid = 0
	let s:balloonText = ''

	func BalloonExpr()
	  if s:winid && popup_getpos(s:winid) != {}
	    " previous popup window still shows
	    if  v:beval_text == s:balloonText
	      " Still the same text, keep the existing popup
	      return ''
	    endif
	    call popup_close(s:winid)
	    let s:winid = 0
	  endif
	  " simulate an asynchronous lookup for the text to display
	  let s:balloonText = v:beval_text
	  call timer_start(100, 'ShowPopup')
	  return ''
	endfunc

	func ShowPopup(id)
	  let s:winid = popup_beval(s:balloonText, #{mousemoved: 'word'})
	endfunc
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
set ballooneval balloonevalterm
set balloonexpr=BalloonExpr()
let s:winid = 0
let s:balloonText = ''

func BalloonExpr()
  if s:winid && popup_getpos(s:winid) != {}
    " 以前のポップアップウィンドウはまだ見えています
    if  v:beval_text == s:balloonText
      " テキストを黙らせて、ポップアップはそのまま
      return ''
    endif
    call popup_close(s:winid)
    let s:winid = 0
  endif
  " テキストを表示するために非同期的なループをシミュレート
  let s:balloonText = v:beval_text
  call timer_start(100, 'ShowPopup')
  return ''
endfunc

func ShowPopup(id)
  let s:winid = popup_beval(s:balloonText, #{mousemoved: 'word'})
endfunc
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
