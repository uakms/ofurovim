@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node textprop.txt, , , 目次
@unnumbered テキストに適用されているプロパティを表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*textprop.txt*  For Vim version 8.1.  Last change: 2019 Jun 13


		  VIM REFERENCE MANUAL    by Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*textprop.txt*  For Vim バージョン 8.1.  Last change: 2019 Jun 13


                VIMリファレンスマニュアル    by Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Displaying text with properties attached.	*textprop* *text-properties*

THIS IS UNDER DEVELOPMENT - ANYTHING MAY STILL CHANGE  *E967*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{textprop}
@anchor{text-properties}
@cindex textprop
@cindex text-properties
プロパティが付加されたテキストを表示します。

@anchor{E967}
@erindex E967
THIS IS UNDER DEVELOPMENT - ANYTHING MAY STILL CHANGE

@{これは開発中です - 何かがまだ変更されるかもしれません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
What is not working yet:
- Adjusting column/length when inserting text
- Text properties spanning more than one line
- prop_find()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
まだ動作していないもの:
@itemize
@item テキストを挿入するときの桁/長さの調整
@item 複数の行にまたがるテキストプロパティ
@item prop_find()
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
1. Introduction			|text-prop-intro|
2. Functions			|text-prop-functions|
3. When text changes		|text-prop-changes|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. 前書き @tab |@ref{text-prop-intro}|
@item 2. 関数 @tab |@ref{text-prop-functions}|
@item 3. テキストが変更された場合 @tab |@ref{text-prop-changes}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
{not able to use text properties when the |+textprop| feature was
disabled at compile time}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{Vim が |@ref{+textprop}| 機能無効でコンパイルされたときはテキストプロパティを使用できません@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Introduction						*text-prop-intro*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{text-prop-intro}
@cindex text-prop-intro
@section 1. 前書き
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Text properties can be attached to text in a buffer.  They will move with the
text: If lines are deleted or inserted the properties move with the text they
are attached to.  Also when inserting/deleting text in the line before the
text property.  And when inserting/deleting text inside the text property, it
will increase/decrease in size.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティは、バッファ内のテキストに付加することができます。それらはテキストとともに移動します: 行が削除または挿入された場合、プロパティはそれらが付加されているテキストと共に移動します。テキストプロパティの前の行にテキストを挿入/削除する場合も同様です。また、テキストプロパティ内にテキストを挿入/削除すると、サイズが増減します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The main use for text properties is to highlight text.  This can be seen as a
replacement for syntax highlighting.  Instead of defining patterns to match
the text, the highlighting is set by a script, possibly using the output of an
external parser.  This only needs to be done once, not every time when
redrawing the screen, thus can be much faster, after the initial cost of
attaching the text properties.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティの主な用途は、テキストを強調表示することです。これは、構文ハイライトの置き換えと見ることができます。テキストと一致するようにパターンを定義する代わりに、スクリプトによって、おそらく外部パーサーの出力を使用して強調表示が設定されます。これは、画面を再描画するたびにではなく、一度だけおこなえば良いため、テキストプロパティを付加する最初のコスト以降ははるかに高速になります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Text properties can also be used for other purposes to identify text.  For
example, add a text property on a function name, so that a search can be
defined to jump to the next/previous function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティは、テキストを識別するための他の目的にも使用できます。たとえば、関数名にテキストプロパティを追加すると、検索を定義して次/前の関数にジャンプすることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A text property is attached at a specific line and column, and has a specified
length.  The property can span multiple lines.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティは、特定の行と桁に付加され、指定された長さを持ちます。プロパティは複数の行にまたがることができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
A text property has these fields:
	"id"		a number to be used as desired
	"type"		the name of a property type
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストプロパティには、次のフィールドがあります:
@multitable @columnfractions .3 .7
@item "id" @tab 必要に応じて使われる番号
@item "type" @tab プロパティタイプ名
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Property Types ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec プロパティタイプ
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*E971*
A text property normally has the name of a property type, which defines 
how to highlight the text.  The property type can have these entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E971}
@erindex E971
テキストプロパティは、通常、テキストをハイライトする方法を定義するプロパティタイプ名を持ちます。プロパティタイプには、次のエントリを含めることができます:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
	"highlight"	name of the highlight group to use
	"combine"	when TRUE the text property highlighting is combined
			with any syntax highlighting, when omitted or FALSE the
			text property highlighting replaces the syntax
			highlighting
	"priority"	when properties overlap, the one with the highest
			priority will be used.
	"start_incl"	when TRUE inserts at the start position will be
			included in the text property
	"end_incl"    	when TRUE inserts at the end position will be
			included in the text property
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item "highlight" @tab 使用するハイライトグループ名
@item "combine" @tab TRUE の場合はテキストプロパティのハイライトが構文ハイライトと組み合わされ、省略されるかFALSEの場合はテキストプロパティのハイライトが構文ハイライトに置き換わります。
@item "priority" @tab プロパティが重なるする場合は、優先度の高いものが使用されます。
@item "start_incl" @tab TRUE の場合、開始位置の挿入はテキストプロパティに含まれます。
@item "end_incl" @tab TRUE の場合、終了位置の挿入はテキストプロパティに含まれます。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Example ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec 例
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Suppose line 11 in a buffer has this text (excluding the indent):

	The number 123 is smaller than 4567.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
バッファの 11 行目にこのテキスト (インデントを除く) があるとします:
@verbatim
The number 123 is smaller than 4567.
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To highlight the numbers in this text: >
	call prop_type_add('number', {'highlight': 'Constant'})
	call prop_add(11, 12, {'length': 3, 'type': 'number'})
	call prop_add(11, 32, {'length': 4, 'type': 'number'})
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
このテキスト内の数字をハイライトするには:
@verbatim
call prop_type_add('number', {'highlight': 'Constant'})
call prop_add(11, 12, {'length': 3, 'type': 'number'})
call prop_add(11, 32, {'length': 4, 'type': 'number'})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Try inserting or deleting lines above the text, you will see that the text
properties stick to the text, thus the line number is adjusted as needed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストの上の行を挿入または削除してみると、テキストのプロパティがテキストに固定されていることが分かります。したがって、行番号は必要に応じて調整されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Setting "start_incl" and "end_incl" is useful when white space surrounds the
text, e.g. for a function name.  Using false is useful when the text starts
and/or ends with a specific character, such as the quote surrounding a string.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"start_incl" と "end_incl" を設定すると、空白がテキストを囲む場合に便利です。例えば、関数名のために。false を使用すると、文字列を囲む引用符などの特定の文字で開始または終了する場合に便利です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	func FuncName(arg) ~
	     ^^^^^^^^        property with start_incl and end_incl set

	var = "text"; ~
	      ^^^^^^	     property with start_incl and end_incl not set
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
func FuncName(arg) ~
     ^^^^^^^^        start_incl と end_incl が設定されたプロパティ

var = "text"; ~
      ^^^^^^         start_incl と end_incl が設定されていないプロパティ
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Nevertheless, when text is inserted or deleted the text may need to be parsed
and the text properties updated.  But this can be done asynchronously.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
しかしながら、テキストが挿入または削除されると、テキストを解析してテキストプロパティを更新する必要があります。しかし、これは非同期で行うことができます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Functions						*text-prop-functions*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{text-prop-functions}
@cindex text-prop-functions
@section 2. 関数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Manipulating text property types:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec テキストプロパティタイプの操作:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
prop_type_add({name}, {props})		define a new property type
prop_type_change({name}, {props})	change an existing property type
prop_type_delete({name} [, {props}])	delete a property type
prop_type_get([{name} [, {props}])	get property type values
prop_type_list([{props}])		get list of property types
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item prop_type_add(@{name@}, @{props@}) @tab 新しいプロパティタイプを定義
@item prop_type_change(@{name@}, @{props@}) @tab 既存のプロパティタイプを変更
@item prop_type_delete(@{name@} [, @{props@}]) @tab プロパティタイプを削除
@item prop_type_get([@{name@} [, @{props@}]) @tab プロパティタイプの値を取得
@item prop_type_list([@{props@}]) @tab プロパティタイプのリストを取得
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Manipulating text properties:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec テキストプロパティの操作:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
prop_add({lnum}, {col}, {props})  	add a text property
prop_clear({lnum} [, {lnum-end} [, {bufnr}]])
					remove all text properties
prop_find({props} [, {direction}])	search for a text property
prop_list({lnum} [, {props})  		text properties in {lnum}
prop_remove({props} [, {lnum} [, {lnum-end}]])
					remove a text property
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item prop_add(@{lnum@}, @{col@}, @{props@}) @tab テキストプロパティを追加
@item prop_clear(@{lnum@} [, @{lnum-end@} [, @{bufnr@}]]) @tab 全てのテキストプロパティを削除
@item prop_find(@{props@} [, @{direction@}]) @tab テキストプロパティを検索
@item prop_list(@{lnum@} [, @{props@}) @tab @{lnum@} のテキストプロパティ
@item prop_remove(@{props@} [, @{lnum@} [, @{lnum-end@}]]) @tab テキストプロパティを削除
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
3. When text changes				*text-prop-changes*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{text-prop-changes}
@cindex text-prop-changes
@section 3. テキストが変更された場合
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Vim will do its best to keep the text properties on the text where it was
attached.  When inserting or deleting text the properties after the change
will move accordingly.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
Vim はテキストプロパティをそれが付加されたテキストの上に置くように最善を尽くします。 テキストを挿入または削除するときは、変更後のプロパティもそれに従って移動します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When text is deleted and a text property no longer includes any text, it is
deleted.  However, a text property that was defined as zero-width will remain,
unless the whole line is deleted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストが削除され、テキストプロパティにテキストが含まれなくなった場合は削除されます。 ただし、行全体が削除されない限り、幅ゼロとして定義されたテキストプロパティは残ります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When using replace mode, the text properties stay on the same character
positions, even though the characters themselves change.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
置換モードを使用すると、文字自体が変更しても、テキストプロパティは同じ文字位置に留まります。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
To update text properties after the text was changed, install a callback with
`listener_add()`.  E.g, if your plugin does spell checking, you can have the
callback update spelling mistakes in the changed text.  Vim will move the
properties below the changed text, so that they still highlight the same text,
thus you don't need to update these.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
テキストが変更された後にテキストのプロパティを更新するには、`@command{listener_add()}` でコールバックを設置します。例えば、もしあなたのプラグインがスペルチェックをしているのなら、変更されたテキスト内のスペルミスをコールバックで更新することができます。変更されたテキストの下にプロパティが移動し、同じテキストがハイライトされるため、これらを更新する必要はありません。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Text property columns are not updated: ~
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@unnumberedsubsec テキストプロパティの桁が更新されません:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
- When setting the line with |setline()| or through an interface, such as Lua,
  Tcl or Python.  Vim does not know what text got inserted or deleted.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@itemize
@item |@ref{setline()}| または Lua, Tcl または Python などのインターフェイスを介して行を設定した場合。Vim はどのテキストが挿入または削除されたのかを知りません。
@end itemize
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
