@ifset JA  @c ----------- v -----------  JA  -*- tab-width: 8 -*-
@node sign.txt, , , 目次
@unnumbered デバッグ用の目印
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
*sign.txt*      For Vim version 8.1.  Last change: 2019 Nov 12


		  VIM REFERENCE MANUAL    by Gordon Prieur
					  and Bram Moolenaar
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@verbatim
*sign.txt*      For Vim バージョン 8.1.  Last change: 2019 Nov 12


                VIMリファレンスマニュアル    by Gordon Prieur
                                             and Bram Moolenaar
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
Sign Support Features				*sign-support*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-support}
@cindex sign-support
目印機能
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Introduction				|sign-intro|
2. Commands				|sign-commands|
3. Functions				|sign-functions-details|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .5 .5
@item 1. 機能紹介 @tab |@ref{sign-intro}|
@item 2. コマンド @tab |@ref{sign-commands}|
@item 3. 関数 @tab |@ref{sign-functions-details}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
{only available when compiled with the |+signs| feature}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{|@ref{+signs}| 機能付きでコンパイルした場合にのみ利用可能@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
1. Introduction					*sign-intro* *signs*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-intro}
@anchor{signs}
@cindex sign-intro
@cindex signs
@section 1. 機能紹介
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When a debugger or other IDE tool is driving an editor it needs to be able
to give specific highlights which quickly tell the user useful information
about the file.  One example of this would be a debugger which had an icon
in the left-hand column denoting a breakpoint.  Another example might be an
arrow representing the Program Counter (PC).  The sign features allow both
placement of a sign, or icon, in the left-hand side of the window and
definition of a highlight which will be applied to that line.  Displaying the
sign as an image is most likely only feasible in gvim (although Sun
Microsystem's dtterm does support this it's the only terminal emulator I know
of which does).  A text sign and the highlight should be feasible in any color
terminal emulator.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デバッガやその他の IDE @{訳注: 統合開発環境@} ツールはエディタをコントロールする。そのエディタはユーザーにファイルについての役立つ情報を素早く提供するために特別なハイライトを表示できる必要がある。

一例としては左のカラムにブレークポイントを示すアイコンを持つデバッガを挙げることができる。別の例としてはプログラムカウンタ (PC) を示す矢印が挙げられる。

この目印機能により、ウィンドウの左端に目印やアイコン画像を置いたり、ある行に適用される強調を定義することができるようになる。画像による目印は gvim でだけ利用で可能である (しかし Sun Microsystems の dtterm はそれをサポートしている。これは著者が知り得る限りで唯一の端末エミュレータである)。

テキストによる目印と色による強調表示は、あらゆるカラーの端末エミュレータで利用できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Signs and highlights are not useful just for debuggers.  Sun's Visual
WorkShop uses signs and highlights to mark build errors and SourceBrowser
hits.  Additionally, the debugger supports 8 to 10 different signs and
highlight colors, see |NetBeans|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印と強調はデバッガにとってだけ便利なわけではない。Sun の Visual WorkShop はビルドエラーと SourceBrowser の検索一致箇所を示すのに目印と強調を使用する。加えて、デバッガは 8 個から 10 個の異なる目印と強調色をサポートする。|@ref{NetBeans}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
There are two steps in using signs:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印を使うには 2 つの段階がある:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
1. Define the sign.  This specifies the image, text and highlighting.  For
   example, you can define a "break" sign with an image of a stop roadsign and
   text "!!".
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@enumerate
@item 目印を定義する。画像とテキストと強調色を指定する。例えば "break" の目印として道路の停止の画像を使用し、テキストとして "!!" を使用して定義することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
2. Place the sign.  This specifies the file and line number where the sign is
   displayed.  A defined sign can be placed several times in different lines
   and files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item 目印を設置する。目印を設置したいファイルと行番号を指定する。定義された目印は異なるファイルと異なる位置に複数箇所に置くことができる。
@end enumerate
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*sign-column*
When signs are defined for a file, Vim will automatically add a column of two
characters to display them in.  When the last sign is unplaced the column
disappears again.  This behavior can be changed with the 'signcolumn' option.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-column}
@cindex sign-column
ファイルに対して目印が定義されると、Vim は自動的に表示画面に 2 文字分のカラムを付け加える。全てのサインが取り除かれるとそのカラムは再度消滅する。この動作は '@option{signcolumn}' オプションにより変更可能できる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The color of the column is set with the SignColumn highlight group
|hl-SignColumn|.  Example to set the color: >

	:highlight SignColumn guibg=darkgrey
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
そのカラムは SignColumn の色を使う |@ref{hl-SignColumn}| が設定される。色を設定するには次のようにする:
@verbatim
:highlight SignColumn guibg=darkgrey
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*sign-identifier*
Each placed sign is identified by a number called the sign identifier. This
identifier is used to jump to the sign or to remove the sign. The identifier
is assigned when placing the sign using the |:sign-place| command or the
|sign_place()| function. Each sign identifier should be a unique number. If
multiple placed signs use the same identifier, then jumping to or removing a
sign becomes unpredictable. To avoid overlapping identifiers, sign groups can
be used. The |sign_place()| function can be called with a zero sign identifier
to allocate the next available identifier.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-identifier}
@cindex sign-identifier
設置された各目印は、目印 ID と呼ばれる番号によって識別される。この識別子は、目印にジャンプするため、または目印を解除するために使用される。この識別子は、|@ref{:sign-place}| コマンドまたは |@ref{sign_place()}| 関数を使用して目印を設置するときに割り当てられる。各目印 ID は固有の番号でなければならない。複数の設置された目印が同じ識別子を使用する場合、目印へのジャンプまたは目印の解除は予測不可能になる。重複する識別子を避けるために、目印グループを使うことができる。|@ref{sign_place()}| 関数は、次に使用可能な識別子を割り当てるために、目印 ID を 0 で呼び出すことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*sign-group*
Each placed sign can be assigned to either the global group or a named group.
When placing a sign, if a group name is not supplied, or an empty string is
used, then the sign is placed in the global group. Otherwise the sign is
placed in the named group. The sign identifier is unique within a group. The
sign group allows Vim plugins to use unique signs without interfering with
other plugins using signs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-group}
@cindex sign-group
設置された各目印は、グローバルグループまたは名前付きグループのどちらにも割り当てることができる。目印を設置するときに、グループ名が指定されていない場合、または空の文字列が使用されている場合は、目印はグローバルグループに設置される。それ以外の場合は名前付きグループに設置される。目印 ID はグループ内で一意である。グループを使うと、Vim プラグインは他のプラグインを妨害することなく独自の目印を使うことができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
The group name "popupmenu" is used by popup windows where 'cursorline' is set.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
"@var{popupmenu}" のグループ名は '@option{cursorline}' で設定されたポップアップウィンドウで使われます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*sign-priority*
Each placed sign is assigned a priority value. When multiple signs are placed
on the same line, the attributes of the sign with the highest priority is used
independent of the sign group. The default priority for a sign is 10. The
priority is assigned at the time of placing a sign.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-priority}
@cindex sign-priority
設置された各目印には、優先順位値が割り当てられる。同じ行に複数の目印が設置されている場合、最も優先順位の高い目印の属性が目印のグループとは独立して使用される。デフォルトの優先順位は 10 である。優先順位は、目印の設置時に割り当てられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
When the line on which the sign is placed is deleted, the sign is moved to the
next line (or the last line of the buffer, if there is no next line).  When
the delete is undone the sign does not move back.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印が置かれている行が削除されると、その目印は次の行 (または次の行がない場合はバッファの最後の行) に移動される。削除が元に戻されても、目印は戻らない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
==============================================================================
2. Commands					*sign-commands* *:sig* *:sign*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-commands}
@anchor{:sig}
@anchor{:sign}
@cindex sign-commands
@pindex :sig
@pindex :sign
@section 2. コマンド
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Here is an example that places a sign "piet", displayed with the text ">>", in
line 23 of the current file: >
	:sign define piet text=>> texthl=Search
	:exe ":sign place 2 line=23 name=piet file=" . expand("%:p")
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の例ではカレントファイルの 23 行目に "piet" という目印を置いている。目印は ">>" という文字をともなって表示される。
@verbatim
:sign define piet text=>> texthl=Search
:exe ":sign place 2 line=23 name=piet file=" . expand("%:p")
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
And here is the command to delete it again: >
	:sign unplace 2
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
それをもう一度消すコマンドを追記しておく:
@verbatim
:sign unplace 2
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
Note that the ":sign" command cannot be followed by another command or a
comment.  If you do need that, use the |:execute| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@quotation
@strong{Note:} @*
"@command{:sign}" コマンドの後には他のコマンドを続けられないことに注意すること。そのようにするには |@ref{:execute}| を使う。
@end quotation
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DEFINING A SIGN.			*:sign-define* *E255* *E160* *E612*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-define}
@anchor{E255}
@anchor{E160}
@anchor{E612}
@cindex :sign-define
@erindex E255
@erindex E160
@erindex E612
@unnumberedsubsec 目印を定義する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_define()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_define()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign define {name} {argument}...
		Define a new sign or set attributes for an existing sign.
		The {name} can either be a number (all digits) or a name
		starting with a non-digit.  Leading zeros are ignored, thus
		"0012", "012" and "12" are considered the same name.
		About 120 different signs can be defined.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign define @{name@} @{argument@}...
新しい目印を定義するか既にある目印に属性を設定する。@{name@} は番号 (全て数字) か非数字で始まる名前である。先行するゼロは無視されるので、"0012" と "012" と "12" は同じ名前として解釈される。約 120 の異なる目印を定義することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Accepted arguments:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
利用可能な引数:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	icon={bitmap}
		Define the file name where the bitmap can be found.  Should be
		a full path.  The bitmap should fit in the place of two
		characters.  This is not checked.  If the bitmap is too big it
		will cause redraw problems.  Only GTK 2 can scale the bitmap
		to fit the space available.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item icon=@{bitmap@}
目印に使用する画像ファイルを定義する。フルパス指定したほうが良い。画像は 2 文字の幅に納まるものでなければならない。これはチェックされない。大きすぎる画像を使用すると再描画の際に問題が生じることがある。GTK2 では画像がちょうど納まるように調整される。

@{訳注: Windows では自動的に調整される@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			toolkit		supports ~
			GTK 1		pixmap (.xpm)
			GTK 2		many
			Motif		pixmap (.xpm)
			Win32		.bmp, .ico, .cur
					pixmap (.xpm) |+xpm_w32|
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@headitem toolkit @tab サポートフォーマット
@item GTK 1 @tab pixmap (.xpm)
@item GTK 2 @tab many
@item Motif @tab pixmap (.xpm)
@item Win32 @tab .bmp, .ico, .cur pixmap (.xpm) |@ref{+xpm_w32}|
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	linehl={group}
		Highlighting group used for the whole line the sign is placed
		in.  Most useful is defining a background color.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item linehl=@{group@}
目印が設置された行全体を強調表示するのに使われるハイライトグループを定義する。背景色を定義するのに良く利用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	text={text}						*E239*
		Define the text that is displayed when there is no icon or the
		GUI is not being used.  Only printable characters are allowed
		and they must occupy one or two display cells.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E239}
@erindex E239
@item text=@{text@}
アイコンが無いか GUI ではない時に表示されるテキストを定義する。表示可能な文字のみ指定できる。これは表示幅で 1 文字か 2 文字分の文字を指定できる。

@{訳注: アルファベットなら 1 or 2 文字。漢字なら 1 文字@}
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
	texthl={group}
		Highlighting group used for the text item.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item texthl=@{group@}
テキスト部分に使用されるハイライトグループ。
@end table
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
DELETING A SIGN						*:sign-undefine* *E155*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-undefine}
@anchor{E155}
@cindex :sign-undefine
@erindex E155
@unnumberedsubsec (定義した) 目印を削除する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_undefine()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_undefine()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign undefine {name}
		Deletes a previously defined sign.  If signs with this {name}
		are still placed this will cause trouble.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign undefine @{name@}
既に定義された目印を削除する。@{name@} という名前の目印がまだ設置されたままの場合はトラブルを引き起こす。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------



@ifset EN
LISTING SIGNS						*:sign-list* *E156*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-list}
@anchor{E156}
@cindex :sign-list
@erindex E156
@unnumberedsubsec (定義した) 目印を一覧表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_getdefined()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_getdefined()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign list	Lists all defined signs and their attributes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign list
全部の定義済み目印とその属性を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign list {name}
		Lists one defined sign and its attributes.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign list @{name@}
@{name@} という名で定義された目印とその属性を表示する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
PLACING SIGNS						*:sign-place* *E158*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-place}
@anchor{E158}
@cindex :sign-place
@erindex E158
@unnumberedsubsec 目印を設置する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_place()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_place()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place {id} line={lnum} name={name} file={fname}
		Place sign defined as {name} at line {lnum} in file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign place @{id@} line=@{lnum@} name=@{name@} file=@{fname@}
@{name@} として定義された目印をファイル @{fname@} の @{lnum@} 行目に設置する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*:sign-fname*
		The file {fname} must already be loaded in a buffer.  The
		exact file name must be used, wildcards, $ENV and ~ are not
		expanded, white space must not be escaped.  Trailing white
		space is ignored.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-fname}
@cindex :sign-fname
ファイル名 @{fname@} は既に読込済みのバッファでなければならない。正確なファイル名でなければならず、ワイルドカードや環境変数そして "~" は展開されない。空白はエスケープされない。末尾の空白は無視される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The sign is remembered under {id}, this can be used for
		further manipulation.  {id} must be a number.
		It's up to the user to make sure the {id} is used only once in
		each file (if it's used several times unplacing will also have
		to be done several times and making changes may not work as
		expected).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印は @{id@} という識別子で記憶され、後の操作に使用される。@{id@} は番号でなければならない。

ユーザーは自分で、1 つの @{id@} が各々のファイルに1つしか無いように気をつけなければならない (同じ @{id@} を複数回設置したときには解除も同じ回数だけ行う必要がある。同じ @{id@} を使うことで目印の位置を変更しようという試みはうまく行かない)。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The following optional sign attributes can be specified before
		"file=":
			group={group}	Place sign in sign group {group}
			priority={prio}	Assign priority {prio} to sign
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
次の任意の目印属性は、"file=" の前に指定できる:
@multitable @columnfractions .4 .6
@item group=@{group@} @tab 目印を目印グループ @{group@} に設置する
@item priority=@{prio@} @tab  目印に優先順位 @{prio@} を割り当てる
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		By default, the sign is placed in the global sign group.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは、目印はグローバル目印グループに設置される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		By default, the sign is assigned a default priority of 10. To
		assign a different priority value, use "priority={prio}" to
		specify a value.  The priority is used to determine the sign
		that is displayed when multiple signs are placed on the same
		line.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
デフォルトでは、目印にデフォルトの優先順位 10 が割り当てられている。別の優先順位値を割り当てるには、"priority=@{prio@}" を使用して値を指定する。優先順位は、複数の目印が同じ行に設置されているときに、表示される目印を決定するために使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			:sign place 5 line=3 name=sign1 file=a.py
			:sign place 6 group=g2 line=2 name=sign2 file=x.py
			:sign place 9 group=g2 priority=50 line=5
							\ name=sign1 file=a.py
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
:sign place 5 line=3 name=sign1 file=a.py
:sign place 6 group=g2 line=2 name=sign2 file=x.py
:sign place 9 group=g2 priority=50 line=5
                                \ name=sign1 file=a.py
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
:sign place {id} line={lnum} name={name} [buffer={nr}]
		Same, but use buffer {nr}.  If the buffer argument is not
		given, place the sign in the current buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place @{id@} line=@{lnum@} name=@{name@} [buffer=@{nr@}]
上に同じ。バッファ番号を使用していることが異なる。buffer 引数が与えられていない場合は、現在のバッファに目印を設置する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
							*E885*
:sign place {id} name={name} file={fname}
		Change the placed sign {id} in file {fname} to use the defined
		sign {name}.  See remark above about {fname} |:sign-fname|.
		This can be used to change the displayed sign without moving
		it (e.g., when the debugger has stopped at a breakpoint).
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E885}
@erindex E885
@item :sign place @{id@} name=@{name@} file=@{fname@}
ファイル @{fname@} に @{id@} で設置された目印を、@{name@} で定義されている目印に変更する。@{fname@} については上述の |@ref{:sign-fname}| を参照すること。

これは既に設置された目印を動かすことなく変更するのに使われる。(例: デバッガがブレークポイントで停止した時)
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The optional "group={group}" attribute can be used before
		"file=" to select a sign in a particular group.  The optional
		"priority={prio}" attribute can be used to change the priority
		of an existing sign.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
任意の "group=@{group@}" 属性を "file=" の前に使用して、特定のグループの目印を選択することができる。任意の "priority=@{prio@}" 属性を使用して、既存の目印の優先順位を変更することができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place {id} name={name} [buffer={nr}]
		Same, but use buffer {nr}.  If the buffer argument is not
		given, use the current buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place @{id@} name=@{name@} buffer=@{nr@}
上に同じ。バッファ番号を使用していることが異なる。buffer 引数が与えられていない場合は、現在のバッファを使用する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
REMOVING SIGNS						*:sign-unplace* *E159*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-unplace}
@anchor{E159}
@cindex :sign-unplace
@erindex E159
@unnumberedsubsec (設置した) 目印を解除する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_unplace()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_unplace()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} file={fname}
		Remove the previously placed sign {id} from file {fname}.
		See remark above about {fname} |:sign-fname|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign unplace @{id@} file=@{fname@}
ファイル @{fname@} に @{id@} で設置された目印を解除する。@{fname@} については上述の |@ref{:sign-fname}| を参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group={group} file={fname}
		Same but remove the sign {id} in sign group {group}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=@{group@} file=@{fname@}
上に同じだが、目印グループ @{group@} の目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group=* file={fname}
		Same but remove the sign {id} from all the sign groups.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=* file=@{fname@}
上に同じだが、全ての目印グループから目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * file={fname}
		Remove all placed signs in file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * file=@{fname@}
ファイル @{fname@} に設置された目印をすべて解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group={group} file={fname}
		Remove all placed signs in group {group} from file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=@{group@} file=@{fname@}
ファイル @{fname@} からグループ @{group@} に設置されている全ての目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group=* file={fname}
		Remove all placed signs in all the groups from file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=* file=@{fname@}
ファイル @{fname@} から全てのグループに設置されている全ての目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} buffer={nr}
		Remove the previously placed sign {id} from buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} buffer=@{nr@}
バッファ @{nr@} に @{id@} で設置された目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group={group} buffer={nr}
		Remove the previously placed sign {id} in group {group} from
		buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=@{group@} buffer=@{nr@}
バッファ @{nr@} からグループ @{group@} の以前に設置された目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group=* buffer={nr}
		Remove the previously placed sign {id} in all the groups from
		buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=* buffer=@{nr@}
バッファ @{nr@} から、全てのグループで以前に設置された目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * buffer={nr}
		Remove all placed signs in buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * buffer=@{nr@}
バッファ @{nr@} に設置された目印をすべて解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group={group} buffer={nr}
		Remove all placed signs in group {group} from buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=@{group@} buffer=@{nr@}
グループ @{group@} に設置されている全ての目印をバッファ @{nr@} から解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group=* buffer={nr}
		Remove all placed signs in all the groups from buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=* buffer=@{nr@}
全てのグループに設置されている全ての目印をバッファ @{nr@} から解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id}
		Remove the previously placed sign {id} from all files it
		appears in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@}
@{id@} で設置された目印を、全てのファイルから削除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group={group}
		Remove the previously placed sign {id} in group {group} from
		all files it appears in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=@{group@}
表示されている全てのファイルから、グループ @{group@} の以前に設置された目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace {id} group=*
		Remove the previously placed sign {id} in all the groups from
		all the files it appears in.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace @{id@} group=*
表示されている全てのファイルから、全てのグループの以前に設置された目印 ID @{id@} を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace *
		Remove all placed signs in the global group from all the files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace *
全てのファイルからグローバルグループの設置された全ての目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group={group}
		Remove all placed signs in group {group} from all the files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=@{group@}
全てのファイルからグループ @{group@} の設置された全ての目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace * group=*
		Remove all placed signs in all the groups from all the files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace * group=*
全てのファイルから全てのグループの設置された全ての目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace
		Remove a placed sign at the cursor position. If multiple signs
		are placed in the line, then only one is removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace
カーソル位置の設置された目印を解除する。複数の目印が行内に設置されている場合は、1 つだけが削除される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace group={group}
		Remove a placed sign in group {group} at the cursor
		position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace group=@{group@}
カーソル位置のグループ @{group@} の設置された目印を解除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign unplace group=*
		Remove a placed sign in any group at the cursor position.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign unplace group=*
カーソル位置の全てのグループの設置された目印を解除する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
LISTING PLACED SIGNS					*:sign-place-list*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-place-list}
@cindex :sign-place-list
@unnumberedsubsec (設置した) 目印を一覧表示する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_getplaced()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script 関数については |@ref{sign_getplaced()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place file={fname}
		List signs placed in file {fname}.
		See remark above about {fname} |:sign-fname|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign place file=@{fname@}
ファイル @{fname@} に設置されている目印を一覧表示する。@{fname@} については上述の |@ref{:sign-fname}| を参照すること。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group={group} file={fname}
		List signs in group {group} placed in file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=@{group@} file=@{fname@}
ファイル @{fname@} に設置されているグループ @{group@} の目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group=* file={fname}
		List signs in all the groups placed in file {fname}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=* file=@{fname@}
ファイル @{fname@} に設置されている全てのグループの目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place buffer={nr}
		List signs placed in buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place buffer=@{nr@}
バッファ @{nr@} に設置されている目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group={group} buffer={nr}
		List signs in group {group} placed in buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=@{group@} buffer=@{nr@}
バッファ @{nr@} に設置されているグループ @{group@} の目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group=* buffer={nr}
		List signs in all the groups placed in buffer {nr}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=* buffer=@{nr@}
バッファ @{nr@} に設置されている全てのグループの目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place	List placed signs in the global group in all files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place
全てのファイルに設置されているグローバルグループの目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group={group}
		List placed signs with sign group {group} in all files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=@{group@}
全てのファイルの目印グループ @{group@} に設置されている目印を一覧表示する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign place group=*
		List placed signs in all sign groups in all files.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign place group=*
全てのファイルの全ての目印グループに設置されている目印を一覧表示する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
JUMPING TO A SIGN					*:sign-jump* *E157*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{:sign-jump}
@anchor{E157}
@cindex :sign-jump
@erindex E157
@unnumberedsubsec (設置した) 目印へ移動する
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
See |sign_jump()| for the equivalent Vim script function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
同等の Vim script の関数については |@ref{sign_jump()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign jump {id} file={fname}
		Open the file {fname} or jump to the window that contains
		{fname} and position the cursor at sign {id}.
		See remark above about {fname} |:sign-fname|.
		If the file isn't displayed in window and the current file can
		not be |abandon|ed this fails.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@item :sign jump @{id@} file=@{fname@}
ファイル @{fname@} を開くか、@{fname@} を編集中のウィンドウへ移動し、目印 @{id@} の位置へカーソルを移動させる。

@{fname@} については上述の |@ref{:sign-fname}| を参照すること。

ファイルがウィンドウに表示されておらず、現在のファイルを放棄 |@ref{abandon}| できない時には、これは失敗する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign jump {id} group={group} file={fname}
		Same but jump to the sign in group {group}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign jump @{id@} group=@{group@} file=@{fname@}
上に同じだが、グループ @{group@} の目印に移動する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign jump {id} [buffer={nr}]					*E934*
		Same, but use buffer {nr}.  This fails if buffer {nr} does not
		have a name. If the buffer argument is not given, use the
		current buffer.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{E934}
@erindex E934
@item :sign jump @{id@} [buffer=@{nr@}]
上に同じだが、バッファ @{nr@} を使う。バッファ @{nr@} が名前を持っていない場合には失敗する。buffer 引数が与えられていない場合は、現在のバッファを使用する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
:sign jump {id} group={group} [buffer={nr}]
		Same but jump to the sign in group {group}
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item :sign jump @{id@} group=@{group@} [buffer=@{nr@}]
上に同じだが、グループ @{group@} の目印に移動する。
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------


@ifset EN
==============================================================================
3. Functions					*sign-functions-details*
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign-functions-details}
@cindex sign-functions-details
@section 3. 関数
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
sign_define({name} [, {dict}])				*sign_define()*
sign_define({list})
		Define a new sign named {name} or modify the attributes of an
		existing sign.  This is similar to the |:sign-define| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@table @asis
@anchor{sign_define()}
@findex sign_define()
@item sign_define(@{name@} [, @{dict@}])
@itemx sign_define(@{list@})
@{name@} という名前の新しい目印を定義するか、既存の目印の属性を変更する。これは |@ref{:sign-define}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Prefix {name} with a unique text to avoid name collisions.
		There is no {group} like with placing signs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
名前の衝突を避けるために、@{name@} に一意のテキストを付けること。目印を設置するような @{group@} はない。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The {name} can be a String or a Number.  The optional {dict}
		argument specifies the sign attributes.  The following values
		are supported:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@} は文字列または数値である。任意の @{dict@} 引数は目印属性を指定する。以下の値がサポートされている:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		   icon		full path to the bitmap file for the sign.
		   linehl	highlight group used for the whole line the
				sign is placed in.
		   text		text that is displayed when there is no icon
				or the GUI is not being used.
		   texthl	highlight group used for the text item
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item icon @tab 目印用のビットマップファイルへのフルパス。
@item linehl @tab 目印が設置されている行全体に使用されるハイライトグループ。
@item text @tab アイコンがない場合、または GUI が使用されていない場合に表示されるテキスト。
@item texthl @tab text 項目に使用されるハイライトグループ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the sign named {name} already exists, then the attributes
		of the sign are updated.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@} という名前の目印がすでに存在する場合は、その目印の属性が更新される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The one argument {list} can be used to define a list of signs.
		Each list item is a dictionary with the above items in {dict}
		and a 'name' item for the sign name.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つの引数 @{list@} は目印のリストを定義するのに使うことができます。リストの項目はそれぞれ上記 @{dict@} 内の項目をもつ辞書です。'name' 項目は目印の名前です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns 0 on success and -1 on failure.  When the one argument
		{list} is used, then returns a List of values one for each
		defined sign.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
成功のときは 0、失敗のときは -1 を返します。1 つの引数 @{list@} が使用されたときは、それぞれに定義された目印の値のリストを返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			call sign_define("mySign", {
				\ "text" : "=>",
				\ "texthl" : "Error",
				\ "linehl" : "Search"})
			call sign_define([
				\ {'name' : 'sign1',
				\  'text' : '=>'},
				\ {'name' : 'sign2',
				\  'text' : '!!'}
				\ ])
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
call sign_define("mySign", {
        \ "text" : "=>",
        \ "texthl" : "Error",
        \ "linehl" : "Search"})
call sign_define([
        \ {'name' : 'sign1',
        \  'text' : '=>'},
        \ {'name' : 'sign2',
        \  'text' : '!!'}
        \ ])
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignList()->sign_define()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignList()->sign_define()
@end verbatim                
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
sign_getdefined([{name}])				*sign_getdefined()*
		Get a list of defined signs and their attributes.
		This is similar to the |:sign-list| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_getdefined()}
@findex sign_getdefined()
@item sign_getdefined([@{name@}])
定義済みの目印とその属性のリストを取得する。これは |@ref{:sign-list}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the {name} is not supplied, then a list of all the defined
		signs is returned. Otherwise the attribute of the specified
		sign is returned.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@} が指定されていない場合は、定義されているすべての目印のリストが返される。そうでなければ、指定された目印の属性が返される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Each list item in the returned value is a dictionary with the
		following entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
戻り値の各リスト項目は、次のエントリを持つ辞書である:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		   icon		full path to the bitmap file of the sign
		   linehl	highlight group used for the whole line the
				sign is placed in.
		   name		name of the sign
		   text		text that is displayed when there is no icon
				or the GUI is not being used.
		   texthl	highlight group used for the text item
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item icon @tab 目印用のビットマップファイルへのフルパス。
@item linehl @tab 目印が設置されている行全体に使用されるハイライトグループ。
@item name @tab 目印の名前
@item text @tab アイコンがない場合、または GUI が使用されていない場合に表示されるテキスト。
@item texthl @tab text 項目に使用されるハイライトグループ
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns an empty List if there are no signs and when {name} is
		not found.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印がなく、@{name@} が見つからない場合は、空の List を返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Get a list of all the defined signs
			echo sign_getdefined()

			" Get the attribute of the sign named mySign
			echo sign_getdefined("mySign")
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" すべての定義済み目印のリストを取得する
echo sign_getdefined()

" mySignという名前の目印の属性を取得する
echo sign_getdefined("mySign")
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignList()->sign_getdefined()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignList()->sign_getdefined()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
sign_getplaced([{expr} [, {dict}]])			*sign_getplaced()*
		Return a list of signs placed in a buffer or all the buffers.
		This is similar to the |:sign-place-list| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_getplaced()}
@pindex sign_getplaced()
@item sign_getplaced([@{expr@} [, @{dict@}]])
バッファまたはすべてのバッファに設置されている目印のリストを返す。これは |@ref{:sign-place-list}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the optional buffer name {expr} is specified, then only the
		list of signs placed in that buffer is returned.  For the use
		of {expr}, see |bufname()|. The optional {dict} can contain
		the following entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
任意のバッファ名 @{expr@} が指定されている場合、そのバッファに設置されている目印のリストだけが返される。@{expr@} の使い方については |@ref{bufname()}| を参照。任意の @{dict@} には、以下のエントリを含めることができる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		   group	select only signs in this group
		   id		select sign with this identifier
		   lnum		select signs placed in this line. For the use
				of {lnum}, see |line()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item group @tab このグループの目印のみを選択する
@item id @tab この識別子を持つ目印を選択する
@item lnum @tab この行に設置されている目印を選択する。@{lnum@} の使い方については |@ref{line()}| を参照。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If {group} is '*', then signs in all the groups including the
		global group are returned. If {group} is not supplied or is an
		empty string, then only signs in the global group are
		returned.  If no arguments are supplied, then signs in the
		global group placed in all the buffers are returned.
		See |sign-group|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{group@} が '*' の場合、グローバルグループを含むすべてのグループの目印が返される。@{group@} が指定されていないか、空の文字列の場合は、グローバルグループ内の目印のみが返される。引数が指定されていない場合は、すべてのバッファに設置されているグローバルグループ内の目印が返される。

|@ref{sign-group}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Each list item in the returned value is a dictionary with the
		following entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
戻り値の各リスト項目は、次のエントリを持つ辞書である:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			bufnr	number of the buffer with the sign
			signs	list of signs placed in {bufnr}. Each list
				item is a dictionary with the below listed
				entries
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item bufnr @tab 目印付きバッファの番号
@item signs @tab @{bufnr@} に設置されている目印のリスト。各リスト項目は、以下の項目を含む辞書である。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The dictionary for each sign contains the following entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
各目印の辞書には、次のエントリが含まれている:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			group	sign group. Set to '' for the global group.
			id	identifier of the sign
			lnum	line number where the sign is placed
			name	name of the defined sign
			priority	sign priority
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item group @tab 目印グループ。グローバルグループの場合は '' に設定する。
@item id @tab 目印 ID
@item lnum @tab 目印が設置されている行番号
@item name @tab 定義されている目印の名前
@item priority @tab 目印の優先度
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The returned signs in a buffer are ordered by their line
		number and priority.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
返されるバッファ内の目印は、行番号および優先度で並べられる。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns an empty list on failure or if there are no placed
		signs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
失敗した場合、または設置された目印がない場合は、空のリストを返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Get a List of signs placed in eval.c in the
			" global group
			echo sign_getplaced("eval.c")

			" Get a List of signs in group 'g1' placed in eval.c
			echo sign_getplaced("eval.c", {'group' : 'g1'})

			" Get a List of signs placed at line 10 in eval.c
			echo sign_getplaced("eval.c", {'lnum' : 10})

			" Get sign with identifier 10 placed in a.py
			echo sign_getplaced("a.py", {'id' : 10})

			" Get sign with id 20 in group 'g1' placed in a.py
			echo sign_getplaced("a.py", {'group' : 'g1',
							\  'id' : 20})

			" Get a List of all the placed signs
			echo sign_getplaced()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" eval.c に設置されているグローバルグループの目印のリ
" ストを取得する
echo sign_getplaced("eval.c")

" eval.c の 'g1' グループに設置されている目印のリスト
" を取得する
echo sign_getplaced("eval.c", {'group' : 'g1'})

" eval.c の 10行目に設置されている目印のリストを取得す
" る
echo sign_getplaced("eval.c", {'lnum' : 10})

" a.py に設置されている識別子 10 の目印を取得する
echo sign_getplaced("a.py", {'id' : 10'})

" a.py の 'g1' グループ 'g1' に設置されている識別子 20
" の目印を取得する
echo sign_getplaced("a.py", {'group' : 'g1',
                                \  'id' : 20'})

" 設置されているすべての目印のリストを取得する
echo sign_getplaced()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetBufname()->sign_getplaced()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetBufname()->sign_getplaced()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*sign_jump()*
sign_jump({id}, {group}, {expr})
		Open the buffer {expr} or jump to the window that contains
		{expr} and position the cursor at sign {id} in group {group}.
		This is similar to the |:sign-jump| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_jump()}
@pindex sign_jump()
@item sign_jump(@{id@}, @{group@}, @{expr@})
バッファ @{expr@} を開くか、@{expr@} を含むウィンドウに移動して、グループ @{group@} の目印 @{id@} にカーソルを置く。これは |@ref{:sign-jump}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		For the use of {expr}, see |bufname()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{expr@} の使い方については |@ref{bufname()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns the line number of the sign. Returns -1 if the
		arguments are invalid.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印の行番号を返す。引数が無効な場合は -1 を返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Example: >
			" Jump to sign 10 in the current buffer
			call sign_jump(10, '', '')
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" 現在のバッファの目印 ID 10 へ移動する
call sign_jump(10, '', '')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignid()->sign_jump()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignid()->sign_jump()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*sign_place()*
sign_place({id}, {group}, {name}, {expr} [, {dict}])
		Place the sign defined as {name} at line {lnum} in file or
		buffer {expr} and assign {id} and {group} to sign.  This is
		similar to the |:sign-place| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_place()}
@pindex sign_place()
@item sign_place(@{id@}, @{group@}, @{name@}, @{expr@} [, @{dict@}])
@{name@} として定義された目印をファイル @{expr@} の行 @{lnum@} または @{expr@} バッファに設置し、目印に @{id@} と @{group@} を割り当てる。
これは |@ref{:sign-place}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the sign identifier {id} is zero, then a new identifier is
		allocated.  Otherwise the specified number is used. {group} is
		the sign group name. To use the global sign group, use an
		empty string.  {group} functions as a namespace for {id}, thus
		two groups can use the same IDs. Refer to |sign-identifier|
		and |sign-group| for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印 ID @{id@} がゼロの場合は、新しい識別子が割り当てられる。それ以外の場合は、指定された番号が使用される。@{group@} は目印グループ名である。グローバルサイングループを使用するには、空の文字列を使用する。@{group@} は @{id@} の名前空間として機能するため、2 つのグループが同じ ID を使用できる。詳細については |@ref{sign-identifier}|と |@ref{sign-group}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		{name} refers to a defined sign.
		{expr} refers to a buffer name or number. For the accepted
		values, see |bufname()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{name@} は定義済みの目印を参照する。@{expr@} はバッファの名前か番号を参照する。許容値については、|@ref{bufname()}| を参照。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The optional {dict} argument supports the following entries:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
任意の @{dict@} 引数は、以下のエントリをサポートする:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			lnum		line number in the file or buffer
					{expr} where the sign is to be placed.
					For the accepted values, see |line()|.
			priority	priority of the sign. See
					|sign-priority| for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item lnum @tab 目印が設置されるファイルやバッファ @{expr@} の行番号。許容値については、|@ref{line()}| を参照。
@item priority @tab 目印の優先順位。詳細については |@ref{sign-priority}| を参照。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If the optional {dict} is not specified, then it modifies the
		placed sign {id} in group {group} to use the defined sign
		{name}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
任意の @{dict@} が指定されていない場合は、定義されている目印 @{name@} を使用するようにグループ @{group@} 内の設置された目印 ID @{id@} を変更します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns the sign identifier on success and -1 on failure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
成功した場合は目印 ID、失敗した場合は -1 を返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Place a sign named sign1 with id 5 at line 20 in
			" buffer json.c
			call sign_place(5, '', 'sign1', 'json.c',
							\ {'lnum' : 20})

			" Updates sign 5 in buffer json.c to use sign2
			call sign_place(5, '', 'sign2', 'json.c')

			" Place a sign named sign3 at line 30 in
			" buffer json.c with a new identifier
			let id = sign_place(0, '', 'sign3', 'json.c',
							\ {'lnum' : 30})

			" Place a sign named sign4 with id 10 in group 'g3'
			" at line 40 in buffer json.c with priority 90
			call sign_place(10, 'g3', 'sign4', 'json.c',
					\ {'lnum' : 40, 'priority' : 90})
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" バッファ json.c の 20 行目に識別子 5 で sign1 という名前
" の目印を設置する
call sign_place(5, '', 'sign1', 'json.c',
                                \ {'lnum' : 20})

" バッファ json.c の識別子 5 が目印 sign2 を使用するよう
" に更新する
call sign_place(5, '', 'sign2', 'json.c')

" バッファ json.c の 30 行目に sign3 という名前の目印を
" 新しい識別子で設置する
let id = sign_place(0, '', 'sign3', 'json.c',
                                \ {'lnum' : 30})

" バッファ json.c の 40 行目に 'g3' グループで識別子 10 の
" sign4 という名前の目印を優先順位 90 で設置する
call sign_place(10, 'g3', 'sign4', 'json.c',
                \ {'lnum' : 40, 'priority' : 90})
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignid()->sign_place(group, name, expr)
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignid()->sign_place(group, name, expr)
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
							*sign_placelist()*
sign_placelist({list})
		Place one or more signs.  This is similar to the
		|sign_place()| function.  The {list} argument specifies the
		List of signs to place. Each list item is a dict with the
		following sign attributes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_placelist()}
@pindex sign_placelist()
@item sign_placelist(@{list@})
1 つもしくはそれ以上の目印を置きます。これは |@ref{sign_place()}| 関数と似ています。@{list@} 引数は目印のリストの場所を指定します。それぞれのリスト項目は以下の目印特性をもつ辞書です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    buffer	buffer name or number. For the accepted
				values, see |bufname()|.
		    group	sign group. {group} functions as a namespace
				for {id}, thus two groups can use the same
				IDs. If not specified or set to an empty
				string, then the global group is used.   See
				|sign-group| for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item buffer @tab バッファ名もしくは番号。受け取ることのできる値については |@ref{bufname()} を参照してください。
@item group @tab 目印のグループ。@{group@} は @{id@} の名前空間として機能します。そのため、2 つのグループは同じ ID に使うことができます。もしも指定されていないか空文字が設定されているのなら、グーローバルグープが使われます。より多くの情報は |@ref{sign-group}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    id		sign identifier. If not specified or zero,
				then a new unique identifier is allocated.
				Otherwise the specified number is used. See
				|sign-identifier| for more information.
		    lnum	line number in the buffer {expr} where the
				sign is to be placed. For the accepted values,
				see |line()|.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item id @tab 目印の識別子。もしも指定されていないかゼロなら、新しいユニークな識別子が割り当てられます。そうでなければ指定された番号が使われます。より多くの情報は |@ref{sign-identifier}| を参照してください。
@item lnum @tab 目印を置くことのできるバッファ @{expr@} 内の 行番号。受け取ることのできる値については |@ref{line()}| を参照してください。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    name	name of the sign to place. See |sign_define()|
		    		for more information.
		    priority	priority of the sign. When multiple signs are
				placed on a line, the sign with the highest
				priority is used. If not specified, the
				default value of 10 is used. See
				|sign-priority| for more information.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@item name @tab 配置するための目印の名前。より多くの情報については |@ref{sign_define()}| を参照してください。
@item priority @tab 目印の優先順位。複数の目印が 1 行に置かれたときに、もっとも高い優先順位をもつ目印が使われます。もしも指定されていなければ、既定の値 10 が使われます。より多くの情報については |@ref{sign-priority}| を参照してください。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		If {id} refers to an existing sign, then the existing sign is
		modified to use the specified {name} and/or {priority}.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしも @{id@} が存在する目印を参照しているなら、その存在している目印は指定された @{name@} かつ/または @{priority@} を使うために変更されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns a List of sign identifiers. If failed to place a
		sign, the corresponding list item is set to -1.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
目印の識別子のリストを返します。もしも目印を置くのに失敗したなら、対応するリスト項目は -1 に設定されます。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Place sign s1 with id 5 at line 20 and id 10 at line
			" 30 in buffer a.c
			let [n1, n2] = sign_placelist([
				\ {'id' : 5,
				\  'name' : 's1',
				\  'buffer' : 'a.c',
				\  'lnum' : 20},
				\ {'id' : 10,
				\  'name' : 's1',
				\  'buffer' : 'a.c',
				\  'lnum' : 30}
				\ ])

			" Place sign s1 in buffer a.c at line 40 and 50
			" with auto-generated identifiers
			let [n1, n2] = sign_placelist([
				\ {'name' : 's1',
				\  'buffer' : 'a.c',
				\  'lnum' : 40},
				\ {'name' : 's1',
				\  'buffer' : 'a.c',
				\  'lnum' : 50}
				\ ])
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" バッファ a.c の 20 行目に id を 5 として、
" また、30 行目に id を 10 として 目印 s1 を置きます
let [n1, n2] = sign_placelist([
        \ {'id' : 5,
        \  'name' : 's1',
        \  'buffer' : 'a.c',
        \  'lnum' : 20},
        \ {'id' : 10,
        \  'name' : 's1',
        \  'buffer' : 'a.c',
        \  'lnum' : 30}
        \ ])

" バッファ a.c の 40 行目と 50 行目に、
" 自動的に生成された識別子をつけて目印 s1 を置きます
let [n1, n2] = sign_placelist([
        \ {'name' : 's1',
        \  'buffer' : 'a.c',
        \  'lnum' : 40},
        \ {'name' : 's1',
        \  'buffer' : 'a.c',
        \  'lnum' : 50}
        \ ])
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignlist()->sign_placelist()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignlist()->sign_placelist()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
sign_undefine([{name}])					*sign_undefine()*
sign_undefine({list})
		Deletes a previously defined sign {name}. This is similar to
		the |:sign-undefine| command. If {name} is not supplied, then
		deletes all the defined signs.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_undefine()}
@pindex sign_undefine()
@item sign_undefine([@{name@}])
@itemx sign_undefine(@{list@})
定義済みの目印 @{name@} を削除する。これは |@ref{:sign-undefine}| コマンドに似ている。@{name@} が指定されていない場合は、定義されているすべての目印を削除する。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The one argument {list} can be used to undefine a list of
		signs. Each list item is the name of a sign.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
1 つの引数 @{list@} は目印のリストを未定義にするために使うことができます。リスト項目のそれぞれは、目印の番号です。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns 0 on success and -1 on failure.  For the one argument
		{list} call, returns a list of values one for each undefined
		sign.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
成功すると 0 を返し、失敗すると -1 を返します。1 つの引数 @{list@} を呼ぶために、未定義にされた目印の値のリストを返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Delete a sign named mySign
			call sign_undefine("mySign")

			" Delete signs 'sign1' and 'sign2'
			call sign_undefine(["sign1", "sign2"])

			" Delete all the signs
			call sign_undefine()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" mySign という名前の目印を削除します
call sign_undefine("mySign")

" 目印 'sign1' と 'sign2' を削除します
call sign_undefine(["sign1", "sign2"])

" すべての目印を削除します
call sign_undefine()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignlist()->sign_undefine()
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignlist()->sign_undefine()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
sign_unplace({group} [, {dict}])			*sign_unplace()*
		Remove a previously placed sign in one or more buffers.  This
		is similar to the |:sign-unplace| command.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_unplace()}
@pindex sign_unplace()
@item sign_unplace(@{group@} [, @{dict@}])
設置済みの 1 つ以上のバッファ内の目印を解除する。これは |@ref{:sign-unplace}| コマンドに似ている。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		{group} is the sign group name. To use the global sign group,
		use an empty string.  If {group} is set to '*', then all the
		groups including the global group are used.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{group@} は目印グループ名である。グローバルサイングループを使用するには、空の文字列を使用する。@{group@} が '*' に設定されている場合、グローバルグループを含むすべてのグループが使用される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		The signs in {group} are selected based on the entries in
		{dict}.  The following optional entries in {dict} are
		supported:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{group@} 内の目印は、@{dict@} 内のエントリに基づいて選択される。@{dict@} の以下の任意のエントリがサポートされている:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
			buffer	buffer name or number. See |bufname()|.
			id	sign identifier
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item buffer @tab バッファの名前または番号。|@ref{bufname()}| を参照。
@item id @tab 目印 ID
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		If {dict} is not supplied, then all the signs in {group} are
		removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{dict@} が指定されていない場合は、@{group@} 内のすべての目印が解除される。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns 0 on success and -1 on failure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
成功すると 0 を返し、失敗すると -1 を返す。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Examples: >
			" Remove sign 10 from buffer a.vim
			call sign_unplace('', {'buffer' : "a.vim", 'id' : 10})

			" Remove sign 20 in group 'g1' from buffer 3
			call sign_unplace('g1', {'buffer' : 3, 'id' : 20})

			" Remove all the signs in group 'g2' from buffer 10
			call sign_unplace('g2', {'buffer' : 10})

			" Remove sign 30 in group 'g3' from all the buffers
			call sign_unplace('g3', {'id' : 30})

			" Remove all the signs placed in buffer 5
			call sign_unplace('*', {'buffer' : 5})

			" Remove the signs in group 'g4' from all the buffers
			call sign_unplace('g4')

			" Remove sign 40 from all the buffers
			call sign_unplace('*', {'id' : 40})

			" Remove all the placed signs from all the buffers
			call sign_unplace('*')
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" バッファ a.vim から識別子10の目印を解除する
call sign_unplace('', {'buffer' : "a.vim", 'id' : 10})

" バッファ番号3から 'g1' グループの識別子20の目印を解
" 除する
call sign_unplace('g1', {'buffer' : 3, 'id' : 20})

" バッファ番号10から 'g2' グループのすべての目印を解除
" する
call sign_unplace('g2', {'buffer' : 10})

" すべてのバッファから 'g3' グループの識別子30の目印を
" 解除する
call sign_unplace('g3', {'id' : 30})

" バッファ番号5 のすべての目印を解除する
call sign_unplace('*', {'buffer' : 5})

" すべてのバッファから 'g4' グループの目印を解除する
call sign_unplace('g4')

" すべてのバッファから識別子40の目印を解除する
call sign_unplace('*', {'id' : 40})

" すべてのバッファからすべての目印を解除する
call sign_unplace('*')
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
<		Can also be used as a |method|: >
			GetSigngroup()->sign_unplace()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSigngroup()->sign_unplace()
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
sign_unplacelist({list})				*sign_unplacelist()*
		Remove previously placed signs from one or more buffers.  This
		is similar to the |sign_unplace()| function.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@anchor{sign_unplacelist()}
@pindex sign_unplacelist()
@item sign_unplacelist(@{list@})
1 つもしくはそれ以上のバッファから以前に置かれた目印を削除します。これは |@ref{sign_unplace()}| 関数と似ています。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		The {list} argument specifies the List of signs to remove.
		Each list item is a dict with the following sign attributes:
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@{list@} 引数は削除する目印のリスト指定します。それぞれのリスト項目は次の目印属性を持つ辞書です:
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		    buffer	buffer name or number. For the accepted
				values, see |bufname()|. If not specified,
				then the specified sign is removed from all
				the buffers.
		    group	sign group name. If not specified or set to an
				empty string, then the global sign group is
				used. If set to '*', then all the groups
				including the global group are used.
		    id		sign identifier. If not specified, then all
				the signs in the specified group are removed.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
@multitable @columnfractions .3 .7
@item buffer @tab バッファ名もしくは番号。受け取ることのできる値については |@ref{bufname()}| を参照してください。もしも @{訳注: バッファ名もしくは番号が@} 指定されていなければ、指定された目印はすべてのバッファから削除されます。
@item group @tab 目印のグループ名。もしも指定されていない、もしくは空文字の場合は、グローバルな目印グループが使われます。もしも '*' が設定されていなければ、グローバルグループを含むすべてのグループが使われます。
@item id @tab 目印の識別子。もしも @{訳注: 目印の識別子が@} 指定されていなければ、指定されたグループのすべての目印が削除されます。
@end multitable
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Returns a List where an entry is set to 0 if the corresponding
		sign was successfully removed or -1 on failure.
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
もしも対応する目印の削除が成功した場合は 0 を、失敗した場合は -1 を設定されたエントリのリストを返します。
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
		Example: >
			" Remove sign with id 10 from buffer a.vim and sign
			" with id 20 from buffer b.vim
			call sign_unplacelist([
				\ {'id' : 10, 'buffer' : "a.vim"},
				\ {'id' : 20, 'buffer' : 'b.vim'},
				\ ])
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
例:
@verbatim
" バッファ a.vim から id が 10 の目印を、
" バッファ b.vim から id が 20 の目印を削除します
call sign_unplacelist([
        \ {'id' : 10, 'buffer' : "a.vim"},
        \ {'id' : 20, 'buffer' : 'b.vim'},
        \ ])
@end verbatim
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------
@ifset EN
		Can also be used as a |method|: >
			GetSignlist()->sign_unplacelist()
<
@end ifset
@ifset JA  @c ----------- v -----------  JA  ----------- v -----------
|@ref{method}| としても使用できます:
@verbatim
GetSignlist()->sign_unplacelist()
@end verbatim
@end table
@end ifset @c ----------- ^ -----------  JA  ----------- ^ -----------

@ifset EN
 vim:tw=78:ts=8:noet:ft=help:norl:
@end ifset
